// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs
// RUN: %clang_cc1 -verify -triple x86_64-apple-darwin10 -target-cpu core2 -fopenmp -x c -emit-llvm %s -o - | FileCheck %s
// RUN: %clang_cc1 -fopenmp -x c -triple x86_64-apple-darwin10 -target-cpu core2 -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -x c -triple x86_64-apple-darwin10 -target-cpu core2 -include-pch %t -verify %s -emit-llvm -o - | FileCheck %s

// RUN: %clang_cc1 -verify -triple x86_64-apple-darwin10 -target-cpu core2 -fopenmp-simd -x c -emit-llvm %s -o - | FileCheck --check-prefix SIMD-ONLY0 %s
// RUN: %clang_cc1 -fopenmp-simd -x c -triple x86_64-apple-darwin10 -target-cpu core2 -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -x c -triple x86_64-apple-darwin10 -target-cpu core2 -include-pch %t -verify %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY0 %s
// expected-no-diagnostics

#ifndef HEADER
#define HEADER

void foo(void) {
  char cx, ce, cd;
  unsigned char ucx, uce, ucd;
  short sx, se, sd;
  unsigned short usx, use, usd;
  int ix, ie, id;
  unsigned int uix, uie, uid;
  long lx, le, ld;
  unsigned long ulx, ule, uld;
  long long llx, lle, lld;
  unsigned long long ullx, ulle, ulld;
  float fx, fe, fd;
  double dx, de, dd;

#pragma omp atomic compare
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare acq_rel
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare acq_rel
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare acq_rel
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare acq_rel
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare acq_rel
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare acq_rel
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare acq_rel
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare acq_rel
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare acq_rel
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare acq_rel
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare acq_rel
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare acq_rel
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare acq_rel
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare acq_rel
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare acq_rel
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare acq_rel
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare acq_rel
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare acq_rel
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare acq_rel
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare acq_rel
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare acq_rel
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare acq_rel
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare acq_rel
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare acq_rel
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare acquire
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare acquire
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare acquire
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare acquire
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare acquire
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare acquire
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare acquire
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare acquire
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare acquire
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare acquire
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare acquire
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare acquire
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare acquire
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare acquire
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare acquire
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare acquire
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare acquire
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare acquire
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare acquire
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare acquire
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare acquire
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare acquire
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare acquire
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare acquire
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare relaxed
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare relaxed
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare relaxed
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare relaxed
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare relaxed
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare relaxed
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare relaxed
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare relaxed
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare relaxed
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare relaxed
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare relaxed
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare relaxed
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare relaxed
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare relaxed
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare relaxed
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare relaxed
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare relaxed
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare relaxed
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare relaxed
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare relaxed
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare relaxed
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare relaxed
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare relaxed
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare relaxed
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare release
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare release
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare release
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare release
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare release
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare release
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare release
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare release
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare release
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare release
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare release
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare release
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare release
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare release
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare release
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare release
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare release
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare release
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare release
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare release
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare release
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare release
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare release
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare release
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare seq_cst
  cx = cx > ce ? ce : cx;
#pragma omp atomic compare seq_cst
  cx = cx < ce ? ce : cx;
#pragma omp atomic compare seq_cst
  cx = ce > cx ? ce : cx;
#pragma omp atomic compare seq_cst
  cx = ce < cx ? ce : cx;
#pragma omp atomic compare seq_cst
  if (cx > ce)
    cx = ce;
#pragma omp atomic compare seq_cst
  if (cx < ce)
    cx = ce;
#pragma omp atomic compare seq_cst
  if (ce > cx)
    cx = ce;
#pragma omp atomic compare seq_cst
  if (ce < cx)
    cx = ce;

#pragma omp atomic compare seq_cst
  cx = cx == ce ? cd : cx;
#pragma omp atomic compare seq_cst
  cx = ce == cx ? cd : cx;
#pragma omp atomic compare seq_cst
  if (cx == ce)
    cx = cd;
#pragma omp atomic compare seq_cst
  if (ce == cx)
    cx = cd;

#pragma omp atomic compare seq_cst
  ucx = ucx > uce ? uce : ucx;
#pragma omp atomic compare seq_cst
  ucx = ucx < uce ? uce : ucx;
#pragma omp atomic compare seq_cst
  ucx = uce > ucx ? uce : ucx;
#pragma omp atomic compare seq_cst
  ucx = uce < ucx ? uce : ucx;
#pragma omp atomic compare seq_cst
  if (ucx > uce)
    ucx = uce;
#pragma omp atomic compare seq_cst
  if (ucx < uce)
    ucx = uce;
#pragma omp atomic compare seq_cst
  if (uce > ucx)
    ucx = uce;
#pragma omp atomic compare seq_cst
  if (uce < ucx)
    ucx = uce;

#pragma omp atomic compare seq_cst
  ucx = ucx == uce ? ucd : ucx;
#pragma omp atomic compare seq_cst
  ucx = uce == ucx ? ucd : ucx;
#pragma omp atomic compare seq_cst
  if (ucx == uce)
    ucx = ucd;
#pragma omp atomic compare seq_cst
  if (uce == ucx)
    ucx = ucd;

#pragma omp atomic compare
  sx = sx > se ? se : sx;
#pragma omp atomic compare
  sx = sx < se ? se : sx;
#pragma omp atomic compare
  sx = se > sx ? se : sx;
#pragma omp atomic compare
  sx = se < sx ? se : sx;
#pragma omp atomic compare
  if (sx > se)
    sx = se;
#pragma omp atomic compare
  if (sx < se)
    sx = se;
#pragma omp atomic compare
  if (se > sx)
    sx = se;
#pragma omp atomic compare
  if (se < sx)
    sx = se;

#pragma omp atomic compare
  sx = sx == se ? sd : sx;
#pragma omp atomic compare
  sx = se == sx ? sd : sx;
#pragma omp atomic compare
  if (sx == se)
    sx = sd;
#pragma omp atomic compare
  if (se == sx)
    sx = sd;

#pragma omp atomic compare
  usx = usx > use ? use : usx;
#pragma omp atomic compare
  usx = usx < use ? use : usx;
#pragma omp atomic compare
  usx = use > usx ? use : usx;
#pragma omp atomic compare
  usx = use < usx ? use : usx;
#pragma omp atomic compare
  if (usx > use)
    usx = use;
#pragma omp atomic compare
  if (usx < use)
    usx = use;
#pragma omp atomic compare
  if (use > usx)
    usx = use;
#pragma omp atomic compare
  if (use < usx)
    usx = use;

#pragma omp atomic compare
  usx = usx == use ? usd : usx;
#pragma omp atomic compare
  usx = use == usx ? usd : usx;
#pragma omp atomic compare
  if (usx == use)
    usx = usd;
#pragma omp atomic compare
  if (use == usx)
    usx = usd;

#pragma omp atomic compare acq_rel
  sx = sx > se ? se : sx;
#pragma omp atomic compare acq_rel
  sx = sx < se ? se : sx;
#pragma omp atomic compare acq_rel
  sx = se > sx ? se : sx;
#pragma omp atomic compare acq_rel
  sx = se < sx ? se : sx;
#pragma omp atomic compare acq_rel
  if (sx > se)
    sx = se;
#pragma omp atomic compare acq_rel
  if (sx < se)
    sx = se;
#pragma omp atomic compare acq_rel
  if (se > sx)
    sx = se;
#pragma omp atomic compare acq_rel
  if (se < sx)
    sx = se;

#pragma omp atomic compare acq_rel
  sx = sx == se ? sd : sx;
#pragma omp atomic compare acq_rel
  sx = se == sx ? sd : sx;
#pragma omp atomic compare acq_rel
  if (sx == se)
    sx = sd;
#pragma omp atomic compare acq_rel
  if (se == sx)
    sx = sd;

#pragma omp atomic compare acq_rel
  usx = usx > use ? use : usx;
#pragma omp atomic compare acq_rel
  usx = usx < use ? use : usx;
#pragma omp atomic compare acq_rel
  usx = use > usx ? use : usx;
#pragma omp atomic compare acq_rel
  usx = use < usx ? use : usx;
#pragma omp atomic compare acq_rel
  if (usx > use)
    usx = use;
#pragma omp atomic compare acq_rel
  if (usx < use)
    usx = use;
#pragma omp atomic compare acq_rel
  if (use > usx)
    usx = use;
#pragma omp atomic compare acq_rel
  if (use < usx)
    usx = use;

#pragma omp atomic compare acq_rel
  usx = usx == use ? usd : usx;
#pragma omp atomic compare acq_rel
  usx = use == usx ? usd : usx;
#pragma omp atomic compare acq_rel
  if (usx == use)
    usx = usd;
#pragma omp atomic compare acq_rel
  if (use == usx)
    usx = usd;

#pragma omp atomic compare acquire
  sx = sx > se ? se : sx;
#pragma omp atomic compare acquire
  sx = sx < se ? se : sx;
#pragma omp atomic compare acquire
  sx = se > sx ? se : sx;
#pragma omp atomic compare acquire
  sx = se < sx ? se : sx;
#pragma omp atomic compare acquire
  if (sx > se)
    sx = se;
#pragma omp atomic compare acquire
  if (sx < se)
    sx = se;
#pragma omp atomic compare acquire
  if (se > sx)
    sx = se;
#pragma omp atomic compare acquire
  if (se < sx)
    sx = se;

#pragma omp atomic compare acquire
  sx = sx == se ? sd : sx;
#pragma omp atomic compare acquire
  sx = se == sx ? sd : sx;
#pragma omp atomic compare acquire
  if (sx == se)
    sx = sd;
#pragma omp atomic compare acquire
  if (se == sx)
    sx = sd;

#pragma omp atomic compare acquire
  usx = usx > use ? use : usx;
#pragma omp atomic compare acquire
  usx = usx < use ? use : usx;
#pragma omp atomic compare acquire
  usx = use > usx ? use : usx;
#pragma omp atomic compare acquire
  usx = use < usx ? use : usx;
#pragma omp atomic compare acquire
  if (usx > use)
    usx = use;
#pragma omp atomic compare acquire
  if (usx < use)
    usx = use;
#pragma omp atomic compare acquire
  if (use > usx)
    usx = use;
#pragma omp atomic compare acquire
  if (use < usx)
    usx = use;

#pragma omp atomic compare acquire
  usx = usx == use ? usd : usx;
#pragma omp atomic compare acquire
  usx = use == usx ? usd : usx;
#pragma omp atomic compare acquire
  if (usx == use)
    usx = usd;
#pragma omp atomic compare acquire
  if (use == usx)
    usx = usd;

#pragma omp atomic compare relaxed
  sx = sx > se ? se : sx;
#pragma omp atomic compare relaxed
  sx = sx < se ? se : sx;
#pragma omp atomic compare relaxed
  sx = se > sx ? se : sx;
#pragma omp atomic compare relaxed
  sx = se < sx ? se : sx;
#pragma omp atomic compare relaxed
  if (sx > se)
    sx = se;
#pragma omp atomic compare relaxed
  if (sx < se)
    sx = se;
#pragma omp atomic compare relaxed
  if (se > sx)
    sx = se;
#pragma omp atomic compare relaxed
  if (se < sx)
    sx = se;

#pragma omp atomic compare relaxed
  sx = sx == se ? sd : sx;
#pragma omp atomic compare relaxed
  sx = se == sx ? sd : sx;
#pragma omp atomic compare relaxed
  if (sx == se)
    sx = sd;
#pragma omp atomic compare relaxed
  if (se == sx)
    sx = sd;

#pragma omp atomic compare relaxed
  usx = usx > use ? use : usx;
#pragma omp atomic compare relaxed
  usx = usx < use ? use : usx;
#pragma omp atomic compare relaxed
  usx = use > usx ? use : usx;
#pragma omp atomic compare relaxed
  usx = use < usx ? use : usx;
#pragma omp atomic compare relaxed
  if (usx > use)
    usx = use;
#pragma omp atomic compare relaxed
  if (usx < use)
    usx = use;
#pragma omp atomic compare relaxed
  if (use > usx)
    usx = use;
#pragma omp atomic compare relaxed
  if (use < usx)
    usx = use;

#pragma omp atomic compare relaxed
  usx = usx == use ? usd : usx;
#pragma omp atomic compare relaxed
  usx = use == usx ? usd : usx;
#pragma omp atomic compare relaxed
  if (usx == use)
    usx = usd;
#pragma omp atomic compare relaxed
  if (use == usx)
    usx = usd;

#pragma omp atomic compare release
  sx = sx > se ? se : sx;
#pragma omp atomic compare release
  sx = sx < se ? se : sx;
#pragma omp atomic compare release
  sx = se > sx ? se : sx;
#pragma omp atomic compare release
  sx = se < sx ? se : sx;
#pragma omp atomic compare release
  if (sx > se)
    sx = se;
#pragma omp atomic compare release
  if (sx < se)
    sx = se;
#pragma omp atomic compare release
  if (se > sx)
    sx = se;
#pragma omp atomic compare release
  if (se < sx)
    sx = se;

#pragma omp atomic compare release
  sx = sx == se ? sd : sx;
#pragma omp atomic compare release
  sx = se == sx ? sd : sx;
#pragma omp atomic compare release
  if (sx == se)
    sx = sd;
#pragma omp atomic compare release
  if (se == sx)
    sx = sd;

#pragma omp atomic compare release
  usx = usx > use ? use : usx;
#pragma omp atomic compare release
  usx = usx < use ? use : usx;
#pragma omp atomic compare release
  usx = use > usx ? use : usx;
#pragma omp atomic compare release
  usx = use < usx ? use : usx;
#pragma omp atomic compare release
  if (usx > use)
    usx = use;
#pragma omp atomic compare release
  if (usx < use)
    usx = use;
#pragma omp atomic compare release
  if (use > usx)
    usx = use;
#pragma omp atomic compare release
  if (use < usx)
    usx = use;

#pragma omp atomic compare release
  usx = usx == use ? usd : usx;
#pragma omp atomic compare release
  usx = use == usx ? usd : usx;
#pragma omp atomic compare release
  if (usx == use)
    usx = usd;
#pragma omp atomic compare release
  if (use == usx)
    usx = usd;

#pragma omp atomic compare seq_cst
  sx = sx > se ? se : sx;
#pragma omp atomic compare seq_cst
  sx = sx < se ? se : sx;
#pragma omp atomic compare seq_cst
  sx = se > sx ? se : sx;
#pragma omp atomic compare seq_cst
  sx = se < sx ? se : sx;
#pragma omp atomic compare seq_cst
  if (sx > se)
    sx = se;
#pragma omp atomic compare seq_cst
  if (sx < se)
    sx = se;
#pragma omp atomic compare seq_cst
  if (se > sx)
    sx = se;
#pragma omp atomic compare seq_cst
  if (se < sx)
    sx = se;

#pragma omp atomic compare seq_cst
  sx = sx == se ? sd : sx;
#pragma omp atomic compare seq_cst
  sx = se == sx ? sd : sx;
#pragma omp atomic compare seq_cst
  if (sx == se)
    sx = sd;
#pragma omp atomic compare seq_cst
  if (se == sx)
    sx = sd;

#pragma omp atomic compare seq_cst
  usx = usx > use ? use : usx;
#pragma omp atomic compare seq_cst
  usx = usx < use ? use : usx;
#pragma omp atomic compare seq_cst
  usx = use > usx ? use : usx;
#pragma omp atomic compare seq_cst
  usx = use < usx ? use : usx;
#pragma omp atomic compare seq_cst
  if (usx > use)
    usx = use;
#pragma omp atomic compare seq_cst
  if (usx < use)
    usx = use;
#pragma omp atomic compare seq_cst
  if (use > usx)
    usx = use;
#pragma omp atomic compare seq_cst
  if (use < usx)
    usx = use;

#pragma omp atomic compare seq_cst
  usx = usx == use ? usd : usx;
#pragma omp atomic compare seq_cst
  usx = use == usx ? usd : usx;
#pragma omp atomic compare seq_cst
  if (usx == use)
    usx = usd;
#pragma omp atomic compare seq_cst
  if (use == usx)
    usx = usd;

#pragma omp atomic compare
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare
  ix = ix == ie ? id : ix;
#pragma omp atomic compare
  ix = ie == ix ? id : ix;
#pragma omp atomic compare
  if (ix == ie)
    ix = id;
#pragma omp atomic compare
  if (ie == ix)
    ix = id;

#pragma omp atomic compare
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare acq_rel
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare acq_rel
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare acq_rel
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare acq_rel
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare acq_rel
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare acq_rel
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare acq_rel
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare acq_rel
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare acq_rel
  ix = ix == ie ? id : ix;
#pragma omp atomic compare acq_rel
  ix = ie == ix ? id : ix;
#pragma omp atomic compare acq_rel
  if (ix == ie)
    ix = id;
#pragma omp atomic compare acq_rel
  if (ie == ix)
    ix = id;

#pragma omp atomic compare acq_rel
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare acq_rel
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare acq_rel
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare acq_rel
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare acq_rel
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare acq_rel
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare acq_rel
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare acq_rel
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare acq_rel
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare acq_rel
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare acq_rel
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare acq_rel
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare acquire
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare acquire
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare acquire
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare acquire
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare acquire
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare acquire
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare acquire
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare acquire
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare acquire
  ix = ix == ie ? id : ix;
#pragma omp atomic compare acquire
  ix = ie == ix ? id : ix;
#pragma omp atomic compare acquire
  if (ix == ie)
    ix = id;
#pragma omp atomic compare acquire
  if (ie == ix)
    ix = id;

#pragma omp atomic compare acquire
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare acquire
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare acquire
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare acquire
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare acquire
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare acquire
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare acquire
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare acquire
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare acquire
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare acquire
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare acquire
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare acquire
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare relaxed
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare relaxed
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare relaxed
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare relaxed
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare relaxed
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare relaxed
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare relaxed
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare relaxed
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare relaxed
  ix = ix == ie ? id : ix;
#pragma omp atomic compare relaxed
  ix = ie == ix ? id : ix;
#pragma omp atomic compare relaxed
  if (ix == ie)
    ix = id;
#pragma omp atomic compare relaxed
  if (ie == ix)
    ix = id;

#pragma omp atomic compare relaxed
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare relaxed
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare relaxed
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare relaxed
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare relaxed
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare relaxed
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare relaxed
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare relaxed
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare relaxed
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare relaxed
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare relaxed
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare relaxed
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare release
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare release
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare release
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare release
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare release
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare release
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare release
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare release
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare release
  ix = ix == ie ? id : ix;
#pragma omp atomic compare release
  ix = ie == ix ? id : ix;
#pragma omp atomic compare release
  if (ix == ie)
    ix = id;
#pragma omp atomic compare release
  if (ie == ix)
    ix = id;

#pragma omp atomic compare release
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare release
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare release
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare release
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare release
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare release
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare release
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare release
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare release
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare release
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare release
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare release
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare seq_cst
  ix = ix > ie ? ie : ix;
#pragma omp atomic compare seq_cst
  ix = ix < ie ? ie : ix;
#pragma omp atomic compare seq_cst
  ix = ie > ix ? ie : ix;
#pragma omp atomic compare seq_cst
  ix = ie < ix ? ie : ix;
#pragma omp atomic compare seq_cst
  if (ix > ie)
    ix = ie;
#pragma omp atomic compare seq_cst
  if (ix < ie)
    ix = ie;
#pragma omp atomic compare seq_cst
  if (ie > ix)
    ix = ie;
#pragma omp atomic compare seq_cst
  if (ie < ix)
    ix = ie;

#pragma omp atomic compare seq_cst
  ix = ix == ie ? id : ix;
#pragma omp atomic compare seq_cst
  ix = ie == ix ? id : ix;
#pragma omp atomic compare seq_cst
  if (ix == ie)
    ix = id;
#pragma omp atomic compare seq_cst
  if (ie == ix)
    ix = id;

#pragma omp atomic compare seq_cst
  uix = uix > uie ? uie : uix;
#pragma omp atomic compare seq_cst
  uix = uix < uie ? uie : uix;
#pragma omp atomic compare seq_cst
  uix = uie > uix ? uie : uix;
#pragma omp atomic compare seq_cst
  uix = uie < uix ? uie : uix;
#pragma omp atomic compare seq_cst
  if (uix > uie)
    uix = uie;
#pragma omp atomic compare seq_cst
  if (uix < uie)
    uix = uie;
#pragma omp atomic compare seq_cst
  if (uie > uix)
    uix = uie;
#pragma omp atomic compare seq_cst
  if (uie < uix)
    uix = uie;

#pragma omp atomic compare seq_cst
  uix = uix == uie ? uid : uix;
#pragma omp atomic compare seq_cst
  uix = uie == uix ? uid : uix;
#pragma omp atomic compare seq_cst
  if (uix == uie)
    uix = uid;
#pragma omp atomic compare seq_cst
  if (uie == uix)
    uix = uid;

#pragma omp atomic compare
  lx = lx > le ? le : lx;
#pragma omp atomic compare
  lx = lx < le ? le : lx;
#pragma omp atomic compare
  lx = le > lx ? le : lx;
#pragma omp atomic compare
  lx = le < lx ? le : lx;
#pragma omp atomic compare
  if (lx > le)
    lx = le;
#pragma omp atomic compare
  if (lx < le)
    lx = le;
#pragma omp atomic compare
  if (le > lx)
    lx = le;
#pragma omp atomic compare
  if (le < lx)
    lx = le;

#pragma omp atomic compare
  lx = lx == le ? ld : lx;
#pragma omp atomic compare
  lx = le == lx ? ld : lx;
#pragma omp atomic compare
  if (lx == le)
    lx = ld;
#pragma omp atomic compare
  if (le == lx)
    lx = ld;

#pragma omp atomic compare
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare acq_rel
  lx = lx > le ? le : lx;
#pragma omp atomic compare acq_rel
  lx = lx < le ? le : lx;
#pragma omp atomic compare acq_rel
  lx = le > lx ? le : lx;
#pragma omp atomic compare acq_rel
  lx = le < lx ? le : lx;
#pragma omp atomic compare acq_rel
  if (lx > le)
    lx = le;
#pragma omp atomic compare acq_rel
  if (lx < le)
    lx = le;
#pragma omp atomic compare acq_rel
  if (le > lx)
    lx = le;
#pragma omp atomic compare acq_rel
  if (le < lx)
    lx = le;

#pragma omp atomic compare acq_rel
  lx = lx == le ? ld : lx;
#pragma omp atomic compare acq_rel
  lx = le == lx ? ld : lx;
#pragma omp atomic compare acq_rel
  if (lx == le)
    lx = ld;
#pragma omp atomic compare acq_rel
  if (le == lx)
    lx = ld;

#pragma omp atomic compare acq_rel
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare acq_rel
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare acq_rel
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare acq_rel
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare acq_rel
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare acq_rel
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare acq_rel
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare acq_rel
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare acq_rel
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare acq_rel
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare acq_rel
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare acq_rel
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare acquire
  lx = lx > le ? le : lx;
#pragma omp atomic compare acquire
  lx = lx < le ? le : lx;
#pragma omp atomic compare acquire
  lx = le > lx ? le : lx;
#pragma omp atomic compare acquire
  lx = le < lx ? le : lx;
#pragma omp atomic compare acquire
  if (lx > le)
    lx = le;
#pragma omp atomic compare acquire
  if (lx < le)
    lx = le;
#pragma omp atomic compare acquire
  if (le > lx)
    lx = le;
#pragma omp atomic compare acquire
  if (le < lx)
    lx = le;

#pragma omp atomic compare acquire
  lx = lx == le ? ld : lx;
#pragma omp atomic compare acquire
  lx = le == lx ? ld : lx;
#pragma omp atomic compare acquire
  if (lx == le)
    lx = ld;
#pragma omp atomic compare acquire
  if (le == lx)
    lx = ld;

#pragma omp atomic compare acquire
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare acquire
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare acquire
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare acquire
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare acquire
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare acquire
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare acquire
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare acquire
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare acquire
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare acquire
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare acquire
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare acquire
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare relaxed
  lx = lx > le ? le : lx;
#pragma omp atomic compare relaxed
  lx = lx < le ? le : lx;
#pragma omp atomic compare relaxed
  lx = le > lx ? le : lx;
#pragma omp atomic compare relaxed
  lx = le < lx ? le : lx;
#pragma omp atomic compare relaxed
  if (lx > le)
    lx = le;
#pragma omp atomic compare relaxed
  if (lx < le)
    lx = le;
#pragma omp atomic compare relaxed
  if (le > lx)
    lx = le;
#pragma omp atomic compare relaxed
  if (le < lx)
    lx = le;

#pragma omp atomic compare relaxed
  lx = lx == le ? ld : lx;
#pragma omp atomic compare relaxed
  lx = le == lx ? ld : lx;
#pragma omp atomic compare relaxed
  if (lx == le)
    lx = ld;
#pragma omp atomic compare relaxed
  if (le == lx)
    lx = ld;

#pragma omp atomic compare relaxed
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare relaxed
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare relaxed
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare relaxed
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare relaxed
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare relaxed
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare relaxed
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare relaxed
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare relaxed
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare relaxed
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare relaxed
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare relaxed
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare release
  lx = lx > le ? le : lx;
#pragma omp atomic compare release
  lx = lx < le ? le : lx;
#pragma omp atomic compare release
  lx = le > lx ? le : lx;
#pragma omp atomic compare release
  lx = le < lx ? le : lx;
#pragma omp atomic compare release
  if (lx > le)
    lx = le;
#pragma omp atomic compare release
  if (lx < le)
    lx = le;
#pragma omp atomic compare release
  if (le > lx)
    lx = le;
#pragma omp atomic compare release
  if (le < lx)
    lx = le;

#pragma omp atomic compare release
  lx = lx == le ? ld : lx;
#pragma omp atomic compare release
  lx = le == lx ? ld : lx;
#pragma omp atomic compare release
  if (lx == le)
    lx = ld;
#pragma omp atomic compare release
  if (le == lx)
    lx = ld;

#pragma omp atomic compare release
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare release
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare release
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare release
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare release
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare release
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare release
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare release
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare release
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare release
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare release
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare release
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare seq_cst
  lx = lx > le ? le : lx;
#pragma omp atomic compare seq_cst
  lx = lx < le ? le : lx;
#pragma omp atomic compare seq_cst
  lx = le > lx ? le : lx;
#pragma omp atomic compare seq_cst
  lx = le < lx ? le : lx;
#pragma omp atomic compare seq_cst
  if (lx > le)
    lx = le;
#pragma omp atomic compare seq_cst
  if (lx < le)
    lx = le;
#pragma omp atomic compare seq_cst
  if (le > lx)
    lx = le;
#pragma omp atomic compare seq_cst
  if (le < lx)
    lx = le;

#pragma omp atomic compare seq_cst
  lx = lx == le ? ld : lx;
#pragma omp atomic compare seq_cst
  lx = le == lx ? ld : lx;
#pragma omp atomic compare seq_cst
  if (lx == le)
    lx = ld;
#pragma omp atomic compare seq_cst
  if (le == lx)
    lx = ld;

#pragma omp atomic compare seq_cst
  ulx = ulx > ule ? ule : ulx;
#pragma omp atomic compare seq_cst
  ulx = ulx < ule ? ule : ulx;
#pragma omp atomic compare seq_cst
  ulx = ule > ulx ? ule : ulx;
#pragma omp atomic compare seq_cst
  ulx = ule < ulx ? ule : ulx;
#pragma omp atomic compare seq_cst
  if (ulx > ule)
    ulx = ule;
#pragma omp atomic compare seq_cst
  if (ulx < ule)
    ulx = ule;
#pragma omp atomic compare seq_cst
  if (ule > ulx)
    ulx = ule;
#pragma omp atomic compare seq_cst
  if (ule < ulx)
    ulx = ule;

#pragma omp atomic compare seq_cst
  ulx = ulx == ule ? uld : ulx;
#pragma omp atomic compare seq_cst
  ulx = ule == ulx ? uld : ulx;
#pragma omp atomic compare seq_cst
  if (ulx == ule)
    ulx = uld;
#pragma omp atomic compare seq_cst
  if (ule == ulx)
    ulx = uld;

#pragma omp atomic compare
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare acq_rel
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare acq_rel
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare acq_rel
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare acq_rel
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare acq_rel
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare acq_rel
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare acq_rel
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare acq_rel
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare acq_rel
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare acq_rel
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare acq_rel
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare acq_rel
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare acq_rel
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare acq_rel
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare acq_rel
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare acq_rel
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare acq_rel
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare acq_rel
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare acq_rel
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare acq_rel
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare acq_rel
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare acq_rel
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare acq_rel
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare acq_rel
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare acquire
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare acquire
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare acquire
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare acquire
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare acquire
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare acquire
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare acquire
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare acquire
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare acquire
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare acquire
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare acquire
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare acquire
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare acquire
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare acquire
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare acquire
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare acquire
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare acquire
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare acquire
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare acquire
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare acquire
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare acquire
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare acquire
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare acquire
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare acquire
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare relaxed
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare relaxed
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare relaxed
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare relaxed
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare relaxed
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare relaxed
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare relaxed
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare relaxed
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare relaxed
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare relaxed
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare relaxed
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare relaxed
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare relaxed
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare relaxed
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare relaxed
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare relaxed
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare relaxed
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare relaxed
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare relaxed
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare relaxed
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare relaxed
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare relaxed
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare relaxed
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare relaxed
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare release
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare release
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare release
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare release
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare release
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare release
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare release
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare release
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare release
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare release
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare release
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare release
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare release
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare release
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare release
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare release
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare release
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare release
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare release
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare release
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare release
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare release
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare release
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare release
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare seq_cst
  llx = llx > lle ? lle : llx;
#pragma omp atomic compare seq_cst
  llx = llx < lle ? lle : llx;
#pragma omp atomic compare seq_cst
  llx = lle > llx ? lle : llx;
#pragma omp atomic compare seq_cst
  llx = lle < llx ? lle : llx;
#pragma omp atomic compare seq_cst
  if (llx > lle)
    llx = lle;
#pragma omp atomic compare seq_cst
  if (llx < lle)
    llx = lle;
#pragma omp atomic compare seq_cst
  if (lle > llx)
    llx = lle;
#pragma omp atomic compare seq_cst
  if (lle < llx)
    llx = lle;

#pragma omp atomic compare seq_cst
  llx = llx == lle ? lld : llx;
#pragma omp atomic compare seq_cst
  llx = lle == llx ? lld : llx;
#pragma omp atomic compare seq_cst
  if (llx == lle)
    llx = lld;
#pragma omp atomic compare seq_cst
  if (lle == llx)
    llx = lld;

#pragma omp atomic compare seq_cst
  ullx = ullx > ulle ? ulle : ullx;
#pragma omp atomic compare seq_cst
  ullx = ullx < ulle ? ulle : ullx;
#pragma omp atomic compare seq_cst
  ullx = ulle > ullx ? ulle : ullx;
#pragma omp atomic compare seq_cst
  ullx = ulle < ullx ? ulle : ullx;
#pragma omp atomic compare seq_cst
  if (ullx > ulle)
    ullx = ulle;
#pragma omp atomic compare seq_cst
  if (ullx < ulle)
    ullx = ulle;
#pragma omp atomic compare seq_cst
  if (ulle > ullx)
    ullx = ulle;
#pragma omp atomic compare seq_cst
  if (ulle < ullx)
    ullx = ulle;

#pragma omp atomic compare seq_cst
  ullx = ullx == ulle ? ulld : ullx;
#pragma omp atomic compare seq_cst
  ullx = ulle == ullx ? ulld : ullx;
#pragma omp atomic compare seq_cst
  if (ullx == ulle)
    ullx = ulld;
#pragma omp atomic compare seq_cst
  if (ulle == ullx)
    ullx = ulld;

#pragma omp atomic compare
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare acq_rel
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare acq_rel
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare acq_rel
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare acq_rel
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare acq_rel
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare acq_rel
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare acq_rel
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare acq_rel
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare acquire
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare acquire
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare acquire
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare acquire
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare acquire
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare acquire
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare acquire
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare acquire
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare relaxed
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare relaxed
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare relaxed
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare relaxed
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare relaxed
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare relaxed
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare relaxed
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare relaxed
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare release
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare release
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare release
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare release
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare release
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare release
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare release
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare release
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare seq_cst
  fx = fx > fe ? fe : fx;
#pragma omp atomic compare seq_cst
  fx = fx < fe ? fe : fx;
#pragma omp atomic compare seq_cst
  fx = fe > fx ? fe : fx;
#pragma omp atomic compare seq_cst
  fx = fe < fx ? fe : fx;
#pragma omp atomic compare seq_cst
  if (fx > fe)
    fx = fe;
#pragma omp atomic compare seq_cst
  if (fx < fe)
    fx = fe;
#pragma omp atomic compare seq_cst
  if (fe > fx)
    fx = fe;
#pragma omp atomic compare seq_cst
  if (fe < fx)
    fx = fe;

#pragma omp atomic compare
  dx = dx > de ? de : dx;
#pragma omp atomic compare
  dx = dx < de ? de : dx;
#pragma omp atomic compare
  dx = de > dx ? de : dx;
#pragma omp atomic compare
  dx = de < dx ? de : dx;
#pragma omp atomic compare
  if (dx > de)
    dx = de;
#pragma omp atomic compare
  if (dx < de)
    dx = de;
#pragma omp atomic compare
  if (de > dx)
    dx = de;
#pragma omp atomic compare
  if (de < dx)
    dx = de;

#pragma omp atomic compare acq_rel
  dx = dx > de ? de : dx;
#pragma omp atomic compare acq_rel
  dx = dx < de ? de : dx;
#pragma omp atomic compare acq_rel
  dx = de > dx ? de : dx;
#pragma omp atomic compare acq_rel
  dx = de < dx ? de : dx;
#pragma omp atomic compare acq_rel
  if (dx > de)
    dx = de;
#pragma omp atomic compare acq_rel
  if (dx < de)
    dx = de;
#pragma omp atomic compare acq_rel
  if (de > dx)
    dx = de;
#pragma omp atomic compare acq_rel
  if (de < dx)
    dx = de;

#pragma omp atomic compare acquire
  dx = dx > de ? de : dx;
#pragma omp atomic compare acquire
  dx = dx < de ? de : dx;
#pragma omp atomic compare acquire
  dx = de > dx ? de : dx;
#pragma omp atomic compare acquire
  dx = de < dx ? de : dx;
#pragma omp atomic compare acquire
  if (dx > de)
    dx = de;
#pragma omp atomic compare acquire
  if (dx < de)
    dx = de;
#pragma omp atomic compare acquire
  if (de > dx)
    dx = de;
#pragma omp atomic compare acquire
  if (de < dx)
    dx = de;

#pragma omp atomic compare relaxed
  dx = dx > de ? de : dx;
#pragma omp atomic compare relaxed
  dx = dx < de ? de : dx;
#pragma omp atomic compare relaxed
  dx = de > dx ? de : dx;
#pragma omp atomic compare relaxed
  dx = de < dx ? de : dx;
#pragma omp atomic compare relaxed
  if (dx > de)
    dx = de;
#pragma omp atomic compare relaxed
  if (dx < de)
    dx = de;
#pragma omp atomic compare relaxed
  if (de > dx)
    dx = de;
#pragma omp atomic compare relaxed
  if (de < dx)
    dx = de;

#pragma omp atomic compare release
  dx = dx > de ? de : dx;
#pragma omp atomic compare release
  dx = dx < de ? de : dx;
#pragma omp atomic compare release
  dx = de > dx ? de : dx;
#pragma omp atomic compare release
  dx = de < dx ? de : dx;
#pragma omp atomic compare release
  if (dx > de)
    dx = de;
#pragma omp atomic compare release
  if (dx < de)
    dx = de;
#pragma omp atomic compare release
  if (de > dx)
    dx = de;
#pragma omp atomic compare release
  if (de < dx)
    dx = de;

#pragma omp atomic compare seq_cst
  dx = dx > de ? de : dx;
#pragma omp atomic compare seq_cst
  dx = dx < de ? de : dx;
#pragma omp atomic compare seq_cst
  dx = de > dx ? de : dx;
#pragma omp atomic compare seq_cst
  dx = de < dx ? de : dx;
#pragma omp atomic compare seq_cst
  if (dx > de)
    dx = de;
#pragma omp atomic compare seq_cst
  if (dx < de)
    dx = de;
#pragma omp atomic compare seq_cst
  if (de > dx)
    dx = de;
#pragma omp atomic compare seq_cst
  if (de < dx)
    dx = de;
}

void bar() {
  char cx, cv, cr, ce, cd;
  unsigned char ucx, ucv, ucr, uce, ucd;
  short sx, sv, sr, se, sd;
  unsigned short usx, usv, usr, use, usd;
  int ix, iv, ir, ie, id;
  unsigned int uix, uiv, uir, uie, uid;
  long lx, lv, lr, le, ld;
  unsigned long ulx, ulv, ulr, ule, uld;
  long long llx, llv, llr, lle, lld;
  unsigned long long ullx, ullv, ullr, ulle, ulld;
  float fx, fv, fe, fd;
  double dx, dv, de, dd;

#pragma omp atomic compare capture
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture release
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture release
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture release
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture release
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture release
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture release
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (ce > cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (cx > ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (ce < cx) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (cx < ce) {
      cx = ce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (cx == ce) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    if (ce == cx) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ce > cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (cx > ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ce < cx) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (cx < ce) {
      cx = ce;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (cx == ce) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ce == cx) {
      cx = cd;
    }
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  if (cx == ce) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  if (ce == cx) {
    cx = cd;
  } else {
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cr = cx == ce;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    cr = ce == cx;
    if (cr) {
      cx = cd;
    } else {
      cv = cx;
    }
  }

#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture release
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture release
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture release
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (uce > ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (ucx > uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (uce < ucx) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (ucx < uce) {
      ucx = uce;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (ucx == uce) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    if (uce == ucx) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uce > ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ucx > uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uce < ucx) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ucx < uce) {
      ucx = uce;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ucx == uce) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uce == ucx) {
      ucx = ucd;
    }
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  if (ucx == uce) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  if (uce == ucx) {
    ucx = ucd;
  } else {
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucr = ucx == uce;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ucr = uce == ucx;
    if (ucr) {
      ucx = ucd;
    } else {
      ucv = ucx;
    }
  }

#pragma omp atomic compare capture
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture release
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture release
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture release
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture release
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture release
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture release
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (se > sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (sx > se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (se < sx) {
      sx = se;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (sx < se) {
      sx = se;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (sx == se) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    if (se == sx) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (se > sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (sx > se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (se < sx) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (sx < se) {
      sx = se;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (sx == se) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (se == sx) {
      sx = sd;
    }
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  if (sx == se) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  if (se == sx) {
    sx = sd;
  } else {
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sr = sx == se;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    sr = se == sx;
    if (sr) {
      sx = sd;
    } else {
      sv = sx;
    }
  }

#pragma omp atomic compare capture
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture release
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture release
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture release
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture release
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture release
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture release
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (use > usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (usx > use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (use < usx) {
      usx = use;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (usx < use) {
      usx = use;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (usx == use) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    if (use == usx) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (use > usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (usx > use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (use < usx) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (usx < use) {
      usx = use;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (usx == use) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (use == usx) {
      usx = usd;
    }
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  if (usx == use) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  if (use == usx) {
    usx = usd;
  } else {
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usr = usx == use;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    usr = use == usx;
    if (usr) {
      usx = usd;
    } else {
      usv = usx;
    }
  }

#pragma omp atomic compare capture
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture release
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture release
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture release
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ie > ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ix > ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ie < ix) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ix < ie) {
      ix = ie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ix == ie) {
      ix = id;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    if (ie == ix) {
      ix = id;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ie > ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ix > ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ie < ix) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ix < ie) {
      ix = ie;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ix == ie) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ie == ix) {
      ix = id;
    }
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  if (ix == ie) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  if (ie == ix) {
    ix = id;
  } else {
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = ix == ie;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = ie == ix;
    if (ir) {
      ix = id;
    } else {
      iv = ix;
    }
  }

#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture acquire
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture release
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture release
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture release
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture release
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture release
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture release
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uie > uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uix > uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uie < uix) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uix < uie) {
      uix = uie;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uix == uie) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    if (uie == uix) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uie > uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uix > uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uie < uix) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uix < uie) {
      uix = uie;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uix == uie) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (uie == uix) {
      uix = uid;
    }
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  if (uix == uie) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  if (uie == uix) {
    uix = uid;
  } else {
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uir = uix == uie;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    uir = uie == uix;
    if (uir) {
      uix = uid;
    } else {
      uiv = uix;
    }
  }

#pragma omp atomic compare capture
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture release
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture release
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture release
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture release
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture release
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture release
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture release
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (le > lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (lx > le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (le < lx) {
      lx = le;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (lx < le) {
      lx = le;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (lx == le) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    if (le == lx) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (le > lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lx > le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (le < lx) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lx < le) {
      lx = le;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lx == le) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (le == lx) {
      lx = ld;
    }
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  if (lx == le) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  if (le == lx) {
    lx = ld;
  } else {
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lr = lx == le;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    lr = le == lx;
    if (lr) {
      lx = ld;
    } else {
      lv = lx;
    }
  }

#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture release
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture release
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture release
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture release
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ule > ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ulx > ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ule < ulx) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ulx < ule) {
      ulx = ule;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ulx == ule) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    if (ule == ulx) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ule > ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulx > ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ule < ulx) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulx < ule) {
      ulx = ule;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulx == ule) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ule == ulx) {
      ulx = uld;
    }
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  if (ulx == ule) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  if (ule == ulx) {
    ulx = uld;
  } else {
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulr = ulx == ule;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ulr = ule == ulx;
    if (ulr) {
      ulx = uld;
    } else {
      ulv = ulx;
    }
  }

#pragma omp atomic compare capture
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture release
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture release
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture release
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture release
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture release
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture release
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture release
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (lle > llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (llx > lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (lle < llx) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (llx < lle) {
      llx = lle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (llx == lle) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    if (lle == llx) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lle > llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (llx > lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lle < llx) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (llx < lle) {
      llx = lle;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (llx == lle) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (lle == llx) {
      llx = lld;
    }
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  if (llx == lle) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  if (lle == llx) {
    llx = lld;
  } else {
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llr = llx == lle;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    llr = lle == llx;
    if (llr) {
      llx = lld;
    } else {
      llv = llx;
    }
  }

#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture release
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture release
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture release
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture release
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ulle > ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ullx > ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ulle < ullx) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ullx < ulle) {
      ullx = ulle;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ullx == ulle) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    if (ulle == ullx) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulle > ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ullx > ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulle < ullx) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ullx < ulle) {
      ullx = ulle;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ullx == ulle) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (ulle == ullx) {
      ullx = ulld;
    }
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  if (ullx == ulle) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  if (ulle == ullx) {
    ullx = ulld;
  } else {
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullr = ullx == ulle;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ullr = ulle == ullx;
    if (ullr) {
      ullx = ulld;
    } else {
      ullv = ullx;
    }
  }

#pragma omp atomic compare capture
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture release
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture release
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fe > fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fx > fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fe < fx) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fx < fe) {
      fx = fe;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fx == fe) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    if (fe == fx) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fe > fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fx > fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fe < fx) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fx < fe) {
      fx = fe;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fx == fe) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (fe == fx) {
      fx = fd;
    }
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  if (fx == fe) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  if (fe == fx) {
    fx = fd;
  } else {
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = fx == fe;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = fe == fx;
    if (ir) {
      fx = fd;
    } else {
      fv = fx;
    }
  }

#pragma omp atomic compare capture
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }

#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture acq_rel
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }

#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture acquire
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }

#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture relaxed
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }

#pragma omp atomic compare capture release
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture release
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture release
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture release
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture release
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }

#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (de > dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (dx > de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (de < dx) {
      dx = de;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (dx < de) {
      dx = de;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (dx == de) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    if (de == dx) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    if (de > dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (dx > de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (de < dx) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (dx < de) {
      dx = de;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (dx == de) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    if (de == dx) {
      dx = dd;
    }
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  if (dx == de) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  if (de == dx) {
    dx = dd;
  } else {
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = dx == de;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
#pragma omp atomic compare capture seq_cst
  {
    ir = de == dx;
    if (ir) {
      dx = dd;
    } else {
      dv = dx;
    }
  }
}


char cxevd() {
  char cx, cv, ce, cd;

#pragma omp atomic compare capture
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture acq_rel
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

#pragma omp atomic compare capture acquire
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture acquire
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture acquire
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture acquire
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture relaxed
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

#pragma omp atomic compare capture release
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture release
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture release
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture release
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    cx = cx > ce ? ce : cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    cx = cx < ce ? ce : cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cv = cx;
    cx = cx == ce ? cd : cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cx = cx > ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cx = cx < ce ? ce : cx;
    cv = cx;
  }
#pragma omp atomic compare capture seq_cst
  {
    cx = cx == ce ? cd : cx;
    cv = cx;
  }

  return cv;
}

unsigned char ucxevd() {
  unsigned char ucx, ucv, uce, ucd;

#pragma omp atomic compare capture
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture acquire
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture relaxed
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

#pragma omp atomic compare capture release
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture release
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture release
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture release
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    ucx = ucx > uce ? uce : ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    ucx = ucx < uce ? uce : ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucv = ucx;
    ucx = ucx == uce ? ucd : ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucx = ucx > uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucx = ucx < uce ? uce : ucx;
    ucv = ucx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ucx = ucx == uce ? ucd : ucx;
    ucv = ucx;
  }

  return ucv;
}

short sxevd() {
  short sx, sv, se, sd;

#pragma omp atomic compare capture
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture acq_rel
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

#pragma omp atomic compare capture acquire
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture acquire
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture acquire
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture acquire
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture relaxed
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

#pragma omp atomic compare capture release
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture release
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture release
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture release
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    sx = sx > se ? se : sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    sx = sx < se ? se : sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sv = sx;
    sx = sx == se ? sd : sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sx = sx > se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sx = sx < se ? se : sx;
    sv = sx;
  }
#pragma omp atomic compare capture seq_cst
  {
    sx = sx == se ? sd : sx;
    sv = sx;
  }

  return sv;
}

unsigned short usxevd() {
  unsigned short usx, usv, use, usd;

#pragma omp atomic compare capture
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture acq_rel
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

#pragma omp atomic compare capture acquire
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture acquire
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture acquire
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture acquire
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture relaxed
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

#pragma omp atomic compare capture release
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture release
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture release
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture release
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    usx = usx > use ? use : usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    usx = usx < use ? use : usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usv = usx;
    usx = usx == use ? usd : usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usx = usx > use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usx = usx < use ? use : usx;
    usv = usx;
  }
#pragma omp atomic compare capture seq_cst
  {
    usx = usx == use ? usd : usx;
    usv = usx;
  }

  return usv;
}

int ixevd() {
  int ix, iv, ie, id;

#pragma omp atomic compare capture
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture acq_rel
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

#pragma omp atomic compare capture acquire
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture acquire
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture acquire
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture acquire
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture relaxed
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture relaxed
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture relaxed
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

#pragma omp atomic compare capture release
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture release
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture release
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture release
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    ix = ix > ie ? ie : ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    ix = ix < ie ? ie : ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    iv = ix;
    ix = ix == ie ? id : ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    ix = ix > ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    ix = ix < ie ? ie : ix;
    iv = ix;
  }
#pragma omp atomic compare capture seq_cst
  {
    ix = ix == ie ? id : ix;
    iv = ix;
  }

  return iv;
}

unsigned int uixevd() {
  unsigned int uix, uiv, uie, uid;

#pragma omp atomic compare capture
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture acq_rel
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture acquire
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture acquire
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture acquire
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture relaxed
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

#pragma omp atomic compare capture release
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture release
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture release
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture release
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    uix = uix > uie ? uie : uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    uix = uix < uie ? uie : uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uiv = uix;
    uix = uix == uie ? uid : uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uix = uix > uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uix = uix < uie ? uie : uix;
    uiv = uix;
  }
#pragma omp atomic compare capture seq_cst
  {
    uix = uix == uie ? uid : uix;
    uiv = uix;
  }

  return uiv;
}

long lxevd() {
  long lx, lv, le, ld;

#pragma omp atomic compare capture
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture acq_rel
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

#pragma omp atomic compare capture acquire
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture acquire
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture acquire
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture acquire
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture relaxed
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

#pragma omp atomic compare capture release
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture release
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture release
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture release
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    lx = lx > le ? le : lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    lx = lx < le ? le : lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lv = lx;
    lx = lx == le ? ld : lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lx = lx > le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lx = lx < le ? le : lx;
    lv = lx;
  }
#pragma omp atomic compare capture seq_cst
  {
    lx = lx == le ? ld : lx;
    lv = lx;
  }

  return lv;
}

unsigned long ulxevd() {
  unsigned long ulx, ulv, ule, uld;

#pragma omp atomic compare capture
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture acquire
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture relaxed
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

#pragma omp atomic compare capture release
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture release
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture release
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture release
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    ulx = ulx > ule ? ule : ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    ulx = ulx < ule ? ule : ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulv = ulx;
    ulx = ulx == ule ? uld : ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulx = ulx > ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulx = ulx < ule ? ule : ulx;
    ulv = ulx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ulx = ulx == ule ? uld : ulx;
    ulv = ulx;
  }

  return ulv;
}

long long llxevd() {
  long long llx, llv, lle, lld;

#pragma omp atomic compare capture
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture acq_rel
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

#pragma omp atomic compare capture acquire
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture acquire
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture acquire
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture acquire
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture relaxed
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

#pragma omp atomic compare capture release
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture release
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture release
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture release
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    llx = llx > lle ? lle : llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    llx = llx < lle ? lle : llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llv = llx;
    llx = llx == lle ? lld : llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llx = llx > lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llx = llx < lle ? lle : llx;
    llv = llx;
  }
#pragma omp atomic compare capture seq_cst
  {
    llx = llx == lle ? lld : llx;
    llv = llx;
  }

  return llv;
}

unsigned long long ullxevd() {
  unsigned long long ullx, ullv, ulle, ulld;

#pragma omp atomic compare capture
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture acq_rel
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture acquire
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture relaxed
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

#pragma omp atomic compare capture release
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture release
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture release
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture release
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    ullx = ullx > ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    ullx = ullx < ulle ? ulle : ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullv = ullx;
    ullx = ullx == ulle ? ulld : ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullx = ullx > ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullx = ullx < ulle ? ulle : ullx;
    ullv = ullx;
  }
#pragma omp atomic compare capture seq_cst
  {
    ullx = ullx == ulle ? ulld : ullx;
    ullv = ullx;
  }

  return ullv;
}

float fxevd() {
  float fx, fv, fe, fd;

#pragma omp atomic compare capture
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture acq_rel
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

#pragma omp atomic compare capture acquire
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture acquire
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture acquire
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture acquire
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture relaxed
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture relaxed
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture relaxed
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

#pragma omp atomic compare capture release
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture release
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture release
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture release
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    fx = fx > fe ? fe : fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    fx = fx < fe ? fe : fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    fv = fx;
    fx = fx == fe ? fd : fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    fx = fx > fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    fx = fx < fe ? fe : fx;
    fv = fx;
  }
#pragma omp atomic compare capture seq_cst
  {
    fx = fx == fe ? fd : fx;
    fv = fx;
  }

  return fv;
}

double dxevd() {
  double dx, dv, de, dd;

#pragma omp atomic compare capture
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture acq_rel
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

#pragma omp atomic compare capture acquire
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture acquire
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture acquire
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture acquire
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture relaxed
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture relaxed
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture relaxed
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

#pragma omp atomic compare capture release
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture release
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture release
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture release
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    dx = dx > de ? de : dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    dx = dx < de ? de : dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    dv = dx;
    dx = dx == de ? dd : dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    dx = dx > de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    dx = dx < de ? de : dx;
    dv = dx;
  }
#pragma omp atomic compare capture seq_cst
  {
    dx = dx == de ? dd : dx;
    dv = dx;
  }

  return dv;
}


double fail_dxevd() {
  double dx, dv, de, dd;

#pragma omp atomic compare capture relaxed fail(relaxed)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acquire fail(relaxed)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture release fail(relaxed)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acq_rel fail(relaxed)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture seq_cst fail(relaxed)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture relaxed fail(acquire)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acquire fail(acquire)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture release fail(acquire)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acq_rel fail(acquire)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture seq_cst fail(acquire)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture relaxed fail(seq_cst)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acquire fail(seq_cst)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture release fail(seq_cst)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture acq_rel fail(seq_cst)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare capture seq_cst fail(seq_cst)
  {if(dx == de) { dx = dv; } else { dd = dx; }}

#pragma omp atomic compare seq_cst fail(acquire)
  dx = dx < de ? de : dx;

#pragma omp atomic compare relaxed fail(seq_cst)
  dx = dx > de ? de : dx;

  return dx;
}

#endif
// CHECK-LABEL: @foo(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CX:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[CE:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[CD:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCX:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCE:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCD:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[SX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[IX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[LX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[FX:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FE:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FD:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[DX:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DE:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DD:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP0]] monotonic, align 1
// CHECK-NEXT:    [[TMP2:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP2]] monotonic, align 1
// CHECK-NEXT:    [[TMP4:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP5:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP4]] monotonic, align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP7:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP6]] monotonic, align 1
// CHECK-NEXT:    [[TMP8:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP8]] monotonic, align 1
// CHECK-NEXT:    [[TMP10:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP11:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP10]] monotonic, align 1
// CHECK-NEXT:    [[TMP12:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP12]] monotonic, align 1
// CHECK-NEXT:    [[TMP14:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP15:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP14]] monotonic, align 1
// CHECK-NEXT:    [[TMP16:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP17:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP16]], b8 [[TMP17]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP19:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP20:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP21:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP19]], b8 [[TMP20]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP22:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP23:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP24:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP22]], b8 [[TMP23]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP25:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP26:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP25]], b8 [[TMP26]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP28:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP28]] monotonic, align 1
// CHECK-NEXT:    [[TMP30:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP30]] monotonic, align 1
// CHECK-NEXT:    [[TMP32:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP33:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP32]] monotonic, align 1
// CHECK-NEXT:    [[TMP34:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP34]] monotonic, align 1
// CHECK-NEXT:    [[TMP36:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP37:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP36]] monotonic, align 1
// CHECK-NEXT:    [[TMP38:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP39:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP38]] monotonic, align 1
// CHECK-NEXT:    [[TMP40:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP41:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP40]] monotonic, align 1
// CHECK-NEXT:    [[TMP42:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP43:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP42]] monotonic, align 1
// CHECK-NEXT:    [[TMP44:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP45:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP46:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP44]], b8 [[TMP45]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP47:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP48:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP49:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP47]], b8 [[TMP48]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP50:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP51:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP52:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP50]], b8 [[TMP51]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP53:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP54:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP55:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP53]], b8 [[TMP54]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP56:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP56]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1:[0-9]+]])
// CHECK-NEXT:    [[TMP58:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP59:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP58]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP60:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP61:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP60]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP62:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP63:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP62]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP64:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP65:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP64]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP66:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP66]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP68:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP68]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP70:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP71:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP70]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP72:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP73:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP74:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP72]], b8 [[TMP73]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP75:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP76:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP75]], b8 [[TMP76]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP78:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP79:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP80:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP78]], b8 [[TMP79]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP81:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP82:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP83:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP81]], b8 [[TMP82]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP84:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP85:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP84]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP86:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP87:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP86]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP88:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP88]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP90]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP93:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP92]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP94:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP95:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP94]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP96]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP98:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP99:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP98]] acq_rel, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP101:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP102:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP100]], b8 [[TMP101]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP103:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP104:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP105:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP103]], b8 [[TMP104]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP106:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP107:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP108:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP106]], b8 [[TMP107]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP109:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP110:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP111:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP109]], b8 [[TMP110]] acq_rel acquire, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP112]] acquire, align 1
// CHECK-NEXT:    [[TMP114:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP115:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP114]] acquire, align 1
// CHECK-NEXT:    [[TMP116:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP117:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP116]] acquire, align 1
// CHECK-NEXT:    [[TMP118:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP118]] acquire, align 1
// CHECK-NEXT:    [[TMP120:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP121:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP120]] acquire, align 1
// CHECK-NEXT:    [[TMP122:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP122]] acquire, align 1
// CHECK-NEXT:    [[TMP124:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP125:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP124]] acquire, align 1
// CHECK-NEXT:    [[TMP126:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP127:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP126]] acquire, align 1
// CHECK-NEXT:    [[TMP128:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP129:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP130:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP128]], b8 [[TMP129]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP131:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP132:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP133:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP131]], b8 [[TMP132]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP134:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP135:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP136:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP134]], b8 [[TMP135]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP137:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP138:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP139:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP137]], b8 [[TMP138]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP140:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP141:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP140]] acquire, align 1
// CHECK-NEXT:    [[TMP142:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP143:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP142]] acquire, align 1
// CHECK-NEXT:    [[TMP144:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP145:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP144]] acquire, align 1
// CHECK-NEXT:    [[TMP146:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP147:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP146]] acquire, align 1
// CHECK-NEXT:    [[TMP148:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP149:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP148]] acquire, align 1
// CHECK-NEXT:    [[TMP150:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP151:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP150]] acquire, align 1
// CHECK-NEXT:    [[TMP152:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP153:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP152]] acquire, align 1
// CHECK-NEXT:    [[TMP154:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP155:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP154]] acquire, align 1
// CHECK-NEXT:    [[TMP156:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP157:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP158:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP156]], b8 [[TMP157]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP159:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP160:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP161:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP159]], b8 [[TMP160]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP162:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP163:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP164:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP162]], b8 [[TMP163]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP165:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP166:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP167:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP165]], b8 [[TMP166]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP168:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP169:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP168]] monotonic, align 1
// CHECK-NEXT:    [[TMP170:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP171:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP170]] monotonic, align 1
// CHECK-NEXT:    [[TMP172:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP173:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP172]] monotonic, align 1
// CHECK-NEXT:    [[TMP174:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP175:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP174]] monotonic, align 1
// CHECK-NEXT:    [[TMP176:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP177:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP176]] monotonic, align 1
// CHECK-NEXT:    [[TMP178:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP179:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP178]] monotonic, align 1
// CHECK-NEXT:    [[TMP180:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP181:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP180]] monotonic, align 1
// CHECK-NEXT:    [[TMP182:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP183:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP182]] monotonic, align 1
// CHECK-NEXT:    [[TMP184:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP185:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP186:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP184]], b8 [[TMP185]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP187:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP188:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP189:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP187]], b8 [[TMP188]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP190:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP191:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP192:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP190]], b8 [[TMP191]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP193:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP194:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP195:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP193]], b8 [[TMP194]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP196:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP197:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP196]] monotonic, align 1
// CHECK-NEXT:    [[TMP198:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP199:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP198]] monotonic, align 1
// CHECK-NEXT:    [[TMP200:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP201:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP200]] monotonic, align 1
// CHECK-NEXT:    [[TMP202:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP203:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP202]] monotonic, align 1
// CHECK-NEXT:    [[TMP204:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP205:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP204]] monotonic, align 1
// CHECK-NEXT:    [[TMP206:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP207:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP206]] monotonic, align 1
// CHECK-NEXT:    [[TMP208:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP209:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP208]] monotonic, align 1
// CHECK-NEXT:    [[TMP210:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP211:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP210]] monotonic, align 1
// CHECK-NEXT:    [[TMP212:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP213:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP214:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP212]], b8 [[TMP213]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP215:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP216:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP217:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP215]], b8 [[TMP216]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP218:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP219:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP220:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP218]], b8 [[TMP219]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP221:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP222:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP223:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP221]], b8 [[TMP222]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP224:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP225:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP224]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP226:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP227:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP226]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP228:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP229:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP228]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP230:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP231:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP230]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP232:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP233:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP232]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP234:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP235:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP234]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP236:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP237:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP236]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP238:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP239:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP238]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP240:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP241:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP242:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP240]], b8 [[TMP241]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP243:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP244:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP245:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP243]], b8 [[TMP244]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP246:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP247:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP248:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP246]], b8 [[TMP247]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP249:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP250:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP251:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP249]], b8 [[TMP250]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP252:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP253:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP252]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP254:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP255:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP254]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP256:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP257:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP256]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP258:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP259:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP258]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP260:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP261:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP260]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP262:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP263:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP262]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP264:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP265:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP264]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP266:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP267:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP266]] release, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP268:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP269:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP270:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP268]], b8 [[TMP269]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP271:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP272:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP273:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP271]], b8 [[TMP272]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP274:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP275:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP276:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP274]], b8 [[TMP275]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP277:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP278:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP279:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP277]], b8 [[TMP278]] release monotonic, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP280:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP281:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP280]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP282:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP283:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP282]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP284:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP285:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP284]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP286:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP287:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP286]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP288:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP289:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP288]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP290:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP291:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP290]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP292:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP293:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP292]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP294:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP295:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP294]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP296:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP297:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP298:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP296]], b8 [[TMP297]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP299:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP300:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP301:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP299]], b8 [[TMP300]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP302:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP303:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP304:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP302]], b8 [[TMP303]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP305:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP306:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP307:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP305]], b8 [[TMP306]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP308:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP309:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP308]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP310:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP311:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP310]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP312:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP313:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP312]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP314:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP315:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP314]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP316:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP317:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP316]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP318:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP319:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP318]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP320:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP321:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP320]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP322:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP323:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP322]] seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP324:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP325:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP326:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP324]], b8 [[TMP325]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP327:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP328:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP329:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP327]], b8 [[TMP328]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP330:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP331:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP332:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP330]], b8 [[TMP331]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP333:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP334:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP335:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP333]], b8 [[TMP334]] seq_cst seq_cst, align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP336:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP337:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP336]] monotonic, align 2
// CHECK-NEXT:    [[TMP338:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP339:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP338]] monotonic, align 2
// CHECK-NEXT:    [[TMP340:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP341:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP340]] monotonic, align 2
// CHECK-NEXT:    [[TMP342:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP343:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP342]] monotonic, align 2
// CHECK-NEXT:    [[TMP344:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP345:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP344]] monotonic, align 2
// CHECK-NEXT:    [[TMP346:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP347:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP346]] monotonic, align 2
// CHECK-NEXT:    [[TMP348:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP349:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP348]] monotonic, align 2
// CHECK-NEXT:    [[TMP350:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP351:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP350]] monotonic, align 2
// CHECK-NEXT:    [[TMP352:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP353:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP354:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP352]], i16 [[TMP353]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP355:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP356:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP357:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP355]], i16 [[TMP356]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP358:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP359:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP360:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP358]], i16 [[TMP359]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP361:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP362:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP363:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP361]], i16 [[TMP362]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP364:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP365:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP364]] monotonic, align 2
// CHECK-NEXT:    [[TMP366:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP367:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP366]] monotonic, align 2
// CHECK-NEXT:    [[TMP368:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP369:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP368]] monotonic, align 2
// CHECK-NEXT:    [[TMP370:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP371:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP370]] monotonic, align 2
// CHECK-NEXT:    [[TMP372:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP373:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP372]] monotonic, align 2
// CHECK-NEXT:    [[TMP374:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP375:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP374]] monotonic, align 2
// CHECK-NEXT:    [[TMP376:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP377:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP376]] monotonic, align 2
// CHECK-NEXT:    [[TMP378:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP379:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP378]] monotonic, align 2
// CHECK-NEXT:    [[TMP380:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP381:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP382:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP380]], i16 [[TMP381]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP383:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP384:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP385:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP383]], i16 [[TMP384]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP386:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP387:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP388:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP386]], i16 [[TMP387]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP389:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP390:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP391:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP389]], i16 [[TMP390]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP392:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP393:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP392]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP394:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP395:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP394]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP396:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP397:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP396]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP398:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP399:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP398]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP400:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP401:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP400]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP402:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP403:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP402]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP404:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP405:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP404]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP406:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP407:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP406]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP408:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP409:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP410:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP408]], i16 [[TMP409]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP411:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP412:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP413:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP411]], i16 [[TMP412]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP414:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP415:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP416:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP414]], i16 [[TMP415]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP417:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP418:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP419:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP417]], i16 [[TMP418]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP420:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP421:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP420]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP422:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP423:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP422]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP424:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP425:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP424]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP426:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP427:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP426]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP428:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP429:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP428]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP430:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP431:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP430]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP432:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP433:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP432]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP434:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP435:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP434]] acq_rel, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP436:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP437:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP438:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP436]], i16 [[TMP437]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP439:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP440:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP441:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP439]], i16 [[TMP440]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP442:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP443:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP444:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP442]], i16 [[TMP443]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP445:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP446:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP447:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP445]], i16 [[TMP446]] acq_rel acquire, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP448:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP449:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP448]] acquire, align 2
// CHECK-NEXT:    [[TMP450:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP451:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP450]] acquire, align 2
// CHECK-NEXT:    [[TMP452:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP453:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP452]] acquire, align 2
// CHECK-NEXT:    [[TMP454:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP455:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP454]] acquire, align 2
// CHECK-NEXT:    [[TMP456:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP457:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP456]] acquire, align 2
// CHECK-NEXT:    [[TMP458:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP459:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP458]] acquire, align 2
// CHECK-NEXT:    [[TMP460:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP461:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP460]] acquire, align 2
// CHECK-NEXT:    [[TMP462:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP463:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP462]] acquire, align 2
// CHECK-NEXT:    [[TMP464:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP465:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP466:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP464]], i16 [[TMP465]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP467:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP468:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP469:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP467]], i16 [[TMP468]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP470:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP471:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP472:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP470]], i16 [[TMP471]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP473:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP474:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP475:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP473]], i16 [[TMP474]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP476:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP477:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP476]] acquire, align 2
// CHECK-NEXT:    [[TMP478:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP479:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP478]] acquire, align 2
// CHECK-NEXT:    [[TMP480:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP481:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP480]] acquire, align 2
// CHECK-NEXT:    [[TMP482:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP483:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP482]] acquire, align 2
// CHECK-NEXT:    [[TMP484:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP485:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP484]] acquire, align 2
// CHECK-NEXT:    [[TMP486:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP487:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP486]] acquire, align 2
// CHECK-NEXT:    [[TMP488:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP489:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP488]] acquire, align 2
// CHECK-NEXT:    [[TMP490:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP491:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP490]] acquire, align 2
// CHECK-NEXT:    [[TMP492:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP493:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP494:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP492]], i16 [[TMP493]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP495:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP496:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP497:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP495]], i16 [[TMP496]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP498:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP499:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP500:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP498]], i16 [[TMP499]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP501:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP502:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP503:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP501]], i16 [[TMP502]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP504:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP505:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP504]] monotonic, align 2
// CHECK-NEXT:    [[TMP506:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP507:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP506]] monotonic, align 2
// CHECK-NEXT:    [[TMP508:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP509:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP508]] monotonic, align 2
// CHECK-NEXT:    [[TMP510:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP511:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP510]] monotonic, align 2
// CHECK-NEXT:    [[TMP512:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP513:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP512]] monotonic, align 2
// CHECK-NEXT:    [[TMP514:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP515:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP514]] monotonic, align 2
// CHECK-NEXT:    [[TMP516:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP517:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP516]] monotonic, align 2
// CHECK-NEXT:    [[TMP518:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP519:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP518]] monotonic, align 2
// CHECK-NEXT:    [[TMP520:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP521:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP522:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP520]], i16 [[TMP521]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP523:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP524:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP525:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP523]], i16 [[TMP524]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP526:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP527:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP528:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP526]], i16 [[TMP527]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP529:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP530:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP531:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP529]], i16 [[TMP530]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP532:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP533:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP532]] monotonic, align 2
// CHECK-NEXT:    [[TMP534:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP535:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP534]] monotonic, align 2
// CHECK-NEXT:    [[TMP536:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP537:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP536]] monotonic, align 2
// CHECK-NEXT:    [[TMP538:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP539:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP538]] monotonic, align 2
// CHECK-NEXT:    [[TMP540:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP541:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP540]] monotonic, align 2
// CHECK-NEXT:    [[TMP542:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP543:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP542]] monotonic, align 2
// CHECK-NEXT:    [[TMP544:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP545:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP544]] monotonic, align 2
// CHECK-NEXT:    [[TMP546:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP547:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP546]] monotonic, align 2
// CHECK-NEXT:    [[TMP548:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP549:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP550:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP548]], i16 [[TMP549]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP551:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP552:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP553:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP551]], i16 [[TMP552]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP554:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP555:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP556:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP554]], i16 [[TMP555]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP557:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP558:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP559:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP557]], i16 [[TMP558]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP560:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP561:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP560]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP562:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP563:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP562]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP564:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP565:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP564]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP566:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP567:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP566]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP568:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP569:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP568]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP570:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP571:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP570]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP572:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP573:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP572]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP574:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP575:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP574]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP576:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP577:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP578:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP576]], i16 [[TMP577]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP579:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP580:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP581:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP579]], i16 [[TMP580]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP582:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP583:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP584:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP582]], i16 [[TMP583]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP585:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP586:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP587:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP585]], i16 [[TMP586]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP588:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP589:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP588]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP590:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP591:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP590]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP592:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP593:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP592]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP594:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP595:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP594]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP596:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP597:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP596]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP598:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP599:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP598]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP600:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP601:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP600]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP602:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP603:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP602]] release, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP604:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP605:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP606:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP604]], i16 [[TMP605]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP607:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP608:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP609:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP607]], i16 [[TMP608]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP610:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP611:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP612:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP610]], i16 [[TMP611]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP613:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP614:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP615:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP613]], i16 [[TMP614]] release monotonic, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP616:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP617:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP616]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP618:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP619:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP618]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP620:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP621:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP620]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP622:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP623:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP622]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP624:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP625:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP624]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP626:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP627:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP626]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP628:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP629:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP628]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP630:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP631:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP630]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP632:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP633:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP634:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP632]], i16 [[TMP633]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP635:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP636:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP637:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP635]], i16 [[TMP636]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP638:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP639:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP640:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP638]], i16 [[TMP639]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP641:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP642:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP643:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP641]], i16 [[TMP642]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP644:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP645:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP644]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP646:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP647:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP646]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP648:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP649:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP648]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP650:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP651:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP650]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP652:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP653:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP652]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP654:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP655:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP654]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP656:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP657:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP656]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP658:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP659:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP658]] seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP660:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP661:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP662:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP660]], i16 [[TMP661]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP663:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP664:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP665:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP663]], i16 [[TMP664]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP666:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP667:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP668:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP666]], i16 [[TMP667]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP669:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP670:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP671:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP669]], i16 [[TMP670]] seq_cst seq_cst, align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP672:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP673:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP672]] monotonic, align 4
// CHECK-NEXT:    [[TMP674:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP675:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP674]] monotonic, align 4
// CHECK-NEXT:    [[TMP676:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP677:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP676]] monotonic, align 4
// CHECK-NEXT:    [[TMP678:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP679:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP678]] monotonic, align 4
// CHECK-NEXT:    [[TMP680:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP681:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP680]] monotonic, align 4
// CHECK-NEXT:    [[TMP682:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP683:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP682]] monotonic, align 4
// CHECK-NEXT:    [[TMP684:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP685:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP684]] monotonic, align 4
// CHECK-NEXT:    [[TMP686:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP687:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP686]] monotonic, align 4
// CHECK-NEXT:    [[TMP688:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP689:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP690:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP688]], i32 [[TMP689]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP691:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP692:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP693:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP691]], i32 [[TMP692]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP694:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP695:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP696:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP694]], i32 [[TMP695]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP697:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP698:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP699:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP697]], i32 [[TMP698]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP700:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP701:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP700]] monotonic, align 4
// CHECK-NEXT:    [[TMP702:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP703:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP702]] monotonic, align 4
// CHECK-NEXT:    [[TMP704:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP705:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP704]] monotonic, align 4
// CHECK-NEXT:    [[TMP706:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP707:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP706]] monotonic, align 4
// CHECK-NEXT:    [[TMP708:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP709:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP708]] monotonic, align 4
// CHECK-NEXT:    [[TMP710:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP711:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP710]] monotonic, align 4
// CHECK-NEXT:    [[TMP712:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP713:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP712]] monotonic, align 4
// CHECK-NEXT:    [[TMP714:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP715:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP714]] monotonic, align 4
// CHECK-NEXT:    [[TMP716:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP717:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP718:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP716]], i32 [[TMP717]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP719:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP720:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP721:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP719]], i32 [[TMP720]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP722:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP723:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP724:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP722]], i32 [[TMP723]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP725:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP726:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP727:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP725]], i32 [[TMP726]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP728:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP729:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP728]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP730:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP731:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP730]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP732:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP733:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP732]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP734:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP735:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP734]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP736:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP737:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP736]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP738:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP739:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP738]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP740:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP741:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP740]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP742:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP743:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP742]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP744:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP745:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP746:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP744]], i32 [[TMP745]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP747:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP748:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP749:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP747]], i32 [[TMP748]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP750:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP751:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP752:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP750]], i32 [[TMP751]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP753:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP754:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP755:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP753]], i32 [[TMP754]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP756:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP757:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP756]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP758:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP759:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP758]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP760:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP761:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP760]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP762:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP763:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP762]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP764:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP765:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP764]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP766:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP767:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP766]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP768:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP769:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP768]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP770:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP771:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP770]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP772:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP773:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP774:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP772]], i32 [[TMP773]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP775:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP776:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP777:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP775]], i32 [[TMP776]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP778:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP779:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP780:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP778]], i32 [[TMP779]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP781:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP782:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP783:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP781]], i32 [[TMP782]] acq_rel acquire, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP784:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP785:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP784]] acquire, align 4
// CHECK-NEXT:    [[TMP786:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP787:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP786]] acquire, align 4
// CHECK-NEXT:    [[TMP788:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP789:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP788]] acquire, align 4
// CHECK-NEXT:    [[TMP790:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP791:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP790]] acquire, align 4
// CHECK-NEXT:    [[TMP792:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP793:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP792]] acquire, align 4
// CHECK-NEXT:    [[TMP794:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP795:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP794]] acquire, align 4
// CHECK-NEXT:    [[TMP796:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP797:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP796]] acquire, align 4
// CHECK-NEXT:    [[TMP798:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP799:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP798]] acquire, align 4
// CHECK-NEXT:    [[TMP800:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP801:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP802:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP800]], i32 [[TMP801]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP803:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP804:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP805:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP803]], i32 [[TMP804]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP806:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP807:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP808:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP806]], i32 [[TMP807]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP809:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP810:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP811:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP809]], i32 [[TMP810]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP812:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP813:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP812]] acquire, align 4
// CHECK-NEXT:    [[TMP814:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP815:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP814]] acquire, align 4
// CHECK-NEXT:    [[TMP816:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP817:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP816]] acquire, align 4
// CHECK-NEXT:    [[TMP818:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP819:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP818]] acquire, align 4
// CHECK-NEXT:    [[TMP820:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP821:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP820]] acquire, align 4
// CHECK-NEXT:    [[TMP822:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP823:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP822]] acquire, align 4
// CHECK-NEXT:    [[TMP824:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP825:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP824]] acquire, align 4
// CHECK-NEXT:    [[TMP826:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP827:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP826]] acquire, align 4
// CHECK-NEXT:    [[TMP828:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP829:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP830:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP828]], i32 [[TMP829]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP831:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP832:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP833:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP831]], i32 [[TMP832]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP834:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP835:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP836:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP834]], i32 [[TMP835]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP837:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP838:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP839:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP837]], i32 [[TMP838]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP840:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP841:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP840]] monotonic, align 4
// CHECK-NEXT:    [[TMP842:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP843:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP842]] monotonic, align 4
// CHECK-NEXT:    [[TMP844:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP845:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP844]] monotonic, align 4
// CHECK-NEXT:    [[TMP846:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP847:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP846]] monotonic, align 4
// CHECK-NEXT:    [[TMP848:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP849:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP848]] monotonic, align 4
// CHECK-NEXT:    [[TMP850:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP851:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP850]] monotonic, align 4
// CHECK-NEXT:    [[TMP852:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP853:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP852]] monotonic, align 4
// CHECK-NEXT:    [[TMP854:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP855:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP854]] monotonic, align 4
// CHECK-NEXT:    [[TMP856:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP857:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP858:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP856]], i32 [[TMP857]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP859:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP860:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP861:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP859]], i32 [[TMP860]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP862:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP863:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP864:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP862]], i32 [[TMP863]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP865:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP866:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP867:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP865]], i32 [[TMP866]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP868:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP869:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP868]] monotonic, align 4
// CHECK-NEXT:    [[TMP870:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP871:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP870]] monotonic, align 4
// CHECK-NEXT:    [[TMP872:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP873:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP872]] monotonic, align 4
// CHECK-NEXT:    [[TMP874:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP875:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP874]] monotonic, align 4
// CHECK-NEXT:    [[TMP876:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP877:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP876]] monotonic, align 4
// CHECK-NEXT:    [[TMP878:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP879:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP878]] monotonic, align 4
// CHECK-NEXT:    [[TMP880:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP881:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP880]] monotonic, align 4
// CHECK-NEXT:    [[TMP882:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP883:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP882]] monotonic, align 4
// CHECK-NEXT:    [[TMP884:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP885:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP886:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP884]], i32 [[TMP885]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP887:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP888:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP889:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP887]], i32 [[TMP888]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP890:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP891:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP892:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP890]], i32 [[TMP891]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP893:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP894:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP895:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP893]], i32 [[TMP894]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP896:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP897:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP896]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP898:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP899:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP898]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP900:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP901:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP900]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP902:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP903:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP902]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP904:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP905:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP904]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP906:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP907:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP906]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP908:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP909:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP908]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP910:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP911:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP910]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP912:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP913:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP914:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP912]], i32 [[TMP913]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP915:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP916:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP917:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP915]], i32 [[TMP916]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP918:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP919:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP920:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP918]], i32 [[TMP919]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP921:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP922:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP923:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP921]], i32 [[TMP922]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP924:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP925:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP924]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP926:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP927:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP926]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP928:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP929:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP928]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP930:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP931:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP930]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP932:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP933:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP932]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP934:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP935:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP934]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP936:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP937:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP936]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP938:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP939:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP938]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP940:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP941:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP942:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP940]], i32 [[TMP941]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP943:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP944:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP945:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP943]], i32 [[TMP944]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP946:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP947:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP948:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP946]], i32 [[TMP947]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP949:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP950:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP951:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP949]], i32 [[TMP950]] release monotonic, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP952:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP953:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP952]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP954:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP955:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP954]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP956:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP957:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP956]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP958:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP959:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP958]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP960:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP961:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP960]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP962:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP963:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP962]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP964:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP965:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP964]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP966:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP967:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP966]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP968:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP969:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP970:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP968]], i32 [[TMP969]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP971:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP972:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP973:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP971]], i32 [[TMP972]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP974:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP975:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP976:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP974]], i32 [[TMP975]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP977:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP978:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP979:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP977]], i32 [[TMP978]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP980:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP981:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP980]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP982:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP983:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP982]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP984:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP985:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP984]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP986:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP987:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP986]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP988:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP989:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP988]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP990:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP991:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP990]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP992:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP993:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP992]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP994:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP995:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP994]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP996:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP997:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP998:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP996]], i32 [[TMP997]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP999:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP1000:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP1001:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP999]], i32 [[TMP1000]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1002:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP1003:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP1004:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP1002]], i32 [[TMP1003]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1005:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP1006:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP1007:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP1005]], i32 [[TMP1006]] seq_cst seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1008:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1009:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1008]] monotonic, align 8
// CHECK-NEXT:    [[TMP1010:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1011:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1010]] monotonic, align 8
// CHECK-NEXT:    [[TMP1012:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1013:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1012]] monotonic, align 8
// CHECK-NEXT:    [[TMP1014:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1015:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1014]] monotonic, align 8
// CHECK-NEXT:    [[TMP1016:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1017:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1016]] monotonic, align 8
// CHECK-NEXT:    [[TMP1018:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1019:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1018]] monotonic, align 8
// CHECK-NEXT:    [[TMP1020:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1021:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1020]] monotonic, align 8
// CHECK-NEXT:    [[TMP1022:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1023:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1022]] monotonic, align 8
// CHECK-NEXT:    [[TMP1024:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1025:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1026:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1024]], i64 [[TMP1025]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1027:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1028:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1029:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1027]], i64 [[TMP1028]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1030:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1031:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1032:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1030]], i64 [[TMP1031]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1033:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1034:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1035:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1033]], i64 [[TMP1034]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1036:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1037:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1036]] monotonic, align 8
// CHECK-NEXT:    [[TMP1038:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1039:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1038]] monotonic, align 8
// CHECK-NEXT:    [[TMP1040:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1041:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1040]] monotonic, align 8
// CHECK-NEXT:    [[TMP1042:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1043:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1042]] monotonic, align 8
// CHECK-NEXT:    [[TMP1044:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1045:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1044]] monotonic, align 8
// CHECK-NEXT:    [[TMP1046:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1047:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1046]] monotonic, align 8
// CHECK-NEXT:    [[TMP1048:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1049:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1048]] monotonic, align 8
// CHECK-NEXT:    [[TMP1050:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1051:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1050]] monotonic, align 8
// CHECK-NEXT:    [[TMP1052:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1053:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1054:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1052]], i64 [[TMP1053]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1055:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1056:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1057:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1055]], i64 [[TMP1056]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1058:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1059:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1060:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1058]], i64 [[TMP1059]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1061:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1062:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1063:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1061]], i64 [[TMP1062]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1064:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1065:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1064]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1066:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1067:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1066]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1068:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1069:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1068]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1070:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1071:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1070]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1072:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1073:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1072]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1074:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1075:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1074]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1076:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1077:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1076]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1078:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1079:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1078]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1080:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1081:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1082:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1080]], i64 [[TMP1081]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1083:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1084:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1085:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1083]], i64 [[TMP1084]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1086:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1087:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1088:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1086]], i64 [[TMP1087]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1089:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1090:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1091:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1089]], i64 [[TMP1090]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1092:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1093:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1092]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1094:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1095:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1094]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1096:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1097:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1096]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1098:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1099:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1098]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1100:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1101:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1100]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1102:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1103:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1102]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1104:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1105:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1104]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1106:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1107:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1106]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1108:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1109:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1110:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1108]], i64 [[TMP1109]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1111:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1112:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1113:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1111]], i64 [[TMP1112]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1114:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1115:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1116:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1114]], i64 [[TMP1115]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1117:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1118:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1119:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1117]], i64 [[TMP1118]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1120:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1121:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1120]] acquire, align 8
// CHECK-NEXT:    [[TMP1122:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1123:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1122]] acquire, align 8
// CHECK-NEXT:    [[TMP1124:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1125:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1124]] acquire, align 8
// CHECK-NEXT:    [[TMP1126:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1127:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1126]] acquire, align 8
// CHECK-NEXT:    [[TMP1128:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1129:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1128]] acquire, align 8
// CHECK-NEXT:    [[TMP1130:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1131:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1130]] acquire, align 8
// CHECK-NEXT:    [[TMP1132:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1133:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1132]] acquire, align 8
// CHECK-NEXT:    [[TMP1134:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1135:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1134]] acquire, align 8
// CHECK-NEXT:    [[TMP1136:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1137:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1138:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1136]], i64 [[TMP1137]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1139:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1140:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1141:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1139]], i64 [[TMP1140]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1142:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1143:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1144:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1142]], i64 [[TMP1143]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1145:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1146:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1147:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1145]], i64 [[TMP1146]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1148:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1149:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1148]] acquire, align 8
// CHECK-NEXT:    [[TMP1150:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1151:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1150]] acquire, align 8
// CHECK-NEXT:    [[TMP1152:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1153:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1152]] acquire, align 8
// CHECK-NEXT:    [[TMP1154:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1155:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1154]] acquire, align 8
// CHECK-NEXT:    [[TMP1156:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1157:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1156]] acquire, align 8
// CHECK-NEXT:    [[TMP1158:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1159:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1158]] acquire, align 8
// CHECK-NEXT:    [[TMP1160:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1161:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1160]] acquire, align 8
// CHECK-NEXT:    [[TMP1162:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1163:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1162]] acquire, align 8
// CHECK-NEXT:    [[TMP1164:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1165:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1166:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1164]], i64 [[TMP1165]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1167:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1168:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1169:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1167]], i64 [[TMP1168]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1170:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1171:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1172:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1170]], i64 [[TMP1171]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1173:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1174:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1175:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1173]], i64 [[TMP1174]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1176:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1177:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1176]] monotonic, align 8
// CHECK-NEXT:    [[TMP1178:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1179:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1178]] monotonic, align 8
// CHECK-NEXT:    [[TMP1180:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1181:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1180]] monotonic, align 8
// CHECK-NEXT:    [[TMP1182:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1183:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1182]] monotonic, align 8
// CHECK-NEXT:    [[TMP1184:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1185:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1184]] monotonic, align 8
// CHECK-NEXT:    [[TMP1186:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1187:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1186]] monotonic, align 8
// CHECK-NEXT:    [[TMP1188:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1189:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1188]] monotonic, align 8
// CHECK-NEXT:    [[TMP1190:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1191:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1190]] monotonic, align 8
// CHECK-NEXT:    [[TMP1192:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1193:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1194:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1192]], i64 [[TMP1193]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1195:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1196:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1197:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1195]], i64 [[TMP1196]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1198:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1199:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1200:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1198]], i64 [[TMP1199]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1201:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1202:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1203:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1201]], i64 [[TMP1202]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1204:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1205:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1204]] monotonic, align 8
// CHECK-NEXT:    [[TMP1206:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1207:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1206]] monotonic, align 8
// CHECK-NEXT:    [[TMP1208:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1209:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1208]] monotonic, align 8
// CHECK-NEXT:    [[TMP1210:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1211:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1210]] monotonic, align 8
// CHECK-NEXT:    [[TMP1212:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1213:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1212]] monotonic, align 8
// CHECK-NEXT:    [[TMP1214:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1215:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1214]] monotonic, align 8
// CHECK-NEXT:    [[TMP1216:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1217:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1216]] monotonic, align 8
// CHECK-NEXT:    [[TMP1218:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1219:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1218]] monotonic, align 8
// CHECK-NEXT:    [[TMP1220:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1221:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1222:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1220]], i64 [[TMP1221]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1223:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1224:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1225:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1223]], i64 [[TMP1224]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1226:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1227:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1228:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1226]], i64 [[TMP1227]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1229:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1230:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1231:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1229]], i64 [[TMP1230]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1232:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1233:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1232]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1234:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1235:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1234]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1236:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1237:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1236]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1238:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1239:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1238]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1240:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1241:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1240]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1242:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1243:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1242]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1244:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1245:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1244]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1246:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1247:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1246]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1248:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1249:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1250:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1248]], i64 [[TMP1249]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1251:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1252:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1253:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1251]], i64 [[TMP1252]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1254:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1255:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1256:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1254]], i64 [[TMP1255]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1257:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1258:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1259:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1257]], i64 [[TMP1258]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1260:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1261:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1260]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1262:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1263:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1262]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1264:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1265:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1264]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1266:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1267:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1266]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1268:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1269:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1268]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1270:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1271:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1270]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1272:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1273:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1272]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1274:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1275:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1274]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1276:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1277:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1278:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1276]], i64 [[TMP1277]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1279:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1280:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1281:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1279]], i64 [[TMP1280]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1282:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1283:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1284:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1282]], i64 [[TMP1283]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1285:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1286:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1287:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1285]], i64 [[TMP1286]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1288:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1289:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1288]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1290:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1291:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1290]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1292:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1293:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1292]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1294:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1295:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1294]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1296:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1297:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1296]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1298:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1299:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1298]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1300:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1301:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP1300]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1302:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1303:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP1302]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1304:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1305:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1306:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1304]], i64 [[TMP1305]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1307:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1308:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1309:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1307]], i64 [[TMP1308]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1310:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1311:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1312:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1310]], i64 [[TMP1311]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1313:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1314:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP1315:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP1313]], i64 [[TMP1314]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1316:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1317:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1316]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1318:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1319:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1318]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1320:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1321:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1320]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1322:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1323:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1322]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1324:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1325:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1324]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1326:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1327:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1326]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1328:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1329:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP1328]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1330:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1331:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP1330]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1332:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1333:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1334:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1332]], i64 [[TMP1333]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1335:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1336:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1337:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1335]], i64 [[TMP1336]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1338:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1339:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1340:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1338]], i64 [[TMP1339]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1341:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1342:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP1343:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP1341]], i64 [[TMP1342]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1344:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1345:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1344]] monotonic, align 8
// CHECK-NEXT:    [[TMP1346:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1347:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1346]] monotonic, align 8
// CHECK-NEXT:    [[TMP1348:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1349:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1348]] monotonic, align 8
// CHECK-NEXT:    [[TMP1350:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1351:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1350]] monotonic, align 8
// CHECK-NEXT:    [[TMP1352:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1353:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1352]] monotonic, align 8
// CHECK-NEXT:    [[TMP1354:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1355:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1354]] monotonic, align 8
// CHECK-NEXT:    [[TMP1356:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1357:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1356]] monotonic, align 8
// CHECK-NEXT:    [[TMP1358:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1359:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1358]] monotonic, align 8
// CHECK-NEXT:    [[TMP1360:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1361:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1362:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1360]], i64 [[TMP1361]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1363:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1364:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1365:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1363]], i64 [[TMP1364]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1366:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1367:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1368:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1366]], i64 [[TMP1367]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1369:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1370:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1371:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1369]], i64 [[TMP1370]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1372:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1373:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1372]] monotonic, align 8
// CHECK-NEXT:    [[TMP1374:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1375:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1374]] monotonic, align 8
// CHECK-NEXT:    [[TMP1376:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1377:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1376]] monotonic, align 8
// CHECK-NEXT:    [[TMP1378:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1379:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1378]] monotonic, align 8
// CHECK-NEXT:    [[TMP1380:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1381:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1380]] monotonic, align 8
// CHECK-NEXT:    [[TMP1382:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1383:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1382]] monotonic, align 8
// CHECK-NEXT:    [[TMP1384:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1385:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1384]] monotonic, align 8
// CHECK-NEXT:    [[TMP1386:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1387:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1386]] monotonic, align 8
// CHECK-NEXT:    [[TMP1388:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1389:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1390:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1388]], i64 [[TMP1389]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1391:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1392:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1393:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1391]], i64 [[TMP1392]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1394:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1395:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1396:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1394]], i64 [[TMP1395]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1397:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1398:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1399:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1397]], i64 [[TMP1398]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1400:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1401:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1400]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1402:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1403:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1402]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1404:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1405:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1404]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1406:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1407:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1406]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1408:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1409:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1408]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1410:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1411:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1410]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1412:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1413:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1412]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1414:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1415:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1414]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1416:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1417:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1418:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1416]], i64 [[TMP1417]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1419:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1420:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1421:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1419]], i64 [[TMP1420]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1422:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1423:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1424:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1422]], i64 [[TMP1423]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1425:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1426:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1427:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1425]], i64 [[TMP1426]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1428:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1429:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1428]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1430:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1431:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1430]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1432:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1433:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1432]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1434:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1435:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1434]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1436:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1437:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1436]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1438:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1439:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1438]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1440:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1441:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1440]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1442:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1443:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1442]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1444:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1445:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1446:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1444]], i64 [[TMP1445]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1447:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1448:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1449:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1447]], i64 [[TMP1448]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1450:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1451:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1452:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1450]], i64 [[TMP1451]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1453:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1454:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1455:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1453]], i64 [[TMP1454]] acq_rel acquire, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1456:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1457:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1456]] acquire, align 8
// CHECK-NEXT:    [[TMP1458:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1459:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1458]] acquire, align 8
// CHECK-NEXT:    [[TMP1460:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1461:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1460]] acquire, align 8
// CHECK-NEXT:    [[TMP1462:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1463:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1462]] acquire, align 8
// CHECK-NEXT:    [[TMP1464:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1465:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1464]] acquire, align 8
// CHECK-NEXT:    [[TMP1466:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1467:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1466]] acquire, align 8
// CHECK-NEXT:    [[TMP1468:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1469:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1468]] acquire, align 8
// CHECK-NEXT:    [[TMP1470:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1471:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1470]] acquire, align 8
// CHECK-NEXT:    [[TMP1472:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1473:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1474:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1472]], i64 [[TMP1473]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1475:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1476:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1477:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1475]], i64 [[TMP1476]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1478:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1479:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1480:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1478]], i64 [[TMP1479]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1481:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1482:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1483:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1481]], i64 [[TMP1482]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1484:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1485:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1484]] acquire, align 8
// CHECK-NEXT:    [[TMP1486:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1487:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1486]] acquire, align 8
// CHECK-NEXT:    [[TMP1488:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1489:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1488]] acquire, align 8
// CHECK-NEXT:    [[TMP1490:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1491:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1490]] acquire, align 8
// CHECK-NEXT:    [[TMP1492:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1493:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1492]] acquire, align 8
// CHECK-NEXT:    [[TMP1494:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1495:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1494]] acquire, align 8
// CHECK-NEXT:    [[TMP1496:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1497:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1496]] acquire, align 8
// CHECK-NEXT:    [[TMP1498:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1499:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1498]] acquire, align 8
// CHECK-NEXT:    [[TMP1500:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1501:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1502:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1500]], i64 [[TMP1501]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1503:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1504:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1505:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1503]], i64 [[TMP1504]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1506:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1507:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1508:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1506]], i64 [[TMP1507]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1509:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1510:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1511:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1509]], i64 [[TMP1510]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP1512:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1513:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1512]] monotonic, align 8
// CHECK-NEXT:    [[TMP1514:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1515:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1514]] monotonic, align 8
// CHECK-NEXT:    [[TMP1516:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1517:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1516]] monotonic, align 8
// CHECK-NEXT:    [[TMP1518:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1519:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1518]] monotonic, align 8
// CHECK-NEXT:    [[TMP1520:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1521:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1520]] monotonic, align 8
// CHECK-NEXT:    [[TMP1522:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1523:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1522]] monotonic, align 8
// CHECK-NEXT:    [[TMP1524:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1525:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1524]] monotonic, align 8
// CHECK-NEXT:    [[TMP1526:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1527:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1526]] monotonic, align 8
// CHECK-NEXT:    [[TMP1528:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1529:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1530:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1528]], i64 [[TMP1529]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1531:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1532:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1533:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1531]], i64 [[TMP1532]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1534:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1535:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1536:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1534]], i64 [[TMP1535]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1537:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1538:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1539:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1537]], i64 [[TMP1538]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1540:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1541:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1540]] monotonic, align 8
// CHECK-NEXT:    [[TMP1542:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1543:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1542]] monotonic, align 8
// CHECK-NEXT:    [[TMP1544:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1545:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1544]] monotonic, align 8
// CHECK-NEXT:    [[TMP1546:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1547:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1546]] monotonic, align 8
// CHECK-NEXT:    [[TMP1548:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1549:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1548]] monotonic, align 8
// CHECK-NEXT:    [[TMP1550:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1551:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1550]] monotonic, align 8
// CHECK-NEXT:    [[TMP1552:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1553:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1552]] monotonic, align 8
// CHECK-NEXT:    [[TMP1554:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1555:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1554]] monotonic, align 8
// CHECK-NEXT:    [[TMP1556:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1557:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1558:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1556]], i64 [[TMP1557]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1559:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1560:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1561:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1559]], i64 [[TMP1560]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1562:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1563:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1564:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1562]], i64 [[TMP1563]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1565:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1566:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1567:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1565]], i64 [[TMP1566]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP1568:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1569:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1568]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1570:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1571:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1570]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1572:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1573:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1572]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1574:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1575:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1574]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1576:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1577:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1576]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1578:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1579:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1578]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1580:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1581:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1580]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1582:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1583:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1582]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1584:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1585:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1586:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1584]], i64 [[TMP1585]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1587:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1588:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1589:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1587]], i64 [[TMP1588]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1590:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1591:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1592:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1590]], i64 [[TMP1591]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1593:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1594:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1595:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1593]], i64 [[TMP1594]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1596:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1597:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1596]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1598:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1599:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1598]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1600:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1601:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1600]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1602:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1603:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1602]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1604:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1605:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1604]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1606:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1607:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1606]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1608:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1609:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1608]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1610:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1611:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1610]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1612:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1613:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1614:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1612]], i64 [[TMP1613]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1615:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1616:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1617:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1615]], i64 [[TMP1616]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1618:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1619:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1620:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1618]], i64 [[TMP1619]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1621:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1622:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1623:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1621]], i64 [[TMP1622]] release monotonic, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1624:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1625:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1624]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1626:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1627:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1626]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1628:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1629:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1628]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1630:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1631:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1630]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1632:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1633:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1632]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1634:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1635:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1634]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1636:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1637:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP1636]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1638:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1639:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP1638]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1640:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1641:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1642:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1640]], i64 [[TMP1641]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1643:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1644:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1645:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1643]], i64 [[TMP1644]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1646:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1647:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1648:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1646]], i64 [[TMP1647]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1649:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1650:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP1651:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP1649]], i64 [[TMP1650]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1652:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1653:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1652]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1654:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1655:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1654]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1656:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1657:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1656]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1658:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1659:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1658]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1660:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1661:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1660]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1662:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1663:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1662]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1664:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1665:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP1664]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1666:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1667:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP1666]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1668:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1669:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1670:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1668]], i64 [[TMP1669]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1671:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1672:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1673:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1671]], i64 [[TMP1672]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1674:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1675:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1676:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1674]], i64 [[TMP1675]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1677:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1678:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP1679:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP1677]], i64 [[TMP1678]] seq_cst seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1680:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1681:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1680]] monotonic, align 4
// CHECK-NEXT:    [[TMP1682:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1683:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1682]] monotonic, align 4
// CHECK-NEXT:    [[TMP1684:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1685:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1684]] monotonic, align 4
// CHECK-NEXT:    [[TMP1686:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1687:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1686]] monotonic, align 4
// CHECK-NEXT:    [[TMP1688:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1689:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1688]] monotonic, align 4
// CHECK-NEXT:    [[TMP1690:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1691:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1690]] monotonic, align 4
// CHECK-NEXT:    [[TMP1692:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1693:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1692]] monotonic, align 4
// CHECK-NEXT:    [[TMP1694:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1695:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1694]] monotonic, align 4
// CHECK-NEXT:    [[TMP1696:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1697:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1696]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1698:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1699:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1698]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1700:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1701:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1700]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1702:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1703:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1702]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1704:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1705:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1704]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1706:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1707:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1706]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1708:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1709:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1708]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1710:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1711:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1710]] acq_rel, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1712:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1713:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1712]] acquire, align 4
// CHECK-NEXT:    [[TMP1714:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1715:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1714]] acquire, align 4
// CHECK-NEXT:    [[TMP1716:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1717:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1716]] acquire, align 4
// CHECK-NEXT:    [[TMP1718:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1719:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1718]] acquire, align 4
// CHECK-NEXT:    [[TMP1720:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1721:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1720]] acquire, align 4
// CHECK-NEXT:    [[TMP1722:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1723:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1722]] acquire, align 4
// CHECK-NEXT:    [[TMP1724:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1725:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1724]] acquire, align 4
// CHECK-NEXT:    [[TMP1726:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1727:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1726]] acquire, align 4
// CHECK-NEXT:    [[TMP1728:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1729:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1728]] monotonic, align 4
// CHECK-NEXT:    [[TMP1730:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1731:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1730]] monotonic, align 4
// CHECK-NEXT:    [[TMP1732:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1733:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1732]] monotonic, align 4
// CHECK-NEXT:    [[TMP1734:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1735:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1734]] monotonic, align 4
// CHECK-NEXT:    [[TMP1736:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1737:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1736]] monotonic, align 4
// CHECK-NEXT:    [[TMP1738:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1739:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1738]] monotonic, align 4
// CHECK-NEXT:    [[TMP1740:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1741:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1740]] monotonic, align 4
// CHECK-NEXT:    [[TMP1742:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1743:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1742]] monotonic, align 4
// CHECK-NEXT:    [[TMP1744:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1745:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1744]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1746:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1747:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1746]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1748:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1749:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1748]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1750:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1751:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1750]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1752:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1753:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1752]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1754:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1755:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1754]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1756:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1757:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1756]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1758:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1759:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1758]] release, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1760:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1761:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1760]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1762:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1763:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1762]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1764:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1765:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1764]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1766:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1767:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1766]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1768:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1769:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1768]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1770:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1771:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1770]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1772:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1773:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP1772]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1774:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1775:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP1774]] seq_cst, align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1776:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1777:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1776]] monotonic, align 8
// CHECK-NEXT:    [[TMP1778:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1779:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1778]] monotonic, align 8
// CHECK-NEXT:    [[TMP1780:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1781:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1780]] monotonic, align 8
// CHECK-NEXT:    [[TMP1782:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1783:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1782]] monotonic, align 8
// CHECK-NEXT:    [[TMP1784:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1785:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1784]] monotonic, align 8
// CHECK-NEXT:    [[TMP1786:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1787:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1786]] monotonic, align 8
// CHECK-NEXT:    [[TMP1788:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1789:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1788]] monotonic, align 8
// CHECK-NEXT:    [[TMP1790:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1791:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1790]] monotonic, align 8
// CHECK-NEXT:    [[TMP1792:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1793:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1792]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1794:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1795:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1794]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1796:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1797:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1796]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1798:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1799:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1798]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1800:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1801:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1800]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1802:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1803:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1802]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1804:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1805:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1804]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1806:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1807:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1806]] acq_rel, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1808:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1809:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1808]] acquire, align 8
// CHECK-NEXT:    [[TMP1810:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1811:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1810]] acquire, align 8
// CHECK-NEXT:    [[TMP1812:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1813:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1812]] acquire, align 8
// CHECK-NEXT:    [[TMP1814:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1815:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1814]] acquire, align 8
// CHECK-NEXT:    [[TMP1816:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1817:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1816]] acquire, align 8
// CHECK-NEXT:    [[TMP1818:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1819:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1818]] acquire, align 8
// CHECK-NEXT:    [[TMP1820:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1821:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1820]] acquire, align 8
// CHECK-NEXT:    [[TMP1822:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1823:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1822]] acquire, align 8
// CHECK-NEXT:    [[TMP1824:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1825:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1824]] monotonic, align 8
// CHECK-NEXT:    [[TMP1826:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1827:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1826]] monotonic, align 8
// CHECK-NEXT:    [[TMP1828:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1829:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1828]] monotonic, align 8
// CHECK-NEXT:    [[TMP1830:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1831:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1830]] monotonic, align 8
// CHECK-NEXT:    [[TMP1832:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1833:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1832]] monotonic, align 8
// CHECK-NEXT:    [[TMP1834:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1835:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1834]] monotonic, align 8
// CHECK-NEXT:    [[TMP1836:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1837:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1836]] monotonic, align 8
// CHECK-NEXT:    [[TMP1838:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1839:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1838]] monotonic, align 8
// CHECK-NEXT:    [[TMP1840:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1841:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1840]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1842:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1843:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1842]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1844:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1845:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1844]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1846:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1847:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1846]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1848:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1849:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1848]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1850:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1851:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1850]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1852:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1853:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1852]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1854:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1855:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1854]] release, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1856:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1857:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1856]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1858:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1859:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1858]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1860:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1861:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1860]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1862:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1863:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1862]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1864:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1865:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1864]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1866:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1867:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1866]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1868:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1869:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP1868]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1870:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1871:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP1870]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @bar(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CX:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[CV:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[CR:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[CE:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[CD:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCX:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCV:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCR:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCE:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCD:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[SX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SV:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SR:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USV:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USR:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[IX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IV:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIV:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[LX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[FX:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FV:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FE:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FD:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[DX:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DV:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DE:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DD:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP0]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP1]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP2:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP2]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP3]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP4:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP5:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP4]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP5]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP7:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP6]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP7]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP8:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP9:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP10:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP8]], b8 [[TMP9]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP11:%.*]] = extractvalue { b8, i1 } [[TMP10]], 0
// CHECK-NEXT:    store b8 [[TMP11]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP12:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP13:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP14:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP12]], b8 [[TMP13]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP15:%.*]] = extractvalue { b8, i1 } [[TMP14]], 0
// CHECK-NEXT:    store b8 [[TMP15]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP16:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP17:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP16]] monotonic, align 1
// CHECK-NEXT:    [[TMP18:%.*]] = bytecast b8 [[TMP17]] to i8
// CHECK-NEXT:    [[TMP19:%.*]] = bytecast b8 [[TMP16]] to i8
// CHECK-NEXT:    [[TMP20:%.*]] = icmp sgt i8 [[TMP18]], [[TMP19]]
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i8 [[TMP19]], i8 [[TMP18]]
// CHECK-NEXT:    store i8 [[TMP21]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP22:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP22]] monotonic, align 1
// CHECK-NEXT:    [[TMP24:%.*]] = bytecast b8 [[TMP23]] to i8
// CHECK-NEXT:    [[TMP25:%.*]] = bytecast b8 [[TMP22]] to i8
// CHECK-NEXT:    [[TMP26:%.*]] = icmp slt i8 [[TMP24]], [[TMP25]]
// CHECK-NEXT:    [[TMP27:%.*]] = select i1 [[TMP26]], i8 [[TMP25]], i8 [[TMP24]]
// CHECK-NEXT:    store i8 [[TMP27]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP28:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP28]] monotonic, align 1
// CHECK-NEXT:    [[TMP30:%.*]] = bytecast b8 [[TMP29]] to i8
// CHECK-NEXT:    [[TMP31:%.*]] = bytecast b8 [[TMP28]] to i8
// CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i8 [[TMP30]], [[TMP31]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i8 [[TMP31]], i8 [[TMP30]]
// CHECK-NEXT:    store i8 [[TMP33]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP34:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP34]] monotonic, align 1
// CHECK-NEXT:    [[TMP36:%.*]] = bytecast b8 [[TMP35]] to i8
// CHECK-NEXT:    [[TMP37:%.*]] = bytecast b8 [[TMP34]] to i8
// CHECK-NEXT:    [[TMP38:%.*]] = icmp sgt i8 [[TMP36]], [[TMP37]]
// CHECK-NEXT:    [[TMP39:%.*]] = select i1 [[TMP38]], i8 [[TMP37]], i8 [[TMP36]]
// CHECK-NEXT:    store i8 [[TMP39]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP40:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP41:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP42:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP40]], b8 [[TMP41]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP43:%.*]] = extractvalue { b8, i1 } [[TMP42]], 0
// CHECK-NEXT:    [[TMP44:%.*]] = extractvalue { b8, i1 } [[TMP42]], 1
// CHECK-NEXT:    [[TMP45:%.*]] = select i1 [[TMP44]], b8 [[TMP40]], b8 [[TMP43]]
// CHECK-NEXT:    store b8 [[TMP45]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP46:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP47:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP48:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP46]], b8 [[TMP47]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP49:%.*]] = extractvalue { b8, i1 } [[TMP48]], 0
// CHECK-NEXT:    [[TMP50:%.*]] = extractvalue { b8, i1 } [[TMP48]], 1
// CHECK-NEXT:    [[TMP51:%.*]] = select i1 [[TMP50]], b8 [[TMP46]], b8 [[TMP49]]
// CHECK-NEXT:    store b8 [[TMP51]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP52:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP53:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP54:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP52]], b8 [[TMP53]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP55:%.*]] = extractvalue { b8, i1 } [[TMP54]], 0
// CHECK-NEXT:    [[TMP56:%.*]] = extractvalue { b8, i1 } [[TMP54]], 1
// CHECK-NEXT:    br i1 [[TMP56]], label [[CX_ATOMIC_EXIT:%.*]], label [[CX_ATOMIC_CONT:%.*]]
// CHECK:       cx.atomic.cont:
// CHECK-NEXT:    store b8 [[TMP55]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT]]
// CHECK:       cx.atomic.exit:
// CHECK-NEXT:    [[TMP57:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP58:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP59:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP57]], b8 [[TMP58]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP60:%.*]] = extractvalue { b8, i1 } [[TMP59]], 0
// CHECK-NEXT:    [[TMP61:%.*]] = extractvalue { b8, i1 } [[TMP59]], 1
// CHECK-NEXT:    br i1 [[TMP61]], label [[CX_ATOMIC_EXIT1:%.*]], label [[CX_ATOMIC_CONT2:%.*]]
// CHECK:       cx.atomic.cont2:
// CHECK-NEXT:    store b8 [[TMP60]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT1]]
// CHECK:       cx.atomic.exit1:
// CHECK-NEXT:    [[TMP62:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP63:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP64:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP62]], b8 [[TMP63]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP65:%.*]] = extractvalue { b8, i1 } [[TMP64]], 1
// CHECK-NEXT:    [[TMP66:%.*]] = sext i1 [[TMP65]] to i8
// CHECK-NEXT:    [[TMP67:%.*]] = bitcast i8 [[TMP66]] to b8
// CHECK-NEXT:    store b8 [[TMP67]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP68:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP69:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP70:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP68]], b8 [[TMP69]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP71:%.*]] = extractvalue { b8, i1 } [[TMP70]], 1
// CHECK-NEXT:    [[TMP72:%.*]] = sext i1 [[TMP71]] to i8
// CHECK-NEXT:    [[TMP73:%.*]] = bitcast i8 [[TMP72]] to b8
// CHECK-NEXT:    store b8 [[TMP73]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP74:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP75:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP76:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP74]], b8 [[TMP75]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP77:%.*]] = extractvalue { b8, i1 } [[TMP76]], 0
// CHECK-NEXT:    [[TMP78:%.*]] = extractvalue { b8, i1 } [[TMP76]], 1
// CHECK-NEXT:    br i1 [[TMP78]], label [[CX_ATOMIC_EXIT3:%.*]], label [[CX_ATOMIC_CONT4:%.*]]
// CHECK:       cx.atomic.cont4:
// CHECK-NEXT:    store b8 [[TMP77]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT3]]
// CHECK:       cx.atomic.exit3:
// CHECK-NEXT:    [[TMP79:%.*]] = extractvalue { b8, i1 } [[TMP76]], 1
// CHECK-NEXT:    [[TMP80:%.*]] = sext i1 [[TMP79]] to i8
// CHECK-NEXT:    [[TMP81:%.*]] = bitcast i8 [[TMP80]] to b8
// CHECK-NEXT:    store b8 [[TMP81]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP82:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP83:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP82]], b8 [[TMP83]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { b8, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { b8, i1 } [[TMP84]], 1
// CHECK-NEXT:    br i1 [[TMP86]], label [[CX_ATOMIC_EXIT5:%.*]], label [[CX_ATOMIC_CONT6:%.*]]
// CHECK:       cx.atomic.cont6:
// CHECK-NEXT:    store b8 [[TMP85]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT5]]
// CHECK:       cx.atomic.exit5:
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { b8, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP88:%.*]] = sext i1 [[TMP87]] to i8
// CHECK-NEXT:    [[TMP89:%.*]] = bitcast i8 [[TMP88]] to b8
// CHECK-NEXT:    store b8 [[TMP89]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP90:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP90]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP91]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP93:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP92]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP93]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP94:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP95:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP94]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP95]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP96]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP97]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP98:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP99:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP100:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP98]], b8 [[TMP99]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP101:%.*]] = extractvalue { b8, i1 } [[TMP100]], 0
// CHECK-NEXT:    store b8 [[TMP101]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP102:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP103:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP104:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP102]], b8 [[TMP103]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP105:%.*]] = extractvalue { b8, i1 } [[TMP104]], 0
// CHECK-NEXT:    store b8 [[TMP105]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP106:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP107:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP106]] acq_rel, align 1
// CHECK-NEXT:    [[TMP108:%.*]] = bytecast b8 [[TMP107]] to i8
// CHECK-NEXT:    [[TMP109:%.*]] = bytecast b8 [[TMP106]] to i8
// CHECK-NEXT:    [[TMP110:%.*]] = icmp sgt i8 [[TMP108]], [[TMP109]]
// CHECK-NEXT:    [[TMP111:%.*]] = select i1 [[TMP110]], i8 [[TMP109]], i8 [[TMP108]]
// CHECK-NEXT:    store i8 [[TMP111]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP112]] acq_rel, align 1
// CHECK-NEXT:    [[TMP114:%.*]] = bytecast b8 [[TMP113]] to i8
// CHECK-NEXT:    [[TMP115:%.*]] = bytecast b8 [[TMP112]] to i8
// CHECK-NEXT:    [[TMP116:%.*]] = icmp slt i8 [[TMP114]], [[TMP115]]
// CHECK-NEXT:    [[TMP117:%.*]] = select i1 [[TMP116]], i8 [[TMP115]], i8 [[TMP114]]
// CHECK-NEXT:    store i8 [[TMP117]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP118]] acq_rel, align 1
// CHECK-NEXT:    [[TMP120:%.*]] = bytecast b8 [[TMP119]] to i8
// CHECK-NEXT:    [[TMP121:%.*]] = bytecast b8 [[TMP118]] to i8
// CHECK-NEXT:    [[TMP122:%.*]] = icmp slt i8 [[TMP120]], [[TMP121]]
// CHECK-NEXT:    [[TMP123:%.*]] = select i1 [[TMP122]], i8 [[TMP121]], i8 [[TMP120]]
// CHECK-NEXT:    store i8 [[TMP123]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP124:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP125:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP124]] acq_rel, align 1
// CHECK-NEXT:    [[TMP126:%.*]] = bytecast b8 [[TMP125]] to i8
// CHECK-NEXT:    [[TMP127:%.*]] = bytecast b8 [[TMP124]] to i8
// CHECK-NEXT:    [[TMP128:%.*]] = icmp sgt i8 [[TMP126]], [[TMP127]]
// CHECK-NEXT:    [[TMP129:%.*]] = select i1 [[TMP128]], i8 [[TMP127]], i8 [[TMP126]]
// CHECK-NEXT:    store i8 [[TMP129]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP130:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP131:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP132:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP130]], b8 [[TMP131]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP133:%.*]] = extractvalue { b8, i1 } [[TMP132]], 0
// CHECK-NEXT:    [[TMP134:%.*]] = extractvalue { b8, i1 } [[TMP132]], 1
// CHECK-NEXT:    [[TMP135:%.*]] = select i1 [[TMP134]], b8 [[TMP130]], b8 [[TMP133]]
// CHECK-NEXT:    store b8 [[TMP135]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP136:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP137:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP138:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP136]], b8 [[TMP137]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP139:%.*]] = extractvalue { b8, i1 } [[TMP138]], 0
// CHECK-NEXT:    [[TMP140:%.*]] = extractvalue { b8, i1 } [[TMP138]], 1
// CHECK-NEXT:    [[TMP141:%.*]] = select i1 [[TMP140]], b8 [[TMP136]], b8 [[TMP139]]
// CHECK-NEXT:    store b8 [[TMP141]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP142:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP143:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP144:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP142]], b8 [[TMP143]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP145:%.*]] = extractvalue { b8, i1 } [[TMP144]], 0
// CHECK-NEXT:    [[TMP146:%.*]] = extractvalue { b8, i1 } [[TMP144]], 1
// CHECK-NEXT:    br i1 [[TMP146]], label [[CX_ATOMIC_EXIT7:%.*]], label [[CX_ATOMIC_CONT8:%.*]]
// CHECK:       cx.atomic.cont8:
// CHECK-NEXT:    store b8 [[TMP145]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT7]]
// CHECK:       cx.atomic.exit7:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP147:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP148:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP149:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP147]], b8 [[TMP148]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP150:%.*]] = extractvalue { b8, i1 } [[TMP149]], 0
// CHECK-NEXT:    [[TMP151:%.*]] = extractvalue { b8, i1 } [[TMP149]], 1
// CHECK-NEXT:    br i1 [[TMP151]], label [[CX_ATOMIC_EXIT9:%.*]], label [[CX_ATOMIC_CONT10:%.*]]
// CHECK:       cx.atomic.cont10:
// CHECK-NEXT:    store b8 [[TMP150]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT9]]
// CHECK:       cx.atomic.exit9:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP152:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP153:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP154:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP152]], b8 [[TMP153]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP155:%.*]] = extractvalue { b8, i1 } [[TMP154]], 1
// CHECK-NEXT:    [[TMP156:%.*]] = sext i1 [[TMP155]] to i8
// CHECK-NEXT:    [[TMP157:%.*]] = bitcast i8 [[TMP156]] to b8
// CHECK-NEXT:    store b8 [[TMP157]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP158:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP159:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP160:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP158]], b8 [[TMP159]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP161:%.*]] = extractvalue { b8, i1 } [[TMP160]], 1
// CHECK-NEXT:    [[TMP162:%.*]] = sext i1 [[TMP161]] to i8
// CHECK-NEXT:    [[TMP163:%.*]] = bitcast i8 [[TMP162]] to b8
// CHECK-NEXT:    store b8 [[TMP163]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP164:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP165:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP166:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP164]], b8 [[TMP165]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP167:%.*]] = extractvalue { b8, i1 } [[TMP166]], 0
// CHECK-NEXT:    [[TMP168:%.*]] = extractvalue { b8, i1 } [[TMP166]], 1
// CHECK-NEXT:    br i1 [[TMP168]], label [[CX_ATOMIC_EXIT11:%.*]], label [[CX_ATOMIC_CONT12:%.*]]
// CHECK:       cx.atomic.cont12:
// CHECK-NEXT:    store b8 [[TMP167]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT11]]
// CHECK:       cx.atomic.exit11:
// CHECK-NEXT:    [[TMP169:%.*]] = extractvalue { b8, i1 } [[TMP166]], 1
// CHECK-NEXT:    [[TMP170:%.*]] = sext i1 [[TMP169]] to i8
// CHECK-NEXT:    [[TMP171:%.*]] = bitcast i8 [[TMP170]] to b8
// CHECK-NEXT:    store b8 [[TMP171]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP172:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP173:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP174:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP172]], b8 [[TMP173]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP175:%.*]] = extractvalue { b8, i1 } [[TMP174]], 0
// CHECK-NEXT:    [[TMP176:%.*]] = extractvalue { b8, i1 } [[TMP174]], 1
// CHECK-NEXT:    br i1 [[TMP176]], label [[CX_ATOMIC_EXIT13:%.*]], label [[CX_ATOMIC_CONT14:%.*]]
// CHECK:       cx.atomic.cont14:
// CHECK-NEXT:    store b8 [[TMP175]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT13]]
// CHECK:       cx.atomic.exit13:
// CHECK-NEXT:    [[TMP177:%.*]] = extractvalue { b8, i1 } [[TMP174]], 1
// CHECK-NEXT:    [[TMP178:%.*]] = sext i1 [[TMP177]] to i8
// CHECK-NEXT:    [[TMP179:%.*]] = bitcast i8 [[TMP178]] to b8
// CHECK-NEXT:    store b8 [[TMP179]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP180:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP181:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP180]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP181]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP182:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP183:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP182]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP183]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP184:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP185:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP184]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP185]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP186:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP187:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP186]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP187]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP188:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP189:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP190:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP188]], b8 [[TMP189]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP191:%.*]] = extractvalue { b8, i1 } [[TMP190]], 0
// CHECK-NEXT:    store b8 [[TMP191]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP192:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP193:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP194:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP192]], b8 [[TMP193]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP195:%.*]] = extractvalue { b8, i1 } [[TMP194]], 0
// CHECK-NEXT:    store b8 [[TMP195]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP196:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP197:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP196]] acquire, align 1
// CHECK-NEXT:    [[TMP198:%.*]] = bytecast b8 [[TMP197]] to i8
// CHECK-NEXT:    [[TMP199:%.*]] = bytecast b8 [[TMP196]] to i8
// CHECK-NEXT:    [[TMP200:%.*]] = icmp sgt i8 [[TMP198]], [[TMP199]]
// CHECK-NEXT:    [[TMP201:%.*]] = select i1 [[TMP200]], i8 [[TMP199]], i8 [[TMP198]]
// CHECK-NEXT:    store i8 [[TMP201]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP202:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP203:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP202]] acquire, align 1
// CHECK-NEXT:    [[TMP204:%.*]] = bytecast b8 [[TMP203]] to i8
// CHECK-NEXT:    [[TMP205:%.*]] = bytecast b8 [[TMP202]] to i8
// CHECK-NEXT:    [[TMP206:%.*]] = icmp slt i8 [[TMP204]], [[TMP205]]
// CHECK-NEXT:    [[TMP207:%.*]] = select i1 [[TMP206]], i8 [[TMP205]], i8 [[TMP204]]
// CHECK-NEXT:    store i8 [[TMP207]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP208:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP209:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP208]] acquire, align 1
// CHECK-NEXT:    [[TMP210:%.*]] = bytecast b8 [[TMP209]] to i8
// CHECK-NEXT:    [[TMP211:%.*]] = bytecast b8 [[TMP208]] to i8
// CHECK-NEXT:    [[TMP212:%.*]] = icmp slt i8 [[TMP210]], [[TMP211]]
// CHECK-NEXT:    [[TMP213:%.*]] = select i1 [[TMP212]], i8 [[TMP211]], i8 [[TMP210]]
// CHECK-NEXT:    store i8 [[TMP213]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP214:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP215:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP214]] acquire, align 1
// CHECK-NEXT:    [[TMP216:%.*]] = bytecast b8 [[TMP215]] to i8
// CHECK-NEXT:    [[TMP217:%.*]] = bytecast b8 [[TMP214]] to i8
// CHECK-NEXT:    [[TMP218:%.*]] = icmp sgt i8 [[TMP216]], [[TMP217]]
// CHECK-NEXT:    [[TMP219:%.*]] = select i1 [[TMP218]], i8 [[TMP217]], i8 [[TMP216]]
// CHECK-NEXT:    store i8 [[TMP219]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP220:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP221:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP222:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP220]], b8 [[TMP221]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP223:%.*]] = extractvalue { b8, i1 } [[TMP222]], 0
// CHECK-NEXT:    [[TMP224:%.*]] = extractvalue { b8, i1 } [[TMP222]], 1
// CHECK-NEXT:    [[TMP225:%.*]] = select i1 [[TMP224]], b8 [[TMP220]], b8 [[TMP223]]
// CHECK-NEXT:    store b8 [[TMP225]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP226:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP227:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP228:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP226]], b8 [[TMP227]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP229:%.*]] = extractvalue { b8, i1 } [[TMP228]], 0
// CHECK-NEXT:    [[TMP230:%.*]] = extractvalue { b8, i1 } [[TMP228]], 1
// CHECK-NEXT:    [[TMP231:%.*]] = select i1 [[TMP230]], b8 [[TMP226]], b8 [[TMP229]]
// CHECK-NEXT:    store b8 [[TMP231]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP232:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP233:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP234:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP232]], b8 [[TMP233]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP235:%.*]] = extractvalue { b8, i1 } [[TMP234]], 0
// CHECK-NEXT:    [[TMP236:%.*]] = extractvalue { b8, i1 } [[TMP234]], 1
// CHECK-NEXT:    br i1 [[TMP236]], label [[CX_ATOMIC_EXIT15:%.*]], label [[CX_ATOMIC_CONT16:%.*]]
// CHECK:       cx.atomic.cont16:
// CHECK-NEXT:    store b8 [[TMP235]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT15]]
// CHECK:       cx.atomic.exit15:
// CHECK-NEXT:    [[TMP237:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP238:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP239:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP237]], b8 [[TMP238]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP240:%.*]] = extractvalue { b8, i1 } [[TMP239]], 0
// CHECK-NEXT:    [[TMP241:%.*]] = extractvalue { b8, i1 } [[TMP239]], 1
// CHECK-NEXT:    br i1 [[TMP241]], label [[CX_ATOMIC_EXIT17:%.*]], label [[CX_ATOMIC_CONT18:%.*]]
// CHECK:       cx.atomic.cont18:
// CHECK-NEXT:    store b8 [[TMP240]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT17]]
// CHECK:       cx.atomic.exit17:
// CHECK-NEXT:    [[TMP242:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP243:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP244:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP242]], b8 [[TMP243]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP245:%.*]] = extractvalue { b8, i1 } [[TMP244]], 1
// CHECK-NEXT:    [[TMP246:%.*]] = sext i1 [[TMP245]] to i8
// CHECK-NEXT:    [[TMP247:%.*]] = bitcast i8 [[TMP246]] to b8
// CHECK-NEXT:    store b8 [[TMP247]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP248:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP249:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP250:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP248]], b8 [[TMP249]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP251:%.*]] = extractvalue { b8, i1 } [[TMP250]], 1
// CHECK-NEXT:    [[TMP252:%.*]] = sext i1 [[TMP251]] to i8
// CHECK-NEXT:    [[TMP253:%.*]] = bitcast i8 [[TMP252]] to b8
// CHECK-NEXT:    store b8 [[TMP253]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP254:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP255:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP256:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP254]], b8 [[TMP255]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP257:%.*]] = extractvalue { b8, i1 } [[TMP256]], 0
// CHECK-NEXT:    [[TMP258:%.*]] = extractvalue { b8, i1 } [[TMP256]], 1
// CHECK-NEXT:    br i1 [[TMP258]], label [[CX_ATOMIC_EXIT19:%.*]], label [[CX_ATOMIC_CONT20:%.*]]
// CHECK:       cx.atomic.cont20:
// CHECK-NEXT:    store b8 [[TMP257]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT19]]
// CHECK:       cx.atomic.exit19:
// CHECK-NEXT:    [[TMP259:%.*]] = extractvalue { b8, i1 } [[TMP256]], 1
// CHECK-NEXT:    [[TMP260:%.*]] = sext i1 [[TMP259]] to i8
// CHECK-NEXT:    [[TMP261:%.*]] = bitcast i8 [[TMP260]] to b8
// CHECK-NEXT:    store b8 [[TMP261]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP262:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP263:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP264:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP262]], b8 [[TMP263]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP265:%.*]] = extractvalue { b8, i1 } [[TMP264]], 0
// CHECK-NEXT:    [[TMP266:%.*]] = extractvalue { b8, i1 } [[TMP264]], 1
// CHECK-NEXT:    br i1 [[TMP266]], label [[CX_ATOMIC_EXIT21:%.*]], label [[CX_ATOMIC_CONT22:%.*]]
// CHECK:       cx.atomic.cont22:
// CHECK-NEXT:    store b8 [[TMP265]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT21]]
// CHECK:       cx.atomic.exit21:
// CHECK-NEXT:    [[TMP267:%.*]] = extractvalue { b8, i1 } [[TMP264]], 1
// CHECK-NEXT:    [[TMP268:%.*]] = sext i1 [[TMP267]] to i8
// CHECK-NEXT:    [[TMP269:%.*]] = bitcast i8 [[TMP268]] to b8
// CHECK-NEXT:    store b8 [[TMP269]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP270:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP271:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP270]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP271]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP272:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP273:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP272]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP273]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP274:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP275:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP274]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP275]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP276:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP277:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP276]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP277]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP278:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP279:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP280:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP278]], b8 [[TMP279]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP281:%.*]] = extractvalue { b8, i1 } [[TMP280]], 0
// CHECK-NEXT:    store b8 [[TMP281]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP282:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP283:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP284:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP282]], b8 [[TMP283]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP285:%.*]] = extractvalue { b8, i1 } [[TMP284]], 0
// CHECK-NEXT:    store b8 [[TMP285]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP286:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP287:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP286]] monotonic, align 1
// CHECK-NEXT:    [[TMP288:%.*]] = bytecast b8 [[TMP287]] to i8
// CHECK-NEXT:    [[TMP289:%.*]] = bytecast b8 [[TMP286]] to i8
// CHECK-NEXT:    [[TMP290:%.*]] = icmp sgt i8 [[TMP288]], [[TMP289]]
// CHECK-NEXT:    [[TMP291:%.*]] = select i1 [[TMP290]], i8 [[TMP289]], i8 [[TMP288]]
// CHECK-NEXT:    store i8 [[TMP291]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP292:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP293:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP292]] monotonic, align 1
// CHECK-NEXT:    [[TMP294:%.*]] = bytecast b8 [[TMP293]] to i8
// CHECK-NEXT:    [[TMP295:%.*]] = bytecast b8 [[TMP292]] to i8
// CHECK-NEXT:    [[TMP296:%.*]] = icmp slt i8 [[TMP294]], [[TMP295]]
// CHECK-NEXT:    [[TMP297:%.*]] = select i1 [[TMP296]], i8 [[TMP295]], i8 [[TMP294]]
// CHECK-NEXT:    store i8 [[TMP297]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP298:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP299:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP298]] monotonic, align 1
// CHECK-NEXT:    [[TMP300:%.*]] = bytecast b8 [[TMP299]] to i8
// CHECK-NEXT:    [[TMP301:%.*]] = bytecast b8 [[TMP298]] to i8
// CHECK-NEXT:    [[TMP302:%.*]] = icmp slt i8 [[TMP300]], [[TMP301]]
// CHECK-NEXT:    [[TMP303:%.*]] = select i1 [[TMP302]], i8 [[TMP301]], i8 [[TMP300]]
// CHECK-NEXT:    store i8 [[TMP303]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP304:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP305:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP304]] monotonic, align 1
// CHECK-NEXT:    [[TMP306:%.*]] = bytecast b8 [[TMP305]] to i8
// CHECK-NEXT:    [[TMP307:%.*]] = bytecast b8 [[TMP304]] to i8
// CHECK-NEXT:    [[TMP308:%.*]] = icmp sgt i8 [[TMP306]], [[TMP307]]
// CHECK-NEXT:    [[TMP309:%.*]] = select i1 [[TMP308]], i8 [[TMP307]], i8 [[TMP306]]
// CHECK-NEXT:    store i8 [[TMP309]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP310:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP311:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP312:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP310]], b8 [[TMP311]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP313:%.*]] = extractvalue { b8, i1 } [[TMP312]], 0
// CHECK-NEXT:    [[TMP314:%.*]] = extractvalue { b8, i1 } [[TMP312]], 1
// CHECK-NEXT:    [[TMP315:%.*]] = select i1 [[TMP314]], b8 [[TMP310]], b8 [[TMP313]]
// CHECK-NEXT:    store b8 [[TMP315]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP316:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP317:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP318:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP316]], b8 [[TMP317]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP319:%.*]] = extractvalue { b8, i1 } [[TMP318]], 0
// CHECK-NEXT:    [[TMP320:%.*]] = extractvalue { b8, i1 } [[TMP318]], 1
// CHECK-NEXT:    [[TMP321:%.*]] = select i1 [[TMP320]], b8 [[TMP316]], b8 [[TMP319]]
// CHECK-NEXT:    store b8 [[TMP321]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP322:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP323:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP324:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP322]], b8 [[TMP323]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP325:%.*]] = extractvalue { b8, i1 } [[TMP324]], 0
// CHECK-NEXT:    [[TMP326:%.*]] = extractvalue { b8, i1 } [[TMP324]], 1
// CHECK-NEXT:    br i1 [[TMP326]], label [[CX_ATOMIC_EXIT23:%.*]], label [[CX_ATOMIC_CONT24:%.*]]
// CHECK:       cx.atomic.cont24:
// CHECK-NEXT:    store b8 [[TMP325]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT23]]
// CHECK:       cx.atomic.exit23:
// CHECK-NEXT:    [[TMP327:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP328:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP329:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP327]], b8 [[TMP328]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP330:%.*]] = extractvalue { b8, i1 } [[TMP329]], 0
// CHECK-NEXT:    [[TMP331:%.*]] = extractvalue { b8, i1 } [[TMP329]], 1
// CHECK-NEXT:    br i1 [[TMP331]], label [[CX_ATOMIC_EXIT25:%.*]], label [[CX_ATOMIC_CONT26:%.*]]
// CHECK:       cx.atomic.cont26:
// CHECK-NEXT:    store b8 [[TMP330]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT25]]
// CHECK:       cx.atomic.exit25:
// CHECK-NEXT:    [[TMP332:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP333:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP334:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP332]], b8 [[TMP333]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP335:%.*]] = extractvalue { b8, i1 } [[TMP334]], 1
// CHECK-NEXT:    [[TMP336:%.*]] = sext i1 [[TMP335]] to i8
// CHECK-NEXT:    [[TMP337:%.*]] = bitcast i8 [[TMP336]] to b8
// CHECK-NEXT:    store b8 [[TMP337]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP338:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP339:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP340:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP338]], b8 [[TMP339]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP341:%.*]] = extractvalue { b8, i1 } [[TMP340]], 1
// CHECK-NEXT:    [[TMP342:%.*]] = sext i1 [[TMP341]] to i8
// CHECK-NEXT:    [[TMP343:%.*]] = bitcast i8 [[TMP342]] to b8
// CHECK-NEXT:    store b8 [[TMP343]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP344:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP345:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP346:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP344]], b8 [[TMP345]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP347:%.*]] = extractvalue { b8, i1 } [[TMP346]], 0
// CHECK-NEXT:    [[TMP348:%.*]] = extractvalue { b8, i1 } [[TMP346]], 1
// CHECK-NEXT:    br i1 [[TMP348]], label [[CX_ATOMIC_EXIT27:%.*]], label [[CX_ATOMIC_CONT28:%.*]]
// CHECK:       cx.atomic.cont28:
// CHECK-NEXT:    store b8 [[TMP347]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT27]]
// CHECK:       cx.atomic.exit27:
// CHECK-NEXT:    [[TMP349:%.*]] = extractvalue { b8, i1 } [[TMP346]], 1
// CHECK-NEXT:    [[TMP350:%.*]] = sext i1 [[TMP349]] to i8
// CHECK-NEXT:    [[TMP351:%.*]] = bitcast i8 [[TMP350]] to b8
// CHECK-NEXT:    store b8 [[TMP351]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP352:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP353:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP354:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP352]], b8 [[TMP353]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP355:%.*]] = extractvalue { b8, i1 } [[TMP354]], 0
// CHECK-NEXT:    [[TMP356:%.*]] = extractvalue { b8, i1 } [[TMP354]], 1
// CHECK-NEXT:    br i1 [[TMP356]], label [[CX_ATOMIC_EXIT29:%.*]], label [[CX_ATOMIC_CONT30:%.*]]
// CHECK:       cx.atomic.cont30:
// CHECK-NEXT:    store b8 [[TMP355]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT29]]
// CHECK:       cx.atomic.exit29:
// CHECK-NEXT:    [[TMP357:%.*]] = extractvalue { b8, i1 } [[TMP354]], 1
// CHECK-NEXT:    [[TMP358:%.*]] = sext i1 [[TMP357]] to i8
// CHECK-NEXT:    [[TMP359:%.*]] = bitcast i8 [[TMP358]] to b8
// CHECK-NEXT:    store b8 [[TMP359]], ptr [[CR]], align 1
// CHECK-NEXT:    [[TMP360:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP361:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP360]] release, align 1
// CHECK-NEXT:    store b8 [[TMP361]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP362:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP363:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP362]] release, align 1
// CHECK-NEXT:    store b8 [[TMP363]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP364:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP365:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP364]] release, align 1
// CHECK-NEXT:    store b8 [[TMP365]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP366:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP367:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP366]] release, align 1
// CHECK-NEXT:    store b8 [[TMP367]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP368:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP369:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP370:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP368]], b8 [[TMP369]] release monotonic, align 1
// CHECK-NEXT:    [[TMP371:%.*]] = extractvalue { b8, i1 } [[TMP370]], 0
// CHECK-NEXT:    store b8 [[TMP371]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP372:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP373:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP374:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP372]], b8 [[TMP373]] release monotonic, align 1
// CHECK-NEXT:    [[TMP375:%.*]] = extractvalue { b8, i1 } [[TMP374]], 0
// CHECK-NEXT:    store b8 [[TMP375]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP376:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP377:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP376]] release, align 1
// CHECK-NEXT:    [[TMP378:%.*]] = bytecast b8 [[TMP377]] to i8
// CHECK-NEXT:    [[TMP379:%.*]] = bytecast b8 [[TMP376]] to i8
// CHECK-NEXT:    [[TMP380:%.*]] = icmp sgt i8 [[TMP378]], [[TMP379]]
// CHECK-NEXT:    [[TMP381:%.*]] = select i1 [[TMP380]], i8 [[TMP379]], i8 [[TMP378]]
// CHECK-NEXT:    store i8 [[TMP381]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP382:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP383:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP382]] release, align 1
// CHECK-NEXT:    [[TMP384:%.*]] = bytecast b8 [[TMP383]] to i8
// CHECK-NEXT:    [[TMP385:%.*]] = bytecast b8 [[TMP382]] to i8
// CHECK-NEXT:    [[TMP386:%.*]] = icmp slt i8 [[TMP384]], [[TMP385]]
// CHECK-NEXT:    [[TMP387:%.*]] = select i1 [[TMP386]], i8 [[TMP385]], i8 [[TMP384]]
// CHECK-NEXT:    store i8 [[TMP387]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP388:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP389:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP388]] release, align 1
// CHECK-NEXT:    [[TMP390:%.*]] = bytecast b8 [[TMP389]] to i8
// CHECK-NEXT:    [[TMP391:%.*]] = bytecast b8 [[TMP388]] to i8
// CHECK-NEXT:    [[TMP392:%.*]] = icmp slt i8 [[TMP390]], [[TMP391]]
// CHECK-NEXT:    [[TMP393:%.*]] = select i1 [[TMP392]], i8 [[TMP391]], i8 [[TMP390]]
// CHECK-NEXT:    store i8 [[TMP393]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP394:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP395:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP394]] release, align 1
// CHECK-NEXT:    [[TMP396:%.*]] = bytecast b8 [[TMP395]] to i8
// CHECK-NEXT:    [[TMP397:%.*]] = bytecast b8 [[TMP394]] to i8
// CHECK-NEXT:    [[TMP398:%.*]] = icmp sgt i8 [[TMP396]], [[TMP397]]
// CHECK-NEXT:    [[TMP399:%.*]] = select i1 [[TMP398]], i8 [[TMP397]], i8 [[TMP396]]
// CHECK-NEXT:    store i8 [[TMP399]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP400:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP401:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP402:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP400]], b8 [[TMP401]] release monotonic, align 1
// CHECK-NEXT:    [[TMP403:%.*]] = extractvalue { b8, i1 } [[TMP402]], 0
// CHECK-NEXT:    [[TMP404:%.*]] = extractvalue { b8, i1 } [[TMP402]], 1
// CHECK-NEXT:    [[TMP405:%.*]] = select i1 [[TMP404]], b8 [[TMP400]], b8 [[TMP403]]
// CHECK-NEXT:    store b8 [[TMP405]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP406:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP407:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP408:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP406]], b8 [[TMP407]] release monotonic, align 1
// CHECK-NEXT:    [[TMP409:%.*]] = extractvalue { b8, i1 } [[TMP408]], 0
// CHECK-NEXT:    [[TMP410:%.*]] = extractvalue { b8, i1 } [[TMP408]], 1
// CHECK-NEXT:    [[TMP411:%.*]] = select i1 [[TMP410]], b8 [[TMP406]], b8 [[TMP409]]
// CHECK-NEXT:    store b8 [[TMP411]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP412:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP413:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP414:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP412]], b8 [[TMP413]] release monotonic, align 1
// CHECK-NEXT:    [[TMP415:%.*]] = extractvalue { b8, i1 } [[TMP414]], 0
// CHECK-NEXT:    [[TMP416:%.*]] = extractvalue { b8, i1 } [[TMP414]], 1
// CHECK-NEXT:    br i1 [[TMP416]], label [[CX_ATOMIC_EXIT31:%.*]], label [[CX_ATOMIC_CONT32:%.*]]
// CHECK:       cx.atomic.cont32:
// CHECK-NEXT:    store b8 [[TMP415]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT31]]
// CHECK:       cx.atomic.exit31:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP417:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP418:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP419:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP417]], b8 [[TMP418]] release monotonic, align 1
// CHECK-NEXT:    [[TMP420:%.*]] = extractvalue { b8, i1 } [[TMP419]], 0
// CHECK-NEXT:    [[TMP421:%.*]] = extractvalue { b8, i1 } [[TMP419]], 1
// CHECK-NEXT:    br i1 [[TMP421]], label [[CX_ATOMIC_EXIT33:%.*]], label [[CX_ATOMIC_CONT34:%.*]]
// CHECK:       cx.atomic.cont34:
// CHECK-NEXT:    store b8 [[TMP420]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT33]]
// CHECK:       cx.atomic.exit33:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP422:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP423:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP424:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP422]], b8 [[TMP423]] release monotonic, align 1
// CHECK-NEXT:    [[TMP425:%.*]] = extractvalue { b8, i1 } [[TMP424]], 1
// CHECK-NEXT:    [[TMP426:%.*]] = sext i1 [[TMP425]] to i8
// CHECK-NEXT:    [[TMP427:%.*]] = bitcast i8 [[TMP426]] to b8
// CHECK-NEXT:    store b8 [[TMP427]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP428:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP429:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP430:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP428]], b8 [[TMP429]] release monotonic, align 1
// CHECK-NEXT:    [[TMP431:%.*]] = extractvalue { b8, i1 } [[TMP430]], 1
// CHECK-NEXT:    [[TMP432:%.*]] = sext i1 [[TMP431]] to i8
// CHECK-NEXT:    [[TMP433:%.*]] = bitcast i8 [[TMP432]] to b8
// CHECK-NEXT:    store b8 [[TMP433]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP434:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP435:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP436:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP434]], b8 [[TMP435]] release monotonic, align 1
// CHECK-NEXT:    [[TMP437:%.*]] = extractvalue { b8, i1 } [[TMP436]], 0
// CHECK-NEXT:    [[TMP438:%.*]] = extractvalue { b8, i1 } [[TMP436]], 1
// CHECK-NEXT:    br i1 [[TMP438]], label [[CX_ATOMIC_EXIT35:%.*]], label [[CX_ATOMIC_CONT36:%.*]]
// CHECK:       cx.atomic.cont36:
// CHECK-NEXT:    store b8 [[TMP437]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT35]]
// CHECK:       cx.atomic.exit35:
// CHECK-NEXT:    [[TMP439:%.*]] = extractvalue { b8, i1 } [[TMP436]], 1
// CHECK-NEXT:    [[TMP440:%.*]] = sext i1 [[TMP439]] to i8
// CHECK-NEXT:    [[TMP441:%.*]] = bitcast i8 [[TMP440]] to b8
// CHECK-NEXT:    store b8 [[TMP441]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP442:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP443:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP444:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP442]], b8 [[TMP443]] release monotonic, align 1
// CHECK-NEXT:    [[TMP445:%.*]] = extractvalue { b8, i1 } [[TMP444]], 0
// CHECK-NEXT:    [[TMP446:%.*]] = extractvalue { b8, i1 } [[TMP444]], 1
// CHECK-NEXT:    br i1 [[TMP446]], label [[CX_ATOMIC_EXIT37:%.*]], label [[CX_ATOMIC_CONT38:%.*]]
// CHECK:       cx.atomic.cont38:
// CHECK-NEXT:    store b8 [[TMP445]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT37]]
// CHECK:       cx.atomic.exit37:
// CHECK-NEXT:    [[TMP447:%.*]] = extractvalue { b8, i1 } [[TMP444]], 1
// CHECK-NEXT:    [[TMP448:%.*]] = sext i1 [[TMP447]] to i8
// CHECK-NEXT:    [[TMP449:%.*]] = bitcast i8 [[TMP448]] to b8
// CHECK-NEXT:    store b8 [[TMP449]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP450:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP451:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP450]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP451]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP452:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP453:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP452]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP453]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP454:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP455:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP454]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP455]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP456:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP457:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP456]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP457]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP458:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP459:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP460:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP458]], b8 [[TMP459]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP461:%.*]] = extractvalue { b8, i1 } [[TMP460]], 0
// CHECK-NEXT:    store b8 [[TMP461]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP462:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP463:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP464:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP462]], b8 [[TMP463]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP465:%.*]] = extractvalue { b8, i1 } [[TMP464]], 0
// CHECK-NEXT:    store b8 [[TMP465]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP466:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP467:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP466]] seq_cst, align 1
// CHECK-NEXT:    [[TMP468:%.*]] = bytecast b8 [[TMP467]] to i8
// CHECK-NEXT:    [[TMP469:%.*]] = bytecast b8 [[TMP466]] to i8
// CHECK-NEXT:    [[TMP470:%.*]] = icmp sgt i8 [[TMP468]], [[TMP469]]
// CHECK-NEXT:    [[TMP471:%.*]] = select i1 [[TMP470]], i8 [[TMP469]], i8 [[TMP468]]
// CHECK-NEXT:    store i8 [[TMP471]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP472:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP473:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP472]] seq_cst, align 1
// CHECK-NEXT:    [[TMP474:%.*]] = bytecast b8 [[TMP473]] to i8
// CHECK-NEXT:    [[TMP475:%.*]] = bytecast b8 [[TMP472]] to i8
// CHECK-NEXT:    [[TMP476:%.*]] = icmp slt i8 [[TMP474]], [[TMP475]]
// CHECK-NEXT:    [[TMP477:%.*]] = select i1 [[TMP476]], i8 [[TMP475]], i8 [[TMP474]]
// CHECK-NEXT:    store i8 [[TMP477]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP478:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP479:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP478]] seq_cst, align 1
// CHECK-NEXT:    [[TMP480:%.*]] = bytecast b8 [[TMP479]] to i8
// CHECK-NEXT:    [[TMP481:%.*]] = bytecast b8 [[TMP478]] to i8
// CHECK-NEXT:    [[TMP482:%.*]] = icmp slt i8 [[TMP480]], [[TMP481]]
// CHECK-NEXT:    [[TMP483:%.*]] = select i1 [[TMP482]], i8 [[TMP481]], i8 [[TMP480]]
// CHECK-NEXT:    store i8 [[TMP483]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP484:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP485:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP484]] seq_cst, align 1
// CHECK-NEXT:    [[TMP486:%.*]] = bytecast b8 [[TMP485]] to i8
// CHECK-NEXT:    [[TMP487:%.*]] = bytecast b8 [[TMP484]] to i8
// CHECK-NEXT:    [[TMP488:%.*]] = icmp sgt i8 [[TMP486]], [[TMP487]]
// CHECK-NEXT:    [[TMP489:%.*]] = select i1 [[TMP488]], i8 [[TMP487]], i8 [[TMP486]]
// CHECK-NEXT:    store i8 [[TMP489]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP490:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP491:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP492:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP490]], b8 [[TMP491]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP493:%.*]] = extractvalue { b8, i1 } [[TMP492]], 0
// CHECK-NEXT:    [[TMP494:%.*]] = extractvalue { b8, i1 } [[TMP492]], 1
// CHECK-NEXT:    [[TMP495:%.*]] = select i1 [[TMP494]], b8 [[TMP490]], b8 [[TMP493]]
// CHECK-NEXT:    store b8 [[TMP495]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP496:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP497:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP498:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP496]], b8 [[TMP497]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP499:%.*]] = extractvalue { b8, i1 } [[TMP498]], 0
// CHECK-NEXT:    [[TMP500:%.*]] = extractvalue { b8, i1 } [[TMP498]], 1
// CHECK-NEXT:    [[TMP501:%.*]] = select i1 [[TMP500]], b8 [[TMP496]], b8 [[TMP499]]
// CHECK-NEXT:    store b8 [[TMP501]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP502:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP503:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP504:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP502]], b8 [[TMP503]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP505:%.*]] = extractvalue { b8, i1 } [[TMP504]], 0
// CHECK-NEXT:    [[TMP506:%.*]] = extractvalue { b8, i1 } [[TMP504]], 1
// CHECK-NEXT:    br i1 [[TMP506]], label [[CX_ATOMIC_EXIT39:%.*]], label [[CX_ATOMIC_CONT40:%.*]]
// CHECK:       cx.atomic.cont40:
// CHECK-NEXT:    store b8 [[TMP505]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT39]]
// CHECK:       cx.atomic.exit39:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP507:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP508:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP509:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP507]], b8 [[TMP508]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP510:%.*]] = extractvalue { b8, i1 } [[TMP509]], 0
// CHECK-NEXT:    [[TMP511:%.*]] = extractvalue { b8, i1 } [[TMP509]], 1
// CHECK-NEXT:    br i1 [[TMP511]], label [[CX_ATOMIC_EXIT41:%.*]], label [[CX_ATOMIC_CONT42:%.*]]
// CHECK:       cx.atomic.cont42:
// CHECK-NEXT:    store b8 [[TMP510]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT41]]
// CHECK:       cx.atomic.exit41:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP512:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP513:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP514:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP512]], b8 [[TMP513]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP515:%.*]] = extractvalue { b8, i1 } [[TMP514]], 1
// CHECK-NEXT:    [[TMP516:%.*]] = sext i1 [[TMP515]] to i8
// CHECK-NEXT:    [[TMP517:%.*]] = bitcast i8 [[TMP516]] to b8
// CHECK-NEXT:    store b8 [[TMP517]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP518:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP519:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP520:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP518]], b8 [[TMP519]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP521:%.*]] = extractvalue { b8, i1 } [[TMP520]], 1
// CHECK-NEXT:    [[TMP522:%.*]] = sext i1 [[TMP521]] to i8
// CHECK-NEXT:    [[TMP523:%.*]] = bitcast i8 [[TMP522]] to b8
// CHECK-NEXT:    store b8 [[TMP523]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP524:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP525:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP526:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP524]], b8 [[TMP525]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP527:%.*]] = extractvalue { b8, i1 } [[TMP526]], 0
// CHECK-NEXT:    [[TMP528:%.*]] = extractvalue { b8, i1 } [[TMP526]], 1
// CHECK-NEXT:    br i1 [[TMP528]], label [[CX_ATOMIC_EXIT43:%.*]], label [[CX_ATOMIC_CONT44:%.*]]
// CHECK:       cx.atomic.cont44:
// CHECK-NEXT:    store b8 [[TMP527]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT43]]
// CHECK:       cx.atomic.exit43:
// CHECK-NEXT:    [[TMP529:%.*]] = extractvalue { b8, i1 } [[TMP526]], 1
// CHECK-NEXT:    [[TMP530:%.*]] = sext i1 [[TMP529]] to i8
// CHECK-NEXT:    [[TMP531:%.*]] = bitcast i8 [[TMP530]] to b8
// CHECK-NEXT:    store b8 [[TMP531]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP532:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP533:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP534:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP532]], b8 [[TMP533]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP535:%.*]] = extractvalue { b8, i1 } [[TMP534]], 0
// CHECK-NEXT:    [[TMP536:%.*]] = extractvalue { b8, i1 } [[TMP534]], 1
// CHECK-NEXT:    br i1 [[TMP536]], label [[CX_ATOMIC_EXIT45:%.*]], label [[CX_ATOMIC_CONT46:%.*]]
// CHECK:       cx.atomic.cont46:
// CHECK-NEXT:    store b8 [[TMP535]], ptr [[CV]], align 1
// CHECK-NEXT:    br label [[CX_ATOMIC_EXIT45]]
// CHECK:       cx.atomic.exit45:
// CHECK-NEXT:    [[TMP537:%.*]] = extractvalue { b8, i1 } [[TMP534]], 1
// CHECK-NEXT:    [[TMP538:%.*]] = sext i1 [[TMP537]] to i8
// CHECK-NEXT:    [[TMP539:%.*]] = bitcast i8 [[TMP538]] to b8
// CHECK-NEXT:    store b8 [[TMP539]], ptr [[CR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP540:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP541:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP540]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP541]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP542:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP543:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP542]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP543]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP544:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP545:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP544]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP545]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP546:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP547:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP546]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP547]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP548:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP549:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP550:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP548]], b8 [[TMP549]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP551:%.*]] = extractvalue { b8, i1 } [[TMP550]], 0
// CHECK-NEXT:    store b8 [[TMP551]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP552:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP553:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP554:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP552]], b8 [[TMP553]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP555:%.*]] = extractvalue { b8, i1 } [[TMP554]], 0
// CHECK-NEXT:    store b8 [[TMP555]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP556:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP557:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP556]] monotonic, align 1
// CHECK-NEXT:    [[TMP558:%.*]] = bytecast b8 [[TMP557]] to i8
// CHECK-NEXT:    [[TMP559:%.*]] = bytecast b8 [[TMP556]] to i8
// CHECK-NEXT:    [[TMP560:%.*]] = icmp ugt i8 [[TMP558]], [[TMP559]]
// CHECK-NEXT:    [[TMP561:%.*]] = select i1 [[TMP560]], i8 [[TMP559]], i8 [[TMP558]]
// CHECK-NEXT:    store i8 [[TMP561]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP562:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP563:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP562]] monotonic, align 1
// CHECK-NEXT:    [[TMP564:%.*]] = bytecast b8 [[TMP563]] to i8
// CHECK-NEXT:    [[TMP565:%.*]] = bytecast b8 [[TMP562]] to i8
// CHECK-NEXT:    [[TMP566:%.*]] = icmp ult i8 [[TMP564]], [[TMP565]]
// CHECK-NEXT:    [[TMP567:%.*]] = select i1 [[TMP566]], i8 [[TMP565]], i8 [[TMP564]]
// CHECK-NEXT:    store i8 [[TMP567]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP568:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP569:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP568]] monotonic, align 1
// CHECK-NEXT:    [[TMP570:%.*]] = bytecast b8 [[TMP569]] to i8
// CHECK-NEXT:    [[TMP571:%.*]] = bytecast b8 [[TMP568]] to i8
// CHECK-NEXT:    [[TMP572:%.*]] = icmp ult i8 [[TMP570]], [[TMP571]]
// CHECK-NEXT:    [[TMP573:%.*]] = select i1 [[TMP572]], i8 [[TMP571]], i8 [[TMP570]]
// CHECK-NEXT:    store i8 [[TMP573]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP574:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP575:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP574]] monotonic, align 1
// CHECK-NEXT:    [[TMP576:%.*]] = bytecast b8 [[TMP575]] to i8
// CHECK-NEXT:    [[TMP577:%.*]] = bytecast b8 [[TMP574]] to i8
// CHECK-NEXT:    [[TMP578:%.*]] = icmp ugt i8 [[TMP576]], [[TMP577]]
// CHECK-NEXT:    [[TMP579:%.*]] = select i1 [[TMP578]], i8 [[TMP577]], i8 [[TMP576]]
// CHECK-NEXT:    store i8 [[TMP579]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP580:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP581:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP582:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP580]], b8 [[TMP581]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP583:%.*]] = extractvalue { b8, i1 } [[TMP582]], 0
// CHECK-NEXT:    [[TMP584:%.*]] = extractvalue { b8, i1 } [[TMP582]], 1
// CHECK-NEXT:    [[TMP585:%.*]] = select i1 [[TMP584]], b8 [[TMP580]], b8 [[TMP583]]
// CHECK-NEXT:    store b8 [[TMP585]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP586:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP587:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP588:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP586]], b8 [[TMP587]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP589:%.*]] = extractvalue { b8, i1 } [[TMP588]], 0
// CHECK-NEXT:    [[TMP590:%.*]] = extractvalue { b8, i1 } [[TMP588]], 1
// CHECK-NEXT:    [[TMP591:%.*]] = select i1 [[TMP590]], b8 [[TMP586]], b8 [[TMP589]]
// CHECK-NEXT:    store b8 [[TMP591]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP592:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP593:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP594:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP592]], b8 [[TMP593]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP595:%.*]] = extractvalue { b8, i1 } [[TMP594]], 0
// CHECK-NEXT:    [[TMP596:%.*]] = extractvalue { b8, i1 } [[TMP594]], 1
// CHECK-NEXT:    br i1 [[TMP596]], label [[UCX_ATOMIC_EXIT:%.*]], label [[UCX_ATOMIC_CONT:%.*]]
// CHECK:       ucx.atomic.cont:
// CHECK-NEXT:    store b8 [[TMP595]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT]]
// CHECK:       ucx.atomic.exit:
// CHECK-NEXT:    [[TMP597:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP598:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP599:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP597]], b8 [[TMP598]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP600:%.*]] = extractvalue { b8, i1 } [[TMP599]], 0
// CHECK-NEXT:    [[TMP601:%.*]] = extractvalue { b8, i1 } [[TMP599]], 1
// CHECK-NEXT:    br i1 [[TMP601]], label [[UCX_ATOMIC_EXIT47:%.*]], label [[UCX_ATOMIC_CONT48:%.*]]
// CHECK:       ucx.atomic.cont48:
// CHECK-NEXT:    store b8 [[TMP600]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT47]]
// CHECK:       ucx.atomic.exit47:
// CHECK-NEXT:    [[TMP602:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP603:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP604:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP602]], b8 [[TMP603]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP605:%.*]] = extractvalue { b8, i1 } [[TMP604]], 1
// CHECK-NEXT:    [[TMP606:%.*]] = zext i1 [[TMP605]] to i8
// CHECK-NEXT:    [[TMP607:%.*]] = bitcast i8 [[TMP606]] to b8
// CHECK-NEXT:    store b8 [[TMP607]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP608:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP609:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP610:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP608]], b8 [[TMP609]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP611:%.*]] = extractvalue { b8, i1 } [[TMP610]], 1
// CHECK-NEXT:    [[TMP612:%.*]] = zext i1 [[TMP611]] to i8
// CHECK-NEXT:    [[TMP613:%.*]] = bitcast i8 [[TMP612]] to b8
// CHECK-NEXT:    store b8 [[TMP613]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP614:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP615:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP616:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP614]], b8 [[TMP615]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP617:%.*]] = extractvalue { b8, i1 } [[TMP616]], 0
// CHECK-NEXT:    [[TMP618:%.*]] = extractvalue { b8, i1 } [[TMP616]], 1
// CHECK-NEXT:    br i1 [[TMP618]], label [[UCX_ATOMIC_EXIT49:%.*]], label [[UCX_ATOMIC_CONT50:%.*]]
// CHECK:       ucx.atomic.cont50:
// CHECK-NEXT:    store b8 [[TMP617]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT49]]
// CHECK:       ucx.atomic.exit49:
// CHECK-NEXT:    [[TMP619:%.*]] = extractvalue { b8, i1 } [[TMP616]], 1
// CHECK-NEXT:    [[TMP620:%.*]] = zext i1 [[TMP619]] to i8
// CHECK-NEXT:    [[TMP621:%.*]] = bitcast i8 [[TMP620]] to b8
// CHECK-NEXT:    store b8 [[TMP621]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP622:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP623:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP624:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP622]], b8 [[TMP623]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP625:%.*]] = extractvalue { b8, i1 } [[TMP624]], 0
// CHECK-NEXT:    [[TMP626:%.*]] = extractvalue { b8, i1 } [[TMP624]], 1
// CHECK-NEXT:    br i1 [[TMP626]], label [[UCX_ATOMIC_EXIT51:%.*]], label [[UCX_ATOMIC_CONT52:%.*]]
// CHECK:       ucx.atomic.cont52:
// CHECK-NEXT:    store b8 [[TMP625]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT51]]
// CHECK:       ucx.atomic.exit51:
// CHECK-NEXT:    [[TMP627:%.*]] = extractvalue { b8, i1 } [[TMP624]], 1
// CHECK-NEXT:    [[TMP628:%.*]] = zext i1 [[TMP627]] to i8
// CHECK-NEXT:    [[TMP629:%.*]] = bitcast i8 [[TMP628]] to b8
// CHECK-NEXT:    store b8 [[TMP629]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP630:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP631:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP630]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP631]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP632:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP633:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP632]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP633]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP634:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP635:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP634]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP635]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP636:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP637:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP636]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP637]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP638:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP639:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP640:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP638]], b8 [[TMP639]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP641:%.*]] = extractvalue { b8, i1 } [[TMP640]], 0
// CHECK-NEXT:    store b8 [[TMP641]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP642:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP643:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP644:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP642]], b8 [[TMP643]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP645:%.*]] = extractvalue { b8, i1 } [[TMP644]], 0
// CHECK-NEXT:    store b8 [[TMP645]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP646:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP647:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP646]] acq_rel, align 1
// CHECK-NEXT:    [[TMP648:%.*]] = bytecast b8 [[TMP647]] to i8
// CHECK-NEXT:    [[TMP649:%.*]] = bytecast b8 [[TMP646]] to i8
// CHECK-NEXT:    [[TMP650:%.*]] = icmp ugt i8 [[TMP648]], [[TMP649]]
// CHECK-NEXT:    [[TMP651:%.*]] = select i1 [[TMP650]], i8 [[TMP649]], i8 [[TMP648]]
// CHECK-NEXT:    store i8 [[TMP651]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP652:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP653:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP652]] acq_rel, align 1
// CHECK-NEXT:    [[TMP654:%.*]] = bytecast b8 [[TMP653]] to i8
// CHECK-NEXT:    [[TMP655:%.*]] = bytecast b8 [[TMP652]] to i8
// CHECK-NEXT:    [[TMP656:%.*]] = icmp ult i8 [[TMP654]], [[TMP655]]
// CHECK-NEXT:    [[TMP657:%.*]] = select i1 [[TMP656]], i8 [[TMP655]], i8 [[TMP654]]
// CHECK-NEXT:    store i8 [[TMP657]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP658:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP659:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP658]] acq_rel, align 1
// CHECK-NEXT:    [[TMP660:%.*]] = bytecast b8 [[TMP659]] to i8
// CHECK-NEXT:    [[TMP661:%.*]] = bytecast b8 [[TMP658]] to i8
// CHECK-NEXT:    [[TMP662:%.*]] = icmp ult i8 [[TMP660]], [[TMP661]]
// CHECK-NEXT:    [[TMP663:%.*]] = select i1 [[TMP662]], i8 [[TMP661]], i8 [[TMP660]]
// CHECK-NEXT:    store i8 [[TMP663]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP664:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP665:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP664]] acq_rel, align 1
// CHECK-NEXT:    [[TMP666:%.*]] = bytecast b8 [[TMP665]] to i8
// CHECK-NEXT:    [[TMP667:%.*]] = bytecast b8 [[TMP664]] to i8
// CHECK-NEXT:    [[TMP668:%.*]] = icmp ugt i8 [[TMP666]], [[TMP667]]
// CHECK-NEXT:    [[TMP669:%.*]] = select i1 [[TMP668]], i8 [[TMP667]], i8 [[TMP666]]
// CHECK-NEXT:    store i8 [[TMP669]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP670:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP671:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP672:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP670]], b8 [[TMP671]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP673:%.*]] = extractvalue { b8, i1 } [[TMP672]], 0
// CHECK-NEXT:    [[TMP674:%.*]] = extractvalue { b8, i1 } [[TMP672]], 1
// CHECK-NEXT:    [[TMP675:%.*]] = select i1 [[TMP674]], b8 [[TMP670]], b8 [[TMP673]]
// CHECK-NEXT:    store b8 [[TMP675]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP676:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP677:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP678:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP676]], b8 [[TMP677]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP679:%.*]] = extractvalue { b8, i1 } [[TMP678]], 0
// CHECK-NEXT:    [[TMP680:%.*]] = extractvalue { b8, i1 } [[TMP678]], 1
// CHECK-NEXT:    [[TMP681:%.*]] = select i1 [[TMP680]], b8 [[TMP676]], b8 [[TMP679]]
// CHECK-NEXT:    store b8 [[TMP681]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP682:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP683:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP684:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP682]], b8 [[TMP683]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP685:%.*]] = extractvalue { b8, i1 } [[TMP684]], 0
// CHECK-NEXT:    [[TMP686:%.*]] = extractvalue { b8, i1 } [[TMP684]], 1
// CHECK-NEXT:    br i1 [[TMP686]], label [[UCX_ATOMIC_EXIT53:%.*]], label [[UCX_ATOMIC_CONT54:%.*]]
// CHECK:       ucx.atomic.cont54:
// CHECK-NEXT:    store b8 [[TMP685]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT53]]
// CHECK:       ucx.atomic.exit53:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP687:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP688:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP689:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP687]], b8 [[TMP688]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP690:%.*]] = extractvalue { b8, i1 } [[TMP689]], 0
// CHECK-NEXT:    [[TMP691:%.*]] = extractvalue { b8, i1 } [[TMP689]], 1
// CHECK-NEXT:    br i1 [[TMP691]], label [[UCX_ATOMIC_EXIT55:%.*]], label [[UCX_ATOMIC_CONT56:%.*]]
// CHECK:       ucx.atomic.cont56:
// CHECK-NEXT:    store b8 [[TMP690]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT55]]
// CHECK:       ucx.atomic.exit55:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP692:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP693:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP694:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP692]], b8 [[TMP693]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP695:%.*]] = extractvalue { b8, i1 } [[TMP694]], 1
// CHECK-NEXT:    [[TMP696:%.*]] = zext i1 [[TMP695]] to i8
// CHECK-NEXT:    [[TMP697:%.*]] = bitcast i8 [[TMP696]] to b8
// CHECK-NEXT:    store b8 [[TMP697]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP698:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP699:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP700:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP698]], b8 [[TMP699]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP701:%.*]] = extractvalue { b8, i1 } [[TMP700]], 1
// CHECK-NEXT:    [[TMP702:%.*]] = zext i1 [[TMP701]] to i8
// CHECK-NEXT:    [[TMP703:%.*]] = bitcast i8 [[TMP702]] to b8
// CHECK-NEXT:    store b8 [[TMP703]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP704:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP705:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP706:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP704]], b8 [[TMP705]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP707:%.*]] = extractvalue { b8, i1 } [[TMP706]], 0
// CHECK-NEXT:    [[TMP708:%.*]] = extractvalue { b8, i1 } [[TMP706]], 1
// CHECK-NEXT:    br i1 [[TMP708]], label [[UCX_ATOMIC_EXIT57:%.*]], label [[UCX_ATOMIC_CONT58:%.*]]
// CHECK:       ucx.atomic.cont58:
// CHECK-NEXT:    store b8 [[TMP707]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT57]]
// CHECK:       ucx.atomic.exit57:
// CHECK-NEXT:    [[TMP709:%.*]] = extractvalue { b8, i1 } [[TMP706]], 1
// CHECK-NEXT:    [[TMP710:%.*]] = zext i1 [[TMP709]] to i8
// CHECK-NEXT:    [[TMP711:%.*]] = bitcast i8 [[TMP710]] to b8
// CHECK-NEXT:    store b8 [[TMP711]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP712:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP713:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP714:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP712]], b8 [[TMP713]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP715:%.*]] = extractvalue { b8, i1 } [[TMP714]], 0
// CHECK-NEXT:    [[TMP716:%.*]] = extractvalue { b8, i1 } [[TMP714]], 1
// CHECK-NEXT:    br i1 [[TMP716]], label [[UCX_ATOMIC_EXIT59:%.*]], label [[UCX_ATOMIC_CONT60:%.*]]
// CHECK:       ucx.atomic.cont60:
// CHECK-NEXT:    store b8 [[TMP715]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT59]]
// CHECK:       ucx.atomic.exit59:
// CHECK-NEXT:    [[TMP717:%.*]] = extractvalue { b8, i1 } [[TMP714]], 1
// CHECK-NEXT:    [[TMP718:%.*]] = zext i1 [[TMP717]] to i8
// CHECK-NEXT:    [[TMP719:%.*]] = bitcast i8 [[TMP718]] to b8
// CHECK-NEXT:    store b8 [[TMP719]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP720:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP721:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP720]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP721]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP722:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP723:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP722]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP723]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP724:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP725:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP724]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP725]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP726:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP727:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP726]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP727]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP728:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP729:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP730:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP728]], b8 [[TMP729]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP731:%.*]] = extractvalue { b8, i1 } [[TMP730]], 0
// CHECK-NEXT:    store b8 [[TMP731]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP732:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP733:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP734:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP732]], b8 [[TMP733]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP735:%.*]] = extractvalue { b8, i1 } [[TMP734]], 0
// CHECK-NEXT:    store b8 [[TMP735]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP736:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP737:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP736]] acquire, align 1
// CHECK-NEXT:    [[TMP738:%.*]] = bytecast b8 [[TMP737]] to i8
// CHECK-NEXT:    [[TMP739:%.*]] = bytecast b8 [[TMP736]] to i8
// CHECK-NEXT:    [[TMP740:%.*]] = icmp ugt i8 [[TMP738]], [[TMP739]]
// CHECK-NEXT:    [[TMP741:%.*]] = select i1 [[TMP740]], i8 [[TMP739]], i8 [[TMP738]]
// CHECK-NEXT:    store i8 [[TMP741]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP742:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP743:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP742]] acquire, align 1
// CHECK-NEXT:    [[TMP744:%.*]] = bytecast b8 [[TMP743]] to i8
// CHECK-NEXT:    [[TMP745:%.*]] = bytecast b8 [[TMP742]] to i8
// CHECK-NEXT:    [[TMP746:%.*]] = icmp ult i8 [[TMP744]], [[TMP745]]
// CHECK-NEXT:    [[TMP747:%.*]] = select i1 [[TMP746]], i8 [[TMP745]], i8 [[TMP744]]
// CHECK-NEXT:    store i8 [[TMP747]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP748:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP749:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP748]] acquire, align 1
// CHECK-NEXT:    [[TMP750:%.*]] = bytecast b8 [[TMP749]] to i8
// CHECK-NEXT:    [[TMP751:%.*]] = bytecast b8 [[TMP748]] to i8
// CHECK-NEXT:    [[TMP752:%.*]] = icmp ult i8 [[TMP750]], [[TMP751]]
// CHECK-NEXT:    [[TMP753:%.*]] = select i1 [[TMP752]], i8 [[TMP751]], i8 [[TMP750]]
// CHECK-NEXT:    store i8 [[TMP753]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP754:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP755:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP754]] acquire, align 1
// CHECK-NEXT:    [[TMP756:%.*]] = bytecast b8 [[TMP755]] to i8
// CHECK-NEXT:    [[TMP757:%.*]] = bytecast b8 [[TMP754]] to i8
// CHECK-NEXT:    [[TMP758:%.*]] = icmp ugt i8 [[TMP756]], [[TMP757]]
// CHECK-NEXT:    [[TMP759:%.*]] = select i1 [[TMP758]], i8 [[TMP757]], i8 [[TMP756]]
// CHECK-NEXT:    store i8 [[TMP759]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP760:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP761:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP762:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP760]], b8 [[TMP761]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP763:%.*]] = extractvalue { b8, i1 } [[TMP762]], 0
// CHECK-NEXT:    [[TMP764:%.*]] = extractvalue { b8, i1 } [[TMP762]], 1
// CHECK-NEXT:    [[TMP765:%.*]] = select i1 [[TMP764]], b8 [[TMP760]], b8 [[TMP763]]
// CHECK-NEXT:    store b8 [[TMP765]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP766:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP767:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP768:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP766]], b8 [[TMP767]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP769:%.*]] = extractvalue { b8, i1 } [[TMP768]], 0
// CHECK-NEXT:    [[TMP770:%.*]] = extractvalue { b8, i1 } [[TMP768]], 1
// CHECK-NEXT:    [[TMP771:%.*]] = select i1 [[TMP770]], b8 [[TMP766]], b8 [[TMP769]]
// CHECK-NEXT:    store b8 [[TMP771]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP772:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP773:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP774:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP772]], b8 [[TMP773]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP775:%.*]] = extractvalue { b8, i1 } [[TMP774]], 0
// CHECK-NEXT:    [[TMP776:%.*]] = extractvalue { b8, i1 } [[TMP774]], 1
// CHECK-NEXT:    br i1 [[TMP776]], label [[UCX_ATOMIC_EXIT61:%.*]], label [[UCX_ATOMIC_CONT62:%.*]]
// CHECK:       ucx.atomic.cont62:
// CHECK-NEXT:    store b8 [[TMP775]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT61]]
// CHECK:       ucx.atomic.exit61:
// CHECK-NEXT:    [[TMP777:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP778:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP779:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP777]], b8 [[TMP778]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP780:%.*]] = extractvalue { b8, i1 } [[TMP779]], 0
// CHECK-NEXT:    [[TMP781:%.*]] = extractvalue { b8, i1 } [[TMP779]], 1
// CHECK-NEXT:    br i1 [[TMP781]], label [[UCX_ATOMIC_EXIT63:%.*]], label [[UCX_ATOMIC_CONT64:%.*]]
// CHECK:       ucx.atomic.cont64:
// CHECK-NEXT:    store b8 [[TMP780]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT63]]
// CHECK:       ucx.atomic.exit63:
// CHECK-NEXT:    [[TMP782:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP783:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP784:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP782]], b8 [[TMP783]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP785:%.*]] = extractvalue { b8, i1 } [[TMP784]], 1
// CHECK-NEXT:    [[TMP786:%.*]] = zext i1 [[TMP785]] to i8
// CHECK-NEXT:    [[TMP787:%.*]] = bitcast i8 [[TMP786]] to b8
// CHECK-NEXT:    store b8 [[TMP787]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP788:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP789:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP790:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP788]], b8 [[TMP789]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP791:%.*]] = extractvalue { b8, i1 } [[TMP790]], 1
// CHECK-NEXT:    [[TMP792:%.*]] = zext i1 [[TMP791]] to i8
// CHECK-NEXT:    [[TMP793:%.*]] = bitcast i8 [[TMP792]] to b8
// CHECK-NEXT:    store b8 [[TMP793]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP794:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP795:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP796:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP794]], b8 [[TMP795]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP797:%.*]] = extractvalue { b8, i1 } [[TMP796]], 0
// CHECK-NEXT:    [[TMP798:%.*]] = extractvalue { b8, i1 } [[TMP796]], 1
// CHECK-NEXT:    br i1 [[TMP798]], label [[UCX_ATOMIC_EXIT65:%.*]], label [[UCX_ATOMIC_CONT66:%.*]]
// CHECK:       ucx.atomic.cont66:
// CHECK-NEXT:    store b8 [[TMP797]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT65]]
// CHECK:       ucx.atomic.exit65:
// CHECK-NEXT:    [[TMP799:%.*]] = extractvalue { b8, i1 } [[TMP796]], 1
// CHECK-NEXT:    [[TMP800:%.*]] = zext i1 [[TMP799]] to i8
// CHECK-NEXT:    [[TMP801:%.*]] = bitcast i8 [[TMP800]] to b8
// CHECK-NEXT:    store b8 [[TMP801]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP802:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP803:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP804:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP802]], b8 [[TMP803]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP805:%.*]] = extractvalue { b8, i1 } [[TMP804]], 0
// CHECK-NEXT:    [[TMP806:%.*]] = extractvalue { b8, i1 } [[TMP804]], 1
// CHECK-NEXT:    br i1 [[TMP806]], label [[UCX_ATOMIC_EXIT67:%.*]], label [[UCX_ATOMIC_CONT68:%.*]]
// CHECK:       ucx.atomic.cont68:
// CHECK-NEXT:    store b8 [[TMP805]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT67]]
// CHECK:       ucx.atomic.exit67:
// CHECK-NEXT:    [[TMP807:%.*]] = extractvalue { b8, i1 } [[TMP804]], 1
// CHECK-NEXT:    [[TMP808:%.*]] = zext i1 [[TMP807]] to i8
// CHECK-NEXT:    [[TMP809:%.*]] = bitcast i8 [[TMP808]] to b8
// CHECK-NEXT:    store b8 [[TMP809]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP810:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP811:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP810]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP811]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP812:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP813:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP812]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP813]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP814:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP815:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP814]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP815]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP816:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP817:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP816]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP817]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP818:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP819:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP820:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP818]], b8 [[TMP819]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP821:%.*]] = extractvalue { b8, i1 } [[TMP820]], 0
// CHECK-NEXT:    store b8 [[TMP821]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP822:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP823:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP824:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP822]], b8 [[TMP823]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP825:%.*]] = extractvalue { b8, i1 } [[TMP824]], 0
// CHECK-NEXT:    store b8 [[TMP825]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP826:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP827:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP826]] monotonic, align 1
// CHECK-NEXT:    [[TMP828:%.*]] = bytecast b8 [[TMP827]] to i8
// CHECK-NEXT:    [[TMP829:%.*]] = bytecast b8 [[TMP826]] to i8
// CHECK-NEXT:    [[TMP830:%.*]] = icmp ugt i8 [[TMP828]], [[TMP829]]
// CHECK-NEXT:    [[TMP831:%.*]] = select i1 [[TMP830]], i8 [[TMP829]], i8 [[TMP828]]
// CHECK-NEXT:    store i8 [[TMP831]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP832:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP833:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP832]] monotonic, align 1
// CHECK-NEXT:    [[TMP834:%.*]] = bytecast b8 [[TMP833]] to i8
// CHECK-NEXT:    [[TMP835:%.*]] = bytecast b8 [[TMP832]] to i8
// CHECK-NEXT:    [[TMP836:%.*]] = icmp ult i8 [[TMP834]], [[TMP835]]
// CHECK-NEXT:    [[TMP837:%.*]] = select i1 [[TMP836]], i8 [[TMP835]], i8 [[TMP834]]
// CHECK-NEXT:    store i8 [[TMP837]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP838:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP839:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP838]] monotonic, align 1
// CHECK-NEXT:    [[TMP840:%.*]] = bytecast b8 [[TMP839]] to i8
// CHECK-NEXT:    [[TMP841:%.*]] = bytecast b8 [[TMP838]] to i8
// CHECK-NEXT:    [[TMP842:%.*]] = icmp ult i8 [[TMP840]], [[TMP841]]
// CHECK-NEXT:    [[TMP843:%.*]] = select i1 [[TMP842]], i8 [[TMP841]], i8 [[TMP840]]
// CHECK-NEXT:    store i8 [[TMP843]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP844:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP845:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP844]] monotonic, align 1
// CHECK-NEXT:    [[TMP846:%.*]] = bytecast b8 [[TMP845]] to i8
// CHECK-NEXT:    [[TMP847:%.*]] = bytecast b8 [[TMP844]] to i8
// CHECK-NEXT:    [[TMP848:%.*]] = icmp ugt i8 [[TMP846]], [[TMP847]]
// CHECK-NEXT:    [[TMP849:%.*]] = select i1 [[TMP848]], i8 [[TMP847]], i8 [[TMP846]]
// CHECK-NEXT:    store i8 [[TMP849]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP850:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP851:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP852:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP850]], b8 [[TMP851]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP853:%.*]] = extractvalue { b8, i1 } [[TMP852]], 0
// CHECK-NEXT:    [[TMP854:%.*]] = extractvalue { b8, i1 } [[TMP852]], 1
// CHECK-NEXT:    [[TMP855:%.*]] = select i1 [[TMP854]], b8 [[TMP850]], b8 [[TMP853]]
// CHECK-NEXT:    store b8 [[TMP855]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP856:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP857:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP858:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP856]], b8 [[TMP857]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP859:%.*]] = extractvalue { b8, i1 } [[TMP858]], 0
// CHECK-NEXT:    [[TMP860:%.*]] = extractvalue { b8, i1 } [[TMP858]], 1
// CHECK-NEXT:    [[TMP861:%.*]] = select i1 [[TMP860]], b8 [[TMP856]], b8 [[TMP859]]
// CHECK-NEXT:    store b8 [[TMP861]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP862:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP863:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP864:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP862]], b8 [[TMP863]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP865:%.*]] = extractvalue { b8, i1 } [[TMP864]], 0
// CHECK-NEXT:    [[TMP866:%.*]] = extractvalue { b8, i1 } [[TMP864]], 1
// CHECK-NEXT:    br i1 [[TMP866]], label [[UCX_ATOMIC_EXIT69:%.*]], label [[UCX_ATOMIC_CONT70:%.*]]
// CHECK:       ucx.atomic.cont70:
// CHECK-NEXT:    store b8 [[TMP865]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT69]]
// CHECK:       ucx.atomic.exit69:
// CHECK-NEXT:    [[TMP867:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP868:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP869:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP867]], b8 [[TMP868]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP870:%.*]] = extractvalue { b8, i1 } [[TMP869]], 0
// CHECK-NEXT:    [[TMP871:%.*]] = extractvalue { b8, i1 } [[TMP869]], 1
// CHECK-NEXT:    br i1 [[TMP871]], label [[UCX_ATOMIC_EXIT71:%.*]], label [[UCX_ATOMIC_CONT72:%.*]]
// CHECK:       ucx.atomic.cont72:
// CHECK-NEXT:    store b8 [[TMP870]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT71]]
// CHECK:       ucx.atomic.exit71:
// CHECK-NEXT:    [[TMP872:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP873:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP874:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP872]], b8 [[TMP873]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP875:%.*]] = extractvalue { b8, i1 } [[TMP874]], 1
// CHECK-NEXT:    [[TMP876:%.*]] = zext i1 [[TMP875]] to i8
// CHECK-NEXT:    [[TMP877:%.*]] = bitcast i8 [[TMP876]] to b8
// CHECK-NEXT:    store b8 [[TMP877]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP878:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP879:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP880:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP878]], b8 [[TMP879]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP881:%.*]] = extractvalue { b8, i1 } [[TMP880]], 1
// CHECK-NEXT:    [[TMP882:%.*]] = zext i1 [[TMP881]] to i8
// CHECK-NEXT:    [[TMP883:%.*]] = bitcast i8 [[TMP882]] to b8
// CHECK-NEXT:    store b8 [[TMP883]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP884:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP885:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP886:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP884]], b8 [[TMP885]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP887:%.*]] = extractvalue { b8, i1 } [[TMP886]], 0
// CHECK-NEXT:    [[TMP888:%.*]] = extractvalue { b8, i1 } [[TMP886]], 1
// CHECK-NEXT:    br i1 [[TMP888]], label [[UCX_ATOMIC_EXIT73:%.*]], label [[UCX_ATOMIC_CONT74:%.*]]
// CHECK:       ucx.atomic.cont74:
// CHECK-NEXT:    store b8 [[TMP887]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT73]]
// CHECK:       ucx.atomic.exit73:
// CHECK-NEXT:    [[TMP889:%.*]] = extractvalue { b8, i1 } [[TMP886]], 1
// CHECK-NEXT:    [[TMP890:%.*]] = zext i1 [[TMP889]] to i8
// CHECK-NEXT:    [[TMP891:%.*]] = bitcast i8 [[TMP890]] to b8
// CHECK-NEXT:    store b8 [[TMP891]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP892:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP893:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP894:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP892]], b8 [[TMP893]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP895:%.*]] = extractvalue { b8, i1 } [[TMP894]], 0
// CHECK-NEXT:    [[TMP896:%.*]] = extractvalue { b8, i1 } [[TMP894]], 1
// CHECK-NEXT:    br i1 [[TMP896]], label [[UCX_ATOMIC_EXIT75:%.*]], label [[UCX_ATOMIC_CONT76:%.*]]
// CHECK:       ucx.atomic.cont76:
// CHECK-NEXT:    store b8 [[TMP895]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT75]]
// CHECK:       ucx.atomic.exit75:
// CHECK-NEXT:    [[TMP897:%.*]] = extractvalue { b8, i1 } [[TMP894]], 1
// CHECK-NEXT:    [[TMP898:%.*]] = zext i1 [[TMP897]] to i8
// CHECK-NEXT:    [[TMP899:%.*]] = bitcast i8 [[TMP898]] to b8
// CHECK-NEXT:    store b8 [[TMP899]], ptr [[UCR]], align 1
// CHECK-NEXT:    [[TMP900:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP901:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP900]] release, align 1
// CHECK-NEXT:    store b8 [[TMP901]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP902:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP903:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP902]] release, align 1
// CHECK-NEXT:    store b8 [[TMP903]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP904:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP905:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP904]] release, align 1
// CHECK-NEXT:    store b8 [[TMP905]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP906:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP907:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP906]] release, align 1
// CHECK-NEXT:    store b8 [[TMP907]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP908:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP909:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP910:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP908]], b8 [[TMP909]] release monotonic, align 1
// CHECK-NEXT:    [[TMP911:%.*]] = extractvalue { b8, i1 } [[TMP910]], 0
// CHECK-NEXT:    store b8 [[TMP911]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP912:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP913:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP914:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP912]], b8 [[TMP913]] release monotonic, align 1
// CHECK-NEXT:    [[TMP915:%.*]] = extractvalue { b8, i1 } [[TMP914]], 0
// CHECK-NEXT:    store b8 [[TMP915]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP916:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP917:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP916]] release, align 1
// CHECK-NEXT:    [[TMP918:%.*]] = bytecast b8 [[TMP917]] to i8
// CHECK-NEXT:    [[TMP919:%.*]] = bytecast b8 [[TMP916]] to i8
// CHECK-NEXT:    [[TMP920:%.*]] = icmp ugt i8 [[TMP918]], [[TMP919]]
// CHECK-NEXT:    [[TMP921:%.*]] = select i1 [[TMP920]], i8 [[TMP919]], i8 [[TMP918]]
// CHECK-NEXT:    store i8 [[TMP921]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP922:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP923:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP922]] release, align 1
// CHECK-NEXT:    [[TMP924:%.*]] = bytecast b8 [[TMP923]] to i8
// CHECK-NEXT:    [[TMP925:%.*]] = bytecast b8 [[TMP922]] to i8
// CHECK-NEXT:    [[TMP926:%.*]] = icmp ult i8 [[TMP924]], [[TMP925]]
// CHECK-NEXT:    [[TMP927:%.*]] = select i1 [[TMP926]], i8 [[TMP925]], i8 [[TMP924]]
// CHECK-NEXT:    store i8 [[TMP927]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP928:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP929:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP928]] release, align 1
// CHECK-NEXT:    [[TMP930:%.*]] = bytecast b8 [[TMP929]] to i8
// CHECK-NEXT:    [[TMP931:%.*]] = bytecast b8 [[TMP928]] to i8
// CHECK-NEXT:    [[TMP932:%.*]] = icmp ult i8 [[TMP930]], [[TMP931]]
// CHECK-NEXT:    [[TMP933:%.*]] = select i1 [[TMP932]], i8 [[TMP931]], i8 [[TMP930]]
// CHECK-NEXT:    store i8 [[TMP933]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP934:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP935:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP934]] release, align 1
// CHECK-NEXT:    [[TMP936:%.*]] = bytecast b8 [[TMP935]] to i8
// CHECK-NEXT:    [[TMP937:%.*]] = bytecast b8 [[TMP934]] to i8
// CHECK-NEXT:    [[TMP938:%.*]] = icmp ugt i8 [[TMP936]], [[TMP937]]
// CHECK-NEXT:    [[TMP939:%.*]] = select i1 [[TMP938]], i8 [[TMP937]], i8 [[TMP936]]
// CHECK-NEXT:    store i8 [[TMP939]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP940:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP941:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP942:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP940]], b8 [[TMP941]] release monotonic, align 1
// CHECK-NEXT:    [[TMP943:%.*]] = extractvalue { b8, i1 } [[TMP942]], 0
// CHECK-NEXT:    [[TMP944:%.*]] = extractvalue { b8, i1 } [[TMP942]], 1
// CHECK-NEXT:    [[TMP945:%.*]] = select i1 [[TMP944]], b8 [[TMP940]], b8 [[TMP943]]
// CHECK-NEXT:    store b8 [[TMP945]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP946:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP947:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP948:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP946]], b8 [[TMP947]] release monotonic, align 1
// CHECK-NEXT:    [[TMP949:%.*]] = extractvalue { b8, i1 } [[TMP948]], 0
// CHECK-NEXT:    [[TMP950:%.*]] = extractvalue { b8, i1 } [[TMP948]], 1
// CHECK-NEXT:    [[TMP951:%.*]] = select i1 [[TMP950]], b8 [[TMP946]], b8 [[TMP949]]
// CHECK-NEXT:    store b8 [[TMP951]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP952:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP953:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP954:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP952]], b8 [[TMP953]] release monotonic, align 1
// CHECK-NEXT:    [[TMP955:%.*]] = extractvalue { b8, i1 } [[TMP954]], 0
// CHECK-NEXT:    [[TMP956:%.*]] = extractvalue { b8, i1 } [[TMP954]], 1
// CHECK-NEXT:    br i1 [[TMP956]], label [[UCX_ATOMIC_EXIT77:%.*]], label [[UCX_ATOMIC_CONT78:%.*]]
// CHECK:       ucx.atomic.cont78:
// CHECK-NEXT:    store b8 [[TMP955]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT77]]
// CHECK:       ucx.atomic.exit77:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP957:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP958:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP959:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP957]], b8 [[TMP958]] release monotonic, align 1
// CHECK-NEXT:    [[TMP960:%.*]] = extractvalue { b8, i1 } [[TMP959]], 0
// CHECK-NEXT:    [[TMP961:%.*]] = extractvalue { b8, i1 } [[TMP959]], 1
// CHECK-NEXT:    br i1 [[TMP961]], label [[UCX_ATOMIC_EXIT79:%.*]], label [[UCX_ATOMIC_CONT80:%.*]]
// CHECK:       ucx.atomic.cont80:
// CHECK-NEXT:    store b8 [[TMP960]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT79]]
// CHECK:       ucx.atomic.exit79:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP962:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP963:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP964:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP962]], b8 [[TMP963]] release monotonic, align 1
// CHECK-NEXT:    [[TMP965:%.*]] = extractvalue { b8, i1 } [[TMP964]], 1
// CHECK-NEXT:    [[TMP966:%.*]] = zext i1 [[TMP965]] to i8
// CHECK-NEXT:    [[TMP967:%.*]] = bitcast i8 [[TMP966]] to b8
// CHECK-NEXT:    store b8 [[TMP967]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP968:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP969:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP970:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP968]], b8 [[TMP969]] release monotonic, align 1
// CHECK-NEXT:    [[TMP971:%.*]] = extractvalue { b8, i1 } [[TMP970]], 1
// CHECK-NEXT:    [[TMP972:%.*]] = zext i1 [[TMP971]] to i8
// CHECK-NEXT:    [[TMP973:%.*]] = bitcast i8 [[TMP972]] to b8
// CHECK-NEXT:    store b8 [[TMP973]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP974:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP975:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP976:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP974]], b8 [[TMP975]] release monotonic, align 1
// CHECK-NEXT:    [[TMP977:%.*]] = extractvalue { b8, i1 } [[TMP976]], 0
// CHECK-NEXT:    [[TMP978:%.*]] = extractvalue { b8, i1 } [[TMP976]], 1
// CHECK-NEXT:    br i1 [[TMP978]], label [[UCX_ATOMIC_EXIT81:%.*]], label [[UCX_ATOMIC_CONT82:%.*]]
// CHECK:       ucx.atomic.cont82:
// CHECK-NEXT:    store b8 [[TMP977]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT81]]
// CHECK:       ucx.atomic.exit81:
// CHECK-NEXT:    [[TMP979:%.*]] = extractvalue { b8, i1 } [[TMP976]], 1
// CHECK-NEXT:    [[TMP980:%.*]] = zext i1 [[TMP979]] to i8
// CHECK-NEXT:    [[TMP981:%.*]] = bitcast i8 [[TMP980]] to b8
// CHECK-NEXT:    store b8 [[TMP981]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP982:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP983:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP984:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP982]], b8 [[TMP983]] release monotonic, align 1
// CHECK-NEXT:    [[TMP985:%.*]] = extractvalue { b8, i1 } [[TMP984]], 0
// CHECK-NEXT:    [[TMP986:%.*]] = extractvalue { b8, i1 } [[TMP984]], 1
// CHECK-NEXT:    br i1 [[TMP986]], label [[UCX_ATOMIC_EXIT83:%.*]], label [[UCX_ATOMIC_CONT84:%.*]]
// CHECK:       ucx.atomic.cont84:
// CHECK-NEXT:    store b8 [[TMP985]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT83]]
// CHECK:       ucx.atomic.exit83:
// CHECK-NEXT:    [[TMP987:%.*]] = extractvalue { b8, i1 } [[TMP984]], 1
// CHECK-NEXT:    [[TMP988:%.*]] = zext i1 [[TMP987]] to i8
// CHECK-NEXT:    [[TMP989:%.*]] = bitcast i8 [[TMP988]] to b8
// CHECK-NEXT:    store b8 [[TMP989]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP990:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP991:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP990]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP991]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP992:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP993:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP992]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP993]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP994:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP995:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP994]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP995]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP996:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP997:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP996]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP997]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP998:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP999:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP1000:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP998]], b8 [[TMP999]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP1001:%.*]] = extractvalue { b8, i1 } [[TMP1000]], 0
// CHECK-NEXT:    store b8 [[TMP1001]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1002:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1003:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP1004:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP1002]], b8 [[TMP1003]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP1005:%.*]] = extractvalue { b8, i1 } [[TMP1004]], 0
// CHECK-NEXT:    store b8 [[TMP1005]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1006:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1007:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP1006]] seq_cst, align 1
// CHECK-NEXT:    [[TMP1008:%.*]] = bytecast b8 [[TMP1007]] to i8
// CHECK-NEXT:    [[TMP1009:%.*]] = bytecast b8 [[TMP1006]] to i8
// CHECK-NEXT:    [[TMP1010:%.*]] = icmp ugt i8 [[TMP1008]], [[TMP1009]]
// CHECK-NEXT:    [[TMP1011:%.*]] = select i1 [[TMP1010]], i8 [[TMP1009]], i8 [[TMP1008]]
// CHECK-NEXT:    store i8 [[TMP1011]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1012:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1013:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP1012]] seq_cst, align 1
// CHECK-NEXT:    [[TMP1014:%.*]] = bytecast b8 [[TMP1013]] to i8
// CHECK-NEXT:    [[TMP1015:%.*]] = bytecast b8 [[TMP1012]] to i8
// CHECK-NEXT:    [[TMP1016:%.*]] = icmp ult i8 [[TMP1014]], [[TMP1015]]
// CHECK-NEXT:    [[TMP1017:%.*]] = select i1 [[TMP1016]], i8 [[TMP1015]], i8 [[TMP1014]]
// CHECK-NEXT:    store i8 [[TMP1017]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1018:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1019:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP1018]] seq_cst, align 1
// CHECK-NEXT:    [[TMP1020:%.*]] = bytecast b8 [[TMP1019]] to i8
// CHECK-NEXT:    [[TMP1021:%.*]] = bytecast b8 [[TMP1018]] to i8
// CHECK-NEXT:    [[TMP1022:%.*]] = icmp ult i8 [[TMP1020]], [[TMP1021]]
// CHECK-NEXT:    [[TMP1023:%.*]] = select i1 [[TMP1022]], i8 [[TMP1021]], i8 [[TMP1020]]
// CHECK-NEXT:    store i8 [[TMP1023]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1024:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1025:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP1024]] seq_cst, align 1
// CHECK-NEXT:    [[TMP1026:%.*]] = bytecast b8 [[TMP1025]] to i8
// CHECK-NEXT:    [[TMP1027:%.*]] = bytecast b8 [[TMP1024]] to i8
// CHECK-NEXT:    [[TMP1028:%.*]] = icmp ugt i8 [[TMP1026]], [[TMP1027]]
// CHECK-NEXT:    [[TMP1029:%.*]] = select i1 [[TMP1028]], i8 [[TMP1027]], i8 [[TMP1026]]
// CHECK-NEXT:    store i8 [[TMP1029]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1030:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1031:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP1032:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP1030]], b8 [[TMP1031]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP1033:%.*]] = extractvalue { b8, i1 } [[TMP1032]], 0
// CHECK-NEXT:    [[TMP1034:%.*]] = extractvalue { b8, i1 } [[TMP1032]], 1
// CHECK-NEXT:    [[TMP1035:%.*]] = select i1 [[TMP1034]], b8 [[TMP1030]], b8 [[TMP1033]]
// CHECK-NEXT:    store b8 [[TMP1035]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1036:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1037:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP1038:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP1036]], b8 [[TMP1037]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP1039:%.*]] = extractvalue { b8, i1 } [[TMP1038]], 0
// CHECK-NEXT:    [[TMP1040:%.*]] = extractvalue { b8, i1 } [[TMP1038]], 1
// CHECK-NEXT:    [[TMP1041:%.*]] = select i1 [[TMP1040]], b8 [[TMP1036]], b8 [[TMP1039]]
// CHECK-NEXT:    store b8 [[TMP1041]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1042:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1043:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP1044:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP1042]], b8 [[TMP1043]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP1045:%.*]] = extractvalue { b8, i1 } [[TMP1044]], 0
// CHECK-NEXT:    [[TMP1046:%.*]] = extractvalue { b8, i1 } [[TMP1044]], 1
// CHECK-NEXT:    br i1 [[TMP1046]], label [[UCX_ATOMIC_EXIT85:%.*]], label [[UCX_ATOMIC_CONT86:%.*]]
// CHECK:       ucx.atomic.cont86:
// CHECK-NEXT:    store b8 [[TMP1045]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT85]]
// CHECK:       ucx.atomic.exit85:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1047:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1048:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP1049:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP1047]], b8 [[TMP1048]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP1050:%.*]] = extractvalue { b8, i1 } [[TMP1049]], 0
// CHECK-NEXT:    [[TMP1051:%.*]] = extractvalue { b8, i1 } [[TMP1049]], 1
// CHECK-NEXT:    br i1 [[TMP1051]], label [[UCX_ATOMIC_EXIT87:%.*]], label [[UCX_ATOMIC_CONT88:%.*]]
// CHECK:       ucx.atomic.cont88:
// CHECK-NEXT:    store b8 [[TMP1050]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT87]]
// CHECK:       ucx.atomic.exit87:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1052:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1053:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP1054:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP1052]], b8 [[TMP1053]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP1055:%.*]] = extractvalue { b8, i1 } [[TMP1054]], 1
// CHECK-NEXT:    [[TMP1056:%.*]] = zext i1 [[TMP1055]] to i8
// CHECK-NEXT:    [[TMP1057:%.*]] = bitcast i8 [[TMP1056]] to b8
// CHECK-NEXT:    store b8 [[TMP1057]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1058:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1059:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP1060:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP1058]], b8 [[TMP1059]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP1061:%.*]] = extractvalue { b8, i1 } [[TMP1060]], 1
// CHECK-NEXT:    [[TMP1062:%.*]] = zext i1 [[TMP1061]] to i8
// CHECK-NEXT:    [[TMP1063:%.*]] = bitcast i8 [[TMP1062]] to b8
// CHECK-NEXT:    store b8 [[TMP1063]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1064:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1065:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP1066:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP1064]], b8 [[TMP1065]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP1067:%.*]] = extractvalue { b8, i1 } [[TMP1066]], 0
// CHECK-NEXT:    [[TMP1068:%.*]] = extractvalue { b8, i1 } [[TMP1066]], 1
// CHECK-NEXT:    br i1 [[TMP1068]], label [[UCX_ATOMIC_EXIT89:%.*]], label [[UCX_ATOMIC_CONT90:%.*]]
// CHECK:       ucx.atomic.cont90:
// CHECK-NEXT:    store b8 [[TMP1067]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT89]]
// CHECK:       ucx.atomic.exit89:
// CHECK-NEXT:    [[TMP1069:%.*]] = extractvalue { b8, i1 } [[TMP1066]], 1
// CHECK-NEXT:    [[TMP1070:%.*]] = zext i1 [[TMP1069]] to i8
// CHECK-NEXT:    [[TMP1071:%.*]] = bitcast i8 [[TMP1070]] to b8
// CHECK-NEXT:    store b8 [[TMP1071]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1072:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1073:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP1074:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP1072]], b8 [[TMP1073]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP1075:%.*]] = extractvalue { b8, i1 } [[TMP1074]], 0
// CHECK-NEXT:    [[TMP1076:%.*]] = extractvalue { b8, i1 } [[TMP1074]], 1
// CHECK-NEXT:    br i1 [[TMP1076]], label [[UCX_ATOMIC_EXIT91:%.*]], label [[UCX_ATOMIC_CONT92:%.*]]
// CHECK:       ucx.atomic.cont92:
// CHECK-NEXT:    store b8 [[TMP1075]], ptr [[UCV]], align 1
// CHECK-NEXT:    br label [[UCX_ATOMIC_EXIT91]]
// CHECK:       ucx.atomic.exit91:
// CHECK-NEXT:    [[TMP1077:%.*]] = extractvalue { b8, i1 } [[TMP1074]], 1
// CHECK-NEXT:    [[TMP1078:%.*]] = zext i1 [[TMP1077]] to i8
// CHECK-NEXT:    [[TMP1079:%.*]] = bitcast i8 [[TMP1078]] to b8
// CHECK-NEXT:    store b8 [[TMP1079]], ptr [[UCR]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1080:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1081:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1080]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1081]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1082:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1083:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1082]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1083]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1084:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1085:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1084]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1085]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1086:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1087:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1086]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1087]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1088:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1089:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1090:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1088]], i16 [[TMP1089]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1091:%.*]] = extractvalue { i16, i1 } [[TMP1090]], 0
// CHECK-NEXT:    store i16 [[TMP1091]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1092:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1093:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1094:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1092]], i16 [[TMP1093]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1095:%.*]] = extractvalue { i16, i1 } [[TMP1094]], 0
// CHECK-NEXT:    store i16 [[TMP1095]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1096:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1097:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1096]] monotonic, align 2
// CHECK-NEXT:    [[TMP1098:%.*]] = icmp sgt i16 [[TMP1097]], [[TMP1096]]
// CHECK-NEXT:    [[TMP1099:%.*]] = select i1 [[TMP1098]], i16 [[TMP1096]], i16 [[TMP1097]]
// CHECK-NEXT:    store i16 [[TMP1099]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1100:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1101:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1100]] monotonic, align 2
// CHECK-NEXT:    [[TMP1102:%.*]] = icmp slt i16 [[TMP1101]], [[TMP1100]]
// CHECK-NEXT:    [[TMP1103:%.*]] = select i1 [[TMP1102]], i16 [[TMP1100]], i16 [[TMP1101]]
// CHECK-NEXT:    store i16 [[TMP1103]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1104:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1105:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1104]] monotonic, align 2
// CHECK-NEXT:    [[TMP1106:%.*]] = icmp slt i16 [[TMP1105]], [[TMP1104]]
// CHECK-NEXT:    [[TMP1107:%.*]] = select i1 [[TMP1106]], i16 [[TMP1104]], i16 [[TMP1105]]
// CHECK-NEXT:    store i16 [[TMP1107]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1108:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1109:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1108]] monotonic, align 2
// CHECK-NEXT:    [[TMP1110:%.*]] = icmp sgt i16 [[TMP1109]], [[TMP1108]]
// CHECK-NEXT:    [[TMP1111:%.*]] = select i1 [[TMP1110]], i16 [[TMP1108]], i16 [[TMP1109]]
// CHECK-NEXT:    store i16 [[TMP1111]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1112:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1113:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1114:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1112]], i16 [[TMP1113]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1115:%.*]] = extractvalue { i16, i1 } [[TMP1114]], 0
// CHECK-NEXT:    [[TMP1116:%.*]] = extractvalue { i16, i1 } [[TMP1114]], 1
// CHECK-NEXT:    [[TMP1117:%.*]] = select i1 [[TMP1116]], i16 [[TMP1112]], i16 [[TMP1115]]
// CHECK-NEXT:    store i16 [[TMP1117]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1118:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1119:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1120:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1118]], i16 [[TMP1119]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1121:%.*]] = extractvalue { i16, i1 } [[TMP1120]], 0
// CHECK-NEXT:    [[TMP1122:%.*]] = extractvalue { i16, i1 } [[TMP1120]], 1
// CHECK-NEXT:    [[TMP1123:%.*]] = select i1 [[TMP1122]], i16 [[TMP1118]], i16 [[TMP1121]]
// CHECK-NEXT:    store i16 [[TMP1123]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1124:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1125:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1126:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1124]], i16 [[TMP1125]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1127:%.*]] = extractvalue { i16, i1 } [[TMP1126]], 0
// CHECK-NEXT:    [[TMP1128:%.*]] = extractvalue { i16, i1 } [[TMP1126]], 1
// CHECK-NEXT:    br i1 [[TMP1128]], label [[SX_ATOMIC_EXIT:%.*]], label [[SX_ATOMIC_CONT:%.*]]
// CHECK:       sx.atomic.cont:
// CHECK-NEXT:    store i16 [[TMP1127]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT]]
// CHECK:       sx.atomic.exit:
// CHECK-NEXT:    [[TMP1129:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1130:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1131:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1129]], i16 [[TMP1130]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1132:%.*]] = extractvalue { i16, i1 } [[TMP1131]], 0
// CHECK-NEXT:    [[TMP1133:%.*]] = extractvalue { i16, i1 } [[TMP1131]], 1
// CHECK-NEXT:    br i1 [[TMP1133]], label [[SX_ATOMIC_EXIT93:%.*]], label [[SX_ATOMIC_CONT94:%.*]]
// CHECK:       sx.atomic.cont94:
// CHECK-NEXT:    store i16 [[TMP1132]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT93]]
// CHECK:       sx.atomic.exit93:
// CHECK-NEXT:    [[TMP1134:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1135:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1136:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1134]], i16 [[TMP1135]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1137:%.*]] = extractvalue { i16, i1 } [[TMP1136]], 1
// CHECK-NEXT:    [[TMP1138:%.*]] = sext i1 [[TMP1137]] to i16
// CHECK-NEXT:    store i16 [[TMP1138]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1139:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1140:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1141:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1139]], i16 [[TMP1140]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1142:%.*]] = extractvalue { i16, i1 } [[TMP1141]], 1
// CHECK-NEXT:    [[TMP1143:%.*]] = sext i1 [[TMP1142]] to i16
// CHECK-NEXT:    store i16 [[TMP1143]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1144:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1145:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1146:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1144]], i16 [[TMP1145]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1147:%.*]] = extractvalue { i16, i1 } [[TMP1146]], 0
// CHECK-NEXT:    [[TMP1148:%.*]] = extractvalue { i16, i1 } [[TMP1146]], 1
// CHECK-NEXT:    br i1 [[TMP1148]], label [[SX_ATOMIC_EXIT95:%.*]], label [[SX_ATOMIC_CONT96:%.*]]
// CHECK:       sx.atomic.cont96:
// CHECK-NEXT:    store i16 [[TMP1147]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT95]]
// CHECK:       sx.atomic.exit95:
// CHECK-NEXT:    [[TMP1149:%.*]] = extractvalue { i16, i1 } [[TMP1146]], 1
// CHECK-NEXT:    [[TMP1150:%.*]] = sext i1 [[TMP1149]] to i16
// CHECK-NEXT:    store i16 [[TMP1150]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1151:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1152:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1153:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1151]], i16 [[TMP1152]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1154:%.*]] = extractvalue { i16, i1 } [[TMP1153]], 0
// CHECK-NEXT:    [[TMP1155:%.*]] = extractvalue { i16, i1 } [[TMP1153]], 1
// CHECK-NEXT:    br i1 [[TMP1155]], label [[SX_ATOMIC_EXIT97:%.*]], label [[SX_ATOMIC_CONT98:%.*]]
// CHECK:       sx.atomic.cont98:
// CHECK-NEXT:    store i16 [[TMP1154]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT97]]
// CHECK:       sx.atomic.exit97:
// CHECK-NEXT:    [[TMP1156:%.*]] = extractvalue { i16, i1 } [[TMP1153]], 1
// CHECK-NEXT:    [[TMP1157:%.*]] = sext i1 [[TMP1156]] to i16
// CHECK-NEXT:    store i16 [[TMP1157]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1158:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1159:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1158]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1159]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1160:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1161:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1160]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1161]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1162:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1163:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1162]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1163]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1164:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1165:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1164]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1165]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1166:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1167:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1168:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1166]], i16 [[TMP1167]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1169:%.*]] = extractvalue { i16, i1 } [[TMP1168]], 0
// CHECK-NEXT:    store i16 [[TMP1169]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1170:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1171:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1172:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1170]], i16 [[TMP1171]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1173:%.*]] = extractvalue { i16, i1 } [[TMP1172]], 0
// CHECK-NEXT:    store i16 [[TMP1173]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1174:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1175:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1174]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1176:%.*]] = icmp sgt i16 [[TMP1175]], [[TMP1174]]
// CHECK-NEXT:    [[TMP1177:%.*]] = select i1 [[TMP1176]], i16 [[TMP1174]], i16 [[TMP1175]]
// CHECK-NEXT:    store i16 [[TMP1177]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1178:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1179:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1178]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1180:%.*]] = icmp slt i16 [[TMP1179]], [[TMP1178]]
// CHECK-NEXT:    [[TMP1181:%.*]] = select i1 [[TMP1180]], i16 [[TMP1178]], i16 [[TMP1179]]
// CHECK-NEXT:    store i16 [[TMP1181]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1182:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1183:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1182]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1184:%.*]] = icmp slt i16 [[TMP1183]], [[TMP1182]]
// CHECK-NEXT:    [[TMP1185:%.*]] = select i1 [[TMP1184]], i16 [[TMP1182]], i16 [[TMP1183]]
// CHECK-NEXT:    store i16 [[TMP1185]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1186:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1187:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1186]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1188:%.*]] = icmp sgt i16 [[TMP1187]], [[TMP1186]]
// CHECK-NEXT:    [[TMP1189:%.*]] = select i1 [[TMP1188]], i16 [[TMP1186]], i16 [[TMP1187]]
// CHECK-NEXT:    store i16 [[TMP1189]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1190:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1191:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1192:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1190]], i16 [[TMP1191]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1193:%.*]] = extractvalue { i16, i1 } [[TMP1192]], 0
// CHECK-NEXT:    [[TMP1194:%.*]] = extractvalue { i16, i1 } [[TMP1192]], 1
// CHECK-NEXT:    [[TMP1195:%.*]] = select i1 [[TMP1194]], i16 [[TMP1190]], i16 [[TMP1193]]
// CHECK-NEXT:    store i16 [[TMP1195]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1196:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1197:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1198:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1196]], i16 [[TMP1197]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1199:%.*]] = extractvalue { i16, i1 } [[TMP1198]], 0
// CHECK-NEXT:    [[TMP1200:%.*]] = extractvalue { i16, i1 } [[TMP1198]], 1
// CHECK-NEXT:    [[TMP1201:%.*]] = select i1 [[TMP1200]], i16 [[TMP1196]], i16 [[TMP1199]]
// CHECK-NEXT:    store i16 [[TMP1201]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1202:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1203:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1204:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1202]], i16 [[TMP1203]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1205:%.*]] = extractvalue { i16, i1 } [[TMP1204]], 0
// CHECK-NEXT:    [[TMP1206:%.*]] = extractvalue { i16, i1 } [[TMP1204]], 1
// CHECK-NEXT:    br i1 [[TMP1206]], label [[SX_ATOMIC_EXIT99:%.*]], label [[SX_ATOMIC_CONT100:%.*]]
// CHECK:       sx.atomic.cont100:
// CHECK-NEXT:    store i16 [[TMP1205]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT99]]
// CHECK:       sx.atomic.exit99:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1207:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1208:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1209:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1207]], i16 [[TMP1208]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1210:%.*]] = extractvalue { i16, i1 } [[TMP1209]], 0
// CHECK-NEXT:    [[TMP1211:%.*]] = extractvalue { i16, i1 } [[TMP1209]], 1
// CHECK-NEXT:    br i1 [[TMP1211]], label [[SX_ATOMIC_EXIT101:%.*]], label [[SX_ATOMIC_CONT102:%.*]]
// CHECK:       sx.atomic.cont102:
// CHECK-NEXT:    store i16 [[TMP1210]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT101]]
// CHECK:       sx.atomic.exit101:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1212:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1213:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1214:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1212]], i16 [[TMP1213]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1215:%.*]] = extractvalue { i16, i1 } [[TMP1214]], 1
// CHECK-NEXT:    [[TMP1216:%.*]] = sext i1 [[TMP1215]] to i16
// CHECK-NEXT:    store i16 [[TMP1216]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1217:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1218:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1219:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1217]], i16 [[TMP1218]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1220:%.*]] = extractvalue { i16, i1 } [[TMP1219]], 1
// CHECK-NEXT:    [[TMP1221:%.*]] = sext i1 [[TMP1220]] to i16
// CHECK-NEXT:    store i16 [[TMP1221]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1222:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1223:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1224:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1222]], i16 [[TMP1223]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1225:%.*]] = extractvalue { i16, i1 } [[TMP1224]], 0
// CHECK-NEXT:    [[TMP1226:%.*]] = extractvalue { i16, i1 } [[TMP1224]], 1
// CHECK-NEXT:    br i1 [[TMP1226]], label [[SX_ATOMIC_EXIT103:%.*]], label [[SX_ATOMIC_CONT104:%.*]]
// CHECK:       sx.atomic.cont104:
// CHECK-NEXT:    store i16 [[TMP1225]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT103]]
// CHECK:       sx.atomic.exit103:
// CHECK-NEXT:    [[TMP1227:%.*]] = extractvalue { i16, i1 } [[TMP1224]], 1
// CHECK-NEXT:    [[TMP1228:%.*]] = sext i1 [[TMP1227]] to i16
// CHECK-NEXT:    store i16 [[TMP1228]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1229:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1230:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1231:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1229]], i16 [[TMP1230]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1232:%.*]] = extractvalue { i16, i1 } [[TMP1231]], 0
// CHECK-NEXT:    [[TMP1233:%.*]] = extractvalue { i16, i1 } [[TMP1231]], 1
// CHECK-NEXT:    br i1 [[TMP1233]], label [[SX_ATOMIC_EXIT105:%.*]], label [[SX_ATOMIC_CONT106:%.*]]
// CHECK:       sx.atomic.cont106:
// CHECK-NEXT:    store i16 [[TMP1232]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT105]]
// CHECK:       sx.atomic.exit105:
// CHECK-NEXT:    [[TMP1234:%.*]] = extractvalue { i16, i1 } [[TMP1231]], 1
// CHECK-NEXT:    [[TMP1235:%.*]] = sext i1 [[TMP1234]] to i16
// CHECK-NEXT:    store i16 [[TMP1235]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1236:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1237:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1236]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1237]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1238:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1239:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1238]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1239]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1240:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1241:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1240]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1241]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1242:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1243:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1242]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1243]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1244:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1245:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1246:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1244]], i16 [[TMP1245]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1247:%.*]] = extractvalue { i16, i1 } [[TMP1246]], 0
// CHECK-NEXT:    store i16 [[TMP1247]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1248:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1249:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1250:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1248]], i16 [[TMP1249]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1251:%.*]] = extractvalue { i16, i1 } [[TMP1250]], 0
// CHECK-NEXT:    store i16 [[TMP1251]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1252:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1253:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1252]] acquire, align 2
// CHECK-NEXT:    [[TMP1254:%.*]] = icmp sgt i16 [[TMP1253]], [[TMP1252]]
// CHECK-NEXT:    [[TMP1255:%.*]] = select i1 [[TMP1254]], i16 [[TMP1252]], i16 [[TMP1253]]
// CHECK-NEXT:    store i16 [[TMP1255]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1256:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1257:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1256]] acquire, align 2
// CHECK-NEXT:    [[TMP1258:%.*]] = icmp slt i16 [[TMP1257]], [[TMP1256]]
// CHECK-NEXT:    [[TMP1259:%.*]] = select i1 [[TMP1258]], i16 [[TMP1256]], i16 [[TMP1257]]
// CHECK-NEXT:    store i16 [[TMP1259]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1260:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1261:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1260]] acquire, align 2
// CHECK-NEXT:    [[TMP1262:%.*]] = icmp slt i16 [[TMP1261]], [[TMP1260]]
// CHECK-NEXT:    [[TMP1263:%.*]] = select i1 [[TMP1262]], i16 [[TMP1260]], i16 [[TMP1261]]
// CHECK-NEXT:    store i16 [[TMP1263]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1264:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1265:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1264]] acquire, align 2
// CHECK-NEXT:    [[TMP1266:%.*]] = icmp sgt i16 [[TMP1265]], [[TMP1264]]
// CHECK-NEXT:    [[TMP1267:%.*]] = select i1 [[TMP1266]], i16 [[TMP1264]], i16 [[TMP1265]]
// CHECK-NEXT:    store i16 [[TMP1267]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1268:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1269:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1270:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1268]], i16 [[TMP1269]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1271:%.*]] = extractvalue { i16, i1 } [[TMP1270]], 0
// CHECK-NEXT:    [[TMP1272:%.*]] = extractvalue { i16, i1 } [[TMP1270]], 1
// CHECK-NEXT:    [[TMP1273:%.*]] = select i1 [[TMP1272]], i16 [[TMP1268]], i16 [[TMP1271]]
// CHECK-NEXT:    store i16 [[TMP1273]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1274:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1275:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1276:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1274]], i16 [[TMP1275]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1277:%.*]] = extractvalue { i16, i1 } [[TMP1276]], 0
// CHECK-NEXT:    [[TMP1278:%.*]] = extractvalue { i16, i1 } [[TMP1276]], 1
// CHECK-NEXT:    [[TMP1279:%.*]] = select i1 [[TMP1278]], i16 [[TMP1274]], i16 [[TMP1277]]
// CHECK-NEXT:    store i16 [[TMP1279]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1280:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1281:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1282:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1280]], i16 [[TMP1281]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1283:%.*]] = extractvalue { i16, i1 } [[TMP1282]], 0
// CHECK-NEXT:    [[TMP1284:%.*]] = extractvalue { i16, i1 } [[TMP1282]], 1
// CHECK-NEXT:    br i1 [[TMP1284]], label [[SX_ATOMIC_EXIT107:%.*]], label [[SX_ATOMIC_CONT108:%.*]]
// CHECK:       sx.atomic.cont108:
// CHECK-NEXT:    store i16 [[TMP1283]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT107]]
// CHECK:       sx.atomic.exit107:
// CHECK-NEXT:    [[TMP1285:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1286:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1287:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1285]], i16 [[TMP1286]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1288:%.*]] = extractvalue { i16, i1 } [[TMP1287]], 0
// CHECK-NEXT:    [[TMP1289:%.*]] = extractvalue { i16, i1 } [[TMP1287]], 1
// CHECK-NEXT:    br i1 [[TMP1289]], label [[SX_ATOMIC_EXIT109:%.*]], label [[SX_ATOMIC_CONT110:%.*]]
// CHECK:       sx.atomic.cont110:
// CHECK-NEXT:    store i16 [[TMP1288]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT109]]
// CHECK:       sx.atomic.exit109:
// CHECK-NEXT:    [[TMP1290:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1291:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1292:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1290]], i16 [[TMP1291]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1293:%.*]] = extractvalue { i16, i1 } [[TMP1292]], 1
// CHECK-NEXT:    [[TMP1294:%.*]] = sext i1 [[TMP1293]] to i16
// CHECK-NEXT:    store i16 [[TMP1294]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1295:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1296:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1297:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1295]], i16 [[TMP1296]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1298:%.*]] = extractvalue { i16, i1 } [[TMP1297]], 1
// CHECK-NEXT:    [[TMP1299:%.*]] = sext i1 [[TMP1298]] to i16
// CHECK-NEXT:    store i16 [[TMP1299]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1300:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1301:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1302:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1300]], i16 [[TMP1301]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1303:%.*]] = extractvalue { i16, i1 } [[TMP1302]], 0
// CHECK-NEXT:    [[TMP1304:%.*]] = extractvalue { i16, i1 } [[TMP1302]], 1
// CHECK-NEXT:    br i1 [[TMP1304]], label [[SX_ATOMIC_EXIT111:%.*]], label [[SX_ATOMIC_CONT112:%.*]]
// CHECK:       sx.atomic.cont112:
// CHECK-NEXT:    store i16 [[TMP1303]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT111]]
// CHECK:       sx.atomic.exit111:
// CHECK-NEXT:    [[TMP1305:%.*]] = extractvalue { i16, i1 } [[TMP1302]], 1
// CHECK-NEXT:    [[TMP1306:%.*]] = sext i1 [[TMP1305]] to i16
// CHECK-NEXT:    store i16 [[TMP1306]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1307:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1308:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1309:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1307]], i16 [[TMP1308]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1310:%.*]] = extractvalue { i16, i1 } [[TMP1309]], 0
// CHECK-NEXT:    [[TMP1311:%.*]] = extractvalue { i16, i1 } [[TMP1309]], 1
// CHECK-NEXT:    br i1 [[TMP1311]], label [[SX_ATOMIC_EXIT113:%.*]], label [[SX_ATOMIC_CONT114:%.*]]
// CHECK:       sx.atomic.cont114:
// CHECK-NEXT:    store i16 [[TMP1310]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT113]]
// CHECK:       sx.atomic.exit113:
// CHECK-NEXT:    [[TMP1312:%.*]] = extractvalue { i16, i1 } [[TMP1309]], 1
// CHECK-NEXT:    [[TMP1313:%.*]] = sext i1 [[TMP1312]] to i16
// CHECK-NEXT:    store i16 [[TMP1313]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1314:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1315:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1314]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1315]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1316:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1317:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1316]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1317]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1318:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1319:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1318]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1319]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1320:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1321:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1320]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1321]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1322:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1323:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1324:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1322]], i16 [[TMP1323]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1325:%.*]] = extractvalue { i16, i1 } [[TMP1324]], 0
// CHECK-NEXT:    store i16 [[TMP1325]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1326:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1327:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1328:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1326]], i16 [[TMP1327]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1329:%.*]] = extractvalue { i16, i1 } [[TMP1328]], 0
// CHECK-NEXT:    store i16 [[TMP1329]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1330:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1331:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1330]] monotonic, align 2
// CHECK-NEXT:    [[TMP1332:%.*]] = icmp sgt i16 [[TMP1331]], [[TMP1330]]
// CHECK-NEXT:    [[TMP1333:%.*]] = select i1 [[TMP1332]], i16 [[TMP1330]], i16 [[TMP1331]]
// CHECK-NEXT:    store i16 [[TMP1333]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1334:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1335:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1334]] monotonic, align 2
// CHECK-NEXT:    [[TMP1336:%.*]] = icmp slt i16 [[TMP1335]], [[TMP1334]]
// CHECK-NEXT:    [[TMP1337:%.*]] = select i1 [[TMP1336]], i16 [[TMP1334]], i16 [[TMP1335]]
// CHECK-NEXT:    store i16 [[TMP1337]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1338:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1339:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1338]] monotonic, align 2
// CHECK-NEXT:    [[TMP1340:%.*]] = icmp slt i16 [[TMP1339]], [[TMP1338]]
// CHECK-NEXT:    [[TMP1341:%.*]] = select i1 [[TMP1340]], i16 [[TMP1338]], i16 [[TMP1339]]
// CHECK-NEXT:    store i16 [[TMP1341]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1342:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1343:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1342]] monotonic, align 2
// CHECK-NEXT:    [[TMP1344:%.*]] = icmp sgt i16 [[TMP1343]], [[TMP1342]]
// CHECK-NEXT:    [[TMP1345:%.*]] = select i1 [[TMP1344]], i16 [[TMP1342]], i16 [[TMP1343]]
// CHECK-NEXT:    store i16 [[TMP1345]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1346:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1347:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1348:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1346]], i16 [[TMP1347]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1349:%.*]] = extractvalue { i16, i1 } [[TMP1348]], 0
// CHECK-NEXT:    [[TMP1350:%.*]] = extractvalue { i16, i1 } [[TMP1348]], 1
// CHECK-NEXT:    [[TMP1351:%.*]] = select i1 [[TMP1350]], i16 [[TMP1346]], i16 [[TMP1349]]
// CHECK-NEXT:    store i16 [[TMP1351]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1352:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1353:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1354:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1352]], i16 [[TMP1353]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1355:%.*]] = extractvalue { i16, i1 } [[TMP1354]], 0
// CHECK-NEXT:    [[TMP1356:%.*]] = extractvalue { i16, i1 } [[TMP1354]], 1
// CHECK-NEXT:    [[TMP1357:%.*]] = select i1 [[TMP1356]], i16 [[TMP1352]], i16 [[TMP1355]]
// CHECK-NEXT:    store i16 [[TMP1357]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP1358:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1359:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1360:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1358]], i16 [[TMP1359]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1361:%.*]] = extractvalue { i16, i1 } [[TMP1360]], 0
// CHECK-NEXT:    [[TMP1362:%.*]] = extractvalue { i16, i1 } [[TMP1360]], 1
// CHECK-NEXT:    br i1 [[TMP1362]], label [[SX_ATOMIC_EXIT115:%.*]], label [[SX_ATOMIC_CONT116:%.*]]
// CHECK:       sx.atomic.cont116:
// CHECK-NEXT:    store i16 [[TMP1361]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT115]]
// CHECK:       sx.atomic.exit115:
// CHECK-NEXT:    [[TMP1363:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1364:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1365:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1363]], i16 [[TMP1364]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1366:%.*]] = extractvalue { i16, i1 } [[TMP1365]], 0
// CHECK-NEXT:    [[TMP1367:%.*]] = extractvalue { i16, i1 } [[TMP1365]], 1
// CHECK-NEXT:    br i1 [[TMP1367]], label [[SX_ATOMIC_EXIT117:%.*]], label [[SX_ATOMIC_CONT118:%.*]]
// CHECK:       sx.atomic.cont118:
// CHECK-NEXT:    store i16 [[TMP1366]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT117]]
// CHECK:       sx.atomic.exit117:
// CHECK-NEXT:    [[TMP1368:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1369:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1370:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1368]], i16 [[TMP1369]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1371:%.*]] = extractvalue { i16, i1 } [[TMP1370]], 1
// CHECK-NEXT:    [[TMP1372:%.*]] = sext i1 [[TMP1371]] to i16
// CHECK-NEXT:    store i16 [[TMP1372]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1373:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1374:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1375:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1373]], i16 [[TMP1374]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1376:%.*]] = extractvalue { i16, i1 } [[TMP1375]], 1
// CHECK-NEXT:    [[TMP1377:%.*]] = sext i1 [[TMP1376]] to i16
// CHECK-NEXT:    store i16 [[TMP1377]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1378:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1379:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1380:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1378]], i16 [[TMP1379]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1381:%.*]] = extractvalue { i16, i1 } [[TMP1380]], 0
// CHECK-NEXT:    [[TMP1382:%.*]] = extractvalue { i16, i1 } [[TMP1380]], 1
// CHECK-NEXT:    br i1 [[TMP1382]], label [[SX_ATOMIC_EXIT119:%.*]], label [[SX_ATOMIC_CONT120:%.*]]
// CHECK:       sx.atomic.cont120:
// CHECK-NEXT:    store i16 [[TMP1381]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT119]]
// CHECK:       sx.atomic.exit119:
// CHECK-NEXT:    [[TMP1383:%.*]] = extractvalue { i16, i1 } [[TMP1380]], 1
// CHECK-NEXT:    [[TMP1384:%.*]] = sext i1 [[TMP1383]] to i16
// CHECK-NEXT:    store i16 [[TMP1384]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1385:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1386:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1387:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1385]], i16 [[TMP1386]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1388:%.*]] = extractvalue { i16, i1 } [[TMP1387]], 0
// CHECK-NEXT:    [[TMP1389:%.*]] = extractvalue { i16, i1 } [[TMP1387]], 1
// CHECK-NEXT:    br i1 [[TMP1389]], label [[SX_ATOMIC_EXIT121:%.*]], label [[SX_ATOMIC_CONT122:%.*]]
// CHECK:       sx.atomic.cont122:
// CHECK-NEXT:    store i16 [[TMP1388]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT121]]
// CHECK:       sx.atomic.exit121:
// CHECK-NEXT:    [[TMP1390:%.*]] = extractvalue { i16, i1 } [[TMP1387]], 1
// CHECK-NEXT:    [[TMP1391:%.*]] = sext i1 [[TMP1390]] to i16
// CHECK-NEXT:    store i16 [[TMP1391]], ptr [[SR]], align 2
// CHECK-NEXT:    [[TMP1392:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1393:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1392]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1393]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1394:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1395:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1394]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1395]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1396:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1397:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1396]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1397]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1398:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1399:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1398]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1399]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1400:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1401:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1402:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1400]], i16 [[TMP1401]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1403:%.*]] = extractvalue { i16, i1 } [[TMP1402]], 0
// CHECK-NEXT:    store i16 [[TMP1403]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1404:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1405:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1406:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1404]], i16 [[TMP1405]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1407:%.*]] = extractvalue { i16, i1 } [[TMP1406]], 0
// CHECK-NEXT:    store i16 [[TMP1407]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1408:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1409:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1408]] release, align 2
// CHECK-NEXT:    [[TMP1410:%.*]] = icmp sgt i16 [[TMP1409]], [[TMP1408]]
// CHECK-NEXT:    [[TMP1411:%.*]] = select i1 [[TMP1410]], i16 [[TMP1408]], i16 [[TMP1409]]
// CHECK-NEXT:    store i16 [[TMP1411]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1412:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1413:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1412]] release, align 2
// CHECK-NEXT:    [[TMP1414:%.*]] = icmp slt i16 [[TMP1413]], [[TMP1412]]
// CHECK-NEXT:    [[TMP1415:%.*]] = select i1 [[TMP1414]], i16 [[TMP1412]], i16 [[TMP1413]]
// CHECK-NEXT:    store i16 [[TMP1415]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1416:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1417:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1416]] release, align 2
// CHECK-NEXT:    [[TMP1418:%.*]] = icmp slt i16 [[TMP1417]], [[TMP1416]]
// CHECK-NEXT:    [[TMP1419:%.*]] = select i1 [[TMP1418]], i16 [[TMP1416]], i16 [[TMP1417]]
// CHECK-NEXT:    store i16 [[TMP1419]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1420:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1421:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1420]] release, align 2
// CHECK-NEXT:    [[TMP1422:%.*]] = icmp sgt i16 [[TMP1421]], [[TMP1420]]
// CHECK-NEXT:    [[TMP1423:%.*]] = select i1 [[TMP1422]], i16 [[TMP1420]], i16 [[TMP1421]]
// CHECK-NEXT:    store i16 [[TMP1423]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1424:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1425:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1426:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1424]], i16 [[TMP1425]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1427:%.*]] = extractvalue { i16, i1 } [[TMP1426]], 0
// CHECK-NEXT:    [[TMP1428:%.*]] = extractvalue { i16, i1 } [[TMP1426]], 1
// CHECK-NEXT:    [[TMP1429:%.*]] = select i1 [[TMP1428]], i16 [[TMP1424]], i16 [[TMP1427]]
// CHECK-NEXT:    store i16 [[TMP1429]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1430:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1431:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1432:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1430]], i16 [[TMP1431]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1433:%.*]] = extractvalue { i16, i1 } [[TMP1432]], 0
// CHECK-NEXT:    [[TMP1434:%.*]] = extractvalue { i16, i1 } [[TMP1432]], 1
// CHECK-NEXT:    [[TMP1435:%.*]] = select i1 [[TMP1434]], i16 [[TMP1430]], i16 [[TMP1433]]
// CHECK-NEXT:    store i16 [[TMP1435]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1436:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1437:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1438:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1436]], i16 [[TMP1437]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1439:%.*]] = extractvalue { i16, i1 } [[TMP1438]], 0
// CHECK-NEXT:    [[TMP1440:%.*]] = extractvalue { i16, i1 } [[TMP1438]], 1
// CHECK-NEXT:    br i1 [[TMP1440]], label [[SX_ATOMIC_EXIT123:%.*]], label [[SX_ATOMIC_CONT124:%.*]]
// CHECK:       sx.atomic.cont124:
// CHECK-NEXT:    store i16 [[TMP1439]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT123]]
// CHECK:       sx.atomic.exit123:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1441:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1442:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1443:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1441]], i16 [[TMP1442]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1444:%.*]] = extractvalue { i16, i1 } [[TMP1443]], 0
// CHECK-NEXT:    [[TMP1445:%.*]] = extractvalue { i16, i1 } [[TMP1443]], 1
// CHECK-NEXT:    br i1 [[TMP1445]], label [[SX_ATOMIC_EXIT125:%.*]], label [[SX_ATOMIC_CONT126:%.*]]
// CHECK:       sx.atomic.cont126:
// CHECK-NEXT:    store i16 [[TMP1444]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT125]]
// CHECK:       sx.atomic.exit125:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1446:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1447:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1448:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1446]], i16 [[TMP1447]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1449:%.*]] = extractvalue { i16, i1 } [[TMP1448]], 1
// CHECK-NEXT:    [[TMP1450:%.*]] = sext i1 [[TMP1449]] to i16
// CHECK-NEXT:    store i16 [[TMP1450]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1451:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1452:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1453:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1451]], i16 [[TMP1452]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1454:%.*]] = extractvalue { i16, i1 } [[TMP1453]], 1
// CHECK-NEXT:    [[TMP1455:%.*]] = sext i1 [[TMP1454]] to i16
// CHECK-NEXT:    store i16 [[TMP1455]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1456:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1457:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1458:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1456]], i16 [[TMP1457]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1459:%.*]] = extractvalue { i16, i1 } [[TMP1458]], 0
// CHECK-NEXT:    [[TMP1460:%.*]] = extractvalue { i16, i1 } [[TMP1458]], 1
// CHECK-NEXT:    br i1 [[TMP1460]], label [[SX_ATOMIC_EXIT127:%.*]], label [[SX_ATOMIC_CONT128:%.*]]
// CHECK:       sx.atomic.cont128:
// CHECK-NEXT:    store i16 [[TMP1459]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT127]]
// CHECK:       sx.atomic.exit127:
// CHECK-NEXT:    [[TMP1461:%.*]] = extractvalue { i16, i1 } [[TMP1458]], 1
// CHECK-NEXT:    [[TMP1462:%.*]] = sext i1 [[TMP1461]] to i16
// CHECK-NEXT:    store i16 [[TMP1462]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1463:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1464:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1465:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1463]], i16 [[TMP1464]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1466:%.*]] = extractvalue { i16, i1 } [[TMP1465]], 0
// CHECK-NEXT:    [[TMP1467:%.*]] = extractvalue { i16, i1 } [[TMP1465]], 1
// CHECK-NEXT:    br i1 [[TMP1467]], label [[SX_ATOMIC_EXIT129:%.*]], label [[SX_ATOMIC_CONT130:%.*]]
// CHECK:       sx.atomic.cont130:
// CHECK-NEXT:    store i16 [[TMP1466]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT129]]
// CHECK:       sx.atomic.exit129:
// CHECK-NEXT:    [[TMP1468:%.*]] = extractvalue { i16, i1 } [[TMP1465]], 1
// CHECK-NEXT:    [[TMP1469:%.*]] = sext i1 [[TMP1468]] to i16
// CHECK-NEXT:    store i16 [[TMP1469]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1470:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1471:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1470]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1471]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1472:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1473:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1472]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1473]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1474:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1475:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1474]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1475]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1476:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1477:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1476]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1477]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1478:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1479:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1480:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1478]], i16 [[TMP1479]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1481:%.*]] = extractvalue { i16, i1 } [[TMP1480]], 0
// CHECK-NEXT:    store i16 [[TMP1481]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1482:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1483:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1484:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1482]], i16 [[TMP1483]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1485:%.*]] = extractvalue { i16, i1 } [[TMP1484]], 0
// CHECK-NEXT:    store i16 [[TMP1485]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1486:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1487:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1486]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1488:%.*]] = icmp sgt i16 [[TMP1487]], [[TMP1486]]
// CHECK-NEXT:    [[TMP1489:%.*]] = select i1 [[TMP1488]], i16 [[TMP1486]], i16 [[TMP1487]]
// CHECK-NEXT:    store i16 [[TMP1489]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1490:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1491:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1490]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1492:%.*]] = icmp slt i16 [[TMP1491]], [[TMP1490]]
// CHECK-NEXT:    [[TMP1493:%.*]] = select i1 [[TMP1492]], i16 [[TMP1490]], i16 [[TMP1491]]
// CHECK-NEXT:    store i16 [[TMP1493]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1494:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1495:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP1494]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1496:%.*]] = icmp slt i16 [[TMP1495]], [[TMP1494]]
// CHECK-NEXT:    [[TMP1497:%.*]] = select i1 [[TMP1496]], i16 [[TMP1494]], i16 [[TMP1495]]
// CHECK-NEXT:    store i16 [[TMP1497]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1498:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1499:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP1498]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1500:%.*]] = icmp sgt i16 [[TMP1499]], [[TMP1498]]
// CHECK-NEXT:    [[TMP1501:%.*]] = select i1 [[TMP1500]], i16 [[TMP1498]], i16 [[TMP1499]]
// CHECK-NEXT:    store i16 [[TMP1501]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1502:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1503:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1504:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1502]], i16 [[TMP1503]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1505:%.*]] = extractvalue { i16, i1 } [[TMP1504]], 0
// CHECK-NEXT:    [[TMP1506:%.*]] = extractvalue { i16, i1 } [[TMP1504]], 1
// CHECK-NEXT:    [[TMP1507:%.*]] = select i1 [[TMP1506]], i16 [[TMP1502]], i16 [[TMP1505]]
// CHECK-NEXT:    store i16 [[TMP1507]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1508:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1509:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1510:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1508]], i16 [[TMP1509]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1511:%.*]] = extractvalue { i16, i1 } [[TMP1510]], 0
// CHECK-NEXT:    [[TMP1512:%.*]] = extractvalue { i16, i1 } [[TMP1510]], 1
// CHECK-NEXT:    [[TMP1513:%.*]] = select i1 [[TMP1512]], i16 [[TMP1508]], i16 [[TMP1511]]
// CHECK-NEXT:    store i16 [[TMP1513]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1514:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1515:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1516:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1514]], i16 [[TMP1515]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1517:%.*]] = extractvalue { i16, i1 } [[TMP1516]], 0
// CHECK-NEXT:    [[TMP1518:%.*]] = extractvalue { i16, i1 } [[TMP1516]], 1
// CHECK-NEXT:    br i1 [[TMP1518]], label [[SX_ATOMIC_EXIT131:%.*]], label [[SX_ATOMIC_CONT132:%.*]]
// CHECK:       sx.atomic.cont132:
// CHECK-NEXT:    store i16 [[TMP1517]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT131]]
// CHECK:       sx.atomic.exit131:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1519:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1520:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1521:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1519]], i16 [[TMP1520]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1522:%.*]] = extractvalue { i16, i1 } [[TMP1521]], 0
// CHECK-NEXT:    [[TMP1523:%.*]] = extractvalue { i16, i1 } [[TMP1521]], 1
// CHECK-NEXT:    br i1 [[TMP1523]], label [[SX_ATOMIC_EXIT133:%.*]], label [[SX_ATOMIC_CONT134:%.*]]
// CHECK:       sx.atomic.cont134:
// CHECK-NEXT:    store i16 [[TMP1522]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT133]]
// CHECK:       sx.atomic.exit133:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1524:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1525:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1526:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1524]], i16 [[TMP1525]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1527:%.*]] = extractvalue { i16, i1 } [[TMP1526]], 1
// CHECK-NEXT:    [[TMP1528:%.*]] = sext i1 [[TMP1527]] to i16
// CHECK-NEXT:    store i16 [[TMP1528]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1529:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1530:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1531:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1529]], i16 [[TMP1530]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1532:%.*]] = extractvalue { i16, i1 } [[TMP1531]], 1
// CHECK-NEXT:    [[TMP1533:%.*]] = sext i1 [[TMP1532]] to i16
// CHECK-NEXT:    store i16 [[TMP1533]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1534:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1535:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1536:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1534]], i16 [[TMP1535]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1537:%.*]] = extractvalue { i16, i1 } [[TMP1536]], 0
// CHECK-NEXT:    [[TMP1538:%.*]] = extractvalue { i16, i1 } [[TMP1536]], 1
// CHECK-NEXT:    br i1 [[TMP1538]], label [[SX_ATOMIC_EXIT135:%.*]], label [[SX_ATOMIC_CONT136:%.*]]
// CHECK:       sx.atomic.cont136:
// CHECK-NEXT:    store i16 [[TMP1537]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT135]]
// CHECK:       sx.atomic.exit135:
// CHECK-NEXT:    [[TMP1539:%.*]] = extractvalue { i16, i1 } [[TMP1536]], 1
// CHECK-NEXT:    [[TMP1540:%.*]] = sext i1 [[TMP1539]] to i16
// CHECK-NEXT:    store i16 [[TMP1540]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1541:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1542:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP1543:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP1541]], i16 [[TMP1542]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1544:%.*]] = extractvalue { i16, i1 } [[TMP1543]], 0
// CHECK-NEXT:    [[TMP1545:%.*]] = extractvalue { i16, i1 } [[TMP1543]], 1
// CHECK-NEXT:    br i1 [[TMP1545]], label [[SX_ATOMIC_EXIT137:%.*]], label [[SX_ATOMIC_CONT138:%.*]]
// CHECK:       sx.atomic.cont138:
// CHECK-NEXT:    store i16 [[TMP1544]], ptr [[SV]], align 2
// CHECK-NEXT:    br label [[SX_ATOMIC_EXIT137]]
// CHECK:       sx.atomic.exit137:
// CHECK-NEXT:    [[TMP1546:%.*]] = extractvalue { i16, i1 } [[TMP1543]], 1
// CHECK-NEXT:    [[TMP1547:%.*]] = sext i1 [[TMP1546]] to i16
// CHECK-NEXT:    store i16 [[TMP1547]], ptr [[SR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1548:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1549:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1548]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1549]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1550:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1551:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1550]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1551]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1552:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1553:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1552]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1553]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1554:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1555:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1554]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1555]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1556:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1557:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1558:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1556]], i16 [[TMP1557]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1559:%.*]] = extractvalue { i16, i1 } [[TMP1558]], 0
// CHECK-NEXT:    store i16 [[TMP1559]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1560:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1561:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1562:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1560]], i16 [[TMP1561]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1563:%.*]] = extractvalue { i16, i1 } [[TMP1562]], 0
// CHECK-NEXT:    store i16 [[TMP1563]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1564:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1565:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1564]] monotonic, align 2
// CHECK-NEXT:    [[TMP1566:%.*]] = icmp ugt i16 [[TMP1565]], [[TMP1564]]
// CHECK-NEXT:    [[TMP1567:%.*]] = select i1 [[TMP1566]], i16 [[TMP1564]], i16 [[TMP1565]]
// CHECK-NEXT:    store i16 [[TMP1567]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1568:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1569:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1568]] monotonic, align 2
// CHECK-NEXT:    [[TMP1570:%.*]] = icmp ult i16 [[TMP1569]], [[TMP1568]]
// CHECK-NEXT:    [[TMP1571:%.*]] = select i1 [[TMP1570]], i16 [[TMP1568]], i16 [[TMP1569]]
// CHECK-NEXT:    store i16 [[TMP1571]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1572:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1573:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1572]] monotonic, align 2
// CHECK-NEXT:    [[TMP1574:%.*]] = icmp ult i16 [[TMP1573]], [[TMP1572]]
// CHECK-NEXT:    [[TMP1575:%.*]] = select i1 [[TMP1574]], i16 [[TMP1572]], i16 [[TMP1573]]
// CHECK-NEXT:    store i16 [[TMP1575]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1576:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1577:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1576]] monotonic, align 2
// CHECK-NEXT:    [[TMP1578:%.*]] = icmp ugt i16 [[TMP1577]], [[TMP1576]]
// CHECK-NEXT:    [[TMP1579:%.*]] = select i1 [[TMP1578]], i16 [[TMP1576]], i16 [[TMP1577]]
// CHECK-NEXT:    store i16 [[TMP1579]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1580:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1581:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1582:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1580]], i16 [[TMP1581]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1583:%.*]] = extractvalue { i16, i1 } [[TMP1582]], 0
// CHECK-NEXT:    [[TMP1584:%.*]] = extractvalue { i16, i1 } [[TMP1582]], 1
// CHECK-NEXT:    [[TMP1585:%.*]] = select i1 [[TMP1584]], i16 [[TMP1580]], i16 [[TMP1583]]
// CHECK-NEXT:    store i16 [[TMP1585]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1586:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1587:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1588:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1586]], i16 [[TMP1587]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1589:%.*]] = extractvalue { i16, i1 } [[TMP1588]], 0
// CHECK-NEXT:    [[TMP1590:%.*]] = extractvalue { i16, i1 } [[TMP1588]], 1
// CHECK-NEXT:    [[TMP1591:%.*]] = select i1 [[TMP1590]], i16 [[TMP1586]], i16 [[TMP1589]]
// CHECK-NEXT:    store i16 [[TMP1591]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1592:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1593:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1594:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1592]], i16 [[TMP1593]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1595:%.*]] = extractvalue { i16, i1 } [[TMP1594]], 0
// CHECK-NEXT:    [[TMP1596:%.*]] = extractvalue { i16, i1 } [[TMP1594]], 1
// CHECK-NEXT:    br i1 [[TMP1596]], label [[USX_ATOMIC_EXIT:%.*]], label [[USX_ATOMIC_CONT:%.*]]
// CHECK:       usx.atomic.cont:
// CHECK-NEXT:    store i16 [[TMP1595]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT]]
// CHECK:       usx.atomic.exit:
// CHECK-NEXT:    [[TMP1597:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1598:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1599:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1597]], i16 [[TMP1598]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1600:%.*]] = extractvalue { i16, i1 } [[TMP1599]], 0
// CHECK-NEXT:    [[TMP1601:%.*]] = extractvalue { i16, i1 } [[TMP1599]], 1
// CHECK-NEXT:    br i1 [[TMP1601]], label [[USX_ATOMIC_EXIT139:%.*]], label [[USX_ATOMIC_CONT140:%.*]]
// CHECK:       usx.atomic.cont140:
// CHECK-NEXT:    store i16 [[TMP1600]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT139]]
// CHECK:       usx.atomic.exit139:
// CHECK-NEXT:    [[TMP1602:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1603:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1604:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1602]], i16 [[TMP1603]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1605:%.*]] = extractvalue { i16, i1 } [[TMP1604]], 1
// CHECK-NEXT:    [[TMP1606:%.*]] = zext i1 [[TMP1605]] to i16
// CHECK-NEXT:    store i16 [[TMP1606]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1607:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1608:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1609:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1607]], i16 [[TMP1608]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1610:%.*]] = extractvalue { i16, i1 } [[TMP1609]], 1
// CHECK-NEXT:    [[TMP1611:%.*]] = zext i1 [[TMP1610]] to i16
// CHECK-NEXT:    store i16 [[TMP1611]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1612:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1613:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1614:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1612]], i16 [[TMP1613]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1615:%.*]] = extractvalue { i16, i1 } [[TMP1614]], 0
// CHECK-NEXT:    [[TMP1616:%.*]] = extractvalue { i16, i1 } [[TMP1614]], 1
// CHECK-NEXT:    br i1 [[TMP1616]], label [[USX_ATOMIC_EXIT141:%.*]], label [[USX_ATOMIC_CONT142:%.*]]
// CHECK:       usx.atomic.cont142:
// CHECK-NEXT:    store i16 [[TMP1615]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT141]]
// CHECK:       usx.atomic.exit141:
// CHECK-NEXT:    [[TMP1617:%.*]] = extractvalue { i16, i1 } [[TMP1614]], 1
// CHECK-NEXT:    [[TMP1618:%.*]] = zext i1 [[TMP1617]] to i16
// CHECK-NEXT:    store i16 [[TMP1618]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1619:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1620:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1621:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1619]], i16 [[TMP1620]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1622:%.*]] = extractvalue { i16, i1 } [[TMP1621]], 0
// CHECK-NEXT:    [[TMP1623:%.*]] = extractvalue { i16, i1 } [[TMP1621]], 1
// CHECK-NEXT:    br i1 [[TMP1623]], label [[USX_ATOMIC_EXIT143:%.*]], label [[USX_ATOMIC_CONT144:%.*]]
// CHECK:       usx.atomic.cont144:
// CHECK-NEXT:    store i16 [[TMP1622]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT143]]
// CHECK:       usx.atomic.exit143:
// CHECK-NEXT:    [[TMP1624:%.*]] = extractvalue { i16, i1 } [[TMP1621]], 1
// CHECK-NEXT:    [[TMP1625:%.*]] = zext i1 [[TMP1624]] to i16
// CHECK-NEXT:    store i16 [[TMP1625]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1626:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1627:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1626]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1627]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1628:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1629:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1628]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1629]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1630:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1631:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1630]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1631]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1632:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1633:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1632]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP1633]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1634:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1635:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1636:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1634]], i16 [[TMP1635]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1637:%.*]] = extractvalue { i16, i1 } [[TMP1636]], 0
// CHECK-NEXT:    store i16 [[TMP1637]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1638:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1639:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1640:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1638]], i16 [[TMP1639]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1641:%.*]] = extractvalue { i16, i1 } [[TMP1640]], 0
// CHECK-NEXT:    store i16 [[TMP1641]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1642:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1643:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1642]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1644:%.*]] = icmp ugt i16 [[TMP1643]], [[TMP1642]]
// CHECK-NEXT:    [[TMP1645:%.*]] = select i1 [[TMP1644]], i16 [[TMP1642]], i16 [[TMP1643]]
// CHECK-NEXT:    store i16 [[TMP1645]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1646:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1647:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1646]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1648:%.*]] = icmp ult i16 [[TMP1647]], [[TMP1646]]
// CHECK-NEXT:    [[TMP1649:%.*]] = select i1 [[TMP1648]], i16 [[TMP1646]], i16 [[TMP1647]]
// CHECK-NEXT:    store i16 [[TMP1649]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1650:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1651:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1650]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1652:%.*]] = icmp ult i16 [[TMP1651]], [[TMP1650]]
// CHECK-NEXT:    [[TMP1653:%.*]] = select i1 [[TMP1652]], i16 [[TMP1650]], i16 [[TMP1651]]
// CHECK-NEXT:    store i16 [[TMP1653]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1654:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1655:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1654]] acq_rel, align 2
// CHECK-NEXT:    [[TMP1656:%.*]] = icmp ugt i16 [[TMP1655]], [[TMP1654]]
// CHECK-NEXT:    [[TMP1657:%.*]] = select i1 [[TMP1656]], i16 [[TMP1654]], i16 [[TMP1655]]
// CHECK-NEXT:    store i16 [[TMP1657]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1658:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1659:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1660:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1658]], i16 [[TMP1659]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1661:%.*]] = extractvalue { i16, i1 } [[TMP1660]], 0
// CHECK-NEXT:    [[TMP1662:%.*]] = extractvalue { i16, i1 } [[TMP1660]], 1
// CHECK-NEXT:    [[TMP1663:%.*]] = select i1 [[TMP1662]], i16 [[TMP1658]], i16 [[TMP1661]]
// CHECK-NEXT:    store i16 [[TMP1663]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1664:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1665:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1666:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1664]], i16 [[TMP1665]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1667:%.*]] = extractvalue { i16, i1 } [[TMP1666]], 0
// CHECK-NEXT:    [[TMP1668:%.*]] = extractvalue { i16, i1 } [[TMP1666]], 1
// CHECK-NEXT:    [[TMP1669:%.*]] = select i1 [[TMP1668]], i16 [[TMP1664]], i16 [[TMP1667]]
// CHECK-NEXT:    store i16 [[TMP1669]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1670:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1671:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1672:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1670]], i16 [[TMP1671]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1673:%.*]] = extractvalue { i16, i1 } [[TMP1672]], 0
// CHECK-NEXT:    [[TMP1674:%.*]] = extractvalue { i16, i1 } [[TMP1672]], 1
// CHECK-NEXT:    br i1 [[TMP1674]], label [[USX_ATOMIC_EXIT145:%.*]], label [[USX_ATOMIC_CONT146:%.*]]
// CHECK:       usx.atomic.cont146:
// CHECK-NEXT:    store i16 [[TMP1673]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT145]]
// CHECK:       usx.atomic.exit145:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1675:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1676:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1677:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1675]], i16 [[TMP1676]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1678:%.*]] = extractvalue { i16, i1 } [[TMP1677]], 0
// CHECK-NEXT:    [[TMP1679:%.*]] = extractvalue { i16, i1 } [[TMP1677]], 1
// CHECK-NEXT:    br i1 [[TMP1679]], label [[USX_ATOMIC_EXIT147:%.*]], label [[USX_ATOMIC_CONT148:%.*]]
// CHECK:       usx.atomic.cont148:
// CHECK-NEXT:    store i16 [[TMP1678]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT147]]
// CHECK:       usx.atomic.exit147:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1680:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1681:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1682:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1680]], i16 [[TMP1681]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1683:%.*]] = extractvalue { i16, i1 } [[TMP1682]], 1
// CHECK-NEXT:    [[TMP1684:%.*]] = zext i1 [[TMP1683]] to i16
// CHECK-NEXT:    store i16 [[TMP1684]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1685:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1686:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1687:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1685]], i16 [[TMP1686]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1688:%.*]] = extractvalue { i16, i1 } [[TMP1687]], 1
// CHECK-NEXT:    [[TMP1689:%.*]] = zext i1 [[TMP1688]] to i16
// CHECK-NEXT:    store i16 [[TMP1689]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1690:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1691:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1692:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1690]], i16 [[TMP1691]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1693:%.*]] = extractvalue { i16, i1 } [[TMP1692]], 0
// CHECK-NEXT:    [[TMP1694:%.*]] = extractvalue { i16, i1 } [[TMP1692]], 1
// CHECK-NEXT:    br i1 [[TMP1694]], label [[USX_ATOMIC_EXIT149:%.*]], label [[USX_ATOMIC_CONT150:%.*]]
// CHECK:       usx.atomic.cont150:
// CHECK-NEXT:    store i16 [[TMP1693]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT149]]
// CHECK:       usx.atomic.exit149:
// CHECK-NEXT:    [[TMP1695:%.*]] = extractvalue { i16, i1 } [[TMP1692]], 1
// CHECK-NEXT:    [[TMP1696:%.*]] = zext i1 [[TMP1695]] to i16
// CHECK-NEXT:    store i16 [[TMP1696]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1697:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1698:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1699:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1697]], i16 [[TMP1698]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP1700:%.*]] = extractvalue { i16, i1 } [[TMP1699]], 0
// CHECK-NEXT:    [[TMP1701:%.*]] = extractvalue { i16, i1 } [[TMP1699]], 1
// CHECK-NEXT:    br i1 [[TMP1701]], label [[USX_ATOMIC_EXIT151:%.*]], label [[USX_ATOMIC_CONT152:%.*]]
// CHECK:       usx.atomic.cont152:
// CHECK-NEXT:    store i16 [[TMP1700]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT151]]
// CHECK:       usx.atomic.exit151:
// CHECK-NEXT:    [[TMP1702:%.*]] = extractvalue { i16, i1 } [[TMP1699]], 1
// CHECK-NEXT:    [[TMP1703:%.*]] = zext i1 [[TMP1702]] to i16
// CHECK-NEXT:    store i16 [[TMP1703]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1704:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1705:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1704]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1705]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1706:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1707:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1706]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1707]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1708:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1709:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1708]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1709]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1710:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1711:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1710]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP1711]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1712:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1713:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1714:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1712]], i16 [[TMP1713]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1715:%.*]] = extractvalue { i16, i1 } [[TMP1714]], 0
// CHECK-NEXT:    store i16 [[TMP1715]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1716:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1717:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1718:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1716]], i16 [[TMP1717]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1719:%.*]] = extractvalue { i16, i1 } [[TMP1718]], 0
// CHECK-NEXT:    store i16 [[TMP1719]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1720:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1721:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1720]] acquire, align 2
// CHECK-NEXT:    [[TMP1722:%.*]] = icmp ugt i16 [[TMP1721]], [[TMP1720]]
// CHECK-NEXT:    [[TMP1723:%.*]] = select i1 [[TMP1722]], i16 [[TMP1720]], i16 [[TMP1721]]
// CHECK-NEXT:    store i16 [[TMP1723]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1724:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1725:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1724]] acquire, align 2
// CHECK-NEXT:    [[TMP1726:%.*]] = icmp ult i16 [[TMP1725]], [[TMP1724]]
// CHECK-NEXT:    [[TMP1727:%.*]] = select i1 [[TMP1726]], i16 [[TMP1724]], i16 [[TMP1725]]
// CHECK-NEXT:    store i16 [[TMP1727]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1728:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1729:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1728]] acquire, align 2
// CHECK-NEXT:    [[TMP1730:%.*]] = icmp ult i16 [[TMP1729]], [[TMP1728]]
// CHECK-NEXT:    [[TMP1731:%.*]] = select i1 [[TMP1730]], i16 [[TMP1728]], i16 [[TMP1729]]
// CHECK-NEXT:    store i16 [[TMP1731]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1732:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1733:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1732]] acquire, align 2
// CHECK-NEXT:    [[TMP1734:%.*]] = icmp ugt i16 [[TMP1733]], [[TMP1732]]
// CHECK-NEXT:    [[TMP1735:%.*]] = select i1 [[TMP1734]], i16 [[TMP1732]], i16 [[TMP1733]]
// CHECK-NEXT:    store i16 [[TMP1735]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1736:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1737:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1738:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1736]], i16 [[TMP1737]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1739:%.*]] = extractvalue { i16, i1 } [[TMP1738]], 0
// CHECK-NEXT:    [[TMP1740:%.*]] = extractvalue { i16, i1 } [[TMP1738]], 1
// CHECK-NEXT:    [[TMP1741:%.*]] = select i1 [[TMP1740]], i16 [[TMP1736]], i16 [[TMP1739]]
// CHECK-NEXT:    store i16 [[TMP1741]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1742:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1743:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1744:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1742]], i16 [[TMP1743]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1745:%.*]] = extractvalue { i16, i1 } [[TMP1744]], 0
// CHECK-NEXT:    [[TMP1746:%.*]] = extractvalue { i16, i1 } [[TMP1744]], 1
// CHECK-NEXT:    [[TMP1747:%.*]] = select i1 [[TMP1746]], i16 [[TMP1742]], i16 [[TMP1745]]
// CHECK-NEXT:    store i16 [[TMP1747]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1748:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1749:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1750:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1748]], i16 [[TMP1749]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1751:%.*]] = extractvalue { i16, i1 } [[TMP1750]], 0
// CHECK-NEXT:    [[TMP1752:%.*]] = extractvalue { i16, i1 } [[TMP1750]], 1
// CHECK-NEXT:    br i1 [[TMP1752]], label [[USX_ATOMIC_EXIT153:%.*]], label [[USX_ATOMIC_CONT154:%.*]]
// CHECK:       usx.atomic.cont154:
// CHECK-NEXT:    store i16 [[TMP1751]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT153]]
// CHECK:       usx.atomic.exit153:
// CHECK-NEXT:    [[TMP1753:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1754:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1755:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1753]], i16 [[TMP1754]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1756:%.*]] = extractvalue { i16, i1 } [[TMP1755]], 0
// CHECK-NEXT:    [[TMP1757:%.*]] = extractvalue { i16, i1 } [[TMP1755]], 1
// CHECK-NEXT:    br i1 [[TMP1757]], label [[USX_ATOMIC_EXIT155:%.*]], label [[USX_ATOMIC_CONT156:%.*]]
// CHECK:       usx.atomic.cont156:
// CHECK-NEXT:    store i16 [[TMP1756]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT155]]
// CHECK:       usx.atomic.exit155:
// CHECK-NEXT:    [[TMP1758:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1759:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1760:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1758]], i16 [[TMP1759]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1761:%.*]] = extractvalue { i16, i1 } [[TMP1760]], 1
// CHECK-NEXT:    [[TMP1762:%.*]] = zext i1 [[TMP1761]] to i16
// CHECK-NEXT:    store i16 [[TMP1762]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1763:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1764:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1765:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1763]], i16 [[TMP1764]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1766:%.*]] = extractvalue { i16, i1 } [[TMP1765]], 1
// CHECK-NEXT:    [[TMP1767:%.*]] = zext i1 [[TMP1766]] to i16
// CHECK-NEXT:    store i16 [[TMP1767]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1768:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1769:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1770:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1768]], i16 [[TMP1769]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1771:%.*]] = extractvalue { i16, i1 } [[TMP1770]], 0
// CHECK-NEXT:    [[TMP1772:%.*]] = extractvalue { i16, i1 } [[TMP1770]], 1
// CHECK-NEXT:    br i1 [[TMP1772]], label [[USX_ATOMIC_EXIT157:%.*]], label [[USX_ATOMIC_CONT158:%.*]]
// CHECK:       usx.atomic.cont158:
// CHECK-NEXT:    store i16 [[TMP1771]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT157]]
// CHECK:       usx.atomic.exit157:
// CHECK-NEXT:    [[TMP1773:%.*]] = extractvalue { i16, i1 } [[TMP1770]], 1
// CHECK-NEXT:    [[TMP1774:%.*]] = zext i1 [[TMP1773]] to i16
// CHECK-NEXT:    store i16 [[TMP1774]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1775:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1776:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1777:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1775]], i16 [[TMP1776]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP1778:%.*]] = extractvalue { i16, i1 } [[TMP1777]], 0
// CHECK-NEXT:    [[TMP1779:%.*]] = extractvalue { i16, i1 } [[TMP1777]], 1
// CHECK-NEXT:    br i1 [[TMP1779]], label [[USX_ATOMIC_EXIT159:%.*]], label [[USX_ATOMIC_CONT160:%.*]]
// CHECK:       usx.atomic.cont160:
// CHECK-NEXT:    store i16 [[TMP1778]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT159]]
// CHECK:       usx.atomic.exit159:
// CHECK-NEXT:    [[TMP1780:%.*]] = extractvalue { i16, i1 } [[TMP1777]], 1
// CHECK-NEXT:    [[TMP1781:%.*]] = zext i1 [[TMP1780]] to i16
// CHECK-NEXT:    store i16 [[TMP1781]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1782:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1783:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1782]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1783]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1784:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1785:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1784]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1785]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1786:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1787:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1786]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1787]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1788:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1789:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1788]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1789]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1790:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1791:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1792:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1790]], i16 [[TMP1791]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1793:%.*]] = extractvalue { i16, i1 } [[TMP1792]], 0
// CHECK-NEXT:    store i16 [[TMP1793]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1794:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1795:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1796:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1794]], i16 [[TMP1795]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1797:%.*]] = extractvalue { i16, i1 } [[TMP1796]], 0
// CHECK-NEXT:    store i16 [[TMP1797]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1798:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1799:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1798]] monotonic, align 2
// CHECK-NEXT:    [[TMP1800:%.*]] = icmp ugt i16 [[TMP1799]], [[TMP1798]]
// CHECK-NEXT:    [[TMP1801:%.*]] = select i1 [[TMP1800]], i16 [[TMP1798]], i16 [[TMP1799]]
// CHECK-NEXT:    store i16 [[TMP1801]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1802:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1803:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1802]] monotonic, align 2
// CHECK-NEXT:    [[TMP1804:%.*]] = icmp ult i16 [[TMP1803]], [[TMP1802]]
// CHECK-NEXT:    [[TMP1805:%.*]] = select i1 [[TMP1804]], i16 [[TMP1802]], i16 [[TMP1803]]
// CHECK-NEXT:    store i16 [[TMP1805]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1806:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1807:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1806]] monotonic, align 2
// CHECK-NEXT:    [[TMP1808:%.*]] = icmp ult i16 [[TMP1807]], [[TMP1806]]
// CHECK-NEXT:    [[TMP1809:%.*]] = select i1 [[TMP1808]], i16 [[TMP1806]], i16 [[TMP1807]]
// CHECK-NEXT:    store i16 [[TMP1809]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1810:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1811:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1810]] monotonic, align 2
// CHECK-NEXT:    [[TMP1812:%.*]] = icmp ugt i16 [[TMP1811]], [[TMP1810]]
// CHECK-NEXT:    [[TMP1813:%.*]] = select i1 [[TMP1812]], i16 [[TMP1810]], i16 [[TMP1811]]
// CHECK-NEXT:    store i16 [[TMP1813]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1814:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1815:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1816:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1814]], i16 [[TMP1815]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1817:%.*]] = extractvalue { i16, i1 } [[TMP1816]], 0
// CHECK-NEXT:    [[TMP1818:%.*]] = extractvalue { i16, i1 } [[TMP1816]], 1
// CHECK-NEXT:    [[TMP1819:%.*]] = select i1 [[TMP1818]], i16 [[TMP1814]], i16 [[TMP1817]]
// CHECK-NEXT:    store i16 [[TMP1819]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1820:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1821:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1822:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1820]], i16 [[TMP1821]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1823:%.*]] = extractvalue { i16, i1 } [[TMP1822]], 0
// CHECK-NEXT:    [[TMP1824:%.*]] = extractvalue { i16, i1 } [[TMP1822]], 1
// CHECK-NEXT:    [[TMP1825:%.*]] = select i1 [[TMP1824]], i16 [[TMP1820]], i16 [[TMP1823]]
// CHECK-NEXT:    store i16 [[TMP1825]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP1826:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1827:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1828:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1826]], i16 [[TMP1827]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1829:%.*]] = extractvalue { i16, i1 } [[TMP1828]], 0
// CHECK-NEXT:    [[TMP1830:%.*]] = extractvalue { i16, i1 } [[TMP1828]], 1
// CHECK-NEXT:    br i1 [[TMP1830]], label [[USX_ATOMIC_EXIT161:%.*]], label [[USX_ATOMIC_CONT162:%.*]]
// CHECK:       usx.atomic.cont162:
// CHECK-NEXT:    store i16 [[TMP1829]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT161]]
// CHECK:       usx.atomic.exit161:
// CHECK-NEXT:    [[TMP1831:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1832:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1833:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1831]], i16 [[TMP1832]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1834:%.*]] = extractvalue { i16, i1 } [[TMP1833]], 0
// CHECK-NEXT:    [[TMP1835:%.*]] = extractvalue { i16, i1 } [[TMP1833]], 1
// CHECK-NEXT:    br i1 [[TMP1835]], label [[USX_ATOMIC_EXIT163:%.*]], label [[USX_ATOMIC_CONT164:%.*]]
// CHECK:       usx.atomic.cont164:
// CHECK-NEXT:    store i16 [[TMP1834]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT163]]
// CHECK:       usx.atomic.exit163:
// CHECK-NEXT:    [[TMP1836:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1837:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1838:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1836]], i16 [[TMP1837]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1839:%.*]] = extractvalue { i16, i1 } [[TMP1838]], 1
// CHECK-NEXT:    [[TMP1840:%.*]] = zext i1 [[TMP1839]] to i16
// CHECK-NEXT:    store i16 [[TMP1840]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1841:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1842:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1843:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1841]], i16 [[TMP1842]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1844:%.*]] = extractvalue { i16, i1 } [[TMP1843]], 1
// CHECK-NEXT:    [[TMP1845:%.*]] = zext i1 [[TMP1844]] to i16
// CHECK-NEXT:    store i16 [[TMP1845]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1846:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1847:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1848:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1846]], i16 [[TMP1847]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1849:%.*]] = extractvalue { i16, i1 } [[TMP1848]], 0
// CHECK-NEXT:    [[TMP1850:%.*]] = extractvalue { i16, i1 } [[TMP1848]], 1
// CHECK-NEXT:    br i1 [[TMP1850]], label [[USX_ATOMIC_EXIT165:%.*]], label [[USX_ATOMIC_CONT166:%.*]]
// CHECK:       usx.atomic.cont166:
// CHECK-NEXT:    store i16 [[TMP1849]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT165]]
// CHECK:       usx.atomic.exit165:
// CHECK-NEXT:    [[TMP1851:%.*]] = extractvalue { i16, i1 } [[TMP1848]], 1
// CHECK-NEXT:    [[TMP1852:%.*]] = zext i1 [[TMP1851]] to i16
// CHECK-NEXT:    store i16 [[TMP1852]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1853:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1854:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1855:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1853]], i16 [[TMP1854]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP1856:%.*]] = extractvalue { i16, i1 } [[TMP1855]], 0
// CHECK-NEXT:    [[TMP1857:%.*]] = extractvalue { i16, i1 } [[TMP1855]], 1
// CHECK-NEXT:    br i1 [[TMP1857]], label [[USX_ATOMIC_EXIT167:%.*]], label [[USX_ATOMIC_CONT168:%.*]]
// CHECK:       usx.atomic.cont168:
// CHECK-NEXT:    store i16 [[TMP1856]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT167]]
// CHECK:       usx.atomic.exit167:
// CHECK-NEXT:    [[TMP1858:%.*]] = extractvalue { i16, i1 } [[TMP1855]], 1
// CHECK-NEXT:    [[TMP1859:%.*]] = zext i1 [[TMP1858]] to i16
// CHECK-NEXT:    store i16 [[TMP1859]], ptr [[USR]], align 2
// CHECK-NEXT:    [[TMP1860:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1861:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1860]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1861]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1862:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1863:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1862]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1863]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1864:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1865:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1864]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1865]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1866:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1867:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1866]] release, align 2
// CHECK-NEXT:    store i16 [[TMP1867]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1868:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1869:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1870:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1868]], i16 [[TMP1869]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1871:%.*]] = extractvalue { i16, i1 } [[TMP1870]], 0
// CHECK-NEXT:    store i16 [[TMP1871]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1872:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1873:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1874:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1872]], i16 [[TMP1873]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1875:%.*]] = extractvalue { i16, i1 } [[TMP1874]], 0
// CHECK-NEXT:    store i16 [[TMP1875]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1876:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1877:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1876]] release, align 2
// CHECK-NEXT:    [[TMP1878:%.*]] = icmp ugt i16 [[TMP1877]], [[TMP1876]]
// CHECK-NEXT:    [[TMP1879:%.*]] = select i1 [[TMP1878]], i16 [[TMP1876]], i16 [[TMP1877]]
// CHECK-NEXT:    store i16 [[TMP1879]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1880:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1881:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1880]] release, align 2
// CHECK-NEXT:    [[TMP1882:%.*]] = icmp ult i16 [[TMP1881]], [[TMP1880]]
// CHECK-NEXT:    [[TMP1883:%.*]] = select i1 [[TMP1882]], i16 [[TMP1880]], i16 [[TMP1881]]
// CHECK-NEXT:    store i16 [[TMP1883]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1884:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1885:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1884]] release, align 2
// CHECK-NEXT:    [[TMP1886:%.*]] = icmp ult i16 [[TMP1885]], [[TMP1884]]
// CHECK-NEXT:    [[TMP1887:%.*]] = select i1 [[TMP1886]], i16 [[TMP1884]], i16 [[TMP1885]]
// CHECK-NEXT:    store i16 [[TMP1887]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1888:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1889:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1888]] release, align 2
// CHECK-NEXT:    [[TMP1890:%.*]] = icmp ugt i16 [[TMP1889]], [[TMP1888]]
// CHECK-NEXT:    [[TMP1891:%.*]] = select i1 [[TMP1890]], i16 [[TMP1888]], i16 [[TMP1889]]
// CHECK-NEXT:    store i16 [[TMP1891]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1892:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1893:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1894:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1892]], i16 [[TMP1893]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1895:%.*]] = extractvalue { i16, i1 } [[TMP1894]], 0
// CHECK-NEXT:    [[TMP1896:%.*]] = extractvalue { i16, i1 } [[TMP1894]], 1
// CHECK-NEXT:    [[TMP1897:%.*]] = select i1 [[TMP1896]], i16 [[TMP1892]], i16 [[TMP1895]]
// CHECK-NEXT:    store i16 [[TMP1897]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1898:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1899:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1900:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1898]], i16 [[TMP1899]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1901:%.*]] = extractvalue { i16, i1 } [[TMP1900]], 0
// CHECK-NEXT:    [[TMP1902:%.*]] = extractvalue { i16, i1 } [[TMP1900]], 1
// CHECK-NEXT:    [[TMP1903:%.*]] = select i1 [[TMP1902]], i16 [[TMP1898]], i16 [[TMP1901]]
// CHECK-NEXT:    store i16 [[TMP1903]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1904:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1905:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1906:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1904]], i16 [[TMP1905]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1907:%.*]] = extractvalue { i16, i1 } [[TMP1906]], 0
// CHECK-NEXT:    [[TMP1908:%.*]] = extractvalue { i16, i1 } [[TMP1906]], 1
// CHECK-NEXT:    br i1 [[TMP1908]], label [[USX_ATOMIC_EXIT169:%.*]], label [[USX_ATOMIC_CONT170:%.*]]
// CHECK:       usx.atomic.cont170:
// CHECK-NEXT:    store i16 [[TMP1907]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT169]]
// CHECK:       usx.atomic.exit169:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1909:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1910:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1911:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1909]], i16 [[TMP1910]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1912:%.*]] = extractvalue { i16, i1 } [[TMP1911]], 0
// CHECK-NEXT:    [[TMP1913:%.*]] = extractvalue { i16, i1 } [[TMP1911]], 1
// CHECK-NEXT:    br i1 [[TMP1913]], label [[USX_ATOMIC_EXIT171:%.*]], label [[USX_ATOMIC_CONT172:%.*]]
// CHECK:       usx.atomic.cont172:
// CHECK-NEXT:    store i16 [[TMP1912]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT171]]
// CHECK:       usx.atomic.exit171:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1914:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1915:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1916:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1914]], i16 [[TMP1915]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1917:%.*]] = extractvalue { i16, i1 } [[TMP1916]], 1
// CHECK-NEXT:    [[TMP1918:%.*]] = zext i1 [[TMP1917]] to i16
// CHECK-NEXT:    store i16 [[TMP1918]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1919:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1920:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1921:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1919]], i16 [[TMP1920]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1922:%.*]] = extractvalue { i16, i1 } [[TMP1921]], 1
// CHECK-NEXT:    [[TMP1923:%.*]] = zext i1 [[TMP1922]] to i16
// CHECK-NEXT:    store i16 [[TMP1923]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1924:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1925:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1926:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1924]], i16 [[TMP1925]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1927:%.*]] = extractvalue { i16, i1 } [[TMP1926]], 0
// CHECK-NEXT:    [[TMP1928:%.*]] = extractvalue { i16, i1 } [[TMP1926]], 1
// CHECK-NEXT:    br i1 [[TMP1928]], label [[USX_ATOMIC_EXIT173:%.*]], label [[USX_ATOMIC_CONT174:%.*]]
// CHECK:       usx.atomic.cont174:
// CHECK-NEXT:    store i16 [[TMP1927]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT173]]
// CHECK:       usx.atomic.exit173:
// CHECK-NEXT:    [[TMP1929:%.*]] = extractvalue { i16, i1 } [[TMP1926]], 1
// CHECK-NEXT:    [[TMP1930:%.*]] = zext i1 [[TMP1929]] to i16
// CHECK-NEXT:    store i16 [[TMP1930]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1931:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1932:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1933:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1931]], i16 [[TMP1932]] release monotonic, align 2
// CHECK-NEXT:    [[TMP1934:%.*]] = extractvalue { i16, i1 } [[TMP1933]], 0
// CHECK-NEXT:    [[TMP1935:%.*]] = extractvalue { i16, i1 } [[TMP1933]], 1
// CHECK-NEXT:    br i1 [[TMP1935]], label [[USX_ATOMIC_EXIT175:%.*]], label [[USX_ATOMIC_CONT176:%.*]]
// CHECK:       usx.atomic.cont176:
// CHECK-NEXT:    store i16 [[TMP1934]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT175]]
// CHECK:       usx.atomic.exit175:
// CHECK-NEXT:    [[TMP1936:%.*]] = extractvalue { i16, i1 } [[TMP1933]], 1
// CHECK-NEXT:    [[TMP1937:%.*]] = zext i1 [[TMP1936]] to i16
// CHECK-NEXT:    store i16 [[TMP1937]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1938:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1939:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1938]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1939]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1940:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1941:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1940]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1941]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1942:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1943:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1942]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1943]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1944:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1945:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1944]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP1945]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1946:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1947:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1948:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1946]], i16 [[TMP1947]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1949:%.*]] = extractvalue { i16, i1 } [[TMP1948]], 0
// CHECK-NEXT:    store i16 [[TMP1949]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1950:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1951:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1952:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1950]], i16 [[TMP1951]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1953:%.*]] = extractvalue { i16, i1 } [[TMP1952]], 0
// CHECK-NEXT:    store i16 [[TMP1953]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1954:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1955:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1954]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1956:%.*]] = icmp ugt i16 [[TMP1955]], [[TMP1954]]
// CHECK-NEXT:    [[TMP1957:%.*]] = select i1 [[TMP1956]], i16 [[TMP1954]], i16 [[TMP1955]]
// CHECK-NEXT:    store i16 [[TMP1957]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1958:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1959:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1958]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1960:%.*]] = icmp ult i16 [[TMP1959]], [[TMP1958]]
// CHECK-NEXT:    [[TMP1961:%.*]] = select i1 [[TMP1960]], i16 [[TMP1958]], i16 [[TMP1959]]
// CHECK-NEXT:    store i16 [[TMP1961]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1962:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1963:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP1962]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1964:%.*]] = icmp ult i16 [[TMP1963]], [[TMP1962]]
// CHECK-NEXT:    [[TMP1965:%.*]] = select i1 [[TMP1964]], i16 [[TMP1962]], i16 [[TMP1963]]
// CHECK-NEXT:    store i16 [[TMP1965]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1966:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1967:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP1966]] seq_cst, align 2
// CHECK-NEXT:    [[TMP1968:%.*]] = icmp ugt i16 [[TMP1967]], [[TMP1966]]
// CHECK-NEXT:    [[TMP1969:%.*]] = select i1 [[TMP1968]], i16 [[TMP1966]], i16 [[TMP1967]]
// CHECK-NEXT:    store i16 [[TMP1969]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1970:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1971:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1972:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1970]], i16 [[TMP1971]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1973:%.*]] = extractvalue { i16, i1 } [[TMP1972]], 0
// CHECK-NEXT:    [[TMP1974:%.*]] = extractvalue { i16, i1 } [[TMP1972]], 1
// CHECK-NEXT:    [[TMP1975:%.*]] = select i1 [[TMP1974]], i16 [[TMP1970]], i16 [[TMP1973]]
// CHECK-NEXT:    store i16 [[TMP1975]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1976:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1977:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1978:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1976]], i16 [[TMP1977]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1979:%.*]] = extractvalue { i16, i1 } [[TMP1978]], 0
// CHECK-NEXT:    [[TMP1980:%.*]] = extractvalue { i16, i1 } [[TMP1978]], 1
// CHECK-NEXT:    [[TMP1981:%.*]] = select i1 [[TMP1980]], i16 [[TMP1976]], i16 [[TMP1979]]
// CHECK-NEXT:    store i16 [[TMP1981]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1982:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1983:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1984:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1982]], i16 [[TMP1983]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1985:%.*]] = extractvalue { i16, i1 } [[TMP1984]], 0
// CHECK-NEXT:    [[TMP1986:%.*]] = extractvalue { i16, i1 } [[TMP1984]], 1
// CHECK-NEXT:    br i1 [[TMP1986]], label [[USX_ATOMIC_EXIT177:%.*]], label [[USX_ATOMIC_CONT178:%.*]]
// CHECK:       usx.atomic.cont178:
// CHECK-NEXT:    store i16 [[TMP1985]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT177]]
// CHECK:       usx.atomic.exit177:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1987:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1988:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1989:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1987]], i16 [[TMP1988]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1990:%.*]] = extractvalue { i16, i1 } [[TMP1989]], 0
// CHECK-NEXT:    [[TMP1991:%.*]] = extractvalue { i16, i1 } [[TMP1989]], 1
// CHECK-NEXT:    br i1 [[TMP1991]], label [[USX_ATOMIC_EXIT179:%.*]], label [[USX_ATOMIC_CONT180:%.*]]
// CHECK:       usx.atomic.cont180:
// CHECK-NEXT:    store i16 [[TMP1990]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT179]]
// CHECK:       usx.atomic.exit179:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1992:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1993:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1994:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1992]], i16 [[TMP1993]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP1995:%.*]] = extractvalue { i16, i1 } [[TMP1994]], 1
// CHECK-NEXT:    [[TMP1996:%.*]] = zext i1 [[TMP1995]] to i16
// CHECK-NEXT:    store i16 [[TMP1996]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1997:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1998:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP1999:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP1997]], i16 [[TMP1998]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP2000:%.*]] = extractvalue { i16, i1 } [[TMP1999]], 1
// CHECK-NEXT:    [[TMP2001:%.*]] = zext i1 [[TMP2000]] to i16
// CHECK-NEXT:    store i16 [[TMP2001]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2002:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP2003:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP2004:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP2002]], i16 [[TMP2003]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP2005:%.*]] = extractvalue { i16, i1 } [[TMP2004]], 0
// CHECK-NEXT:    [[TMP2006:%.*]] = extractvalue { i16, i1 } [[TMP2004]], 1
// CHECK-NEXT:    br i1 [[TMP2006]], label [[USX_ATOMIC_EXIT181:%.*]], label [[USX_ATOMIC_CONT182:%.*]]
// CHECK:       usx.atomic.cont182:
// CHECK-NEXT:    store i16 [[TMP2005]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT181]]
// CHECK:       usx.atomic.exit181:
// CHECK-NEXT:    [[TMP2007:%.*]] = extractvalue { i16, i1 } [[TMP2004]], 1
// CHECK-NEXT:    [[TMP2008:%.*]] = zext i1 [[TMP2007]] to i16
// CHECK-NEXT:    store i16 [[TMP2008]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2009:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP2010:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP2011:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP2009]], i16 [[TMP2010]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP2012:%.*]] = extractvalue { i16, i1 } [[TMP2011]], 0
// CHECK-NEXT:    [[TMP2013:%.*]] = extractvalue { i16, i1 } [[TMP2011]], 1
// CHECK-NEXT:    br i1 [[TMP2013]], label [[USX_ATOMIC_EXIT183:%.*]], label [[USX_ATOMIC_CONT184:%.*]]
// CHECK:       usx.atomic.cont184:
// CHECK-NEXT:    store i16 [[TMP2012]], ptr [[USV]], align 2
// CHECK-NEXT:    br label [[USX_ATOMIC_EXIT183]]
// CHECK:       usx.atomic.exit183:
// CHECK-NEXT:    [[TMP2014:%.*]] = extractvalue { i16, i1 } [[TMP2011]], 1
// CHECK-NEXT:    [[TMP2015:%.*]] = zext i1 [[TMP2014]] to i16
// CHECK-NEXT:    store i16 [[TMP2015]], ptr [[USR]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2016:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2017:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2016]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2017]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2018:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2019:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2018]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2019]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2020:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2021:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2020]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2021]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2022:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2023:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2022]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2023]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2024:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2025:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2026:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2024]], i32 [[TMP2025]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2027:%.*]] = extractvalue { i32, i1 } [[TMP2026]], 0
// CHECK-NEXT:    store i32 [[TMP2027]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2028:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2029:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2030:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2028]], i32 [[TMP2029]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2031:%.*]] = extractvalue { i32, i1 } [[TMP2030]], 0
// CHECK-NEXT:    store i32 [[TMP2031]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2032:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2033:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2032]] monotonic, align 4
// CHECK-NEXT:    [[TMP2034:%.*]] = icmp sgt i32 [[TMP2033]], [[TMP2032]]
// CHECK-NEXT:    [[TMP2035:%.*]] = select i1 [[TMP2034]], i32 [[TMP2032]], i32 [[TMP2033]]
// CHECK-NEXT:    store i32 [[TMP2035]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2036:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2037:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2036]] monotonic, align 4
// CHECK-NEXT:    [[TMP2038:%.*]] = icmp slt i32 [[TMP2037]], [[TMP2036]]
// CHECK-NEXT:    [[TMP2039:%.*]] = select i1 [[TMP2038]], i32 [[TMP2036]], i32 [[TMP2037]]
// CHECK-NEXT:    store i32 [[TMP2039]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2040:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2041:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2040]] monotonic, align 4
// CHECK-NEXT:    [[TMP2042:%.*]] = icmp slt i32 [[TMP2041]], [[TMP2040]]
// CHECK-NEXT:    [[TMP2043:%.*]] = select i1 [[TMP2042]], i32 [[TMP2040]], i32 [[TMP2041]]
// CHECK-NEXT:    store i32 [[TMP2043]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2044:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2045:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2044]] monotonic, align 4
// CHECK-NEXT:    [[TMP2046:%.*]] = icmp sgt i32 [[TMP2045]], [[TMP2044]]
// CHECK-NEXT:    [[TMP2047:%.*]] = select i1 [[TMP2046]], i32 [[TMP2044]], i32 [[TMP2045]]
// CHECK-NEXT:    store i32 [[TMP2047]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2048:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2049:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2050:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2048]], i32 [[TMP2049]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2051:%.*]] = extractvalue { i32, i1 } [[TMP2050]], 0
// CHECK-NEXT:    [[TMP2052:%.*]] = extractvalue { i32, i1 } [[TMP2050]], 1
// CHECK-NEXT:    [[TMP2053:%.*]] = select i1 [[TMP2052]], i32 [[TMP2048]], i32 [[TMP2051]]
// CHECK-NEXT:    store i32 [[TMP2053]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2054:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2055:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2056:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2054]], i32 [[TMP2055]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2057:%.*]] = extractvalue { i32, i1 } [[TMP2056]], 0
// CHECK-NEXT:    [[TMP2058:%.*]] = extractvalue { i32, i1 } [[TMP2056]], 1
// CHECK-NEXT:    [[TMP2059:%.*]] = select i1 [[TMP2058]], i32 [[TMP2054]], i32 [[TMP2057]]
// CHECK-NEXT:    store i32 [[TMP2059]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2060:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2061:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2062:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2060]], i32 [[TMP2061]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2063:%.*]] = extractvalue { i32, i1 } [[TMP2062]], 0
// CHECK-NEXT:    [[TMP2064:%.*]] = extractvalue { i32, i1 } [[TMP2062]], 1
// CHECK-NEXT:    br i1 [[TMP2064]], label [[IX_ATOMIC_EXIT:%.*]], label [[IX_ATOMIC_CONT:%.*]]
// CHECK:       ix.atomic.cont:
// CHECK-NEXT:    store i32 [[TMP2063]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT]]
// CHECK:       ix.atomic.exit:
// CHECK-NEXT:    [[TMP2065:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2066:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2067:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2065]], i32 [[TMP2066]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2068:%.*]] = extractvalue { i32, i1 } [[TMP2067]], 0
// CHECK-NEXT:    [[TMP2069:%.*]] = extractvalue { i32, i1 } [[TMP2067]], 1
// CHECK-NEXT:    br i1 [[TMP2069]], label [[IX_ATOMIC_EXIT185:%.*]], label [[IX_ATOMIC_CONT186:%.*]]
// CHECK:       ix.atomic.cont186:
// CHECK-NEXT:    store i32 [[TMP2068]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT185]]
// CHECK:       ix.atomic.exit185:
// CHECK-NEXT:    [[TMP2070:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2071:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2072:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2070]], i32 [[TMP2071]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2073:%.*]] = extractvalue { i32, i1 } [[TMP2072]], 1
// CHECK-NEXT:    [[TMP2074:%.*]] = sext i1 [[TMP2073]] to i32
// CHECK-NEXT:    store i32 [[TMP2074]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2075:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2076:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2077:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2075]], i32 [[TMP2076]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2078:%.*]] = extractvalue { i32, i1 } [[TMP2077]], 1
// CHECK-NEXT:    [[TMP2079:%.*]] = sext i1 [[TMP2078]] to i32
// CHECK-NEXT:    store i32 [[TMP2079]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2080:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2081:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2082:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2080]], i32 [[TMP2081]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2083:%.*]] = extractvalue { i32, i1 } [[TMP2082]], 0
// CHECK-NEXT:    [[TMP2084:%.*]] = extractvalue { i32, i1 } [[TMP2082]], 1
// CHECK-NEXT:    br i1 [[TMP2084]], label [[IX_ATOMIC_EXIT187:%.*]], label [[IX_ATOMIC_CONT188:%.*]]
// CHECK:       ix.atomic.cont188:
// CHECK-NEXT:    store i32 [[TMP2083]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT187]]
// CHECK:       ix.atomic.exit187:
// CHECK-NEXT:    [[TMP2085:%.*]] = extractvalue { i32, i1 } [[TMP2082]], 1
// CHECK-NEXT:    [[TMP2086:%.*]] = sext i1 [[TMP2085]] to i32
// CHECK-NEXT:    store i32 [[TMP2086]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2087:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2088:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2089:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2087]], i32 [[TMP2088]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2090:%.*]] = extractvalue { i32, i1 } [[TMP2089]], 0
// CHECK-NEXT:    [[TMP2091:%.*]] = extractvalue { i32, i1 } [[TMP2089]], 1
// CHECK-NEXT:    br i1 [[TMP2091]], label [[IX_ATOMIC_EXIT189:%.*]], label [[IX_ATOMIC_CONT190:%.*]]
// CHECK:       ix.atomic.cont190:
// CHECK-NEXT:    store i32 [[TMP2090]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT189]]
// CHECK:       ix.atomic.exit189:
// CHECK-NEXT:    [[TMP2092:%.*]] = extractvalue { i32, i1 } [[TMP2089]], 1
// CHECK-NEXT:    [[TMP2093:%.*]] = sext i1 [[TMP2092]] to i32
// CHECK-NEXT:    store i32 [[TMP2093]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2094:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2095:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2094]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2095]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2096:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2097:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2096]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2097]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2098:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2099:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2098]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2099]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2100:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2101:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2100]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2101]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2102:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2103:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2104:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2102]], i32 [[TMP2103]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2105:%.*]] = extractvalue { i32, i1 } [[TMP2104]], 0
// CHECK-NEXT:    store i32 [[TMP2105]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2106:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2107:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2108:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2106]], i32 [[TMP2107]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2109:%.*]] = extractvalue { i32, i1 } [[TMP2108]], 0
// CHECK-NEXT:    store i32 [[TMP2109]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2110:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2111:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2110]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2112:%.*]] = icmp sgt i32 [[TMP2111]], [[TMP2110]]
// CHECK-NEXT:    [[TMP2113:%.*]] = select i1 [[TMP2112]], i32 [[TMP2110]], i32 [[TMP2111]]
// CHECK-NEXT:    store i32 [[TMP2113]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2114:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2115:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2114]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2116:%.*]] = icmp slt i32 [[TMP2115]], [[TMP2114]]
// CHECK-NEXT:    [[TMP2117:%.*]] = select i1 [[TMP2116]], i32 [[TMP2114]], i32 [[TMP2115]]
// CHECK-NEXT:    store i32 [[TMP2117]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2118:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2119:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2118]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2120:%.*]] = icmp slt i32 [[TMP2119]], [[TMP2118]]
// CHECK-NEXT:    [[TMP2121:%.*]] = select i1 [[TMP2120]], i32 [[TMP2118]], i32 [[TMP2119]]
// CHECK-NEXT:    store i32 [[TMP2121]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2122:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2123:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2122]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2124:%.*]] = icmp sgt i32 [[TMP2123]], [[TMP2122]]
// CHECK-NEXT:    [[TMP2125:%.*]] = select i1 [[TMP2124]], i32 [[TMP2122]], i32 [[TMP2123]]
// CHECK-NEXT:    store i32 [[TMP2125]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2126:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2127:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2128:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2126]], i32 [[TMP2127]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2129:%.*]] = extractvalue { i32, i1 } [[TMP2128]], 0
// CHECK-NEXT:    [[TMP2130:%.*]] = extractvalue { i32, i1 } [[TMP2128]], 1
// CHECK-NEXT:    [[TMP2131:%.*]] = select i1 [[TMP2130]], i32 [[TMP2126]], i32 [[TMP2129]]
// CHECK-NEXT:    store i32 [[TMP2131]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2132:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2133:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2134:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2132]], i32 [[TMP2133]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2135:%.*]] = extractvalue { i32, i1 } [[TMP2134]], 0
// CHECK-NEXT:    [[TMP2136:%.*]] = extractvalue { i32, i1 } [[TMP2134]], 1
// CHECK-NEXT:    [[TMP2137:%.*]] = select i1 [[TMP2136]], i32 [[TMP2132]], i32 [[TMP2135]]
// CHECK-NEXT:    store i32 [[TMP2137]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2138:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2139:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2140:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2138]], i32 [[TMP2139]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2141:%.*]] = extractvalue { i32, i1 } [[TMP2140]], 0
// CHECK-NEXT:    [[TMP2142:%.*]] = extractvalue { i32, i1 } [[TMP2140]], 1
// CHECK-NEXT:    br i1 [[TMP2142]], label [[IX_ATOMIC_EXIT191:%.*]], label [[IX_ATOMIC_CONT192:%.*]]
// CHECK:       ix.atomic.cont192:
// CHECK-NEXT:    store i32 [[TMP2141]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT191]]
// CHECK:       ix.atomic.exit191:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2143:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2144:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2145:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2143]], i32 [[TMP2144]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2146:%.*]] = extractvalue { i32, i1 } [[TMP2145]], 0
// CHECK-NEXT:    [[TMP2147:%.*]] = extractvalue { i32, i1 } [[TMP2145]], 1
// CHECK-NEXT:    br i1 [[TMP2147]], label [[IX_ATOMIC_EXIT193:%.*]], label [[IX_ATOMIC_CONT194:%.*]]
// CHECK:       ix.atomic.cont194:
// CHECK-NEXT:    store i32 [[TMP2146]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT193]]
// CHECK:       ix.atomic.exit193:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2148:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2149:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2150:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2148]], i32 [[TMP2149]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2151:%.*]] = extractvalue { i32, i1 } [[TMP2150]], 1
// CHECK-NEXT:    [[TMP2152:%.*]] = sext i1 [[TMP2151]] to i32
// CHECK-NEXT:    store i32 [[TMP2152]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2153:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2154:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2155:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2153]], i32 [[TMP2154]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2156:%.*]] = extractvalue { i32, i1 } [[TMP2155]], 1
// CHECK-NEXT:    [[TMP2157:%.*]] = sext i1 [[TMP2156]] to i32
// CHECK-NEXT:    store i32 [[TMP2157]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2158:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2159:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2160:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2158]], i32 [[TMP2159]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2161:%.*]] = extractvalue { i32, i1 } [[TMP2160]], 0
// CHECK-NEXT:    [[TMP2162:%.*]] = extractvalue { i32, i1 } [[TMP2160]], 1
// CHECK-NEXT:    br i1 [[TMP2162]], label [[IX_ATOMIC_EXIT195:%.*]], label [[IX_ATOMIC_CONT196:%.*]]
// CHECK:       ix.atomic.cont196:
// CHECK-NEXT:    store i32 [[TMP2161]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT195]]
// CHECK:       ix.atomic.exit195:
// CHECK-NEXT:    [[TMP2163:%.*]] = extractvalue { i32, i1 } [[TMP2160]], 1
// CHECK-NEXT:    [[TMP2164:%.*]] = sext i1 [[TMP2163]] to i32
// CHECK-NEXT:    store i32 [[TMP2164]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2165:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2166:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2167:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2165]], i32 [[TMP2166]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2168:%.*]] = extractvalue { i32, i1 } [[TMP2167]], 0
// CHECK-NEXT:    [[TMP2169:%.*]] = extractvalue { i32, i1 } [[TMP2167]], 1
// CHECK-NEXT:    br i1 [[TMP2169]], label [[IX_ATOMIC_EXIT197:%.*]], label [[IX_ATOMIC_CONT198:%.*]]
// CHECK:       ix.atomic.cont198:
// CHECK-NEXT:    store i32 [[TMP2168]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT197]]
// CHECK:       ix.atomic.exit197:
// CHECK-NEXT:    [[TMP2170:%.*]] = extractvalue { i32, i1 } [[TMP2167]], 1
// CHECK-NEXT:    [[TMP2171:%.*]] = sext i1 [[TMP2170]] to i32
// CHECK-NEXT:    store i32 [[TMP2171]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2172:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2173:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2172]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2173]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2174:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2175:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2174]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2175]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2176:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2177:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2176]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2177]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2178:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2179:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2178]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2179]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2180:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2181:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2182:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2180]], i32 [[TMP2181]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2183:%.*]] = extractvalue { i32, i1 } [[TMP2182]], 0
// CHECK-NEXT:    store i32 [[TMP2183]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2184:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2185:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2186:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2184]], i32 [[TMP2185]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2187:%.*]] = extractvalue { i32, i1 } [[TMP2186]], 0
// CHECK-NEXT:    store i32 [[TMP2187]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2188:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2189:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2188]] acquire, align 4
// CHECK-NEXT:    [[TMP2190:%.*]] = icmp sgt i32 [[TMP2189]], [[TMP2188]]
// CHECK-NEXT:    [[TMP2191:%.*]] = select i1 [[TMP2190]], i32 [[TMP2188]], i32 [[TMP2189]]
// CHECK-NEXT:    store i32 [[TMP2191]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2192:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2193:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2192]] acquire, align 4
// CHECK-NEXT:    [[TMP2194:%.*]] = icmp slt i32 [[TMP2193]], [[TMP2192]]
// CHECK-NEXT:    [[TMP2195:%.*]] = select i1 [[TMP2194]], i32 [[TMP2192]], i32 [[TMP2193]]
// CHECK-NEXT:    store i32 [[TMP2195]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2196:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2197:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2196]] acquire, align 4
// CHECK-NEXT:    [[TMP2198:%.*]] = icmp slt i32 [[TMP2197]], [[TMP2196]]
// CHECK-NEXT:    [[TMP2199:%.*]] = select i1 [[TMP2198]], i32 [[TMP2196]], i32 [[TMP2197]]
// CHECK-NEXT:    store i32 [[TMP2199]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2200:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2201:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2200]] acquire, align 4
// CHECK-NEXT:    [[TMP2202:%.*]] = icmp sgt i32 [[TMP2201]], [[TMP2200]]
// CHECK-NEXT:    [[TMP2203:%.*]] = select i1 [[TMP2202]], i32 [[TMP2200]], i32 [[TMP2201]]
// CHECK-NEXT:    store i32 [[TMP2203]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2204:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2205:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2206:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2204]], i32 [[TMP2205]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2207:%.*]] = extractvalue { i32, i1 } [[TMP2206]], 0
// CHECK-NEXT:    [[TMP2208:%.*]] = extractvalue { i32, i1 } [[TMP2206]], 1
// CHECK-NEXT:    [[TMP2209:%.*]] = select i1 [[TMP2208]], i32 [[TMP2204]], i32 [[TMP2207]]
// CHECK-NEXT:    store i32 [[TMP2209]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2210:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2211:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2212:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2210]], i32 [[TMP2211]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2213:%.*]] = extractvalue { i32, i1 } [[TMP2212]], 0
// CHECK-NEXT:    [[TMP2214:%.*]] = extractvalue { i32, i1 } [[TMP2212]], 1
// CHECK-NEXT:    [[TMP2215:%.*]] = select i1 [[TMP2214]], i32 [[TMP2210]], i32 [[TMP2213]]
// CHECK-NEXT:    store i32 [[TMP2215]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2216:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2217:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2218:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2216]], i32 [[TMP2217]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2219:%.*]] = extractvalue { i32, i1 } [[TMP2218]], 0
// CHECK-NEXT:    [[TMP2220:%.*]] = extractvalue { i32, i1 } [[TMP2218]], 1
// CHECK-NEXT:    br i1 [[TMP2220]], label [[IX_ATOMIC_EXIT199:%.*]], label [[IX_ATOMIC_CONT200:%.*]]
// CHECK:       ix.atomic.cont200:
// CHECK-NEXT:    store i32 [[TMP2219]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT199]]
// CHECK:       ix.atomic.exit199:
// CHECK-NEXT:    [[TMP2221:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2222:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2223:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2221]], i32 [[TMP2222]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2224:%.*]] = extractvalue { i32, i1 } [[TMP2223]], 0
// CHECK-NEXT:    [[TMP2225:%.*]] = extractvalue { i32, i1 } [[TMP2223]], 1
// CHECK-NEXT:    br i1 [[TMP2225]], label [[IX_ATOMIC_EXIT201:%.*]], label [[IX_ATOMIC_CONT202:%.*]]
// CHECK:       ix.atomic.cont202:
// CHECK-NEXT:    store i32 [[TMP2224]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT201]]
// CHECK:       ix.atomic.exit201:
// CHECK-NEXT:    [[TMP2226:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2227:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2228:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2226]], i32 [[TMP2227]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2229:%.*]] = extractvalue { i32, i1 } [[TMP2228]], 1
// CHECK-NEXT:    [[TMP2230:%.*]] = sext i1 [[TMP2229]] to i32
// CHECK-NEXT:    store i32 [[TMP2230]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2231:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2232:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2233:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2231]], i32 [[TMP2232]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2234:%.*]] = extractvalue { i32, i1 } [[TMP2233]], 1
// CHECK-NEXT:    [[TMP2235:%.*]] = sext i1 [[TMP2234]] to i32
// CHECK-NEXT:    store i32 [[TMP2235]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2236:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2237:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2238:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2236]], i32 [[TMP2237]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2239:%.*]] = extractvalue { i32, i1 } [[TMP2238]], 0
// CHECK-NEXT:    [[TMP2240:%.*]] = extractvalue { i32, i1 } [[TMP2238]], 1
// CHECK-NEXT:    br i1 [[TMP2240]], label [[IX_ATOMIC_EXIT203:%.*]], label [[IX_ATOMIC_CONT204:%.*]]
// CHECK:       ix.atomic.cont204:
// CHECK-NEXT:    store i32 [[TMP2239]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT203]]
// CHECK:       ix.atomic.exit203:
// CHECK-NEXT:    [[TMP2241:%.*]] = extractvalue { i32, i1 } [[TMP2238]], 1
// CHECK-NEXT:    [[TMP2242:%.*]] = sext i1 [[TMP2241]] to i32
// CHECK-NEXT:    store i32 [[TMP2242]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2243:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2244:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2245:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2243]], i32 [[TMP2244]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2246:%.*]] = extractvalue { i32, i1 } [[TMP2245]], 0
// CHECK-NEXT:    [[TMP2247:%.*]] = extractvalue { i32, i1 } [[TMP2245]], 1
// CHECK-NEXT:    br i1 [[TMP2247]], label [[IX_ATOMIC_EXIT205:%.*]], label [[IX_ATOMIC_CONT206:%.*]]
// CHECK:       ix.atomic.cont206:
// CHECK-NEXT:    store i32 [[TMP2246]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT205]]
// CHECK:       ix.atomic.exit205:
// CHECK-NEXT:    [[TMP2248:%.*]] = extractvalue { i32, i1 } [[TMP2245]], 1
// CHECK-NEXT:    [[TMP2249:%.*]] = sext i1 [[TMP2248]] to i32
// CHECK-NEXT:    store i32 [[TMP2249]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2250:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2251:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2250]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2251]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2252:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2253:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2252]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2253]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2254:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2255:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2254]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2255]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2256:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2257:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2256]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2257]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2258:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2259:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2260:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2258]], i32 [[TMP2259]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2261:%.*]] = extractvalue { i32, i1 } [[TMP2260]], 0
// CHECK-NEXT:    store i32 [[TMP2261]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2262:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2263:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2264:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2262]], i32 [[TMP2263]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2265:%.*]] = extractvalue { i32, i1 } [[TMP2264]], 0
// CHECK-NEXT:    store i32 [[TMP2265]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2266:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2267:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2266]] monotonic, align 4
// CHECK-NEXT:    [[TMP2268:%.*]] = icmp sgt i32 [[TMP2267]], [[TMP2266]]
// CHECK-NEXT:    [[TMP2269:%.*]] = select i1 [[TMP2268]], i32 [[TMP2266]], i32 [[TMP2267]]
// CHECK-NEXT:    store i32 [[TMP2269]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2270:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2271:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2270]] monotonic, align 4
// CHECK-NEXT:    [[TMP2272:%.*]] = icmp slt i32 [[TMP2271]], [[TMP2270]]
// CHECK-NEXT:    [[TMP2273:%.*]] = select i1 [[TMP2272]], i32 [[TMP2270]], i32 [[TMP2271]]
// CHECK-NEXT:    store i32 [[TMP2273]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2274:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2275:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2274]] monotonic, align 4
// CHECK-NEXT:    [[TMP2276:%.*]] = icmp slt i32 [[TMP2275]], [[TMP2274]]
// CHECK-NEXT:    [[TMP2277:%.*]] = select i1 [[TMP2276]], i32 [[TMP2274]], i32 [[TMP2275]]
// CHECK-NEXT:    store i32 [[TMP2277]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2278:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2279:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2278]] monotonic, align 4
// CHECK-NEXT:    [[TMP2280:%.*]] = icmp sgt i32 [[TMP2279]], [[TMP2278]]
// CHECK-NEXT:    [[TMP2281:%.*]] = select i1 [[TMP2280]], i32 [[TMP2278]], i32 [[TMP2279]]
// CHECK-NEXT:    store i32 [[TMP2281]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2282:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2283:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2284:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2282]], i32 [[TMP2283]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2285:%.*]] = extractvalue { i32, i1 } [[TMP2284]], 0
// CHECK-NEXT:    [[TMP2286:%.*]] = extractvalue { i32, i1 } [[TMP2284]], 1
// CHECK-NEXT:    [[TMP2287:%.*]] = select i1 [[TMP2286]], i32 [[TMP2282]], i32 [[TMP2285]]
// CHECK-NEXT:    store i32 [[TMP2287]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2288:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2289:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2290:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2288]], i32 [[TMP2289]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2291:%.*]] = extractvalue { i32, i1 } [[TMP2290]], 0
// CHECK-NEXT:    [[TMP2292:%.*]] = extractvalue { i32, i1 } [[TMP2290]], 1
// CHECK-NEXT:    [[TMP2293:%.*]] = select i1 [[TMP2292]], i32 [[TMP2288]], i32 [[TMP2291]]
// CHECK-NEXT:    store i32 [[TMP2293]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2294:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2295:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2296:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2294]], i32 [[TMP2295]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2297:%.*]] = extractvalue { i32, i1 } [[TMP2296]], 0
// CHECK-NEXT:    [[TMP2298:%.*]] = extractvalue { i32, i1 } [[TMP2296]], 1
// CHECK-NEXT:    br i1 [[TMP2298]], label [[IX_ATOMIC_EXIT207:%.*]], label [[IX_ATOMIC_CONT208:%.*]]
// CHECK:       ix.atomic.cont208:
// CHECK-NEXT:    store i32 [[TMP2297]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT207]]
// CHECK:       ix.atomic.exit207:
// CHECK-NEXT:    [[TMP2299:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2300:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2301:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2299]], i32 [[TMP2300]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2302:%.*]] = extractvalue { i32, i1 } [[TMP2301]], 0
// CHECK-NEXT:    [[TMP2303:%.*]] = extractvalue { i32, i1 } [[TMP2301]], 1
// CHECK-NEXT:    br i1 [[TMP2303]], label [[IX_ATOMIC_EXIT209:%.*]], label [[IX_ATOMIC_CONT210:%.*]]
// CHECK:       ix.atomic.cont210:
// CHECK-NEXT:    store i32 [[TMP2302]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT209]]
// CHECK:       ix.atomic.exit209:
// CHECK-NEXT:    [[TMP2304:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2305:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2306:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2304]], i32 [[TMP2305]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2307:%.*]] = extractvalue { i32, i1 } [[TMP2306]], 1
// CHECK-NEXT:    [[TMP2308:%.*]] = sext i1 [[TMP2307]] to i32
// CHECK-NEXT:    store i32 [[TMP2308]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2309:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2310:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2311:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2309]], i32 [[TMP2310]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2312:%.*]] = extractvalue { i32, i1 } [[TMP2311]], 1
// CHECK-NEXT:    [[TMP2313:%.*]] = sext i1 [[TMP2312]] to i32
// CHECK-NEXT:    store i32 [[TMP2313]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2314:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2315:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2316:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2314]], i32 [[TMP2315]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2317:%.*]] = extractvalue { i32, i1 } [[TMP2316]], 0
// CHECK-NEXT:    [[TMP2318:%.*]] = extractvalue { i32, i1 } [[TMP2316]], 1
// CHECK-NEXT:    br i1 [[TMP2318]], label [[IX_ATOMIC_EXIT211:%.*]], label [[IX_ATOMIC_CONT212:%.*]]
// CHECK:       ix.atomic.cont212:
// CHECK-NEXT:    store i32 [[TMP2317]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT211]]
// CHECK:       ix.atomic.exit211:
// CHECK-NEXT:    [[TMP2319:%.*]] = extractvalue { i32, i1 } [[TMP2316]], 1
// CHECK-NEXT:    [[TMP2320:%.*]] = sext i1 [[TMP2319]] to i32
// CHECK-NEXT:    store i32 [[TMP2320]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2321:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2322:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2323:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2321]], i32 [[TMP2322]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2324:%.*]] = extractvalue { i32, i1 } [[TMP2323]], 0
// CHECK-NEXT:    [[TMP2325:%.*]] = extractvalue { i32, i1 } [[TMP2323]], 1
// CHECK-NEXT:    br i1 [[TMP2325]], label [[IX_ATOMIC_EXIT213:%.*]], label [[IX_ATOMIC_CONT214:%.*]]
// CHECK:       ix.atomic.cont214:
// CHECK-NEXT:    store i32 [[TMP2324]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT213]]
// CHECK:       ix.atomic.exit213:
// CHECK-NEXT:    [[TMP2326:%.*]] = extractvalue { i32, i1 } [[TMP2323]], 1
// CHECK-NEXT:    [[TMP2327:%.*]] = sext i1 [[TMP2326]] to i32
// CHECK-NEXT:    store i32 [[TMP2327]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP2328:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2329:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2328]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2329]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2330:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2331:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2330]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2331]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2332:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2333:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2332]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2333]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2334:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2335:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2334]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2335]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2336:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2337:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2338:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2336]], i32 [[TMP2337]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2339:%.*]] = extractvalue { i32, i1 } [[TMP2338]], 0
// CHECK-NEXT:    store i32 [[TMP2339]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2340:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2341:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2342:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2340]], i32 [[TMP2341]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2343:%.*]] = extractvalue { i32, i1 } [[TMP2342]], 0
// CHECK-NEXT:    store i32 [[TMP2343]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2344:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2345:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2344]] release, align 4
// CHECK-NEXT:    [[TMP2346:%.*]] = icmp sgt i32 [[TMP2345]], [[TMP2344]]
// CHECK-NEXT:    [[TMP2347:%.*]] = select i1 [[TMP2346]], i32 [[TMP2344]], i32 [[TMP2345]]
// CHECK-NEXT:    store i32 [[TMP2347]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2348:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2349:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2348]] release, align 4
// CHECK-NEXT:    [[TMP2350:%.*]] = icmp slt i32 [[TMP2349]], [[TMP2348]]
// CHECK-NEXT:    [[TMP2351:%.*]] = select i1 [[TMP2350]], i32 [[TMP2348]], i32 [[TMP2349]]
// CHECK-NEXT:    store i32 [[TMP2351]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2352:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2353:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2352]] release, align 4
// CHECK-NEXT:    [[TMP2354:%.*]] = icmp slt i32 [[TMP2353]], [[TMP2352]]
// CHECK-NEXT:    [[TMP2355:%.*]] = select i1 [[TMP2354]], i32 [[TMP2352]], i32 [[TMP2353]]
// CHECK-NEXT:    store i32 [[TMP2355]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2356:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2357:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2356]] release, align 4
// CHECK-NEXT:    [[TMP2358:%.*]] = icmp sgt i32 [[TMP2357]], [[TMP2356]]
// CHECK-NEXT:    [[TMP2359:%.*]] = select i1 [[TMP2358]], i32 [[TMP2356]], i32 [[TMP2357]]
// CHECK-NEXT:    store i32 [[TMP2359]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2360:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2361:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2362:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2360]], i32 [[TMP2361]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2363:%.*]] = extractvalue { i32, i1 } [[TMP2362]], 0
// CHECK-NEXT:    [[TMP2364:%.*]] = extractvalue { i32, i1 } [[TMP2362]], 1
// CHECK-NEXT:    [[TMP2365:%.*]] = select i1 [[TMP2364]], i32 [[TMP2360]], i32 [[TMP2363]]
// CHECK-NEXT:    store i32 [[TMP2365]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2366:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2367:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2368:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2366]], i32 [[TMP2367]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2369:%.*]] = extractvalue { i32, i1 } [[TMP2368]], 0
// CHECK-NEXT:    [[TMP2370:%.*]] = extractvalue { i32, i1 } [[TMP2368]], 1
// CHECK-NEXT:    [[TMP2371:%.*]] = select i1 [[TMP2370]], i32 [[TMP2366]], i32 [[TMP2369]]
// CHECK-NEXT:    store i32 [[TMP2371]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2372:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2373:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2374:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2372]], i32 [[TMP2373]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2375:%.*]] = extractvalue { i32, i1 } [[TMP2374]], 0
// CHECK-NEXT:    [[TMP2376:%.*]] = extractvalue { i32, i1 } [[TMP2374]], 1
// CHECK-NEXT:    br i1 [[TMP2376]], label [[IX_ATOMIC_EXIT215:%.*]], label [[IX_ATOMIC_CONT216:%.*]]
// CHECK:       ix.atomic.cont216:
// CHECK-NEXT:    store i32 [[TMP2375]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT215]]
// CHECK:       ix.atomic.exit215:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2377:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2378:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2379:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2377]], i32 [[TMP2378]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2380:%.*]] = extractvalue { i32, i1 } [[TMP2379]], 0
// CHECK-NEXT:    [[TMP2381:%.*]] = extractvalue { i32, i1 } [[TMP2379]], 1
// CHECK-NEXT:    br i1 [[TMP2381]], label [[IX_ATOMIC_EXIT217:%.*]], label [[IX_ATOMIC_CONT218:%.*]]
// CHECK:       ix.atomic.cont218:
// CHECK-NEXT:    store i32 [[TMP2380]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT217]]
// CHECK:       ix.atomic.exit217:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2382:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2383:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2384:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2382]], i32 [[TMP2383]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2385:%.*]] = extractvalue { i32, i1 } [[TMP2384]], 1
// CHECK-NEXT:    [[TMP2386:%.*]] = sext i1 [[TMP2385]] to i32
// CHECK-NEXT:    store i32 [[TMP2386]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2387:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2388:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2389:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2387]], i32 [[TMP2388]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2390:%.*]] = extractvalue { i32, i1 } [[TMP2389]], 1
// CHECK-NEXT:    [[TMP2391:%.*]] = sext i1 [[TMP2390]] to i32
// CHECK-NEXT:    store i32 [[TMP2391]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2392:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2393:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2394:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2392]], i32 [[TMP2393]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2395:%.*]] = extractvalue { i32, i1 } [[TMP2394]], 0
// CHECK-NEXT:    [[TMP2396:%.*]] = extractvalue { i32, i1 } [[TMP2394]], 1
// CHECK-NEXT:    br i1 [[TMP2396]], label [[IX_ATOMIC_EXIT219:%.*]], label [[IX_ATOMIC_CONT220:%.*]]
// CHECK:       ix.atomic.cont220:
// CHECK-NEXT:    store i32 [[TMP2395]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT219]]
// CHECK:       ix.atomic.exit219:
// CHECK-NEXT:    [[TMP2397:%.*]] = extractvalue { i32, i1 } [[TMP2394]], 1
// CHECK-NEXT:    [[TMP2398:%.*]] = sext i1 [[TMP2397]] to i32
// CHECK-NEXT:    store i32 [[TMP2398]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2399:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2400:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2401:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2399]], i32 [[TMP2400]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2402:%.*]] = extractvalue { i32, i1 } [[TMP2401]], 0
// CHECK-NEXT:    [[TMP2403:%.*]] = extractvalue { i32, i1 } [[TMP2401]], 1
// CHECK-NEXT:    br i1 [[TMP2403]], label [[IX_ATOMIC_EXIT221:%.*]], label [[IX_ATOMIC_CONT222:%.*]]
// CHECK:       ix.atomic.cont222:
// CHECK-NEXT:    store i32 [[TMP2402]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT221]]
// CHECK:       ix.atomic.exit221:
// CHECK-NEXT:    [[TMP2404:%.*]] = extractvalue { i32, i1 } [[TMP2401]], 1
// CHECK-NEXT:    [[TMP2405:%.*]] = sext i1 [[TMP2404]] to i32
// CHECK-NEXT:    store i32 [[TMP2405]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2406:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2407:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2406]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2407]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2408:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2409:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2408]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2409]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2410:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2411:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2410]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2411]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2412:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2413:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2412]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2413]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2414:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2415:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2416:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2414]], i32 [[TMP2415]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2417:%.*]] = extractvalue { i32, i1 } [[TMP2416]], 0
// CHECK-NEXT:    store i32 [[TMP2417]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2418:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2419:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2420:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2418]], i32 [[TMP2419]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2421:%.*]] = extractvalue { i32, i1 } [[TMP2420]], 0
// CHECK-NEXT:    store i32 [[TMP2421]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2422:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2423:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2422]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2424:%.*]] = icmp sgt i32 [[TMP2423]], [[TMP2422]]
// CHECK-NEXT:    [[TMP2425:%.*]] = select i1 [[TMP2424]], i32 [[TMP2422]], i32 [[TMP2423]]
// CHECK-NEXT:    store i32 [[TMP2425]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2426:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2427:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2426]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2428:%.*]] = icmp slt i32 [[TMP2427]], [[TMP2426]]
// CHECK-NEXT:    [[TMP2429:%.*]] = select i1 [[TMP2428]], i32 [[TMP2426]], i32 [[TMP2427]]
// CHECK-NEXT:    store i32 [[TMP2429]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2430:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2431:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP2430]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2432:%.*]] = icmp slt i32 [[TMP2431]], [[TMP2430]]
// CHECK-NEXT:    [[TMP2433:%.*]] = select i1 [[TMP2432]], i32 [[TMP2430]], i32 [[TMP2431]]
// CHECK-NEXT:    store i32 [[TMP2433]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2434:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2435:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2434]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2436:%.*]] = icmp sgt i32 [[TMP2435]], [[TMP2434]]
// CHECK-NEXT:    [[TMP2437:%.*]] = select i1 [[TMP2436]], i32 [[TMP2434]], i32 [[TMP2435]]
// CHECK-NEXT:    store i32 [[TMP2437]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2438:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2439:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2440:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2438]], i32 [[TMP2439]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2441:%.*]] = extractvalue { i32, i1 } [[TMP2440]], 0
// CHECK-NEXT:    [[TMP2442:%.*]] = extractvalue { i32, i1 } [[TMP2440]], 1
// CHECK-NEXT:    [[TMP2443:%.*]] = select i1 [[TMP2442]], i32 [[TMP2438]], i32 [[TMP2441]]
// CHECK-NEXT:    store i32 [[TMP2443]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2444:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2445:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2446:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2444]], i32 [[TMP2445]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2447:%.*]] = extractvalue { i32, i1 } [[TMP2446]], 0
// CHECK-NEXT:    [[TMP2448:%.*]] = extractvalue { i32, i1 } [[TMP2446]], 1
// CHECK-NEXT:    [[TMP2449:%.*]] = select i1 [[TMP2448]], i32 [[TMP2444]], i32 [[TMP2447]]
// CHECK-NEXT:    store i32 [[TMP2449]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2450:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2451:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2452:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2450]], i32 [[TMP2451]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2453:%.*]] = extractvalue { i32, i1 } [[TMP2452]], 0
// CHECK-NEXT:    [[TMP2454:%.*]] = extractvalue { i32, i1 } [[TMP2452]], 1
// CHECK-NEXT:    br i1 [[TMP2454]], label [[IX_ATOMIC_EXIT223:%.*]], label [[IX_ATOMIC_CONT224:%.*]]
// CHECK:       ix.atomic.cont224:
// CHECK-NEXT:    store i32 [[TMP2453]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT223]]
// CHECK:       ix.atomic.exit223:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2455:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2456:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2457:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2455]], i32 [[TMP2456]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2458:%.*]] = extractvalue { i32, i1 } [[TMP2457]], 0
// CHECK-NEXT:    [[TMP2459:%.*]] = extractvalue { i32, i1 } [[TMP2457]], 1
// CHECK-NEXT:    br i1 [[TMP2459]], label [[IX_ATOMIC_EXIT225:%.*]], label [[IX_ATOMIC_CONT226:%.*]]
// CHECK:       ix.atomic.cont226:
// CHECK-NEXT:    store i32 [[TMP2458]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT225]]
// CHECK:       ix.atomic.exit225:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2460:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2461:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2462:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2460]], i32 [[TMP2461]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2463:%.*]] = extractvalue { i32, i1 } [[TMP2462]], 1
// CHECK-NEXT:    [[TMP2464:%.*]] = sext i1 [[TMP2463]] to i32
// CHECK-NEXT:    store i32 [[TMP2464]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2465:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2466:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2467:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2465]], i32 [[TMP2466]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2468:%.*]] = extractvalue { i32, i1 } [[TMP2467]], 1
// CHECK-NEXT:    [[TMP2469:%.*]] = sext i1 [[TMP2468]] to i32
// CHECK-NEXT:    store i32 [[TMP2469]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2470:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2471:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2472:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2470]], i32 [[TMP2471]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2473:%.*]] = extractvalue { i32, i1 } [[TMP2472]], 0
// CHECK-NEXT:    [[TMP2474:%.*]] = extractvalue { i32, i1 } [[TMP2472]], 1
// CHECK-NEXT:    br i1 [[TMP2474]], label [[IX_ATOMIC_EXIT227:%.*]], label [[IX_ATOMIC_CONT228:%.*]]
// CHECK:       ix.atomic.cont228:
// CHECK-NEXT:    store i32 [[TMP2473]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT227]]
// CHECK:       ix.atomic.exit227:
// CHECK-NEXT:    [[TMP2475:%.*]] = extractvalue { i32, i1 } [[TMP2472]], 1
// CHECK-NEXT:    [[TMP2476:%.*]] = sext i1 [[TMP2475]] to i32
// CHECK-NEXT:    store i32 [[TMP2476]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2477:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP2478:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP2479:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP2477]], i32 [[TMP2478]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2480:%.*]] = extractvalue { i32, i1 } [[TMP2479]], 0
// CHECK-NEXT:    [[TMP2481:%.*]] = extractvalue { i32, i1 } [[TMP2479]], 1
// CHECK-NEXT:    br i1 [[TMP2481]], label [[IX_ATOMIC_EXIT229:%.*]], label [[IX_ATOMIC_CONT230:%.*]]
// CHECK:       ix.atomic.cont230:
// CHECK-NEXT:    store i32 [[TMP2480]], ptr [[IV]], align 4
// CHECK-NEXT:    br label [[IX_ATOMIC_EXIT229]]
// CHECK:       ix.atomic.exit229:
// CHECK-NEXT:    [[TMP2482:%.*]] = extractvalue { i32, i1 } [[TMP2479]], 1
// CHECK-NEXT:    [[TMP2483:%.*]] = sext i1 [[TMP2482]] to i32
// CHECK-NEXT:    store i32 [[TMP2483]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2484:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2485:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2484]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2485]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2486:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2487:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2486]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2487]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2488:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2489:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2488]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2489]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2490:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2491:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2490]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2491]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2492:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2493:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2494:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2492]], i32 [[TMP2493]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2495:%.*]] = extractvalue { i32, i1 } [[TMP2494]], 0
// CHECK-NEXT:    store i32 [[TMP2495]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2496:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2497:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2498:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2496]], i32 [[TMP2497]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2499:%.*]] = extractvalue { i32, i1 } [[TMP2498]], 0
// CHECK-NEXT:    store i32 [[TMP2499]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2500:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2501:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2500]] monotonic, align 4
// CHECK-NEXT:    [[TMP2502:%.*]] = icmp ugt i32 [[TMP2501]], [[TMP2500]]
// CHECK-NEXT:    [[TMP2503:%.*]] = select i1 [[TMP2502]], i32 [[TMP2500]], i32 [[TMP2501]]
// CHECK-NEXT:    store i32 [[TMP2503]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2504:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2505:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2504]] monotonic, align 4
// CHECK-NEXT:    [[TMP2506:%.*]] = icmp ult i32 [[TMP2505]], [[TMP2504]]
// CHECK-NEXT:    [[TMP2507:%.*]] = select i1 [[TMP2506]], i32 [[TMP2504]], i32 [[TMP2505]]
// CHECK-NEXT:    store i32 [[TMP2507]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2508:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2509:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2508]] monotonic, align 4
// CHECK-NEXT:    [[TMP2510:%.*]] = icmp ult i32 [[TMP2509]], [[TMP2508]]
// CHECK-NEXT:    [[TMP2511:%.*]] = select i1 [[TMP2510]], i32 [[TMP2508]], i32 [[TMP2509]]
// CHECK-NEXT:    store i32 [[TMP2511]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2512:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2513:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2512]] monotonic, align 4
// CHECK-NEXT:    [[TMP2514:%.*]] = icmp ugt i32 [[TMP2513]], [[TMP2512]]
// CHECK-NEXT:    [[TMP2515:%.*]] = select i1 [[TMP2514]], i32 [[TMP2512]], i32 [[TMP2513]]
// CHECK-NEXT:    store i32 [[TMP2515]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2516:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2517:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2518:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2516]], i32 [[TMP2517]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2519:%.*]] = extractvalue { i32, i1 } [[TMP2518]], 0
// CHECK-NEXT:    [[TMP2520:%.*]] = extractvalue { i32, i1 } [[TMP2518]], 1
// CHECK-NEXT:    [[TMP2521:%.*]] = select i1 [[TMP2520]], i32 [[TMP2516]], i32 [[TMP2519]]
// CHECK-NEXT:    store i32 [[TMP2521]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2522:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2523:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2524:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2522]], i32 [[TMP2523]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2525:%.*]] = extractvalue { i32, i1 } [[TMP2524]], 0
// CHECK-NEXT:    [[TMP2526:%.*]] = extractvalue { i32, i1 } [[TMP2524]], 1
// CHECK-NEXT:    [[TMP2527:%.*]] = select i1 [[TMP2526]], i32 [[TMP2522]], i32 [[TMP2525]]
// CHECK-NEXT:    store i32 [[TMP2527]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2528:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2529:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2530:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2528]], i32 [[TMP2529]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2531:%.*]] = extractvalue { i32, i1 } [[TMP2530]], 0
// CHECK-NEXT:    [[TMP2532:%.*]] = extractvalue { i32, i1 } [[TMP2530]], 1
// CHECK-NEXT:    br i1 [[TMP2532]], label [[UIX_ATOMIC_EXIT:%.*]], label [[UIX_ATOMIC_CONT:%.*]]
// CHECK:       uix.atomic.cont:
// CHECK-NEXT:    store i32 [[TMP2531]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT]]
// CHECK:       uix.atomic.exit:
// CHECK-NEXT:    [[TMP2533:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2534:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2535:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2533]], i32 [[TMP2534]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2536:%.*]] = extractvalue { i32, i1 } [[TMP2535]], 0
// CHECK-NEXT:    [[TMP2537:%.*]] = extractvalue { i32, i1 } [[TMP2535]], 1
// CHECK-NEXT:    br i1 [[TMP2537]], label [[UIX_ATOMIC_EXIT231:%.*]], label [[UIX_ATOMIC_CONT232:%.*]]
// CHECK:       uix.atomic.cont232:
// CHECK-NEXT:    store i32 [[TMP2536]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT231]]
// CHECK:       uix.atomic.exit231:
// CHECK-NEXT:    [[TMP2538:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2539:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2540:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2538]], i32 [[TMP2539]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2541:%.*]] = extractvalue { i32, i1 } [[TMP2540]], 1
// CHECK-NEXT:    [[TMP2542:%.*]] = zext i1 [[TMP2541]] to i32
// CHECK-NEXT:    store i32 [[TMP2542]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2543:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2544:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2545:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2543]], i32 [[TMP2544]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2546:%.*]] = extractvalue { i32, i1 } [[TMP2545]], 1
// CHECK-NEXT:    [[TMP2547:%.*]] = zext i1 [[TMP2546]] to i32
// CHECK-NEXT:    store i32 [[TMP2547]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2548:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2549:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2550:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2548]], i32 [[TMP2549]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2551:%.*]] = extractvalue { i32, i1 } [[TMP2550]], 0
// CHECK-NEXT:    [[TMP2552:%.*]] = extractvalue { i32, i1 } [[TMP2550]], 1
// CHECK-NEXT:    br i1 [[TMP2552]], label [[UIX_ATOMIC_EXIT233:%.*]], label [[UIX_ATOMIC_CONT234:%.*]]
// CHECK:       uix.atomic.cont234:
// CHECK-NEXT:    store i32 [[TMP2551]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT233]]
// CHECK:       uix.atomic.exit233:
// CHECK-NEXT:    [[TMP2553:%.*]] = extractvalue { i32, i1 } [[TMP2550]], 1
// CHECK-NEXT:    [[TMP2554:%.*]] = zext i1 [[TMP2553]] to i32
// CHECK-NEXT:    store i32 [[TMP2554]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2555:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2556:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2557:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2555]], i32 [[TMP2556]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2558:%.*]] = extractvalue { i32, i1 } [[TMP2557]], 0
// CHECK-NEXT:    [[TMP2559:%.*]] = extractvalue { i32, i1 } [[TMP2557]], 1
// CHECK-NEXT:    br i1 [[TMP2559]], label [[UIX_ATOMIC_EXIT235:%.*]], label [[UIX_ATOMIC_CONT236:%.*]]
// CHECK:       uix.atomic.cont236:
// CHECK-NEXT:    store i32 [[TMP2558]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT235]]
// CHECK:       uix.atomic.exit235:
// CHECK-NEXT:    [[TMP2560:%.*]] = extractvalue { i32, i1 } [[TMP2557]], 1
// CHECK-NEXT:    [[TMP2561:%.*]] = zext i1 [[TMP2560]] to i32
// CHECK-NEXT:    store i32 [[TMP2561]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2562:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2563:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2562]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2563]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2564:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2565:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2564]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2565]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2566:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2567:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2566]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2567]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2568:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2569:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2568]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP2569]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2570:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2571:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2572:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2570]], i32 [[TMP2571]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2573:%.*]] = extractvalue { i32, i1 } [[TMP2572]], 0
// CHECK-NEXT:    store i32 [[TMP2573]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2574:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2575:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2576:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2574]], i32 [[TMP2575]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2577:%.*]] = extractvalue { i32, i1 } [[TMP2576]], 0
// CHECK-NEXT:    store i32 [[TMP2577]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2578:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2579:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2578]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2580:%.*]] = icmp ugt i32 [[TMP2579]], [[TMP2578]]
// CHECK-NEXT:    [[TMP2581:%.*]] = select i1 [[TMP2580]], i32 [[TMP2578]], i32 [[TMP2579]]
// CHECK-NEXT:    store i32 [[TMP2581]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2582:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2583:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2582]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2584:%.*]] = icmp ult i32 [[TMP2583]], [[TMP2582]]
// CHECK-NEXT:    [[TMP2585:%.*]] = select i1 [[TMP2584]], i32 [[TMP2582]], i32 [[TMP2583]]
// CHECK-NEXT:    store i32 [[TMP2585]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2586:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2587:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2586]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2588:%.*]] = icmp ult i32 [[TMP2587]], [[TMP2586]]
// CHECK-NEXT:    [[TMP2589:%.*]] = select i1 [[TMP2588]], i32 [[TMP2586]], i32 [[TMP2587]]
// CHECK-NEXT:    store i32 [[TMP2589]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2590:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2591:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2590]] acq_rel, align 4
// CHECK-NEXT:    [[TMP2592:%.*]] = icmp ugt i32 [[TMP2591]], [[TMP2590]]
// CHECK-NEXT:    [[TMP2593:%.*]] = select i1 [[TMP2592]], i32 [[TMP2590]], i32 [[TMP2591]]
// CHECK-NEXT:    store i32 [[TMP2593]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2594:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2595:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2596:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2594]], i32 [[TMP2595]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2597:%.*]] = extractvalue { i32, i1 } [[TMP2596]], 0
// CHECK-NEXT:    [[TMP2598:%.*]] = extractvalue { i32, i1 } [[TMP2596]], 1
// CHECK-NEXT:    [[TMP2599:%.*]] = select i1 [[TMP2598]], i32 [[TMP2594]], i32 [[TMP2597]]
// CHECK-NEXT:    store i32 [[TMP2599]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2600:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2601:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2602:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2600]], i32 [[TMP2601]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2603:%.*]] = extractvalue { i32, i1 } [[TMP2602]], 0
// CHECK-NEXT:    [[TMP2604:%.*]] = extractvalue { i32, i1 } [[TMP2602]], 1
// CHECK-NEXT:    [[TMP2605:%.*]] = select i1 [[TMP2604]], i32 [[TMP2600]], i32 [[TMP2603]]
// CHECK-NEXT:    store i32 [[TMP2605]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2606:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2607:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2608:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2606]], i32 [[TMP2607]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2609:%.*]] = extractvalue { i32, i1 } [[TMP2608]], 0
// CHECK-NEXT:    [[TMP2610:%.*]] = extractvalue { i32, i1 } [[TMP2608]], 1
// CHECK-NEXT:    br i1 [[TMP2610]], label [[UIX_ATOMIC_EXIT237:%.*]], label [[UIX_ATOMIC_CONT238:%.*]]
// CHECK:       uix.atomic.cont238:
// CHECK-NEXT:    store i32 [[TMP2609]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT237]]
// CHECK:       uix.atomic.exit237:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2611:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2612:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2613:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2611]], i32 [[TMP2612]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2614:%.*]] = extractvalue { i32, i1 } [[TMP2613]], 0
// CHECK-NEXT:    [[TMP2615:%.*]] = extractvalue { i32, i1 } [[TMP2613]], 1
// CHECK-NEXT:    br i1 [[TMP2615]], label [[UIX_ATOMIC_EXIT239:%.*]], label [[UIX_ATOMIC_CONT240:%.*]]
// CHECK:       uix.atomic.cont240:
// CHECK-NEXT:    store i32 [[TMP2614]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT239]]
// CHECK:       uix.atomic.exit239:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2616:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2617:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2618:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2616]], i32 [[TMP2617]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2619:%.*]] = extractvalue { i32, i1 } [[TMP2618]], 1
// CHECK-NEXT:    [[TMP2620:%.*]] = zext i1 [[TMP2619]] to i32
// CHECK-NEXT:    store i32 [[TMP2620]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2621:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2622:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2623:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2621]], i32 [[TMP2622]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2624:%.*]] = extractvalue { i32, i1 } [[TMP2623]], 1
// CHECK-NEXT:    [[TMP2625:%.*]] = zext i1 [[TMP2624]] to i32
// CHECK-NEXT:    store i32 [[TMP2625]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2626:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2627:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2628:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2626]], i32 [[TMP2627]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2629:%.*]] = extractvalue { i32, i1 } [[TMP2628]], 0
// CHECK-NEXT:    [[TMP2630:%.*]] = extractvalue { i32, i1 } [[TMP2628]], 1
// CHECK-NEXT:    br i1 [[TMP2630]], label [[UIX_ATOMIC_EXIT241:%.*]], label [[UIX_ATOMIC_CONT242:%.*]]
// CHECK:       uix.atomic.cont242:
// CHECK-NEXT:    store i32 [[TMP2629]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT241]]
// CHECK:       uix.atomic.exit241:
// CHECK-NEXT:    [[TMP2631:%.*]] = extractvalue { i32, i1 } [[TMP2628]], 1
// CHECK-NEXT:    [[TMP2632:%.*]] = zext i1 [[TMP2631]] to i32
// CHECK-NEXT:    store i32 [[TMP2632]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2633:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2634:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2635:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2633]], i32 [[TMP2634]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP2636:%.*]] = extractvalue { i32, i1 } [[TMP2635]], 0
// CHECK-NEXT:    [[TMP2637:%.*]] = extractvalue { i32, i1 } [[TMP2635]], 1
// CHECK-NEXT:    br i1 [[TMP2637]], label [[UIX_ATOMIC_EXIT243:%.*]], label [[UIX_ATOMIC_CONT244:%.*]]
// CHECK:       uix.atomic.cont244:
// CHECK-NEXT:    store i32 [[TMP2636]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT243]]
// CHECK:       uix.atomic.exit243:
// CHECK-NEXT:    [[TMP2638:%.*]] = extractvalue { i32, i1 } [[TMP2635]], 1
// CHECK-NEXT:    [[TMP2639:%.*]] = zext i1 [[TMP2638]] to i32
// CHECK-NEXT:    store i32 [[TMP2639]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2640:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2641:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2640]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2641]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2642:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2643:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2642]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2643]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2644:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2645:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2644]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2645]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2646:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2647:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2646]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP2647]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2648:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2649:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2650:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2648]], i32 [[TMP2649]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2651:%.*]] = extractvalue { i32, i1 } [[TMP2650]], 0
// CHECK-NEXT:    store i32 [[TMP2651]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2652:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2653:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2654:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2652]], i32 [[TMP2653]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2655:%.*]] = extractvalue { i32, i1 } [[TMP2654]], 0
// CHECK-NEXT:    store i32 [[TMP2655]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2656:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2657:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2656]] acquire, align 4
// CHECK-NEXT:    [[TMP2658:%.*]] = icmp ugt i32 [[TMP2657]], [[TMP2656]]
// CHECK-NEXT:    [[TMP2659:%.*]] = select i1 [[TMP2658]], i32 [[TMP2656]], i32 [[TMP2657]]
// CHECK-NEXT:    store i32 [[TMP2659]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2660:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2661:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2660]] acquire, align 4
// CHECK-NEXT:    [[TMP2662:%.*]] = icmp ult i32 [[TMP2661]], [[TMP2660]]
// CHECK-NEXT:    [[TMP2663:%.*]] = select i1 [[TMP2662]], i32 [[TMP2660]], i32 [[TMP2661]]
// CHECK-NEXT:    store i32 [[TMP2663]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2664:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2665:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2664]] acquire, align 4
// CHECK-NEXT:    [[TMP2666:%.*]] = icmp ult i32 [[TMP2665]], [[TMP2664]]
// CHECK-NEXT:    [[TMP2667:%.*]] = select i1 [[TMP2666]], i32 [[TMP2664]], i32 [[TMP2665]]
// CHECK-NEXT:    store i32 [[TMP2667]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2668:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2669:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2668]] acquire, align 4
// CHECK-NEXT:    [[TMP2670:%.*]] = icmp ugt i32 [[TMP2669]], [[TMP2668]]
// CHECK-NEXT:    [[TMP2671:%.*]] = select i1 [[TMP2670]], i32 [[TMP2668]], i32 [[TMP2669]]
// CHECK-NEXT:    store i32 [[TMP2671]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2672:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2673:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2674:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2672]], i32 [[TMP2673]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2675:%.*]] = extractvalue { i32, i1 } [[TMP2674]], 0
// CHECK-NEXT:    [[TMP2676:%.*]] = extractvalue { i32, i1 } [[TMP2674]], 1
// CHECK-NEXT:    [[TMP2677:%.*]] = select i1 [[TMP2676]], i32 [[TMP2672]], i32 [[TMP2675]]
// CHECK-NEXT:    store i32 [[TMP2677]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2678:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2679:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2680:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2678]], i32 [[TMP2679]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2681:%.*]] = extractvalue { i32, i1 } [[TMP2680]], 0
// CHECK-NEXT:    [[TMP2682:%.*]] = extractvalue { i32, i1 } [[TMP2680]], 1
// CHECK-NEXT:    [[TMP2683:%.*]] = select i1 [[TMP2682]], i32 [[TMP2678]], i32 [[TMP2681]]
// CHECK-NEXT:    store i32 [[TMP2683]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2684:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2685:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2686:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2684]], i32 [[TMP2685]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2687:%.*]] = extractvalue { i32, i1 } [[TMP2686]], 0
// CHECK-NEXT:    [[TMP2688:%.*]] = extractvalue { i32, i1 } [[TMP2686]], 1
// CHECK-NEXT:    br i1 [[TMP2688]], label [[UIX_ATOMIC_EXIT245:%.*]], label [[UIX_ATOMIC_CONT246:%.*]]
// CHECK:       uix.atomic.cont246:
// CHECK-NEXT:    store i32 [[TMP2687]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT245]]
// CHECK:       uix.atomic.exit245:
// CHECK-NEXT:    [[TMP2689:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2690:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2691:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2689]], i32 [[TMP2690]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2692:%.*]] = extractvalue { i32, i1 } [[TMP2691]], 0
// CHECK-NEXT:    [[TMP2693:%.*]] = extractvalue { i32, i1 } [[TMP2691]], 1
// CHECK-NEXT:    br i1 [[TMP2693]], label [[UIX_ATOMIC_EXIT247:%.*]], label [[UIX_ATOMIC_CONT248:%.*]]
// CHECK:       uix.atomic.cont248:
// CHECK-NEXT:    store i32 [[TMP2692]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT247]]
// CHECK:       uix.atomic.exit247:
// CHECK-NEXT:    [[TMP2694:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2695:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2696:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2694]], i32 [[TMP2695]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2697:%.*]] = extractvalue { i32, i1 } [[TMP2696]], 1
// CHECK-NEXT:    [[TMP2698:%.*]] = zext i1 [[TMP2697]] to i32
// CHECK-NEXT:    store i32 [[TMP2698]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2699:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2700:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2701:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2699]], i32 [[TMP2700]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2702:%.*]] = extractvalue { i32, i1 } [[TMP2701]], 1
// CHECK-NEXT:    [[TMP2703:%.*]] = zext i1 [[TMP2702]] to i32
// CHECK-NEXT:    store i32 [[TMP2703]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2704:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2705:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2706:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2704]], i32 [[TMP2705]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2707:%.*]] = extractvalue { i32, i1 } [[TMP2706]], 0
// CHECK-NEXT:    [[TMP2708:%.*]] = extractvalue { i32, i1 } [[TMP2706]], 1
// CHECK-NEXT:    br i1 [[TMP2708]], label [[UIX_ATOMIC_EXIT249:%.*]], label [[UIX_ATOMIC_CONT250:%.*]]
// CHECK:       uix.atomic.cont250:
// CHECK-NEXT:    store i32 [[TMP2707]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT249]]
// CHECK:       uix.atomic.exit249:
// CHECK-NEXT:    [[TMP2709:%.*]] = extractvalue { i32, i1 } [[TMP2706]], 1
// CHECK-NEXT:    [[TMP2710:%.*]] = zext i1 [[TMP2709]] to i32
// CHECK-NEXT:    store i32 [[TMP2710]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2711:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2712:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2713:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2711]], i32 [[TMP2712]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP2714:%.*]] = extractvalue { i32, i1 } [[TMP2713]], 0
// CHECK-NEXT:    [[TMP2715:%.*]] = extractvalue { i32, i1 } [[TMP2713]], 1
// CHECK-NEXT:    br i1 [[TMP2715]], label [[UIX_ATOMIC_EXIT251:%.*]], label [[UIX_ATOMIC_CONT252:%.*]]
// CHECK:       uix.atomic.cont252:
// CHECK-NEXT:    store i32 [[TMP2714]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT251]]
// CHECK:       uix.atomic.exit251:
// CHECK-NEXT:    [[TMP2716:%.*]] = extractvalue { i32, i1 } [[TMP2713]], 1
// CHECK-NEXT:    [[TMP2717:%.*]] = zext i1 [[TMP2716]] to i32
// CHECK-NEXT:    store i32 [[TMP2717]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2718:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2719:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2718]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2719]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2720:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2721:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2720]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2721]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2722:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2723:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2722]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2723]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2724:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2725:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2724]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP2725]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2726:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2727:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2728:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2726]], i32 [[TMP2727]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2729:%.*]] = extractvalue { i32, i1 } [[TMP2728]], 0
// CHECK-NEXT:    store i32 [[TMP2729]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2730:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2731:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2732:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2730]], i32 [[TMP2731]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2733:%.*]] = extractvalue { i32, i1 } [[TMP2732]], 0
// CHECK-NEXT:    store i32 [[TMP2733]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2734:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2735:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2734]] monotonic, align 4
// CHECK-NEXT:    [[TMP2736:%.*]] = icmp ugt i32 [[TMP2735]], [[TMP2734]]
// CHECK-NEXT:    [[TMP2737:%.*]] = select i1 [[TMP2736]], i32 [[TMP2734]], i32 [[TMP2735]]
// CHECK-NEXT:    store i32 [[TMP2737]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2738:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2739:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2738]] monotonic, align 4
// CHECK-NEXT:    [[TMP2740:%.*]] = icmp ult i32 [[TMP2739]], [[TMP2738]]
// CHECK-NEXT:    [[TMP2741:%.*]] = select i1 [[TMP2740]], i32 [[TMP2738]], i32 [[TMP2739]]
// CHECK-NEXT:    store i32 [[TMP2741]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2742:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2743:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2742]] monotonic, align 4
// CHECK-NEXT:    [[TMP2744:%.*]] = icmp ult i32 [[TMP2743]], [[TMP2742]]
// CHECK-NEXT:    [[TMP2745:%.*]] = select i1 [[TMP2744]], i32 [[TMP2742]], i32 [[TMP2743]]
// CHECK-NEXT:    store i32 [[TMP2745]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2746:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2747:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2746]] monotonic, align 4
// CHECK-NEXT:    [[TMP2748:%.*]] = icmp ugt i32 [[TMP2747]], [[TMP2746]]
// CHECK-NEXT:    [[TMP2749:%.*]] = select i1 [[TMP2748]], i32 [[TMP2746]], i32 [[TMP2747]]
// CHECK-NEXT:    store i32 [[TMP2749]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2750:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2751:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2752:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2750]], i32 [[TMP2751]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2753:%.*]] = extractvalue { i32, i1 } [[TMP2752]], 0
// CHECK-NEXT:    [[TMP2754:%.*]] = extractvalue { i32, i1 } [[TMP2752]], 1
// CHECK-NEXT:    [[TMP2755:%.*]] = select i1 [[TMP2754]], i32 [[TMP2750]], i32 [[TMP2753]]
// CHECK-NEXT:    store i32 [[TMP2755]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2756:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2757:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2758:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2756]], i32 [[TMP2757]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2759:%.*]] = extractvalue { i32, i1 } [[TMP2758]], 0
// CHECK-NEXT:    [[TMP2760:%.*]] = extractvalue { i32, i1 } [[TMP2758]], 1
// CHECK-NEXT:    [[TMP2761:%.*]] = select i1 [[TMP2760]], i32 [[TMP2756]], i32 [[TMP2759]]
// CHECK-NEXT:    store i32 [[TMP2761]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2762:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2763:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2764:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2762]], i32 [[TMP2763]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2765:%.*]] = extractvalue { i32, i1 } [[TMP2764]], 0
// CHECK-NEXT:    [[TMP2766:%.*]] = extractvalue { i32, i1 } [[TMP2764]], 1
// CHECK-NEXT:    br i1 [[TMP2766]], label [[UIX_ATOMIC_EXIT253:%.*]], label [[UIX_ATOMIC_CONT254:%.*]]
// CHECK:       uix.atomic.cont254:
// CHECK-NEXT:    store i32 [[TMP2765]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT253]]
// CHECK:       uix.atomic.exit253:
// CHECK-NEXT:    [[TMP2767:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2768:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2769:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2767]], i32 [[TMP2768]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2770:%.*]] = extractvalue { i32, i1 } [[TMP2769]], 0
// CHECK-NEXT:    [[TMP2771:%.*]] = extractvalue { i32, i1 } [[TMP2769]], 1
// CHECK-NEXT:    br i1 [[TMP2771]], label [[UIX_ATOMIC_EXIT255:%.*]], label [[UIX_ATOMIC_CONT256:%.*]]
// CHECK:       uix.atomic.cont256:
// CHECK-NEXT:    store i32 [[TMP2770]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT255]]
// CHECK:       uix.atomic.exit255:
// CHECK-NEXT:    [[TMP2772:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2773:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2774:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2772]], i32 [[TMP2773]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2775:%.*]] = extractvalue { i32, i1 } [[TMP2774]], 1
// CHECK-NEXT:    [[TMP2776:%.*]] = zext i1 [[TMP2775]] to i32
// CHECK-NEXT:    store i32 [[TMP2776]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2777:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2778:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2779:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2777]], i32 [[TMP2778]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2780:%.*]] = extractvalue { i32, i1 } [[TMP2779]], 1
// CHECK-NEXT:    [[TMP2781:%.*]] = zext i1 [[TMP2780]] to i32
// CHECK-NEXT:    store i32 [[TMP2781]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2782:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2783:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2784:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2782]], i32 [[TMP2783]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2785:%.*]] = extractvalue { i32, i1 } [[TMP2784]], 0
// CHECK-NEXT:    [[TMP2786:%.*]] = extractvalue { i32, i1 } [[TMP2784]], 1
// CHECK-NEXT:    br i1 [[TMP2786]], label [[UIX_ATOMIC_EXIT257:%.*]], label [[UIX_ATOMIC_CONT258:%.*]]
// CHECK:       uix.atomic.cont258:
// CHECK-NEXT:    store i32 [[TMP2785]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT257]]
// CHECK:       uix.atomic.exit257:
// CHECK-NEXT:    [[TMP2787:%.*]] = extractvalue { i32, i1 } [[TMP2784]], 1
// CHECK-NEXT:    [[TMP2788:%.*]] = zext i1 [[TMP2787]] to i32
// CHECK-NEXT:    store i32 [[TMP2788]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2789:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2790:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2791:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2789]], i32 [[TMP2790]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP2792:%.*]] = extractvalue { i32, i1 } [[TMP2791]], 0
// CHECK-NEXT:    [[TMP2793:%.*]] = extractvalue { i32, i1 } [[TMP2791]], 1
// CHECK-NEXT:    br i1 [[TMP2793]], label [[UIX_ATOMIC_EXIT259:%.*]], label [[UIX_ATOMIC_CONT260:%.*]]
// CHECK:       uix.atomic.cont260:
// CHECK-NEXT:    store i32 [[TMP2792]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT259]]
// CHECK:       uix.atomic.exit259:
// CHECK-NEXT:    [[TMP2794:%.*]] = extractvalue { i32, i1 } [[TMP2791]], 1
// CHECK-NEXT:    [[TMP2795:%.*]] = zext i1 [[TMP2794]] to i32
// CHECK-NEXT:    store i32 [[TMP2795]], ptr [[UIR]], align 4
// CHECK-NEXT:    [[TMP2796:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2797:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2796]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2797]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2798:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2799:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2798]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2799]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2800:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2801:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2800]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2801]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2802:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2803:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2802]] release, align 4
// CHECK-NEXT:    store i32 [[TMP2803]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2804:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2805:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2806:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2804]], i32 [[TMP2805]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2807:%.*]] = extractvalue { i32, i1 } [[TMP2806]], 0
// CHECK-NEXT:    store i32 [[TMP2807]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2808:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2809:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2810:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2808]], i32 [[TMP2809]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2811:%.*]] = extractvalue { i32, i1 } [[TMP2810]], 0
// CHECK-NEXT:    store i32 [[TMP2811]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2812:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2813:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2812]] release, align 4
// CHECK-NEXT:    [[TMP2814:%.*]] = icmp ugt i32 [[TMP2813]], [[TMP2812]]
// CHECK-NEXT:    [[TMP2815:%.*]] = select i1 [[TMP2814]], i32 [[TMP2812]], i32 [[TMP2813]]
// CHECK-NEXT:    store i32 [[TMP2815]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2816:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2817:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2816]] release, align 4
// CHECK-NEXT:    [[TMP2818:%.*]] = icmp ult i32 [[TMP2817]], [[TMP2816]]
// CHECK-NEXT:    [[TMP2819:%.*]] = select i1 [[TMP2818]], i32 [[TMP2816]], i32 [[TMP2817]]
// CHECK-NEXT:    store i32 [[TMP2819]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2820:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2821:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2820]] release, align 4
// CHECK-NEXT:    [[TMP2822:%.*]] = icmp ult i32 [[TMP2821]], [[TMP2820]]
// CHECK-NEXT:    [[TMP2823:%.*]] = select i1 [[TMP2822]], i32 [[TMP2820]], i32 [[TMP2821]]
// CHECK-NEXT:    store i32 [[TMP2823]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2824:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2825:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2824]] release, align 4
// CHECK-NEXT:    [[TMP2826:%.*]] = icmp ugt i32 [[TMP2825]], [[TMP2824]]
// CHECK-NEXT:    [[TMP2827:%.*]] = select i1 [[TMP2826]], i32 [[TMP2824]], i32 [[TMP2825]]
// CHECK-NEXT:    store i32 [[TMP2827]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2828:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2829:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2830:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2828]], i32 [[TMP2829]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2831:%.*]] = extractvalue { i32, i1 } [[TMP2830]], 0
// CHECK-NEXT:    [[TMP2832:%.*]] = extractvalue { i32, i1 } [[TMP2830]], 1
// CHECK-NEXT:    [[TMP2833:%.*]] = select i1 [[TMP2832]], i32 [[TMP2828]], i32 [[TMP2831]]
// CHECK-NEXT:    store i32 [[TMP2833]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2834:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2835:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2836:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2834]], i32 [[TMP2835]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2837:%.*]] = extractvalue { i32, i1 } [[TMP2836]], 0
// CHECK-NEXT:    [[TMP2838:%.*]] = extractvalue { i32, i1 } [[TMP2836]], 1
// CHECK-NEXT:    [[TMP2839:%.*]] = select i1 [[TMP2838]], i32 [[TMP2834]], i32 [[TMP2837]]
// CHECK-NEXT:    store i32 [[TMP2839]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2840:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2841:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2842:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2840]], i32 [[TMP2841]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2843:%.*]] = extractvalue { i32, i1 } [[TMP2842]], 0
// CHECK-NEXT:    [[TMP2844:%.*]] = extractvalue { i32, i1 } [[TMP2842]], 1
// CHECK-NEXT:    br i1 [[TMP2844]], label [[UIX_ATOMIC_EXIT261:%.*]], label [[UIX_ATOMIC_CONT262:%.*]]
// CHECK:       uix.atomic.cont262:
// CHECK-NEXT:    store i32 [[TMP2843]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT261]]
// CHECK:       uix.atomic.exit261:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2845:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2846:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2847:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2845]], i32 [[TMP2846]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2848:%.*]] = extractvalue { i32, i1 } [[TMP2847]], 0
// CHECK-NEXT:    [[TMP2849:%.*]] = extractvalue { i32, i1 } [[TMP2847]], 1
// CHECK-NEXT:    br i1 [[TMP2849]], label [[UIX_ATOMIC_EXIT263:%.*]], label [[UIX_ATOMIC_CONT264:%.*]]
// CHECK:       uix.atomic.cont264:
// CHECK-NEXT:    store i32 [[TMP2848]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT263]]
// CHECK:       uix.atomic.exit263:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2850:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2851:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2852:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2850]], i32 [[TMP2851]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2853:%.*]] = extractvalue { i32, i1 } [[TMP2852]], 1
// CHECK-NEXT:    [[TMP2854:%.*]] = zext i1 [[TMP2853]] to i32
// CHECK-NEXT:    store i32 [[TMP2854]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2855:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2856:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2857:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2855]], i32 [[TMP2856]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2858:%.*]] = extractvalue { i32, i1 } [[TMP2857]], 1
// CHECK-NEXT:    [[TMP2859:%.*]] = zext i1 [[TMP2858]] to i32
// CHECK-NEXT:    store i32 [[TMP2859]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2860:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2861:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2862:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2860]], i32 [[TMP2861]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2863:%.*]] = extractvalue { i32, i1 } [[TMP2862]], 0
// CHECK-NEXT:    [[TMP2864:%.*]] = extractvalue { i32, i1 } [[TMP2862]], 1
// CHECK-NEXT:    br i1 [[TMP2864]], label [[UIX_ATOMIC_EXIT265:%.*]], label [[UIX_ATOMIC_CONT266:%.*]]
// CHECK:       uix.atomic.cont266:
// CHECK-NEXT:    store i32 [[TMP2863]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT265]]
// CHECK:       uix.atomic.exit265:
// CHECK-NEXT:    [[TMP2865:%.*]] = extractvalue { i32, i1 } [[TMP2862]], 1
// CHECK-NEXT:    [[TMP2866:%.*]] = zext i1 [[TMP2865]] to i32
// CHECK-NEXT:    store i32 [[TMP2866]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2867:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2868:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2869:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2867]], i32 [[TMP2868]] release monotonic, align 4
// CHECK-NEXT:    [[TMP2870:%.*]] = extractvalue { i32, i1 } [[TMP2869]], 0
// CHECK-NEXT:    [[TMP2871:%.*]] = extractvalue { i32, i1 } [[TMP2869]], 1
// CHECK-NEXT:    br i1 [[TMP2871]], label [[UIX_ATOMIC_EXIT267:%.*]], label [[UIX_ATOMIC_CONT268:%.*]]
// CHECK:       uix.atomic.cont268:
// CHECK-NEXT:    store i32 [[TMP2870]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT267]]
// CHECK:       uix.atomic.exit267:
// CHECK-NEXT:    [[TMP2872:%.*]] = extractvalue { i32, i1 } [[TMP2869]], 1
// CHECK-NEXT:    [[TMP2873:%.*]] = zext i1 [[TMP2872]] to i32
// CHECK-NEXT:    store i32 [[TMP2873]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2874:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2875:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2874]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2875]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2876:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2877:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2876]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2877]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2878:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2879:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2878]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2879]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2880:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2881:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2880]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP2881]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2882:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2883:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2884:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2882]], i32 [[TMP2883]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2885:%.*]] = extractvalue { i32, i1 } [[TMP2884]], 0
// CHECK-NEXT:    store i32 [[TMP2885]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2886:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2887:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2888:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2886]], i32 [[TMP2887]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2889:%.*]] = extractvalue { i32, i1 } [[TMP2888]], 0
// CHECK-NEXT:    store i32 [[TMP2889]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2890:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2891:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2890]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2892:%.*]] = icmp ugt i32 [[TMP2891]], [[TMP2890]]
// CHECK-NEXT:    [[TMP2893:%.*]] = select i1 [[TMP2892]], i32 [[TMP2890]], i32 [[TMP2891]]
// CHECK-NEXT:    store i32 [[TMP2893]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2894:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2895:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2894]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2896:%.*]] = icmp ult i32 [[TMP2895]], [[TMP2894]]
// CHECK-NEXT:    [[TMP2897:%.*]] = select i1 [[TMP2896]], i32 [[TMP2894]], i32 [[TMP2895]]
// CHECK-NEXT:    store i32 [[TMP2897]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2898:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2899:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP2898]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2900:%.*]] = icmp ult i32 [[TMP2899]], [[TMP2898]]
// CHECK-NEXT:    [[TMP2901:%.*]] = select i1 [[TMP2900]], i32 [[TMP2898]], i32 [[TMP2899]]
// CHECK-NEXT:    store i32 [[TMP2901]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2902:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2903:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2902]] seq_cst, align 4
// CHECK-NEXT:    [[TMP2904:%.*]] = icmp ugt i32 [[TMP2903]], [[TMP2902]]
// CHECK-NEXT:    [[TMP2905:%.*]] = select i1 [[TMP2904]], i32 [[TMP2902]], i32 [[TMP2903]]
// CHECK-NEXT:    store i32 [[TMP2905]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2906:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2907:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2908:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2906]], i32 [[TMP2907]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2909:%.*]] = extractvalue { i32, i1 } [[TMP2908]], 0
// CHECK-NEXT:    [[TMP2910:%.*]] = extractvalue { i32, i1 } [[TMP2908]], 1
// CHECK-NEXT:    [[TMP2911:%.*]] = select i1 [[TMP2910]], i32 [[TMP2906]], i32 [[TMP2909]]
// CHECK-NEXT:    store i32 [[TMP2911]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2912:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2913:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2914:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2912]], i32 [[TMP2913]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2915:%.*]] = extractvalue { i32, i1 } [[TMP2914]], 0
// CHECK-NEXT:    [[TMP2916:%.*]] = extractvalue { i32, i1 } [[TMP2914]], 1
// CHECK-NEXT:    [[TMP2917:%.*]] = select i1 [[TMP2916]], i32 [[TMP2912]], i32 [[TMP2915]]
// CHECK-NEXT:    store i32 [[TMP2917]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2918:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2919:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2920:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2918]], i32 [[TMP2919]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2921:%.*]] = extractvalue { i32, i1 } [[TMP2920]], 0
// CHECK-NEXT:    [[TMP2922:%.*]] = extractvalue { i32, i1 } [[TMP2920]], 1
// CHECK-NEXT:    br i1 [[TMP2922]], label [[UIX_ATOMIC_EXIT269:%.*]], label [[UIX_ATOMIC_CONT270:%.*]]
// CHECK:       uix.atomic.cont270:
// CHECK-NEXT:    store i32 [[TMP2921]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT269]]
// CHECK:       uix.atomic.exit269:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2923:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2924:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2925:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2923]], i32 [[TMP2924]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2926:%.*]] = extractvalue { i32, i1 } [[TMP2925]], 0
// CHECK-NEXT:    [[TMP2927:%.*]] = extractvalue { i32, i1 } [[TMP2925]], 1
// CHECK-NEXT:    br i1 [[TMP2927]], label [[UIX_ATOMIC_EXIT271:%.*]], label [[UIX_ATOMIC_CONT272:%.*]]
// CHECK:       uix.atomic.cont272:
// CHECK-NEXT:    store i32 [[TMP2926]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT271]]
// CHECK:       uix.atomic.exit271:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2928:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2929:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2930:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2928]], i32 [[TMP2929]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2931:%.*]] = extractvalue { i32, i1 } [[TMP2930]], 1
// CHECK-NEXT:    [[TMP2932:%.*]] = zext i1 [[TMP2931]] to i32
// CHECK-NEXT:    store i32 [[TMP2932]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2933:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2934:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2935:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2933]], i32 [[TMP2934]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2936:%.*]] = extractvalue { i32, i1 } [[TMP2935]], 1
// CHECK-NEXT:    [[TMP2937:%.*]] = zext i1 [[TMP2936]] to i32
// CHECK-NEXT:    store i32 [[TMP2937]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2938:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2939:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2940:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2938]], i32 [[TMP2939]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2941:%.*]] = extractvalue { i32, i1 } [[TMP2940]], 0
// CHECK-NEXT:    [[TMP2942:%.*]] = extractvalue { i32, i1 } [[TMP2940]], 1
// CHECK-NEXT:    br i1 [[TMP2942]], label [[UIX_ATOMIC_EXIT273:%.*]], label [[UIX_ATOMIC_CONT274:%.*]]
// CHECK:       uix.atomic.cont274:
// CHECK-NEXT:    store i32 [[TMP2941]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT273]]
// CHECK:       uix.atomic.exit273:
// CHECK-NEXT:    [[TMP2943:%.*]] = extractvalue { i32, i1 } [[TMP2940]], 1
// CHECK-NEXT:    [[TMP2944:%.*]] = zext i1 [[TMP2943]] to i32
// CHECK-NEXT:    store i32 [[TMP2944]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2945:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP2946:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP2947:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP2945]], i32 [[TMP2946]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP2948:%.*]] = extractvalue { i32, i1 } [[TMP2947]], 0
// CHECK-NEXT:    [[TMP2949:%.*]] = extractvalue { i32, i1 } [[TMP2947]], 1
// CHECK-NEXT:    br i1 [[TMP2949]], label [[UIX_ATOMIC_EXIT275:%.*]], label [[UIX_ATOMIC_CONT276:%.*]]
// CHECK:       uix.atomic.cont276:
// CHECK-NEXT:    store i32 [[TMP2948]], ptr [[UIV]], align 4
// CHECK-NEXT:    br label [[UIX_ATOMIC_EXIT275]]
// CHECK:       uix.atomic.exit275:
// CHECK-NEXT:    [[TMP2950:%.*]] = extractvalue { i32, i1 } [[TMP2947]], 1
// CHECK-NEXT:    [[TMP2951:%.*]] = zext i1 [[TMP2950]] to i32
// CHECK-NEXT:    store i32 [[TMP2951]], ptr [[UIR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP2952:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2953:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2952]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP2953]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2954:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2955:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2954]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP2955]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2956:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2957:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2956]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP2957]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2958:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2959:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2958]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP2959]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2960:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2961:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2962:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2960]], i64 [[TMP2961]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2963:%.*]] = extractvalue { i64, i1 } [[TMP2962]], 0
// CHECK-NEXT:    store i64 [[TMP2963]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2964:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2965:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2966:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2964]], i64 [[TMP2965]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2967:%.*]] = extractvalue { i64, i1 } [[TMP2966]], 0
// CHECK-NEXT:    store i64 [[TMP2967]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2968:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2969:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2968]] monotonic, align 8
// CHECK-NEXT:    [[TMP2970:%.*]] = icmp sgt i64 [[TMP2969]], [[TMP2968]]
// CHECK-NEXT:    [[TMP2971:%.*]] = select i1 [[TMP2970]], i64 [[TMP2968]], i64 [[TMP2969]]
// CHECK-NEXT:    store i64 [[TMP2971]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2972:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2973:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2972]] monotonic, align 8
// CHECK-NEXT:    [[TMP2974:%.*]] = icmp slt i64 [[TMP2973]], [[TMP2972]]
// CHECK-NEXT:    [[TMP2975:%.*]] = select i1 [[TMP2974]], i64 [[TMP2972]], i64 [[TMP2973]]
// CHECK-NEXT:    store i64 [[TMP2975]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2976:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2977:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP2976]] monotonic, align 8
// CHECK-NEXT:    [[TMP2978:%.*]] = icmp slt i64 [[TMP2977]], [[TMP2976]]
// CHECK-NEXT:    [[TMP2979:%.*]] = select i1 [[TMP2978]], i64 [[TMP2976]], i64 [[TMP2977]]
// CHECK-NEXT:    store i64 [[TMP2979]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2980:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2981:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2980]] monotonic, align 8
// CHECK-NEXT:    [[TMP2982:%.*]] = icmp sgt i64 [[TMP2981]], [[TMP2980]]
// CHECK-NEXT:    [[TMP2983:%.*]] = select i1 [[TMP2982]], i64 [[TMP2980]], i64 [[TMP2981]]
// CHECK-NEXT:    store i64 [[TMP2983]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2984:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2985:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2986:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2984]], i64 [[TMP2985]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2987:%.*]] = extractvalue { i64, i1 } [[TMP2986]], 0
// CHECK-NEXT:    [[TMP2988:%.*]] = extractvalue { i64, i1 } [[TMP2986]], 1
// CHECK-NEXT:    [[TMP2989:%.*]] = select i1 [[TMP2988]], i64 [[TMP2984]], i64 [[TMP2987]]
// CHECK-NEXT:    store i64 [[TMP2989]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2990:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2991:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2992:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2990]], i64 [[TMP2991]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2993:%.*]] = extractvalue { i64, i1 } [[TMP2992]], 0
// CHECK-NEXT:    [[TMP2994:%.*]] = extractvalue { i64, i1 } [[TMP2992]], 1
// CHECK-NEXT:    [[TMP2995:%.*]] = select i1 [[TMP2994]], i64 [[TMP2990]], i64 [[TMP2993]]
// CHECK-NEXT:    store i64 [[TMP2995]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2996:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP2997:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP2998:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP2996]], i64 [[TMP2997]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP2999:%.*]] = extractvalue { i64, i1 } [[TMP2998]], 0
// CHECK-NEXT:    [[TMP3000:%.*]] = extractvalue { i64, i1 } [[TMP2998]], 1
// CHECK-NEXT:    br i1 [[TMP3000]], label [[LX_ATOMIC_EXIT:%.*]], label [[LX_ATOMIC_CONT:%.*]]
// CHECK:       lx.atomic.cont:
// CHECK-NEXT:    store i64 [[TMP2999]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT]]
// CHECK:       lx.atomic.exit:
// CHECK-NEXT:    [[TMP3001:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3002:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3003:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3001]], i64 [[TMP3002]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3004:%.*]] = extractvalue { i64, i1 } [[TMP3003]], 0
// CHECK-NEXT:    [[TMP3005:%.*]] = extractvalue { i64, i1 } [[TMP3003]], 1
// CHECK-NEXT:    br i1 [[TMP3005]], label [[LX_ATOMIC_EXIT277:%.*]], label [[LX_ATOMIC_CONT278:%.*]]
// CHECK:       lx.atomic.cont278:
// CHECK-NEXT:    store i64 [[TMP3004]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT277]]
// CHECK:       lx.atomic.exit277:
// CHECK-NEXT:    [[TMP3006:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3007:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3008:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3006]], i64 [[TMP3007]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3009:%.*]] = extractvalue { i64, i1 } [[TMP3008]], 1
// CHECK-NEXT:    [[TMP3010:%.*]] = sext i1 [[TMP3009]] to i64
// CHECK-NEXT:    store i64 [[TMP3010]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3011:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3012:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3013:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3011]], i64 [[TMP3012]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3014:%.*]] = extractvalue { i64, i1 } [[TMP3013]], 1
// CHECK-NEXT:    [[TMP3015:%.*]] = sext i1 [[TMP3014]] to i64
// CHECK-NEXT:    store i64 [[TMP3015]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3016:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3017:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3018:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3016]], i64 [[TMP3017]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3019:%.*]] = extractvalue { i64, i1 } [[TMP3018]], 0
// CHECK-NEXT:    [[TMP3020:%.*]] = extractvalue { i64, i1 } [[TMP3018]], 1
// CHECK-NEXT:    br i1 [[TMP3020]], label [[LX_ATOMIC_EXIT279:%.*]], label [[LX_ATOMIC_CONT280:%.*]]
// CHECK:       lx.atomic.cont280:
// CHECK-NEXT:    store i64 [[TMP3019]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT279]]
// CHECK:       lx.atomic.exit279:
// CHECK-NEXT:    [[TMP3021:%.*]] = extractvalue { i64, i1 } [[TMP3018]], 1
// CHECK-NEXT:    [[TMP3022:%.*]] = sext i1 [[TMP3021]] to i64
// CHECK-NEXT:    store i64 [[TMP3022]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3023:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3024:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3025:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3023]], i64 [[TMP3024]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3026:%.*]] = extractvalue { i64, i1 } [[TMP3025]], 0
// CHECK-NEXT:    [[TMP3027:%.*]] = extractvalue { i64, i1 } [[TMP3025]], 1
// CHECK-NEXT:    br i1 [[TMP3027]], label [[LX_ATOMIC_EXIT281:%.*]], label [[LX_ATOMIC_CONT282:%.*]]
// CHECK:       lx.atomic.cont282:
// CHECK-NEXT:    store i64 [[TMP3026]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT281]]
// CHECK:       lx.atomic.exit281:
// CHECK-NEXT:    [[TMP3028:%.*]] = extractvalue { i64, i1 } [[TMP3025]], 1
// CHECK-NEXT:    [[TMP3029:%.*]] = sext i1 [[TMP3028]] to i64
// CHECK-NEXT:    store i64 [[TMP3029]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3030:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3031:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3030]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3031]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3032:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3033:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3032]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3033]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3034:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3035:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3034]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3035]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3036:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3037:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3036]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3037]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3038:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3039:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3040:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3038]], i64 [[TMP3039]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3041:%.*]] = extractvalue { i64, i1 } [[TMP3040]], 0
// CHECK-NEXT:    store i64 [[TMP3041]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3042:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3043:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3044:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3042]], i64 [[TMP3043]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3045:%.*]] = extractvalue { i64, i1 } [[TMP3044]], 0
// CHECK-NEXT:    store i64 [[TMP3045]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3046:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3047:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3046]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3048:%.*]] = icmp sgt i64 [[TMP3047]], [[TMP3046]]
// CHECK-NEXT:    [[TMP3049:%.*]] = select i1 [[TMP3048]], i64 [[TMP3046]], i64 [[TMP3047]]
// CHECK-NEXT:    store i64 [[TMP3049]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3050:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3051:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3050]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3052:%.*]] = icmp slt i64 [[TMP3051]], [[TMP3050]]
// CHECK-NEXT:    [[TMP3053:%.*]] = select i1 [[TMP3052]], i64 [[TMP3050]], i64 [[TMP3051]]
// CHECK-NEXT:    store i64 [[TMP3053]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3054:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3055:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3054]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3056:%.*]] = icmp slt i64 [[TMP3055]], [[TMP3054]]
// CHECK-NEXT:    [[TMP3057:%.*]] = select i1 [[TMP3056]], i64 [[TMP3054]], i64 [[TMP3055]]
// CHECK-NEXT:    store i64 [[TMP3057]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3058:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3059:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3058]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3060:%.*]] = icmp sgt i64 [[TMP3059]], [[TMP3058]]
// CHECK-NEXT:    [[TMP3061:%.*]] = select i1 [[TMP3060]], i64 [[TMP3058]], i64 [[TMP3059]]
// CHECK-NEXT:    store i64 [[TMP3061]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3062:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3063:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3064:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3062]], i64 [[TMP3063]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3065:%.*]] = extractvalue { i64, i1 } [[TMP3064]], 0
// CHECK-NEXT:    [[TMP3066:%.*]] = extractvalue { i64, i1 } [[TMP3064]], 1
// CHECK-NEXT:    [[TMP3067:%.*]] = select i1 [[TMP3066]], i64 [[TMP3062]], i64 [[TMP3065]]
// CHECK-NEXT:    store i64 [[TMP3067]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3068:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3069:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3070:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3068]], i64 [[TMP3069]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3071:%.*]] = extractvalue { i64, i1 } [[TMP3070]], 0
// CHECK-NEXT:    [[TMP3072:%.*]] = extractvalue { i64, i1 } [[TMP3070]], 1
// CHECK-NEXT:    [[TMP3073:%.*]] = select i1 [[TMP3072]], i64 [[TMP3068]], i64 [[TMP3071]]
// CHECK-NEXT:    store i64 [[TMP3073]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3074:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3075:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3076:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3074]], i64 [[TMP3075]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3077:%.*]] = extractvalue { i64, i1 } [[TMP3076]], 0
// CHECK-NEXT:    [[TMP3078:%.*]] = extractvalue { i64, i1 } [[TMP3076]], 1
// CHECK-NEXT:    br i1 [[TMP3078]], label [[LX_ATOMIC_EXIT283:%.*]], label [[LX_ATOMIC_CONT284:%.*]]
// CHECK:       lx.atomic.cont284:
// CHECK-NEXT:    store i64 [[TMP3077]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT283]]
// CHECK:       lx.atomic.exit283:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3079:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3080:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3081:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3079]], i64 [[TMP3080]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3082:%.*]] = extractvalue { i64, i1 } [[TMP3081]], 0
// CHECK-NEXT:    [[TMP3083:%.*]] = extractvalue { i64, i1 } [[TMP3081]], 1
// CHECK-NEXT:    br i1 [[TMP3083]], label [[LX_ATOMIC_EXIT285:%.*]], label [[LX_ATOMIC_CONT286:%.*]]
// CHECK:       lx.atomic.cont286:
// CHECK-NEXT:    store i64 [[TMP3082]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT285]]
// CHECK:       lx.atomic.exit285:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3084:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3085:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3086:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3084]], i64 [[TMP3085]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3087:%.*]] = extractvalue { i64, i1 } [[TMP3086]], 1
// CHECK-NEXT:    [[TMP3088:%.*]] = sext i1 [[TMP3087]] to i64
// CHECK-NEXT:    store i64 [[TMP3088]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3089:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3090:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3091:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3089]], i64 [[TMP3090]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3092:%.*]] = extractvalue { i64, i1 } [[TMP3091]], 1
// CHECK-NEXT:    [[TMP3093:%.*]] = sext i1 [[TMP3092]] to i64
// CHECK-NEXT:    store i64 [[TMP3093]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3094:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3095:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3096:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3094]], i64 [[TMP3095]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3097:%.*]] = extractvalue { i64, i1 } [[TMP3096]], 0
// CHECK-NEXT:    [[TMP3098:%.*]] = extractvalue { i64, i1 } [[TMP3096]], 1
// CHECK-NEXT:    br i1 [[TMP3098]], label [[LX_ATOMIC_EXIT287:%.*]], label [[LX_ATOMIC_CONT288:%.*]]
// CHECK:       lx.atomic.cont288:
// CHECK-NEXT:    store i64 [[TMP3097]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT287]]
// CHECK:       lx.atomic.exit287:
// CHECK-NEXT:    [[TMP3099:%.*]] = extractvalue { i64, i1 } [[TMP3096]], 1
// CHECK-NEXT:    [[TMP3100:%.*]] = sext i1 [[TMP3099]] to i64
// CHECK-NEXT:    store i64 [[TMP3100]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3101:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3102:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3103:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3101]], i64 [[TMP3102]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3104:%.*]] = extractvalue { i64, i1 } [[TMP3103]], 0
// CHECK-NEXT:    [[TMP3105:%.*]] = extractvalue { i64, i1 } [[TMP3103]], 1
// CHECK-NEXT:    br i1 [[TMP3105]], label [[LX_ATOMIC_EXIT289:%.*]], label [[LX_ATOMIC_CONT290:%.*]]
// CHECK:       lx.atomic.cont290:
// CHECK-NEXT:    store i64 [[TMP3104]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT289]]
// CHECK:       lx.atomic.exit289:
// CHECK-NEXT:    [[TMP3106:%.*]] = extractvalue { i64, i1 } [[TMP3103]], 1
// CHECK-NEXT:    [[TMP3107:%.*]] = sext i1 [[TMP3106]] to i64
// CHECK-NEXT:    store i64 [[TMP3107]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3108:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3109:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3108]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3109]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3110:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3111:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3110]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3111]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3112:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3113:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3112]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3113]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3114:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3115:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3114]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3115]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3116:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3117:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3118:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3116]], i64 [[TMP3117]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3119:%.*]] = extractvalue { i64, i1 } [[TMP3118]], 0
// CHECK-NEXT:    store i64 [[TMP3119]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3120:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3121:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3122:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3120]], i64 [[TMP3121]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3123:%.*]] = extractvalue { i64, i1 } [[TMP3122]], 0
// CHECK-NEXT:    store i64 [[TMP3123]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3124:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3125:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3124]] acquire, align 8
// CHECK-NEXT:    [[TMP3126:%.*]] = icmp sgt i64 [[TMP3125]], [[TMP3124]]
// CHECK-NEXT:    [[TMP3127:%.*]] = select i1 [[TMP3126]], i64 [[TMP3124]], i64 [[TMP3125]]
// CHECK-NEXT:    store i64 [[TMP3127]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3128:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3129:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3128]] acquire, align 8
// CHECK-NEXT:    [[TMP3130:%.*]] = icmp slt i64 [[TMP3129]], [[TMP3128]]
// CHECK-NEXT:    [[TMP3131:%.*]] = select i1 [[TMP3130]], i64 [[TMP3128]], i64 [[TMP3129]]
// CHECK-NEXT:    store i64 [[TMP3131]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3132:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3133:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3132]] acquire, align 8
// CHECK-NEXT:    [[TMP3134:%.*]] = icmp slt i64 [[TMP3133]], [[TMP3132]]
// CHECK-NEXT:    [[TMP3135:%.*]] = select i1 [[TMP3134]], i64 [[TMP3132]], i64 [[TMP3133]]
// CHECK-NEXT:    store i64 [[TMP3135]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3136:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3137:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3136]] acquire, align 8
// CHECK-NEXT:    [[TMP3138:%.*]] = icmp sgt i64 [[TMP3137]], [[TMP3136]]
// CHECK-NEXT:    [[TMP3139:%.*]] = select i1 [[TMP3138]], i64 [[TMP3136]], i64 [[TMP3137]]
// CHECK-NEXT:    store i64 [[TMP3139]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3140:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3141:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3142:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3140]], i64 [[TMP3141]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3143:%.*]] = extractvalue { i64, i1 } [[TMP3142]], 0
// CHECK-NEXT:    [[TMP3144:%.*]] = extractvalue { i64, i1 } [[TMP3142]], 1
// CHECK-NEXT:    [[TMP3145:%.*]] = select i1 [[TMP3144]], i64 [[TMP3140]], i64 [[TMP3143]]
// CHECK-NEXT:    store i64 [[TMP3145]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3146:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3147:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3148:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3146]], i64 [[TMP3147]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3149:%.*]] = extractvalue { i64, i1 } [[TMP3148]], 0
// CHECK-NEXT:    [[TMP3150:%.*]] = extractvalue { i64, i1 } [[TMP3148]], 1
// CHECK-NEXT:    [[TMP3151:%.*]] = select i1 [[TMP3150]], i64 [[TMP3146]], i64 [[TMP3149]]
// CHECK-NEXT:    store i64 [[TMP3151]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3152:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3153:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3154:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3152]], i64 [[TMP3153]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3155:%.*]] = extractvalue { i64, i1 } [[TMP3154]], 0
// CHECK-NEXT:    [[TMP3156:%.*]] = extractvalue { i64, i1 } [[TMP3154]], 1
// CHECK-NEXT:    br i1 [[TMP3156]], label [[LX_ATOMIC_EXIT291:%.*]], label [[LX_ATOMIC_CONT292:%.*]]
// CHECK:       lx.atomic.cont292:
// CHECK-NEXT:    store i64 [[TMP3155]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT291]]
// CHECK:       lx.atomic.exit291:
// CHECK-NEXT:    [[TMP3157:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3158:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3159:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3157]], i64 [[TMP3158]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3160:%.*]] = extractvalue { i64, i1 } [[TMP3159]], 0
// CHECK-NEXT:    [[TMP3161:%.*]] = extractvalue { i64, i1 } [[TMP3159]], 1
// CHECK-NEXT:    br i1 [[TMP3161]], label [[LX_ATOMIC_EXIT293:%.*]], label [[LX_ATOMIC_CONT294:%.*]]
// CHECK:       lx.atomic.cont294:
// CHECK-NEXT:    store i64 [[TMP3160]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT293]]
// CHECK:       lx.atomic.exit293:
// CHECK-NEXT:    [[TMP3162:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3163:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3164:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3162]], i64 [[TMP3163]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3165:%.*]] = extractvalue { i64, i1 } [[TMP3164]], 1
// CHECK-NEXT:    [[TMP3166:%.*]] = sext i1 [[TMP3165]] to i64
// CHECK-NEXT:    store i64 [[TMP3166]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3167:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3168:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3169:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3167]], i64 [[TMP3168]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3170:%.*]] = extractvalue { i64, i1 } [[TMP3169]], 1
// CHECK-NEXT:    [[TMP3171:%.*]] = sext i1 [[TMP3170]] to i64
// CHECK-NEXT:    store i64 [[TMP3171]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3172:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3173:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3174:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3172]], i64 [[TMP3173]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3175:%.*]] = extractvalue { i64, i1 } [[TMP3174]], 0
// CHECK-NEXT:    [[TMP3176:%.*]] = extractvalue { i64, i1 } [[TMP3174]], 1
// CHECK-NEXT:    br i1 [[TMP3176]], label [[LX_ATOMIC_EXIT295:%.*]], label [[LX_ATOMIC_CONT296:%.*]]
// CHECK:       lx.atomic.cont296:
// CHECK-NEXT:    store i64 [[TMP3175]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT295]]
// CHECK:       lx.atomic.exit295:
// CHECK-NEXT:    [[TMP3177:%.*]] = extractvalue { i64, i1 } [[TMP3174]], 1
// CHECK-NEXT:    [[TMP3178:%.*]] = sext i1 [[TMP3177]] to i64
// CHECK-NEXT:    store i64 [[TMP3178]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3179:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3180:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3181:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3179]], i64 [[TMP3180]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3182:%.*]] = extractvalue { i64, i1 } [[TMP3181]], 0
// CHECK-NEXT:    [[TMP3183:%.*]] = extractvalue { i64, i1 } [[TMP3181]], 1
// CHECK-NEXT:    br i1 [[TMP3183]], label [[LX_ATOMIC_EXIT297:%.*]], label [[LX_ATOMIC_CONT298:%.*]]
// CHECK:       lx.atomic.cont298:
// CHECK-NEXT:    store i64 [[TMP3182]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT297]]
// CHECK:       lx.atomic.exit297:
// CHECK-NEXT:    [[TMP3184:%.*]] = extractvalue { i64, i1 } [[TMP3181]], 1
// CHECK-NEXT:    [[TMP3185:%.*]] = sext i1 [[TMP3184]] to i64
// CHECK-NEXT:    store i64 [[TMP3185]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3186:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3187:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3186]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3187]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3188:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3189:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3188]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3189]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3190:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3191:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3190]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3191]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3192:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3193:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3192]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3193]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3194:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3195:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3196:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3194]], i64 [[TMP3195]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3197:%.*]] = extractvalue { i64, i1 } [[TMP3196]], 0
// CHECK-NEXT:    store i64 [[TMP3197]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3198:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3199:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3200:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3198]], i64 [[TMP3199]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3201:%.*]] = extractvalue { i64, i1 } [[TMP3200]], 0
// CHECK-NEXT:    store i64 [[TMP3201]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3202:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3203:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3202]] monotonic, align 8
// CHECK-NEXT:    [[TMP3204:%.*]] = icmp sgt i64 [[TMP3203]], [[TMP3202]]
// CHECK-NEXT:    [[TMP3205:%.*]] = select i1 [[TMP3204]], i64 [[TMP3202]], i64 [[TMP3203]]
// CHECK-NEXT:    store i64 [[TMP3205]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3206:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3207:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3206]] monotonic, align 8
// CHECK-NEXT:    [[TMP3208:%.*]] = icmp slt i64 [[TMP3207]], [[TMP3206]]
// CHECK-NEXT:    [[TMP3209:%.*]] = select i1 [[TMP3208]], i64 [[TMP3206]], i64 [[TMP3207]]
// CHECK-NEXT:    store i64 [[TMP3209]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3210:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3211:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3210]] monotonic, align 8
// CHECK-NEXT:    [[TMP3212:%.*]] = icmp slt i64 [[TMP3211]], [[TMP3210]]
// CHECK-NEXT:    [[TMP3213:%.*]] = select i1 [[TMP3212]], i64 [[TMP3210]], i64 [[TMP3211]]
// CHECK-NEXT:    store i64 [[TMP3213]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3214:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3215:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3214]] monotonic, align 8
// CHECK-NEXT:    [[TMP3216:%.*]] = icmp sgt i64 [[TMP3215]], [[TMP3214]]
// CHECK-NEXT:    [[TMP3217:%.*]] = select i1 [[TMP3216]], i64 [[TMP3214]], i64 [[TMP3215]]
// CHECK-NEXT:    store i64 [[TMP3217]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3218:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3219:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3220:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3218]], i64 [[TMP3219]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3221:%.*]] = extractvalue { i64, i1 } [[TMP3220]], 0
// CHECK-NEXT:    [[TMP3222:%.*]] = extractvalue { i64, i1 } [[TMP3220]], 1
// CHECK-NEXT:    [[TMP3223:%.*]] = select i1 [[TMP3222]], i64 [[TMP3218]], i64 [[TMP3221]]
// CHECK-NEXT:    store i64 [[TMP3223]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3224:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3225:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3226:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3224]], i64 [[TMP3225]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3227:%.*]] = extractvalue { i64, i1 } [[TMP3226]], 0
// CHECK-NEXT:    [[TMP3228:%.*]] = extractvalue { i64, i1 } [[TMP3226]], 1
// CHECK-NEXT:    [[TMP3229:%.*]] = select i1 [[TMP3228]], i64 [[TMP3224]], i64 [[TMP3227]]
// CHECK-NEXT:    store i64 [[TMP3229]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP3230:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3231:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3232:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3230]], i64 [[TMP3231]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3233:%.*]] = extractvalue { i64, i1 } [[TMP3232]], 0
// CHECK-NEXT:    [[TMP3234:%.*]] = extractvalue { i64, i1 } [[TMP3232]], 1
// CHECK-NEXT:    br i1 [[TMP3234]], label [[LX_ATOMIC_EXIT299:%.*]], label [[LX_ATOMIC_CONT300:%.*]]
// CHECK:       lx.atomic.cont300:
// CHECK-NEXT:    store i64 [[TMP3233]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT299]]
// CHECK:       lx.atomic.exit299:
// CHECK-NEXT:    [[TMP3235:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3236:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3237:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3235]], i64 [[TMP3236]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3238:%.*]] = extractvalue { i64, i1 } [[TMP3237]], 0
// CHECK-NEXT:    [[TMP3239:%.*]] = extractvalue { i64, i1 } [[TMP3237]], 1
// CHECK-NEXT:    br i1 [[TMP3239]], label [[LX_ATOMIC_EXIT301:%.*]], label [[LX_ATOMIC_CONT302:%.*]]
// CHECK:       lx.atomic.cont302:
// CHECK-NEXT:    store i64 [[TMP3238]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT301]]
// CHECK:       lx.atomic.exit301:
// CHECK-NEXT:    [[TMP3240:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3241:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3242:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3240]], i64 [[TMP3241]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3243:%.*]] = extractvalue { i64, i1 } [[TMP3242]], 1
// CHECK-NEXT:    [[TMP3244:%.*]] = sext i1 [[TMP3243]] to i64
// CHECK-NEXT:    store i64 [[TMP3244]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3245:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3246:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3247:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3245]], i64 [[TMP3246]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3248:%.*]] = extractvalue { i64, i1 } [[TMP3247]], 1
// CHECK-NEXT:    [[TMP3249:%.*]] = sext i1 [[TMP3248]] to i64
// CHECK-NEXT:    store i64 [[TMP3249]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3250:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3251:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3252:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3250]], i64 [[TMP3251]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3253:%.*]] = extractvalue { i64, i1 } [[TMP3252]], 0
// CHECK-NEXT:    [[TMP3254:%.*]] = extractvalue { i64, i1 } [[TMP3252]], 1
// CHECK-NEXT:    br i1 [[TMP3254]], label [[LX_ATOMIC_EXIT303:%.*]], label [[LX_ATOMIC_CONT304:%.*]]
// CHECK:       lx.atomic.cont304:
// CHECK-NEXT:    store i64 [[TMP3253]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT303]]
// CHECK:       lx.atomic.exit303:
// CHECK-NEXT:    [[TMP3255:%.*]] = extractvalue { i64, i1 } [[TMP3252]], 1
// CHECK-NEXT:    [[TMP3256:%.*]] = sext i1 [[TMP3255]] to i64
// CHECK-NEXT:    store i64 [[TMP3256]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3257:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3258:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3259:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3257]], i64 [[TMP3258]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3260:%.*]] = extractvalue { i64, i1 } [[TMP3259]], 0
// CHECK-NEXT:    [[TMP3261:%.*]] = extractvalue { i64, i1 } [[TMP3259]], 1
// CHECK-NEXT:    br i1 [[TMP3261]], label [[LX_ATOMIC_EXIT305:%.*]], label [[LX_ATOMIC_CONT306:%.*]]
// CHECK:       lx.atomic.cont306:
// CHECK-NEXT:    store i64 [[TMP3260]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT305]]
// CHECK:       lx.atomic.exit305:
// CHECK-NEXT:    [[TMP3262:%.*]] = extractvalue { i64, i1 } [[TMP3259]], 1
// CHECK-NEXT:    [[TMP3263:%.*]] = sext i1 [[TMP3262]] to i64
// CHECK-NEXT:    store i64 [[TMP3263]], ptr [[LR]], align 8
// CHECK-NEXT:    [[TMP3264:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3265:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3264]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3265]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3266:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3267:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3266]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3267]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3268:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3269:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3268]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3269]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3270:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3271:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3270]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3271]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3272:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3273:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3274:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3272]], i64 [[TMP3273]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3275:%.*]] = extractvalue { i64, i1 } [[TMP3274]], 0
// CHECK-NEXT:    store i64 [[TMP3275]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3276:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3277:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3278:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3276]], i64 [[TMP3277]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3279:%.*]] = extractvalue { i64, i1 } [[TMP3278]], 0
// CHECK-NEXT:    store i64 [[TMP3279]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3280:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3281:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3280]] release, align 8
// CHECK-NEXT:    [[TMP3282:%.*]] = icmp sgt i64 [[TMP3281]], [[TMP3280]]
// CHECK-NEXT:    [[TMP3283:%.*]] = select i1 [[TMP3282]], i64 [[TMP3280]], i64 [[TMP3281]]
// CHECK-NEXT:    store i64 [[TMP3283]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3284:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3285:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3284]] release, align 8
// CHECK-NEXT:    [[TMP3286:%.*]] = icmp slt i64 [[TMP3285]], [[TMP3284]]
// CHECK-NEXT:    [[TMP3287:%.*]] = select i1 [[TMP3286]], i64 [[TMP3284]], i64 [[TMP3285]]
// CHECK-NEXT:    store i64 [[TMP3287]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3288:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3289:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3288]] release, align 8
// CHECK-NEXT:    [[TMP3290:%.*]] = icmp slt i64 [[TMP3289]], [[TMP3288]]
// CHECK-NEXT:    [[TMP3291:%.*]] = select i1 [[TMP3290]], i64 [[TMP3288]], i64 [[TMP3289]]
// CHECK-NEXT:    store i64 [[TMP3291]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3292:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3293:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3292]] release, align 8
// CHECK-NEXT:    [[TMP3294:%.*]] = icmp sgt i64 [[TMP3293]], [[TMP3292]]
// CHECK-NEXT:    [[TMP3295:%.*]] = select i1 [[TMP3294]], i64 [[TMP3292]], i64 [[TMP3293]]
// CHECK-NEXT:    store i64 [[TMP3295]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3296:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3297:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3298:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3296]], i64 [[TMP3297]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3299:%.*]] = extractvalue { i64, i1 } [[TMP3298]], 0
// CHECK-NEXT:    [[TMP3300:%.*]] = extractvalue { i64, i1 } [[TMP3298]], 1
// CHECK-NEXT:    [[TMP3301:%.*]] = select i1 [[TMP3300]], i64 [[TMP3296]], i64 [[TMP3299]]
// CHECK-NEXT:    store i64 [[TMP3301]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3302:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3303:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3304:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3302]], i64 [[TMP3303]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3305:%.*]] = extractvalue { i64, i1 } [[TMP3304]], 0
// CHECK-NEXT:    [[TMP3306:%.*]] = extractvalue { i64, i1 } [[TMP3304]], 1
// CHECK-NEXT:    [[TMP3307:%.*]] = select i1 [[TMP3306]], i64 [[TMP3302]], i64 [[TMP3305]]
// CHECK-NEXT:    store i64 [[TMP3307]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3308:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3309:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3310:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3308]], i64 [[TMP3309]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3311:%.*]] = extractvalue { i64, i1 } [[TMP3310]], 0
// CHECK-NEXT:    [[TMP3312:%.*]] = extractvalue { i64, i1 } [[TMP3310]], 1
// CHECK-NEXT:    br i1 [[TMP3312]], label [[LX_ATOMIC_EXIT307:%.*]], label [[LX_ATOMIC_CONT308:%.*]]
// CHECK:       lx.atomic.cont308:
// CHECK-NEXT:    store i64 [[TMP3311]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT307]]
// CHECK:       lx.atomic.exit307:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3313:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3314:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3315:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3313]], i64 [[TMP3314]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3316:%.*]] = extractvalue { i64, i1 } [[TMP3315]], 0
// CHECK-NEXT:    [[TMP3317:%.*]] = extractvalue { i64, i1 } [[TMP3315]], 1
// CHECK-NEXT:    br i1 [[TMP3317]], label [[LX_ATOMIC_EXIT309:%.*]], label [[LX_ATOMIC_CONT310:%.*]]
// CHECK:       lx.atomic.cont310:
// CHECK-NEXT:    store i64 [[TMP3316]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT309]]
// CHECK:       lx.atomic.exit309:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3318:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3319:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3320:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3318]], i64 [[TMP3319]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3321:%.*]] = extractvalue { i64, i1 } [[TMP3320]], 1
// CHECK-NEXT:    [[TMP3322:%.*]] = sext i1 [[TMP3321]] to i64
// CHECK-NEXT:    store i64 [[TMP3322]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3323:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3324:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3325:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3323]], i64 [[TMP3324]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3326:%.*]] = extractvalue { i64, i1 } [[TMP3325]], 1
// CHECK-NEXT:    [[TMP3327:%.*]] = sext i1 [[TMP3326]] to i64
// CHECK-NEXT:    store i64 [[TMP3327]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3328:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3329:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3330:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3328]], i64 [[TMP3329]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3331:%.*]] = extractvalue { i64, i1 } [[TMP3330]], 0
// CHECK-NEXT:    [[TMP3332:%.*]] = extractvalue { i64, i1 } [[TMP3330]], 1
// CHECK-NEXT:    br i1 [[TMP3332]], label [[LX_ATOMIC_EXIT311:%.*]], label [[LX_ATOMIC_CONT312:%.*]]
// CHECK:       lx.atomic.cont312:
// CHECK-NEXT:    store i64 [[TMP3331]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT311]]
// CHECK:       lx.atomic.exit311:
// CHECK-NEXT:    [[TMP3333:%.*]] = extractvalue { i64, i1 } [[TMP3330]], 1
// CHECK-NEXT:    [[TMP3334:%.*]] = sext i1 [[TMP3333]] to i64
// CHECK-NEXT:    store i64 [[TMP3334]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3335:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3336:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3337:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3335]], i64 [[TMP3336]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3338:%.*]] = extractvalue { i64, i1 } [[TMP3337]], 0
// CHECK-NEXT:    [[TMP3339:%.*]] = extractvalue { i64, i1 } [[TMP3337]], 1
// CHECK-NEXT:    br i1 [[TMP3339]], label [[LX_ATOMIC_EXIT313:%.*]], label [[LX_ATOMIC_CONT314:%.*]]
// CHECK:       lx.atomic.cont314:
// CHECK-NEXT:    store i64 [[TMP3338]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT313]]
// CHECK:       lx.atomic.exit313:
// CHECK-NEXT:    [[TMP3340:%.*]] = extractvalue { i64, i1 } [[TMP3337]], 1
// CHECK-NEXT:    [[TMP3341:%.*]] = sext i1 [[TMP3340]] to i64
// CHECK-NEXT:    store i64 [[TMP3341]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3342:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3343:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3342]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3343]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3344:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3345:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3344]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3345]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3346:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3347:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3346]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3347]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3348:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3349:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3348]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3349]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3350:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3351:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3352:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3350]], i64 [[TMP3351]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3353:%.*]] = extractvalue { i64, i1 } [[TMP3352]], 0
// CHECK-NEXT:    store i64 [[TMP3353]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3354:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3355:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3356:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3354]], i64 [[TMP3355]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3357:%.*]] = extractvalue { i64, i1 } [[TMP3356]], 0
// CHECK-NEXT:    store i64 [[TMP3357]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3358:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3359:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3358]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3360:%.*]] = icmp sgt i64 [[TMP3359]], [[TMP3358]]
// CHECK-NEXT:    [[TMP3361:%.*]] = select i1 [[TMP3360]], i64 [[TMP3358]], i64 [[TMP3359]]
// CHECK-NEXT:    store i64 [[TMP3361]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3362:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3363:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3362]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3364:%.*]] = icmp slt i64 [[TMP3363]], [[TMP3362]]
// CHECK-NEXT:    [[TMP3365:%.*]] = select i1 [[TMP3364]], i64 [[TMP3362]], i64 [[TMP3363]]
// CHECK-NEXT:    store i64 [[TMP3365]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3366:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3367:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP3366]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3368:%.*]] = icmp slt i64 [[TMP3367]], [[TMP3366]]
// CHECK-NEXT:    [[TMP3369:%.*]] = select i1 [[TMP3368]], i64 [[TMP3366]], i64 [[TMP3367]]
// CHECK-NEXT:    store i64 [[TMP3369]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3370:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3371:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP3370]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3372:%.*]] = icmp sgt i64 [[TMP3371]], [[TMP3370]]
// CHECK-NEXT:    [[TMP3373:%.*]] = select i1 [[TMP3372]], i64 [[TMP3370]], i64 [[TMP3371]]
// CHECK-NEXT:    store i64 [[TMP3373]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3374:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3375:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3376:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3374]], i64 [[TMP3375]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3377:%.*]] = extractvalue { i64, i1 } [[TMP3376]], 0
// CHECK-NEXT:    [[TMP3378:%.*]] = extractvalue { i64, i1 } [[TMP3376]], 1
// CHECK-NEXT:    [[TMP3379:%.*]] = select i1 [[TMP3378]], i64 [[TMP3374]], i64 [[TMP3377]]
// CHECK-NEXT:    store i64 [[TMP3379]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3380:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3381:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3382:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3380]], i64 [[TMP3381]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3383:%.*]] = extractvalue { i64, i1 } [[TMP3382]], 0
// CHECK-NEXT:    [[TMP3384:%.*]] = extractvalue { i64, i1 } [[TMP3382]], 1
// CHECK-NEXT:    [[TMP3385:%.*]] = select i1 [[TMP3384]], i64 [[TMP3380]], i64 [[TMP3383]]
// CHECK-NEXT:    store i64 [[TMP3385]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3386:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3387:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3388:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3386]], i64 [[TMP3387]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3389:%.*]] = extractvalue { i64, i1 } [[TMP3388]], 0
// CHECK-NEXT:    [[TMP3390:%.*]] = extractvalue { i64, i1 } [[TMP3388]], 1
// CHECK-NEXT:    br i1 [[TMP3390]], label [[LX_ATOMIC_EXIT315:%.*]], label [[LX_ATOMIC_CONT316:%.*]]
// CHECK:       lx.atomic.cont316:
// CHECK-NEXT:    store i64 [[TMP3389]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT315]]
// CHECK:       lx.atomic.exit315:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3391:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3392:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3393:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3391]], i64 [[TMP3392]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3394:%.*]] = extractvalue { i64, i1 } [[TMP3393]], 0
// CHECK-NEXT:    [[TMP3395:%.*]] = extractvalue { i64, i1 } [[TMP3393]], 1
// CHECK-NEXT:    br i1 [[TMP3395]], label [[LX_ATOMIC_EXIT317:%.*]], label [[LX_ATOMIC_CONT318:%.*]]
// CHECK:       lx.atomic.cont318:
// CHECK-NEXT:    store i64 [[TMP3394]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT317]]
// CHECK:       lx.atomic.exit317:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3396:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3397:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3398:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3396]], i64 [[TMP3397]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3399:%.*]] = extractvalue { i64, i1 } [[TMP3398]], 1
// CHECK-NEXT:    [[TMP3400:%.*]] = sext i1 [[TMP3399]] to i64
// CHECK-NEXT:    store i64 [[TMP3400]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3401:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3402:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3403:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3401]], i64 [[TMP3402]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3404:%.*]] = extractvalue { i64, i1 } [[TMP3403]], 1
// CHECK-NEXT:    [[TMP3405:%.*]] = sext i1 [[TMP3404]] to i64
// CHECK-NEXT:    store i64 [[TMP3405]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3406:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3407:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3408:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3406]], i64 [[TMP3407]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3409:%.*]] = extractvalue { i64, i1 } [[TMP3408]], 0
// CHECK-NEXT:    [[TMP3410:%.*]] = extractvalue { i64, i1 } [[TMP3408]], 1
// CHECK-NEXT:    br i1 [[TMP3410]], label [[LX_ATOMIC_EXIT319:%.*]], label [[LX_ATOMIC_CONT320:%.*]]
// CHECK:       lx.atomic.cont320:
// CHECK-NEXT:    store i64 [[TMP3409]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT319]]
// CHECK:       lx.atomic.exit319:
// CHECK-NEXT:    [[TMP3411:%.*]] = extractvalue { i64, i1 } [[TMP3408]], 1
// CHECK-NEXT:    [[TMP3412:%.*]] = sext i1 [[TMP3411]] to i64
// CHECK-NEXT:    store i64 [[TMP3412]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3413:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3414:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP3415:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP3413]], i64 [[TMP3414]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3416:%.*]] = extractvalue { i64, i1 } [[TMP3415]], 0
// CHECK-NEXT:    [[TMP3417:%.*]] = extractvalue { i64, i1 } [[TMP3415]], 1
// CHECK-NEXT:    br i1 [[TMP3417]], label [[LX_ATOMIC_EXIT321:%.*]], label [[LX_ATOMIC_CONT322:%.*]]
// CHECK:       lx.atomic.cont322:
// CHECK-NEXT:    store i64 [[TMP3416]], ptr [[LV]], align 8
// CHECK-NEXT:    br label [[LX_ATOMIC_EXIT321]]
// CHECK:       lx.atomic.exit321:
// CHECK-NEXT:    [[TMP3418:%.*]] = extractvalue { i64, i1 } [[TMP3415]], 1
// CHECK-NEXT:    [[TMP3419:%.*]] = sext i1 [[TMP3418]] to i64
// CHECK-NEXT:    store i64 [[TMP3419]], ptr [[LR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3420:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3421:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3420]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3421]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3422:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3423:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3422]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3423]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3424:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3425:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3424]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3425]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3426:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3427:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3426]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3427]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3428:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3429:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3430:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3428]], i64 [[TMP3429]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3431:%.*]] = extractvalue { i64, i1 } [[TMP3430]], 0
// CHECK-NEXT:    store i64 [[TMP3431]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3432:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3433:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3434:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3432]], i64 [[TMP3433]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3435:%.*]] = extractvalue { i64, i1 } [[TMP3434]], 0
// CHECK-NEXT:    store i64 [[TMP3435]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3436:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3437:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3436]] monotonic, align 8
// CHECK-NEXT:    [[TMP3438:%.*]] = icmp ugt i64 [[TMP3437]], [[TMP3436]]
// CHECK-NEXT:    [[TMP3439:%.*]] = select i1 [[TMP3438]], i64 [[TMP3436]], i64 [[TMP3437]]
// CHECK-NEXT:    store i64 [[TMP3439]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3440:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3441:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3440]] monotonic, align 8
// CHECK-NEXT:    [[TMP3442:%.*]] = icmp ult i64 [[TMP3441]], [[TMP3440]]
// CHECK-NEXT:    [[TMP3443:%.*]] = select i1 [[TMP3442]], i64 [[TMP3440]], i64 [[TMP3441]]
// CHECK-NEXT:    store i64 [[TMP3443]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3444:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3445:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3444]] monotonic, align 8
// CHECK-NEXT:    [[TMP3446:%.*]] = icmp ult i64 [[TMP3445]], [[TMP3444]]
// CHECK-NEXT:    [[TMP3447:%.*]] = select i1 [[TMP3446]], i64 [[TMP3444]], i64 [[TMP3445]]
// CHECK-NEXT:    store i64 [[TMP3447]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3448:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3449:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3448]] monotonic, align 8
// CHECK-NEXT:    [[TMP3450:%.*]] = icmp ugt i64 [[TMP3449]], [[TMP3448]]
// CHECK-NEXT:    [[TMP3451:%.*]] = select i1 [[TMP3450]], i64 [[TMP3448]], i64 [[TMP3449]]
// CHECK-NEXT:    store i64 [[TMP3451]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3452:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3453:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3454:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3452]], i64 [[TMP3453]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3455:%.*]] = extractvalue { i64, i1 } [[TMP3454]], 0
// CHECK-NEXT:    [[TMP3456:%.*]] = extractvalue { i64, i1 } [[TMP3454]], 1
// CHECK-NEXT:    [[TMP3457:%.*]] = select i1 [[TMP3456]], i64 [[TMP3452]], i64 [[TMP3455]]
// CHECK-NEXT:    store i64 [[TMP3457]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3458:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3459:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3460:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3458]], i64 [[TMP3459]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3461:%.*]] = extractvalue { i64, i1 } [[TMP3460]], 0
// CHECK-NEXT:    [[TMP3462:%.*]] = extractvalue { i64, i1 } [[TMP3460]], 1
// CHECK-NEXT:    [[TMP3463:%.*]] = select i1 [[TMP3462]], i64 [[TMP3458]], i64 [[TMP3461]]
// CHECK-NEXT:    store i64 [[TMP3463]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3464:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3465:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3466:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3464]], i64 [[TMP3465]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3467:%.*]] = extractvalue { i64, i1 } [[TMP3466]], 0
// CHECK-NEXT:    [[TMP3468:%.*]] = extractvalue { i64, i1 } [[TMP3466]], 1
// CHECK-NEXT:    br i1 [[TMP3468]], label [[ULX_ATOMIC_EXIT:%.*]], label [[ULX_ATOMIC_CONT:%.*]]
// CHECK:       ulx.atomic.cont:
// CHECK-NEXT:    store i64 [[TMP3467]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT]]
// CHECK:       ulx.atomic.exit:
// CHECK-NEXT:    [[TMP3469:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3470:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3471:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3469]], i64 [[TMP3470]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3472:%.*]] = extractvalue { i64, i1 } [[TMP3471]], 0
// CHECK-NEXT:    [[TMP3473:%.*]] = extractvalue { i64, i1 } [[TMP3471]], 1
// CHECK-NEXT:    br i1 [[TMP3473]], label [[ULX_ATOMIC_EXIT323:%.*]], label [[ULX_ATOMIC_CONT324:%.*]]
// CHECK:       ulx.atomic.cont324:
// CHECK-NEXT:    store i64 [[TMP3472]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT323]]
// CHECK:       ulx.atomic.exit323:
// CHECK-NEXT:    [[TMP3474:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3475:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3476:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3474]], i64 [[TMP3475]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3477:%.*]] = extractvalue { i64, i1 } [[TMP3476]], 1
// CHECK-NEXT:    [[TMP3478:%.*]] = zext i1 [[TMP3477]] to i64
// CHECK-NEXT:    store i64 [[TMP3478]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3479:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3480:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3481:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3479]], i64 [[TMP3480]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3482:%.*]] = extractvalue { i64, i1 } [[TMP3481]], 1
// CHECK-NEXT:    [[TMP3483:%.*]] = zext i1 [[TMP3482]] to i64
// CHECK-NEXT:    store i64 [[TMP3483]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3484:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3485:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3486:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3484]], i64 [[TMP3485]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3487:%.*]] = extractvalue { i64, i1 } [[TMP3486]], 0
// CHECK-NEXT:    [[TMP3488:%.*]] = extractvalue { i64, i1 } [[TMP3486]], 1
// CHECK-NEXT:    br i1 [[TMP3488]], label [[ULX_ATOMIC_EXIT325:%.*]], label [[ULX_ATOMIC_CONT326:%.*]]
// CHECK:       ulx.atomic.cont326:
// CHECK-NEXT:    store i64 [[TMP3487]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT325]]
// CHECK:       ulx.atomic.exit325:
// CHECK-NEXT:    [[TMP3489:%.*]] = extractvalue { i64, i1 } [[TMP3486]], 1
// CHECK-NEXT:    [[TMP3490:%.*]] = zext i1 [[TMP3489]] to i64
// CHECK-NEXT:    store i64 [[TMP3490]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3491:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3492:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3493:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3491]], i64 [[TMP3492]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3494:%.*]] = extractvalue { i64, i1 } [[TMP3493]], 0
// CHECK-NEXT:    [[TMP3495:%.*]] = extractvalue { i64, i1 } [[TMP3493]], 1
// CHECK-NEXT:    br i1 [[TMP3495]], label [[ULX_ATOMIC_EXIT327:%.*]], label [[ULX_ATOMIC_CONT328:%.*]]
// CHECK:       ulx.atomic.cont328:
// CHECK-NEXT:    store i64 [[TMP3494]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT327]]
// CHECK:       ulx.atomic.exit327:
// CHECK-NEXT:    [[TMP3496:%.*]] = extractvalue { i64, i1 } [[TMP3493]], 1
// CHECK-NEXT:    [[TMP3497:%.*]] = zext i1 [[TMP3496]] to i64
// CHECK-NEXT:    store i64 [[TMP3497]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3498:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3499:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3498]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3499]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3500:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3501:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3500]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3501]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3502:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3503:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3502]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3503]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3504:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3505:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3504]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3505]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3506:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3507:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3508:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3506]], i64 [[TMP3507]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3509:%.*]] = extractvalue { i64, i1 } [[TMP3508]], 0
// CHECK-NEXT:    store i64 [[TMP3509]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3510:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3511:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3512:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3510]], i64 [[TMP3511]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3513:%.*]] = extractvalue { i64, i1 } [[TMP3512]], 0
// CHECK-NEXT:    store i64 [[TMP3513]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3514:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3515:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3514]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3516:%.*]] = icmp ugt i64 [[TMP3515]], [[TMP3514]]
// CHECK-NEXT:    [[TMP3517:%.*]] = select i1 [[TMP3516]], i64 [[TMP3514]], i64 [[TMP3515]]
// CHECK-NEXT:    store i64 [[TMP3517]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3518:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3519:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3518]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3520:%.*]] = icmp ult i64 [[TMP3519]], [[TMP3518]]
// CHECK-NEXT:    [[TMP3521:%.*]] = select i1 [[TMP3520]], i64 [[TMP3518]], i64 [[TMP3519]]
// CHECK-NEXT:    store i64 [[TMP3521]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3522:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3523:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3522]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3524:%.*]] = icmp ult i64 [[TMP3523]], [[TMP3522]]
// CHECK-NEXT:    [[TMP3525:%.*]] = select i1 [[TMP3524]], i64 [[TMP3522]], i64 [[TMP3523]]
// CHECK-NEXT:    store i64 [[TMP3525]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3526:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3527:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3526]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3528:%.*]] = icmp ugt i64 [[TMP3527]], [[TMP3526]]
// CHECK-NEXT:    [[TMP3529:%.*]] = select i1 [[TMP3528]], i64 [[TMP3526]], i64 [[TMP3527]]
// CHECK-NEXT:    store i64 [[TMP3529]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3530:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3531:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3532:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3530]], i64 [[TMP3531]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3533:%.*]] = extractvalue { i64, i1 } [[TMP3532]], 0
// CHECK-NEXT:    [[TMP3534:%.*]] = extractvalue { i64, i1 } [[TMP3532]], 1
// CHECK-NEXT:    [[TMP3535:%.*]] = select i1 [[TMP3534]], i64 [[TMP3530]], i64 [[TMP3533]]
// CHECK-NEXT:    store i64 [[TMP3535]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3536:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3537:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3538:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3536]], i64 [[TMP3537]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3539:%.*]] = extractvalue { i64, i1 } [[TMP3538]], 0
// CHECK-NEXT:    [[TMP3540:%.*]] = extractvalue { i64, i1 } [[TMP3538]], 1
// CHECK-NEXT:    [[TMP3541:%.*]] = select i1 [[TMP3540]], i64 [[TMP3536]], i64 [[TMP3539]]
// CHECK-NEXT:    store i64 [[TMP3541]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3542:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3543:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3544:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3542]], i64 [[TMP3543]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3545:%.*]] = extractvalue { i64, i1 } [[TMP3544]], 0
// CHECK-NEXT:    [[TMP3546:%.*]] = extractvalue { i64, i1 } [[TMP3544]], 1
// CHECK-NEXT:    br i1 [[TMP3546]], label [[ULX_ATOMIC_EXIT329:%.*]], label [[ULX_ATOMIC_CONT330:%.*]]
// CHECK:       ulx.atomic.cont330:
// CHECK-NEXT:    store i64 [[TMP3545]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT329]]
// CHECK:       ulx.atomic.exit329:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3547:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3548:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3549:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3547]], i64 [[TMP3548]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3550:%.*]] = extractvalue { i64, i1 } [[TMP3549]], 0
// CHECK-NEXT:    [[TMP3551:%.*]] = extractvalue { i64, i1 } [[TMP3549]], 1
// CHECK-NEXT:    br i1 [[TMP3551]], label [[ULX_ATOMIC_EXIT331:%.*]], label [[ULX_ATOMIC_CONT332:%.*]]
// CHECK:       ulx.atomic.cont332:
// CHECK-NEXT:    store i64 [[TMP3550]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT331]]
// CHECK:       ulx.atomic.exit331:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3552:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3553:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3554:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3552]], i64 [[TMP3553]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3555:%.*]] = extractvalue { i64, i1 } [[TMP3554]], 1
// CHECK-NEXT:    [[TMP3556:%.*]] = zext i1 [[TMP3555]] to i64
// CHECK-NEXT:    store i64 [[TMP3556]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3557:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3558:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3559:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3557]], i64 [[TMP3558]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3560:%.*]] = extractvalue { i64, i1 } [[TMP3559]], 1
// CHECK-NEXT:    [[TMP3561:%.*]] = zext i1 [[TMP3560]] to i64
// CHECK-NEXT:    store i64 [[TMP3561]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3562:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3563:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3564:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3562]], i64 [[TMP3563]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3565:%.*]] = extractvalue { i64, i1 } [[TMP3564]], 0
// CHECK-NEXT:    [[TMP3566:%.*]] = extractvalue { i64, i1 } [[TMP3564]], 1
// CHECK-NEXT:    br i1 [[TMP3566]], label [[ULX_ATOMIC_EXIT333:%.*]], label [[ULX_ATOMIC_CONT334:%.*]]
// CHECK:       ulx.atomic.cont334:
// CHECK-NEXT:    store i64 [[TMP3565]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT333]]
// CHECK:       ulx.atomic.exit333:
// CHECK-NEXT:    [[TMP3567:%.*]] = extractvalue { i64, i1 } [[TMP3564]], 1
// CHECK-NEXT:    [[TMP3568:%.*]] = zext i1 [[TMP3567]] to i64
// CHECK-NEXT:    store i64 [[TMP3568]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3569:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3570:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3571:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3569]], i64 [[TMP3570]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3572:%.*]] = extractvalue { i64, i1 } [[TMP3571]], 0
// CHECK-NEXT:    [[TMP3573:%.*]] = extractvalue { i64, i1 } [[TMP3571]], 1
// CHECK-NEXT:    br i1 [[TMP3573]], label [[ULX_ATOMIC_EXIT335:%.*]], label [[ULX_ATOMIC_CONT336:%.*]]
// CHECK:       ulx.atomic.cont336:
// CHECK-NEXT:    store i64 [[TMP3572]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT335]]
// CHECK:       ulx.atomic.exit335:
// CHECK-NEXT:    [[TMP3574:%.*]] = extractvalue { i64, i1 } [[TMP3571]], 1
// CHECK-NEXT:    [[TMP3575:%.*]] = zext i1 [[TMP3574]] to i64
// CHECK-NEXT:    store i64 [[TMP3575]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3576:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3577:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3576]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3577]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3578:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3579:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3578]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3579]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3580:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3581:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3580]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3581]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3582:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3583:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3582]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP3583]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3584:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3585:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3586:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3584]], i64 [[TMP3585]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3587:%.*]] = extractvalue { i64, i1 } [[TMP3586]], 0
// CHECK-NEXT:    store i64 [[TMP3587]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3588:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3589:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3590:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3588]], i64 [[TMP3589]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3591:%.*]] = extractvalue { i64, i1 } [[TMP3590]], 0
// CHECK-NEXT:    store i64 [[TMP3591]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3592:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3593:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3592]] acquire, align 8
// CHECK-NEXT:    [[TMP3594:%.*]] = icmp ugt i64 [[TMP3593]], [[TMP3592]]
// CHECK-NEXT:    [[TMP3595:%.*]] = select i1 [[TMP3594]], i64 [[TMP3592]], i64 [[TMP3593]]
// CHECK-NEXT:    store i64 [[TMP3595]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3596:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3597:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3596]] acquire, align 8
// CHECK-NEXT:    [[TMP3598:%.*]] = icmp ult i64 [[TMP3597]], [[TMP3596]]
// CHECK-NEXT:    [[TMP3599:%.*]] = select i1 [[TMP3598]], i64 [[TMP3596]], i64 [[TMP3597]]
// CHECK-NEXT:    store i64 [[TMP3599]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3600:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3601:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3600]] acquire, align 8
// CHECK-NEXT:    [[TMP3602:%.*]] = icmp ult i64 [[TMP3601]], [[TMP3600]]
// CHECK-NEXT:    [[TMP3603:%.*]] = select i1 [[TMP3602]], i64 [[TMP3600]], i64 [[TMP3601]]
// CHECK-NEXT:    store i64 [[TMP3603]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3604:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3605:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3604]] acquire, align 8
// CHECK-NEXT:    [[TMP3606:%.*]] = icmp ugt i64 [[TMP3605]], [[TMP3604]]
// CHECK-NEXT:    [[TMP3607:%.*]] = select i1 [[TMP3606]], i64 [[TMP3604]], i64 [[TMP3605]]
// CHECK-NEXT:    store i64 [[TMP3607]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3608:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3609:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3610:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3608]], i64 [[TMP3609]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3611:%.*]] = extractvalue { i64, i1 } [[TMP3610]], 0
// CHECK-NEXT:    [[TMP3612:%.*]] = extractvalue { i64, i1 } [[TMP3610]], 1
// CHECK-NEXT:    [[TMP3613:%.*]] = select i1 [[TMP3612]], i64 [[TMP3608]], i64 [[TMP3611]]
// CHECK-NEXT:    store i64 [[TMP3613]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3614:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3615:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3616:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3614]], i64 [[TMP3615]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3617:%.*]] = extractvalue { i64, i1 } [[TMP3616]], 0
// CHECK-NEXT:    [[TMP3618:%.*]] = extractvalue { i64, i1 } [[TMP3616]], 1
// CHECK-NEXT:    [[TMP3619:%.*]] = select i1 [[TMP3618]], i64 [[TMP3614]], i64 [[TMP3617]]
// CHECK-NEXT:    store i64 [[TMP3619]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3620:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3621:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3622:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3620]], i64 [[TMP3621]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3623:%.*]] = extractvalue { i64, i1 } [[TMP3622]], 0
// CHECK-NEXT:    [[TMP3624:%.*]] = extractvalue { i64, i1 } [[TMP3622]], 1
// CHECK-NEXT:    br i1 [[TMP3624]], label [[ULX_ATOMIC_EXIT337:%.*]], label [[ULX_ATOMIC_CONT338:%.*]]
// CHECK:       ulx.atomic.cont338:
// CHECK-NEXT:    store i64 [[TMP3623]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT337]]
// CHECK:       ulx.atomic.exit337:
// CHECK-NEXT:    [[TMP3625:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3626:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3627:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3625]], i64 [[TMP3626]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3628:%.*]] = extractvalue { i64, i1 } [[TMP3627]], 0
// CHECK-NEXT:    [[TMP3629:%.*]] = extractvalue { i64, i1 } [[TMP3627]], 1
// CHECK-NEXT:    br i1 [[TMP3629]], label [[ULX_ATOMIC_EXIT339:%.*]], label [[ULX_ATOMIC_CONT340:%.*]]
// CHECK:       ulx.atomic.cont340:
// CHECK-NEXT:    store i64 [[TMP3628]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT339]]
// CHECK:       ulx.atomic.exit339:
// CHECK-NEXT:    [[TMP3630:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3631:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3632:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3630]], i64 [[TMP3631]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3633:%.*]] = extractvalue { i64, i1 } [[TMP3632]], 1
// CHECK-NEXT:    [[TMP3634:%.*]] = zext i1 [[TMP3633]] to i64
// CHECK-NEXT:    store i64 [[TMP3634]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3635:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3636:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3637:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3635]], i64 [[TMP3636]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3638:%.*]] = extractvalue { i64, i1 } [[TMP3637]], 1
// CHECK-NEXT:    [[TMP3639:%.*]] = zext i1 [[TMP3638]] to i64
// CHECK-NEXT:    store i64 [[TMP3639]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3640:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3641:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3642:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3640]], i64 [[TMP3641]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3643:%.*]] = extractvalue { i64, i1 } [[TMP3642]], 0
// CHECK-NEXT:    [[TMP3644:%.*]] = extractvalue { i64, i1 } [[TMP3642]], 1
// CHECK-NEXT:    br i1 [[TMP3644]], label [[ULX_ATOMIC_EXIT341:%.*]], label [[ULX_ATOMIC_CONT342:%.*]]
// CHECK:       ulx.atomic.cont342:
// CHECK-NEXT:    store i64 [[TMP3643]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT341]]
// CHECK:       ulx.atomic.exit341:
// CHECK-NEXT:    [[TMP3645:%.*]] = extractvalue { i64, i1 } [[TMP3642]], 1
// CHECK-NEXT:    [[TMP3646:%.*]] = zext i1 [[TMP3645]] to i64
// CHECK-NEXT:    store i64 [[TMP3646]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3647:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3648:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3649:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3647]], i64 [[TMP3648]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP3650:%.*]] = extractvalue { i64, i1 } [[TMP3649]], 0
// CHECK-NEXT:    [[TMP3651:%.*]] = extractvalue { i64, i1 } [[TMP3649]], 1
// CHECK-NEXT:    br i1 [[TMP3651]], label [[ULX_ATOMIC_EXIT343:%.*]], label [[ULX_ATOMIC_CONT344:%.*]]
// CHECK:       ulx.atomic.cont344:
// CHECK-NEXT:    store i64 [[TMP3650]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT343]]
// CHECK:       ulx.atomic.exit343:
// CHECK-NEXT:    [[TMP3652:%.*]] = extractvalue { i64, i1 } [[TMP3649]], 1
// CHECK-NEXT:    [[TMP3653:%.*]] = zext i1 [[TMP3652]] to i64
// CHECK-NEXT:    store i64 [[TMP3653]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3654:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3655:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3654]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3655]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3656:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3657:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3656]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3657]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3658:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3659:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3658]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3659]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3660:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3661:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3660]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3661]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3662:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3663:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3664:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3662]], i64 [[TMP3663]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3665:%.*]] = extractvalue { i64, i1 } [[TMP3664]], 0
// CHECK-NEXT:    store i64 [[TMP3665]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3666:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3667:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3668:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3666]], i64 [[TMP3667]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3669:%.*]] = extractvalue { i64, i1 } [[TMP3668]], 0
// CHECK-NEXT:    store i64 [[TMP3669]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3670:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3671:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3670]] monotonic, align 8
// CHECK-NEXT:    [[TMP3672:%.*]] = icmp ugt i64 [[TMP3671]], [[TMP3670]]
// CHECK-NEXT:    [[TMP3673:%.*]] = select i1 [[TMP3672]], i64 [[TMP3670]], i64 [[TMP3671]]
// CHECK-NEXT:    store i64 [[TMP3673]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3674:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3675:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3674]] monotonic, align 8
// CHECK-NEXT:    [[TMP3676:%.*]] = icmp ult i64 [[TMP3675]], [[TMP3674]]
// CHECK-NEXT:    [[TMP3677:%.*]] = select i1 [[TMP3676]], i64 [[TMP3674]], i64 [[TMP3675]]
// CHECK-NEXT:    store i64 [[TMP3677]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3678:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3679:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3678]] monotonic, align 8
// CHECK-NEXT:    [[TMP3680:%.*]] = icmp ult i64 [[TMP3679]], [[TMP3678]]
// CHECK-NEXT:    [[TMP3681:%.*]] = select i1 [[TMP3680]], i64 [[TMP3678]], i64 [[TMP3679]]
// CHECK-NEXT:    store i64 [[TMP3681]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3682:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3683:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3682]] monotonic, align 8
// CHECK-NEXT:    [[TMP3684:%.*]] = icmp ugt i64 [[TMP3683]], [[TMP3682]]
// CHECK-NEXT:    [[TMP3685:%.*]] = select i1 [[TMP3684]], i64 [[TMP3682]], i64 [[TMP3683]]
// CHECK-NEXT:    store i64 [[TMP3685]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3686:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3687:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3688:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3686]], i64 [[TMP3687]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3689:%.*]] = extractvalue { i64, i1 } [[TMP3688]], 0
// CHECK-NEXT:    [[TMP3690:%.*]] = extractvalue { i64, i1 } [[TMP3688]], 1
// CHECK-NEXT:    [[TMP3691:%.*]] = select i1 [[TMP3690]], i64 [[TMP3686]], i64 [[TMP3689]]
// CHECK-NEXT:    store i64 [[TMP3691]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3692:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3693:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3694:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3692]], i64 [[TMP3693]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3695:%.*]] = extractvalue { i64, i1 } [[TMP3694]], 0
// CHECK-NEXT:    [[TMP3696:%.*]] = extractvalue { i64, i1 } [[TMP3694]], 1
// CHECK-NEXT:    [[TMP3697:%.*]] = select i1 [[TMP3696]], i64 [[TMP3692]], i64 [[TMP3695]]
// CHECK-NEXT:    store i64 [[TMP3697]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP3698:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3699:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3700:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3698]], i64 [[TMP3699]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3701:%.*]] = extractvalue { i64, i1 } [[TMP3700]], 0
// CHECK-NEXT:    [[TMP3702:%.*]] = extractvalue { i64, i1 } [[TMP3700]], 1
// CHECK-NEXT:    br i1 [[TMP3702]], label [[ULX_ATOMIC_EXIT345:%.*]], label [[ULX_ATOMIC_CONT346:%.*]]
// CHECK:       ulx.atomic.cont346:
// CHECK-NEXT:    store i64 [[TMP3701]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT345]]
// CHECK:       ulx.atomic.exit345:
// CHECK-NEXT:    [[TMP3703:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3704:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3705:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3703]], i64 [[TMP3704]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3706:%.*]] = extractvalue { i64, i1 } [[TMP3705]], 0
// CHECK-NEXT:    [[TMP3707:%.*]] = extractvalue { i64, i1 } [[TMP3705]], 1
// CHECK-NEXT:    br i1 [[TMP3707]], label [[ULX_ATOMIC_EXIT347:%.*]], label [[ULX_ATOMIC_CONT348:%.*]]
// CHECK:       ulx.atomic.cont348:
// CHECK-NEXT:    store i64 [[TMP3706]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT347]]
// CHECK:       ulx.atomic.exit347:
// CHECK-NEXT:    [[TMP3708:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3709:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3710:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3708]], i64 [[TMP3709]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3711:%.*]] = extractvalue { i64, i1 } [[TMP3710]], 1
// CHECK-NEXT:    [[TMP3712:%.*]] = zext i1 [[TMP3711]] to i64
// CHECK-NEXT:    store i64 [[TMP3712]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3713:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3714:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3715:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3713]], i64 [[TMP3714]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3716:%.*]] = extractvalue { i64, i1 } [[TMP3715]], 1
// CHECK-NEXT:    [[TMP3717:%.*]] = zext i1 [[TMP3716]] to i64
// CHECK-NEXT:    store i64 [[TMP3717]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3718:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3719:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3720:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3718]], i64 [[TMP3719]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3721:%.*]] = extractvalue { i64, i1 } [[TMP3720]], 0
// CHECK-NEXT:    [[TMP3722:%.*]] = extractvalue { i64, i1 } [[TMP3720]], 1
// CHECK-NEXT:    br i1 [[TMP3722]], label [[ULX_ATOMIC_EXIT349:%.*]], label [[ULX_ATOMIC_CONT350:%.*]]
// CHECK:       ulx.atomic.cont350:
// CHECK-NEXT:    store i64 [[TMP3721]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT349]]
// CHECK:       ulx.atomic.exit349:
// CHECK-NEXT:    [[TMP3723:%.*]] = extractvalue { i64, i1 } [[TMP3720]], 1
// CHECK-NEXT:    [[TMP3724:%.*]] = zext i1 [[TMP3723]] to i64
// CHECK-NEXT:    store i64 [[TMP3724]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3725:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3726:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3727:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3725]], i64 [[TMP3726]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3728:%.*]] = extractvalue { i64, i1 } [[TMP3727]], 0
// CHECK-NEXT:    [[TMP3729:%.*]] = extractvalue { i64, i1 } [[TMP3727]], 1
// CHECK-NEXT:    br i1 [[TMP3729]], label [[ULX_ATOMIC_EXIT351:%.*]], label [[ULX_ATOMIC_CONT352:%.*]]
// CHECK:       ulx.atomic.cont352:
// CHECK-NEXT:    store i64 [[TMP3728]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT351]]
// CHECK:       ulx.atomic.exit351:
// CHECK-NEXT:    [[TMP3730:%.*]] = extractvalue { i64, i1 } [[TMP3727]], 1
// CHECK-NEXT:    [[TMP3731:%.*]] = zext i1 [[TMP3730]] to i64
// CHECK-NEXT:    store i64 [[TMP3731]], ptr [[ULR]], align 8
// CHECK-NEXT:    [[TMP3732:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3733:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3732]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3733]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3734:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3735:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3734]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3735]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3736:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3737:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3736]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3737]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3738:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3739:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3738]] release, align 8
// CHECK-NEXT:    store i64 [[TMP3739]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3740:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3741:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3742:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3740]], i64 [[TMP3741]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3743:%.*]] = extractvalue { i64, i1 } [[TMP3742]], 0
// CHECK-NEXT:    store i64 [[TMP3743]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3744:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3745:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3746:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3744]], i64 [[TMP3745]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3747:%.*]] = extractvalue { i64, i1 } [[TMP3746]], 0
// CHECK-NEXT:    store i64 [[TMP3747]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3748:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3749:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3748]] release, align 8
// CHECK-NEXT:    [[TMP3750:%.*]] = icmp ugt i64 [[TMP3749]], [[TMP3748]]
// CHECK-NEXT:    [[TMP3751:%.*]] = select i1 [[TMP3750]], i64 [[TMP3748]], i64 [[TMP3749]]
// CHECK-NEXT:    store i64 [[TMP3751]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3752:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3753:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3752]] release, align 8
// CHECK-NEXT:    [[TMP3754:%.*]] = icmp ult i64 [[TMP3753]], [[TMP3752]]
// CHECK-NEXT:    [[TMP3755:%.*]] = select i1 [[TMP3754]], i64 [[TMP3752]], i64 [[TMP3753]]
// CHECK-NEXT:    store i64 [[TMP3755]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3756:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3757:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3756]] release, align 8
// CHECK-NEXT:    [[TMP3758:%.*]] = icmp ult i64 [[TMP3757]], [[TMP3756]]
// CHECK-NEXT:    [[TMP3759:%.*]] = select i1 [[TMP3758]], i64 [[TMP3756]], i64 [[TMP3757]]
// CHECK-NEXT:    store i64 [[TMP3759]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3760:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3761:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3760]] release, align 8
// CHECK-NEXT:    [[TMP3762:%.*]] = icmp ugt i64 [[TMP3761]], [[TMP3760]]
// CHECK-NEXT:    [[TMP3763:%.*]] = select i1 [[TMP3762]], i64 [[TMP3760]], i64 [[TMP3761]]
// CHECK-NEXT:    store i64 [[TMP3763]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3764:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3765:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3766:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3764]], i64 [[TMP3765]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3767:%.*]] = extractvalue { i64, i1 } [[TMP3766]], 0
// CHECK-NEXT:    [[TMP3768:%.*]] = extractvalue { i64, i1 } [[TMP3766]], 1
// CHECK-NEXT:    [[TMP3769:%.*]] = select i1 [[TMP3768]], i64 [[TMP3764]], i64 [[TMP3767]]
// CHECK-NEXT:    store i64 [[TMP3769]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3770:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3771:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3772:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3770]], i64 [[TMP3771]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3773:%.*]] = extractvalue { i64, i1 } [[TMP3772]], 0
// CHECK-NEXT:    [[TMP3774:%.*]] = extractvalue { i64, i1 } [[TMP3772]], 1
// CHECK-NEXT:    [[TMP3775:%.*]] = select i1 [[TMP3774]], i64 [[TMP3770]], i64 [[TMP3773]]
// CHECK-NEXT:    store i64 [[TMP3775]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3776:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3777:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3778:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3776]], i64 [[TMP3777]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3779:%.*]] = extractvalue { i64, i1 } [[TMP3778]], 0
// CHECK-NEXT:    [[TMP3780:%.*]] = extractvalue { i64, i1 } [[TMP3778]], 1
// CHECK-NEXT:    br i1 [[TMP3780]], label [[ULX_ATOMIC_EXIT353:%.*]], label [[ULX_ATOMIC_CONT354:%.*]]
// CHECK:       ulx.atomic.cont354:
// CHECK-NEXT:    store i64 [[TMP3779]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT353]]
// CHECK:       ulx.atomic.exit353:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3781:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3782:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3783:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3781]], i64 [[TMP3782]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3784:%.*]] = extractvalue { i64, i1 } [[TMP3783]], 0
// CHECK-NEXT:    [[TMP3785:%.*]] = extractvalue { i64, i1 } [[TMP3783]], 1
// CHECK-NEXT:    br i1 [[TMP3785]], label [[ULX_ATOMIC_EXIT355:%.*]], label [[ULX_ATOMIC_CONT356:%.*]]
// CHECK:       ulx.atomic.cont356:
// CHECK-NEXT:    store i64 [[TMP3784]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT355]]
// CHECK:       ulx.atomic.exit355:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3786:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3787:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3788:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3786]], i64 [[TMP3787]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3789:%.*]] = extractvalue { i64, i1 } [[TMP3788]], 1
// CHECK-NEXT:    [[TMP3790:%.*]] = zext i1 [[TMP3789]] to i64
// CHECK-NEXT:    store i64 [[TMP3790]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3791:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3792:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3793:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3791]], i64 [[TMP3792]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3794:%.*]] = extractvalue { i64, i1 } [[TMP3793]], 1
// CHECK-NEXT:    [[TMP3795:%.*]] = zext i1 [[TMP3794]] to i64
// CHECK-NEXT:    store i64 [[TMP3795]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3796:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3797:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3798:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3796]], i64 [[TMP3797]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3799:%.*]] = extractvalue { i64, i1 } [[TMP3798]], 0
// CHECK-NEXT:    [[TMP3800:%.*]] = extractvalue { i64, i1 } [[TMP3798]], 1
// CHECK-NEXT:    br i1 [[TMP3800]], label [[ULX_ATOMIC_EXIT357:%.*]], label [[ULX_ATOMIC_CONT358:%.*]]
// CHECK:       ulx.atomic.cont358:
// CHECK-NEXT:    store i64 [[TMP3799]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT357]]
// CHECK:       ulx.atomic.exit357:
// CHECK-NEXT:    [[TMP3801:%.*]] = extractvalue { i64, i1 } [[TMP3798]], 1
// CHECK-NEXT:    [[TMP3802:%.*]] = zext i1 [[TMP3801]] to i64
// CHECK-NEXT:    store i64 [[TMP3802]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3803:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3804:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3805:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3803]], i64 [[TMP3804]] release monotonic, align 8
// CHECK-NEXT:    [[TMP3806:%.*]] = extractvalue { i64, i1 } [[TMP3805]], 0
// CHECK-NEXT:    [[TMP3807:%.*]] = extractvalue { i64, i1 } [[TMP3805]], 1
// CHECK-NEXT:    br i1 [[TMP3807]], label [[ULX_ATOMIC_EXIT359:%.*]], label [[ULX_ATOMIC_CONT360:%.*]]
// CHECK:       ulx.atomic.cont360:
// CHECK-NEXT:    store i64 [[TMP3806]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT359]]
// CHECK:       ulx.atomic.exit359:
// CHECK-NEXT:    [[TMP3808:%.*]] = extractvalue { i64, i1 } [[TMP3805]], 1
// CHECK-NEXT:    [[TMP3809:%.*]] = zext i1 [[TMP3808]] to i64
// CHECK-NEXT:    store i64 [[TMP3809]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3810:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3811:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3810]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3811]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3812:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3813:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3812]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3813]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3814:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3815:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3814]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3815]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3816:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3817:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3816]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP3817]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3818:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3819:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3820:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3818]], i64 [[TMP3819]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3821:%.*]] = extractvalue { i64, i1 } [[TMP3820]], 0
// CHECK-NEXT:    store i64 [[TMP3821]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3822:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3823:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3824:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3822]], i64 [[TMP3823]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3825:%.*]] = extractvalue { i64, i1 } [[TMP3824]], 0
// CHECK-NEXT:    store i64 [[TMP3825]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3826:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3827:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3826]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3828:%.*]] = icmp ugt i64 [[TMP3827]], [[TMP3826]]
// CHECK-NEXT:    [[TMP3829:%.*]] = select i1 [[TMP3828]], i64 [[TMP3826]], i64 [[TMP3827]]
// CHECK-NEXT:    store i64 [[TMP3829]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3830:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3831:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3830]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3832:%.*]] = icmp ult i64 [[TMP3831]], [[TMP3830]]
// CHECK-NEXT:    [[TMP3833:%.*]] = select i1 [[TMP3832]], i64 [[TMP3830]], i64 [[TMP3831]]
// CHECK-NEXT:    store i64 [[TMP3833]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3834:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3835:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP3834]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3836:%.*]] = icmp ult i64 [[TMP3835]], [[TMP3834]]
// CHECK-NEXT:    [[TMP3837:%.*]] = select i1 [[TMP3836]], i64 [[TMP3834]], i64 [[TMP3835]]
// CHECK-NEXT:    store i64 [[TMP3837]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3838:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3839:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP3838]] seq_cst, align 8
// CHECK-NEXT:    [[TMP3840:%.*]] = icmp ugt i64 [[TMP3839]], [[TMP3838]]
// CHECK-NEXT:    [[TMP3841:%.*]] = select i1 [[TMP3840]], i64 [[TMP3838]], i64 [[TMP3839]]
// CHECK-NEXT:    store i64 [[TMP3841]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3842:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3843:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3844:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3842]], i64 [[TMP3843]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3845:%.*]] = extractvalue { i64, i1 } [[TMP3844]], 0
// CHECK-NEXT:    [[TMP3846:%.*]] = extractvalue { i64, i1 } [[TMP3844]], 1
// CHECK-NEXT:    [[TMP3847:%.*]] = select i1 [[TMP3846]], i64 [[TMP3842]], i64 [[TMP3845]]
// CHECK-NEXT:    store i64 [[TMP3847]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3848:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3849:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3850:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3848]], i64 [[TMP3849]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3851:%.*]] = extractvalue { i64, i1 } [[TMP3850]], 0
// CHECK-NEXT:    [[TMP3852:%.*]] = extractvalue { i64, i1 } [[TMP3850]], 1
// CHECK-NEXT:    [[TMP3853:%.*]] = select i1 [[TMP3852]], i64 [[TMP3848]], i64 [[TMP3851]]
// CHECK-NEXT:    store i64 [[TMP3853]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3854:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3855:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3856:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3854]], i64 [[TMP3855]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3857:%.*]] = extractvalue { i64, i1 } [[TMP3856]], 0
// CHECK-NEXT:    [[TMP3858:%.*]] = extractvalue { i64, i1 } [[TMP3856]], 1
// CHECK-NEXT:    br i1 [[TMP3858]], label [[ULX_ATOMIC_EXIT361:%.*]], label [[ULX_ATOMIC_CONT362:%.*]]
// CHECK:       ulx.atomic.cont362:
// CHECK-NEXT:    store i64 [[TMP3857]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT361]]
// CHECK:       ulx.atomic.exit361:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3859:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3860:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3861:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3859]], i64 [[TMP3860]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3862:%.*]] = extractvalue { i64, i1 } [[TMP3861]], 0
// CHECK-NEXT:    [[TMP3863:%.*]] = extractvalue { i64, i1 } [[TMP3861]], 1
// CHECK-NEXT:    br i1 [[TMP3863]], label [[ULX_ATOMIC_EXIT363:%.*]], label [[ULX_ATOMIC_CONT364:%.*]]
// CHECK:       ulx.atomic.cont364:
// CHECK-NEXT:    store i64 [[TMP3862]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT363]]
// CHECK:       ulx.atomic.exit363:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3864:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3865:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3866:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3864]], i64 [[TMP3865]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3867:%.*]] = extractvalue { i64, i1 } [[TMP3866]], 1
// CHECK-NEXT:    [[TMP3868:%.*]] = zext i1 [[TMP3867]] to i64
// CHECK-NEXT:    store i64 [[TMP3868]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3869:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3870:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3871:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3869]], i64 [[TMP3870]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3872:%.*]] = extractvalue { i64, i1 } [[TMP3871]], 1
// CHECK-NEXT:    [[TMP3873:%.*]] = zext i1 [[TMP3872]] to i64
// CHECK-NEXT:    store i64 [[TMP3873]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3874:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3875:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3876:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3874]], i64 [[TMP3875]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3877:%.*]] = extractvalue { i64, i1 } [[TMP3876]], 0
// CHECK-NEXT:    [[TMP3878:%.*]] = extractvalue { i64, i1 } [[TMP3876]], 1
// CHECK-NEXT:    br i1 [[TMP3878]], label [[ULX_ATOMIC_EXIT365:%.*]], label [[ULX_ATOMIC_CONT366:%.*]]
// CHECK:       ulx.atomic.cont366:
// CHECK-NEXT:    store i64 [[TMP3877]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT365]]
// CHECK:       ulx.atomic.exit365:
// CHECK-NEXT:    [[TMP3879:%.*]] = extractvalue { i64, i1 } [[TMP3876]], 1
// CHECK-NEXT:    [[TMP3880:%.*]] = zext i1 [[TMP3879]] to i64
// CHECK-NEXT:    store i64 [[TMP3880]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3881:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3882:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP3883:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP3881]], i64 [[TMP3882]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP3884:%.*]] = extractvalue { i64, i1 } [[TMP3883]], 0
// CHECK-NEXT:    [[TMP3885:%.*]] = extractvalue { i64, i1 } [[TMP3883]], 1
// CHECK-NEXT:    br i1 [[TMP3885]], label [[ULX_ATOMIC_EXIT367:%.*]], label [[ULX_ATOMIC_CONT368:%.*]]
// CHECK:       ulx.atomic.cont368:
// CHECK-NEXT:    store i64 [[TMP3884]], ptr [[ULV]], align 8
// CHECK-NEXT:    br label [[ULX_ATOMIC_EXIT367]]
// CHECK:       ulx.atomic.exit367:
// CHECK-NEXT:    [[TMP3886:%.*]] = extractvalue { i64, i1 } [[TMP3883]], 1
// CHECK-NEXT:    [[TMP3887:%.*]] = zext i1 [[TMP3886]] to i64
// CHECK-NEXT:    store i64 [[TMP3887]], ptr [[ULR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3888:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3889:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3888]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3889]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3890:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3891:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3890]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3891]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3892:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3893:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3892]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3893]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3894:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3895:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3894]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3895]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3896:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3897:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3898:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3896]], i64 [[TMP3897]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3899:%.*]] = extractvalue { i64, i1 } [[TMP3898]], 0
// CHECK-NEXT:    store i64 [[TMP3899]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3900:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3901:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3902:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3900]], i64 [[TMP3901]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3903:%.*]] = extractvalue { i64, i1 } [[TMP3902]], 0
// CHECK-NEXT:    store i64 [[TMP3903]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3904:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3905:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3904]] monotonic, align 8
// CHECK-NEXT:    [[TMP3906:%.*]] = icmp sgt i64 [[TMP3905]], [[TMP3904]]
// CHECK-NEXT:    [[TMP3907:%.*]] = select i1 [[TMP3906]], i64 [[TMP3904]], i64 [[TMP3905]]
// CHECK-NEXT:    store i64 [[TMP3907]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3908:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3909:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3908]] monotonic, align 8
// CHECK-NEXT:    [[TMP3910:%.*]] = icmp slt i64 [[TMP3909]], [[TMP3908]]
// CHECK-NEXT:    [[TMP3911:%.*]] = select i1 [[TMP3910]], i64 [[TMP3908]], i64 [[TMP3909]]
// CHECK-NEXT:    store i64 [[TMP3911]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3912:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3913:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3912]] monotonic, align 8
// CHECK-NEXT:    [[TMP3914:%.*]] = icmp slt i64 [[TMP3913]], [[TMP3912]]
// CHECK-NEXT:    [[TMP3915:%.*]] = select i1 [[TMP3914]], i64 [[TMP3912]], i64 [[TMP3913]]
// CHECK-NEXT:    store i64 [[TMP3915]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3916:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3917:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3916]] monotonic, align 8
// CHECK-NEXT:    [[TMP3918:%.*]] = icmp sgt i64 [[TMP3917]], [[TMP3916]]
// CHECK-NEXT:    [[TMP3919:%.*]] = select i1 [[TMP3918]], i64 [[TMP3916]], i64 [[TMP3917]]
// CHECK-NEXT:    store i64 [[TMP3919]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3920:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3921:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3922:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3920]], i64 [[TMP3921]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3923:%.*]] = extractvalue { i64, i1 } [[TMP3922]], 0
// CHECK-NEXT:    [[TMP3924:%.*]] = extractvalue { i64, i1 } [[TMP3922]], 1
// CHECK-NEXT:    [[TMP3925:%.*]] = select i1 [[TMP3924]], i64 [[TMP3920]], i64 [[TMP3923]]
// CHECK-NEXT:    store i64 [[TMP3925]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3926:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3927:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3928:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3926]], i64 [[TMP3927]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3929:%.*]] = extractvalue { i64, i1 } [[TMP3928]], 0
// CHECK-NEXT:    [[TMP3930:%.*]] = extractvalue { i64, i1 } [[TMP3928]], 1
// CHECK-NEXT:    [[TMP3931:%.*]] = select i1 [[TMP3930]], i64 [[TMP3926]], i64 [[TMP3929]]
// CHECK-NEXT:    store i64 [[TMP3931]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP3932:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3933:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3934:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3932]], i64 [[TMP3933]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3935:%.*]] = extractvalue { i64, i1 } [[TMP3934]], 0
// CHECK-NEXT:    [[TMP3936:%.*]] = extractvalue { i64, i1 } [[TMP3934]], 1
// CHECK-NEXT:    br i1 [[TMP3936]], label [[LLX_ATOMIC_EXIT:%.*]], label [[LLX_ATOMIC_CONT:%.*]]
// CHECK:       llx.atomic.cont:
// CHECK-NEXT:    store i64 [[TMP3935]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT]]
// CHECK:       llx.atomic.exit:
// CHECK-NEXT:    [[TMP3937:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3938:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3939:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3937]], i64 [[TMP3938]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3940:%.*]] = extractvalue { i64, i1 } [[TMP3939]], 0
// CHECK-NEXT:    [[TMP3941:%.*]] = extractvalue { i64, i1 } [[TMP3939]], 1
// CHECK-NEXT:    br i1 [[TMP3941]], label [[LLX_ATOMIC_EXIT369:%.*]], label [[LLX_ATOMIC_CONT370:%.*]]
// CHECK:       llx.atomic.cont370:
// CHECK-NEXT:    store i64 [[TMP3940]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT369]]
// CHECK:       llx.atomic.exit369:
// CHECK-NEXT:    [[TMP3942:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3943:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3944:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3942]], i64 [[TMP3943]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3945:%.*]] = extractvalue { i64, i1 } [[TMP3944]], 1
// CHECK-NEXT:    [[TMP3946:%.*]] = sext i1 [[TMP3945]] to i64
// CHECK-NEXT:    store i64 [[TMP3946]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3947:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3948:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3949:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3947]], i64 [[TMP3948]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3950:%.*]] = extractvalue { i64, i1 } [[TMP3949]], 1
// CHECK-NEXT:    [[TMP3951:%.*]] = sext i1 [[TMP3950]] to i64
// CHECK-NEXT:    store i64 [[TMP3951]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3952:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3953:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3954:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3952]], i64 [[TMP3953]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3955:%.*]] = extractvalue { i64, i1 } [[TMP3954]], 0
// CHECK-NEXT:    [[TMP3956:%.*]] = extractvalue { i64, i1 } [[TMP3954]], 1
// CHECK-NEXT:    br i1 [[TMP3956]], label [[LLX_ATOMIC_EXIT371:%.*]], label [[LLX_ATOMIC_CONT372:%.*]]
// CHECK:       llx.atomic.cont372:
// CHECK-NEXT:    store i64 [[TMP3955]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT371]]
// CHECK:       llx.atomic.exit371:
// CHECK-NEXT:    [[TMP3957:%.*]] = extractvalue { i64, i1 } [[TMP3954]], 1
// CHECK-NEXT:    [[TMP3958:%.*]] = sext i1 [[TMP3957]] to i64
// CHECK-NEXT:    store i64 [[TMP3958]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3959:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3960:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3961:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3959]], i64 [[TMP3960]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP3962:%.*]] = extractvalue { i64, i1 } [[TMP3961]], 0
// CHECK-NEXT:    [[TMP3963:%.*]] = extractvalue { i64, i1 } [[TMP3961]], 1
// CHECK-NEXT:    br i1 [[TMP3963]], label [[LLX_ATOMIC_EXIT373:%.*]], label [[LLX_ATOMIC_CONT374:%.*]]
// CHECK:       llx.atomic.cont374:
// CHECK-NEXT:    store i64 [[TMP3962]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT373]]
// CHECK:       llx.atomic.exit373:
// CHECK-NEXT:    [[TMP3964:%.*]] = extractvalue { i64, i1 } [[TMP3961]], 1
// CHECK-NEXT:    [[TMP3965:%.*]] = sext i1 [[TMP3964]] to i64
// CHECK-NEXT:    store i64 [[TMP3965]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP3966:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3967:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3966]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3967]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3968:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3969:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3968]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3969]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3970:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3971:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3970]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3971]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3972:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3973:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3972]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP3973]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3974:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3975:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3976:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3974]], i64 [[TMP3975]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3977:%.*]] = extractvalue { i64, i1 } [[TMP3976]], 0
// CHECK-NEXT:    store i64 [[TMP3977]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3978:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3979:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP3980:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3978]], i64 [[TMP3979]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP3981:%.*]] = extractvalue { i64, i1 } [[TMP3980]], 0
// CHECK-NEXT:    store i64 [[TMP3981]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3982:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3983:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3982]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3984:%.*]] = icmp sgt i64 [[TMP3983]], [[TMP3982]]
// CHECK-NEXT:    [[TMP3985:%.*]] = select i1 [[TMP3984]], i64 [[TMP3982]], i64 [[TMP3983]]
// CHECK-NEXT:    store i64 [[TMP3985]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3986:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3987:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3986]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3988:%.*]] = icmp slt i64 [[TMP3987]], [[TMP3986]]
// CHECK-NEXT:    [[TMP3989:%.*]] = select i1 [[TMP3988]], i64 [[TMP3986]], i64 [[TMP3987]]
// CHECK-NEXT:    store i64 [[TMP3989]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3990:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3991:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP3990]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3992:%.*]] = icmp slt i64 [[TMP3991]], [[TMP3990]]
// CHECK-NEXT:    [[TMP3993:%.*]] = select i1 [[TMP3992]], i64 [[TMP3990]], i64 [[TMP3991]]
// CHECK-NEXT:    store i64 [[TMP3993]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3994:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3995:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP3994]] acq_rel, align 8
// CHECK-NEXT:    [[TMP3996:%.*]] = icmp sgt i64 [[TMP3995]], [[TMP3994]]
// CHECK-NEXT:    [[TMP3997:%.*]] = select i1 [[TMP3996]], i64 [[TMP3994]], i64 [[TMP3995]]
// CHECK-NEXT:    store i64 [[TMP3997]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP3998:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3999:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4000:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP3998]], i64 [[TMP3999]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4001:%.*]] = extractvalue { i64, i1 } [[TMP4000]], 0
// CHECK-NEXT:    [[TMP4002:%.*]] = extractvalue { i64, i1 } [[TMP4000]], 1
// CHECK-NEXT:    [[TMP4003:%.*]] = select i1 [[TMP4002]], i64 [[TMP3998]], i64 [[TMP4001]]
// CHECK-NEXT:    store i64 [[TMP4003]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4004:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4005:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4006:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4004]], i64 [[TMP4005]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4007:%.*]] = extractvalue { i64, i1 } [[TMP4006]], 0
// CHECK-NEXT:    [[TMP4008:%.*]] = extractvalue { i64, i1 } [[TMP4006]], 1
// CHECK-NEXT:    [[TMP4009:%.*]] = select i1 [[TMP4008]], i64 [[TMP4004]], i64 [[TMP4007]]
// CHECK-NEXT:    store i64 [[TMP4009]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4010:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4011:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4012:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4010]], i64 [[TMP4011]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4013:%.*]] = extractvalue { i64, i1 } [[TMP4012]], 0
// CHECK-NEXT:    [[TMP4014:%.*]] = extractvalue { i64, i1 } [[TMP4012]], 1
// CHECK-NEXT:    br i1 [[TMP4014]], label [[LLX_ATOMIC_EXIT375:%.*]], label [[LLX_ATOMIC_CONT376:%.*]]
// CHECK:       llx.atomic.cont376:
// CHECK-NEXT:    store i64 [[TMP4013]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT375]]
// CHECK:       llx.atomic.exit375:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4015:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4016:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4017:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4015]], i64 [[TMP4016]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4018:%.*]] = extractvalue { i64, i1 } [[TMP4017]], 0
// CHECK-NEXT:    [[TMP4019:%.*]] = extractvalue { i64, i1 } [[TMP4017]], 1
// CHECK-NEXT:    br i1 [[TMP4019]], label [[LLX_ATOMIC_EXIT377:%.*]], label [[LLX_ATOMIC_CONT378:%.*]]
// CHECK:       llx.atomic.cont378:
// CHECK-NEXT:    store i64 [[TMP4018]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT377]]
// CHECK:       llx.atomic.exit377:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4020:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4021:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4022:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4020]], i64 [[TMP4021]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4023:%.*]] = extractvalue { i64, i1 } [[TMP4022]], 1
// CHECK-NEXT:    [[TMP4024:%.*]] = sext i1 [[TMP4023]] to i64
// CHECK-NEXT:    store i64 [[TMP4024]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4025:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4026:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4027:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4025]], i64 [[TMP4026]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4028:%.*]] = extractvalue { i64, i1 } [[TMP4027]], 1
// CHECK-NEXT:    [[TMP4029:%.*]] = sext i1 [[TMP4028]] to i64
// CHECK-NEXT:    store i64 [[TMP4029]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4030:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4031:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4032:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4030]], i64 [[TMP4031]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4033:%.*]] = extractvalue { i64, i1 } [[TMP4032]], 0
// CHECK-NEXT:    [[TMP4034:%.*]] = extractvalue { i64, i1 } [[TMP4032]], 1
// CHECK-NEXT:    br i1 [[TMP4034]], label [[LLX_ATOMIC_EXIT379:%.*]], label [[LLX_ATOMIC_CONT380:%.*]]
// CHECK:       llx.atomic.cont380:
// CHECK-NEXT:    store i64 [[TMP4033]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT379]]
// CHECK:       llx.atomic.exit379:
// CHECK-NEXT:    [[TMP4035:%.*]] = extractvalue { i64, i1 } [[TMP4032]], 1
// CHECK-NEXT:    [[TMP4036:%.*]] = sext i1 [[TMP4035]] to i64
// CHECK-NEXT:    store i64 [[TMP4036]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4037:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4038:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4039:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4037]], i64 [[TMP4038]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4040:%.*]] = extractvalue { i64, i1 } [[TMP4039]], 0
// CHECK-NEXT:    [[TMP4041:%.*]] = extractvalue { i64, i1 } [[TMP4039]], 1
// CHECK-NEXT:    br i1 [[TMP4041]], label [[LLX_ATOMIC_EXIT381:%.*]], label [[LLX_ATOMIC_CONT382:%.*]]
// CHECK:       llx.atomic.cont382:
// CHECK-NEXT:    store i64 [[TMP4040]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT381]]
// CHECK:       llx.atomic.exit381:
// CHECK-NEXT:    [[TMP4042:%.*]] = extractvalue { i64, i1 } [[TMP4039]], 1
// CHECK-NEXT:    [[TMP4043:%.*]] = sext i1 [[TMP4042]] to i64
// CHECK-NEXT:    store i64 [[TMP4043]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4044:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4045:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4044]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4045]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4046:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4047:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4046]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4047]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4048:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4049:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4048]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4049]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4050:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4051:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4050]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4051]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4052:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4053:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4054:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4052]], i64 [[TMP4053]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4055:%.*]] = extractvalue { i64, i1 } [[TMP4054]], 0
// CHECK-NEXT:    store i64 [[TMP4055]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4056:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4057:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4058:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4056]], i64 [[TMP4057]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4059:%.*]] = extractvalue { i64, i1 } [[TMP4058]], 0
// CHECK-NEXT:    store i64 [[TMP4059]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4060:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4061:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4060]] acquire, align 8
// CHECK-NEXT:    [[TMP4062:%.*]] = icmp sgt i64 [[TMP4061]], [[TMP4060]]
// CHECK-NEXT:    [[TMP4063:%.*]] = select i1 [[TMP4062]], i64 [[TMP4060]], i64 [[TMP4061]]
// CHECK-NEXT:    store i64 [[TMP4063]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4064:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4065:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4064]] acquire, align 8
// CHECK-NEXT:    [[TMP4066:%.*]] = icmp slt i64 [[TMP4065]], [[TMP4064]]
// CHECK-NEXT:    [[TMP4067:%.*]] = select i1 [[TMP4066]], i64 [[TMP4064]], i64 [[TMP4065]]
// CHECK-NEXT:    store i64 [[TMP4067]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4068:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4069:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4068]] acquire, align 8
// CHECK-NEXT:    [[TMP4070:%.*]] = icmp slt i64 [[TMP4069]], [[TMP4068]]
// CHECK-NEXT:    [[TMP4071:%.*]] = select i1 [[TMP4070]], i64 [[TMP4068]], i64 [[TMP4069]]
// CHECK-NEXT:    store i64 [[TMP4071]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4072:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4073:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4072]] acquire, align 8
// CHECK-NEXT:    [[TMP4074:%.*]] = icmp sgt i64 [[TMP4073]], [[TMP4072]]
// CHECK-NEXT:    [[TMP4075:%.*]] = select i1 [[TMP4074]], i64 [[TMP4072]], i64 [[TMP4073]]
// CHECK-NEXT:    store i64 [[TMP4075]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4076:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4077:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4078:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4076]], i64 [[TMP4077]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4079:%.*]] = extractvalue { i64, i1 } [[TMP4078]], 0
// CHECK-NEXT:    [[TMP4080:%.*]] = extractvalue { i64, i1 } [[TMP4078]], 1
// CHECK-NEXT:    [[TMP4081:%.*]] = select i1 [[TMP4080]], i64 [[TMP4076]], i64 [[TMP4079]]
// CHECK-NEXT:    store i64 [[TMP4081]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4082:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4083:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4084:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4082]], i64 [[TMP4083]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4085:%.*]] = extractvalue { i64, i1 } [[TMP4084]], 0
// CHECK-NEXT:    [[TMP4086:%.*]] = extractvalue { i64, i1 } [[TMP4084]], 1
// CHECK-NEXT:    [[TMP4087:%.*]] = select i1 [[TMP4086]], i64 [[TMP4082]], i64 [[TMP4085]]
// CHECK-NEXT:    store i64 [[TMP4087]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4088:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4089:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4090:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4088]], i64 [[TMP4089]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4091:%.*]] = extractvalue { i64, i1 } [[TMP4090]], 0
// CHECK-NEXT:    [[TMP4092:%.*]] = extractvalue { i64, i1 } [[TMP4090]], 1
// CHECK-NEXT:    br i1 [[TMP4092]], label [[LLX_ATOMIC_EXIT383:%.*]], label [[LLX_ATOMIC_CONT384:%.*]]
// CHECK:       llx.atomic.cont384:
// CHECK-NEXT:    store i64 [[TMP4091]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT383]]
// CHECK:       llx.atomic.exit383:
// CHECK-NEXT:    [[TMP4093:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4094:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4095:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4093]], i64 [[TMP4094]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4096:%.*]] = extractvalue { i64, i1 } [[TMP4095]], 0
// CHECK-NEXT:    [[TMP4097:%.*]] = extractvalue { i64, i1 } [[TMP4095]], 1
// CHECK-NEXT:    br i1 [[TMP4097]], label [[LLX_ATOMIC_EXIT385:%.*]], label [[LLX_ATOMIC_CONT386:%.*]]
// CHECK:       llx.atomic.cont386:
// CHECK-NEXT:    store i64 [[TMP4096]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT385]]
// CHECK:       llx.atomic.exit385:
// CHECK-NEXT:    [[TMP4098:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4099:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4100:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4098]], i64 [[TMP4099]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4101:%.*]] = extractvalue { i64, i1 } [[TMP4100]], 1
// CHECK-NEXT:    [[TMP4102:%.*]] = sext i1 [[TMP4101]] to i64
// CHECK-NEXT:    store i64 [[TMP4102]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4103:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4104:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4105:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4103]], i64 [[TMP4104]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4106:%.*]] = extractvalue { i64, i1 } [[TMP4105]], 1
// CHECK-NEXT:    [[TMP4107:%.*]] = sext i1 [[TMP4106]] to i64
// CHECK-NEXT:    store i64 [[TMP4107]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4108:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4109:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4110:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4108]], i64 [[TMP4109]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4111:%.*]] = extractvalue { i64, i1 } [[TMP4110]], 0
// CHECK-NEXT:    [[TMP4112:%.*]] = extractvalue { i64, i1 } [[TMP4110]], 1
// CHECK-NEXT:    br i1 [[TMP4112]], label [[LLX_ATOMIC_EXIT387:%.*]], label [[LLX_ATOMIC_CONT388:%.*]]
// CHECK:       llx.atomic.cont388:
// CHECK-NEXT:    store i64 [[TMP4111]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT387]]
// CHECK:       llx.atomic.exit387:
// CHECK-NEXT:    [[TMP4113:%.*]] = extractvalue { i64, i1 } [[TMP4110]], 1
// CHECK-NEXT:    [[TMP4114:%.*]] = sext i1 [[TMP4113]] to i64
// CHECK-NEXT:    store i64 [[TMP4114]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4115:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4116:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4117:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4115]], i64 [[TMP4116]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4118:%.*]] = extractvalue { i64, i1 } [[TMP4117]], 0
// CHECK-NEXT:    [[TMP4119:%.*]] = extractvalue { i64, i1 } [[TMP4117]], 1
// CHECK-NEXT:    br i1 [[TMP4119]], label [[LLX_ATOMIC_EXIT389:%.*]], label [[LLX_ATOMIC_CONT390:%.*]]
// CHECK:       llx.atomic.cont390:
// CHECK-NEXT:    store i64 [[TMP4118]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT389]]
// CHECK:       llx.atomic.exit389:
// CHECK-NEXT:    [[TMP4120:%.*]] = extractvalue { i64, i1 } [[TMP4117]], 1
// CHECK-NEXT:    [[TMP4121:%.*]] = sext i1 [[TMP4120]] to i64
// CHECK-NEXT:    store i64 [[TMP4121]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4122:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4123:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4122]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4123]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4124:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4125:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4124]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4125]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4126:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4127:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4126]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4127]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4128:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4129:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4128]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4129]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4130:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4131:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4132:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4130]], i64 [[TMP4131]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4133:%.*]] = extractvalue { i64, i1 } [[TMP4132]], 0
// CHECK-NEXT:    store i64 [[TMP4133]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4134:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4135:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4136:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4134]], i64 [[TMP4135]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4137:%.*]] = extractvalue { i64, i1 } [[TMP4136]], 0
// CHECK-NEXT:    store i64 [[TMP4137]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4138:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4139:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4138]] monotonic, align 8
// CHECK-NEXT:    [[TMP4140:%.*]] = icmp sgt i64 [[TMP4139]], [[TMP4138]]
// CHECK-NEXT:    [[TMP4141:%.*]] = select i1 [[TMP4140]], i64 [[TMP4138]], i64 [[TMP4139]]
// CHECK-NEXT:    store i64 [[TMP4141]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4142:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4143:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4142]] monotonic, align 8
// CHECK-NEXT:    [[TMP4144:%.*]] = icmp slt i64 [[TMP4143]], [[TMP4142]]
// CHECK-NEXT:    [[TMP4145:%.*]] = select i1 [[TMP4144]], i64 [[TMP4142]], i64 [[TMP4143]]
// CHECK-NEXT:    store i64 [[TMP4145]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4146:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4147:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4146]] monotonic, align 8
// CHECK-NEXT:    [[TMP4148:%.*]] = icmp slt i64 [[TMP4147]], [[TMP4146]]
// CHECK-NEXT:    [[TMP4149:%.*]] = select i1 [[TMP4148]], i64 [[TMP4146]], i64 [[TMP4147]]
// CHECK-NEXT:    store i64 [[TMP4149]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4150:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4151:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4150]] monotonic, align 8
// CHECK-NEXT:    [[TMP4152:%.*]] = icmp sgt i64 [[TMP4151]], [[TMP4150]]
// CHECK-NEXT:    [[TMP4153:%.*]] = select i1 [[TMP4152]], i64 [[TMP4150]], i64 [[TMP4151]]
// CHECK-NEXT:    store i64 [[TMP4153]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4154:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4155:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4156:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4154]], i64 [[TMP4155]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4157:%.*]] = extractvalue { i64, i1 } [[TMP4156]], 0
// CHECK-NEXT:    [[TMP4158:%.*]] = extractvalue { i64, i1 } [[TMP4156]], 1
// CHECK-NEXT:    [[TMP4159:%.*]] = select i1 [[TMP4158]], i64 [[TMP4154]], i64 [[TMP4157]]
// CHECK-NEXT:    store i64 [[TMP4159]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4160:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4161:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4162:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4160]], i64 [[TMP4161]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4163:%.*]] = extractvalue { i64, i1 } [[TMP4162]], 0
// CHECK-NEXT:    [[TMP4164:%.*]] = extractvalue { i64, i1 } [[TMP4162]], 1
// CHECK-NEXT:    [[TMP4165:%.*]] = select i1 [[TMP4164]], i64 [[TMP4160]], i64 [[TMP4163]]
// CHECK-NEXT:    store i64 [[TMP4165]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4166:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4167:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4168:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4166]], i64 [[TMP4167]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4169:%.*]] = extractvalue { i64, i1 } [[TMP4168]], 0
// CHECK-NEXT:    [[TMP4170:%.*]] = extractvalue { i64, i1 } [[TMP4168]], 1
// CHECK-NEXT:    br i1 [[TMP4170]], label [[LLX_ATOMIC_EXIT391:%.*]], label [[LLX_ATOMIC_CONT392:%.*]]
// CHECK:       llx.atomic.cont392:
// CHECK-NEXT:    store i64 [[TMP4169]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT391]]
// CHECK:       llx.atomic.exit391:
// CHECK-NEXT:    [[TMP4171:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4172:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4173:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4171]], i64 [[TMP4172]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4174:%.*]] = extractvalue { i64, i1 } [[TMP4173]], 0
// CHECK-NEXT:    [[TMP4175:%.*]] = extractvalue { i64, i1 } [[TMP4173]], 1
// CHECK-NEXT:    br i1 [[TMP4175]], label [[LLX_ATOMIC_EXIT393:%.*]], label [[LLX_ATOMIC_CONT394:%.*]]
// CHECK:       llx.atomic.cont394:
// CHECK-NEXT:    store i64 [[TMP4174]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT393]]
// CHECK:       llx.atomic.exit393:
// CHECK-NEXT:    [[TMP4176:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4177:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4178:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4176]], i64 [[TMP4177]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4179:%.*]] = extractvalue { i64, i1 } [[TMP4178]], 1
// CHECK-NEXT:    [[TMP4180:%.*]] = sext i1 [[TMP4179]] to i64
// CHECK-NEXT:    store i64 [[TMP4180]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4181:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4182:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4183:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4181]], i64 [[TMP4182]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4184:%.*]] = extractvalue { i64, i1 } [[TMP4183]], 1
// CHECK-NEXT:    [[TMP4185:%.*]] = sext i1 [[TMP4184]] to i64
// CHECK-NEXT:    store i64 [[TMP4185]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4186:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4187:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4188:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4186]], i64 [[TMP4187]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4189:%.*]] = extractvalue { i64, i1 } [[TMP4188]], 0
// CHECK-NEXT:    [[TMP4190:%.*]] = extractvalue { i64, i1 } [[TMP4188]], 1
// CHECK-NEXT:    br i1 [[TMP4190]], label [[LLX_ATOMIC_EXIT395:%.*]], label [[LLX_ATOMIC_CONT396:%.*]]
// CHECK:       llx.atomic.cont396:
// CHECK-NEXT:    store i64 [[TMP4189]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT395]]
// CHECK:       llx.atomic.exit395:
// CHECK-NEXT:    [[TMP4191:%.*]] = extractvalue { i64, i1 } [[TMP4188]], 1
// CHECK-NEXT:    [[TMP4192:%.*]] = sext i1 [[TMP4191]] to i64
// CHECK-NEXT:    store i64 [[TMP4192]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4193:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4194:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4195:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4193]], i64 [[TMP4194]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4196:%.*]] = extractvalue { i64, i1 } [[TMP4195]], 0
// CHECK-NEXT:    [[TMP4197:%.*]] = extractvalue { i64, i1 } [[TMP4195]], 1
// CHECK-NEXT:    br i1 [[TMP4197]], label [[LLX_ATOMIC_EXIT397:%.*]], label [[LLX_ATOMIC_CONT398:%.*]]
// CHECK:       llx.atomic.cont398:
// CHECK-NEXT:    store i64 [[TMP4196]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT397]]
// CHECK:       llx.atomic.exit397:
// CHECK-NEXT:    [[TMP4198:%.*]] = extractvalue { i64, i1 } [[TMP4195]], 1
// CHECK-NEXT:    [[TMP4199:%.*]] = sext i1 [[TMP4198]] to i64
// CHECK-NEXT:    store i64 [[TMP4199]], ptr [[LLR]], align 8
// CHECK-NEXT:    [[TMP4200:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4201:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4200]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4201]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4202:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4203:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4202]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4203]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4204:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4205:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4204]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4205]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4206:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4207:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4206]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4207]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4208:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4209:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4210:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4208]], i64 [[TMP4209]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4211:%.*]] = extractvalue { i64, i1 } [[TMP4210]], 0
// CHECK-NEXT:    store i64 [[TMP4211]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4212:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4213:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4214:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4212]], i64 [[TMP4213]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4215:%.*]] = extractvalue { i64, i1 } [[TMP4214]], 0
// CHECK-NEXT:    store i64 [[TMP4215]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4216:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4217:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4216]] release, align 8
// CHECK-NEXT:    [[TMP4218:%.*]] = icmp sgt i64 [[TMP4217]], [[TMP4216]]
// CHECK-NEXT:    [[TMP4219:%.*]] = select i1 [[TMP4218]], i64 [[TMP4216]], i64 [[TMP4217]]
// CHECK-NEXT:    store i64 [[TMP4219]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4220:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4221:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4220]] release, align 8
// CHECK-NEXT:    [[TMP4222:%.*]] = icmp slt i64 [[TMP4221]], [[TMP4220]]
// CHECK-NEXT:    [[TMP4223:%.*]] = select i1 [[TMP4222]], i64 [[TMP4220]], i64 [[TMP4221]]
// CHECK-NEXT:    store i64 [[TMP4223]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4224:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4225:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4224]] release, align 8
// CHECK-NEXT:    [[TMP4226:%.*]] = icmp slt i64 [[TMP4225]], [[TMP4224]]
// CHECK-NEXT:    [[TMP4227:%.*]] = select i1 [[TMP4226]], i64 [[TMP4224]], i64 [[TMP4225]]
// CHECK-NEXT:    store i64 [[TMP4227]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4228:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4229:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4228]] release, align 8
// CHECK-NEXT:    [[TMP4230:%.*]] = icmp sgt i64 [[TMP4229]], [[TMP4228]]
// CHECK-NEXT:    [[TMP4231:%.*]] = select i1 [[TMP4230]], i64 [[TMP4228]], i64 [[TMP4229]]
// CHECK-NEXT:    store i64 [[TMP4231]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4232:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4233:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4234:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4232]], i64 [[TMP4233]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4235:%.*]] = extractvalue { i64, i1 } [[TMP4234]], 0
// CHECK-NEXT:    [[TMP4236:%.*]] = extractvalue { i64, i1 } [[TMP4234]], 1
// CHECK-NEXT:    [[TMP4237:%.*]] = select i1 [[TMP4236]], i64 [[TMP4232]], i64 [[TMP4235]]
// CHECK-NEXT:    store i64 [[TMP4237]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4238:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4239:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4240:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4238]], i64 [[TMP4239]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4241:%.*]] = extractvalue { i64, i1 } [[TMP4240]], 0
// CHECK-NEXT:    [[TMP4242:%.*]] = extractvalue { i64, i1 } [[TMP4240]], 1
// CHECK-NEXT:    [[TMP4243:%.*]] = select i1 [[TMP4242]], i64 [[TMP4238]], i64 [[TMP4241]]
// CHECK-NEXT:    store i64 [[TMP4243]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4244:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4245:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4246:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4244]], i64 [[TMP4245]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4247:%.*]] = extractvalue { i64, i1 } [[TMP4246]], 0
// CHECK-NEXT:    [[TMP4248:%.*]] = extractvalue { i64, i1 } [[TMP4246]], 1
// CHECK-NEXT:    br i1 [[TMP4248]], label [[LLX_ATOMIC_EXIT399:%.*]], label [[LLX_ATOMIC_CONT400:%.*]]
// CHECK:       llx.atomic.cont400:
// CHECK-NEXT:    store i64 [[TMP4247]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT399]]
// CHECK:       llx.atomic.exit399:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4249:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4250:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4251:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4249]], i64 [[TMP4250]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4252:%.*]] = extractvalue { i64, i1 } [[TMP4251]], 0
// CHECK-NEXT:    [[TMP4253:%.*]] = extractvalue { i64, i1 } [[TMP4251]], 1
// CHECK-NEXT:    br i1 [[TMP4253]], label [[LLX_ATOMIC_EXIT401:%.*]], label [[LLX_ATOMIC_CONT402:%.*]]
// CHECK:       llx.atomic.cont402:
// CHECK-NEXT:    store i64 [[TMP4252]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT401]]
// CHECK:       llx.atomic.exit401:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4254:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4255:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4256:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4254]], i64 [[TMP4255]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4257:%.*]] = extractvalue { i64, i1 } [[TMP4256]], 1
// CHECK-NEXT:    [[TMP4258:%.*]] = sext i1 [[TMP4257]] to i64
// CHECK-NEXT:    store i64 [[TMP4258]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4259:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4260:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4261:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4259]], i64 [[TMP4260]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4262:%.*]] = extractvalue { i64, i1 } [[TMP4261]], 1
// CHECK-NEXT:    [[TMP4263:%.*]] = sext i1 [[TMP4262]] to i64
// CHECK-NEXT:    store i64 [[TMP4263]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4264:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4265:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4266:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4264]], i64 [[TMP4265]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4267:%.*]] = extractvalue { i64, i1 } [[TMP4266]], 0
// CHECK-NEXT:    [[TMP4268:%.*]] = extractvalue { i64, i1 } [[TMP4266]], 1
// CHECK-NEXT:    br i1 [[TMP4268]], label [[LLX_ATOMIC_EXIT403:%.*]], label [[LLX_ATOMIC_CONT404:%.*]]
// CHECK:       llx.atomic.cont404:
// CHECK-NEXT:    store i64 [[TMP4267]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT403]]
// CHECK:       llx.atomic.exit403:
// CHECK-NEXT:    [[TMP4269:%.*]] = extractvalue { i64, i1 } [[TMP4266]], 1
// CHECK-NEXT:    [[TMP4270:%.*]] = sext i1 [[TMP4269]] to i64
// CHECK-NEXT:    store i64 [[TMP4270]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4271:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4272:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4273:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4271]], i64 [[TMP4272]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4274:%.*]] = extractvalue { i64, i1 } [[TMP4273]], 0
// CHECK-NEXT:    [[TMP4275:%.*]] = extractvalue { i64, i1 } [[TMP4273]], 1
// CHECK-NEXT:    br i1 [[TMP4275]], label [[LLX_ATOMIC_EXIT405:%.*]], label [[LLX_ATOMIC_CONT406:%.*]]
// CHECK:       llx.atomic.cont406:
// CHECK-NEXT:    store i64 [[TMP4274]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT405]]
// CHECK:       llx.atomic.exit405:
// CHECK-NEXT:    [[TMP4276:%.*]] = extractvalue { i64, i1 } [[TMP4273]], 1
// CHECK-NEXT:    [[TMP4277:%.*]] = sext i1 [[TMP4276]] to i64
// CHECK-NEXT:    store i64 [[TMP4277]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4278:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4279:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4278]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4279]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4280:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4281:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4280]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4281]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4282:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4283:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4282]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4283]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4284:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4285:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4284]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4285]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4286:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4287:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4288:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4286]], i64 [[TMP4287]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4289:%.*]] = extractvalue { i64, i1 } [[TMP4288]], 0
// CHECK-NEXT:    store i64 [[TMP4289]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4290:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4291:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4292:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4290]], i64 [[TMP4291]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4293:%.*]] = extractvalue { i64, i1 } [[TMP4292]], 0
// CHECK-NEXT:    store i64 [[TMP4293]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4294:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4295:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4294]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4296:%.*]] = icmp sgt i64 [[TMP4295]], [[TMP4294]]
// CHECK-NEXT:    [[TMP4297:%.*]] = select i1 [[TMP4296]], i64 [[TMP4294]], i64 [[TMP4295]]
// CHECK-NEXT:    store i64 [[TMP4297]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4298:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4299:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4298]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4300:%.*]] = icmp slt i64 [[TMP4299]], [[TMP4298]]
// CHECK-NEXT:    [[TMP4301:%.*]] = select i1 [[TMP4300]], i64 [[TMP4298]], i64 [[TMP4299]]
// CHECK-NEXT:    store i64 [[TMP4301]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4302:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4303:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP4302]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4304:%.*]] = icmp slt i64 [[TMP4303]], [[TMP4302]]
// CHECK-NEXT:    [[TMP4305:%.*]] = select i1 [[TMP4304]], i64 [[TMP4302]], i64 [[TMP4303]]
// CHECK-NEXT:    store i64 [[TMP4305]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4306:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4307:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP4306]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4308:%.*]] = icmp sgt i64 [[TMP4307]], [[TMP4306]]
// CHECK-NEXT:    [[TMP4309:%.*]] = select i1 [[TMP4308]], i64 [[TMP4306]], i64 [[TMP4307]]
// CHECK-NEXT:    store i64 [[TMP4309]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4310:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4311:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4312:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4310]], i64 [[TMP4311]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4313:%.*]] = extractvalue { i64, i1 } [[TMP4312]], 0
// CHECK-NEXT:    [[TMP4314:%.*]] = extractvalue { i64, i1 } [[TMP4312]], 1
// CHECK-NEXT:    [[TMP4315:%.*]] = select i1 [[TMP4314]], i64 [[TMP4310]], i64 [[TMP4313]]
// CHECK-NEXT:    store i64 [[TMP4315]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4316:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4317:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4318:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4316]], i64 [[TMP4317]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4319:%.*]] = extractvalue { i64, i1 } [[TMP4318]], 0
// CHECK-NEXT:    [[TMP4320:%.*]] = extractvalue { i64, i1 } [[TMP4318]], 1
// CHECK-NEXT:    [[TMP4321:%.*]] = select i1 [[TMP4320]], i64 [[TMP4316]], i64 [[TMP4319]]
// CHECK-NEXT:    store i64 [[TMP4321]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4322:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4323:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4324:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4322]], i64 [[TMP4323]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4325:%.*]] = extractvalue { i64, i1 } [[TMP4324]], 0
// CHECK-NEXT:    [[TMP4326:%.*]] = extractvalue { i64, i1 } [[TMP4324]], 1
// CHECK-NEXT:    br i1 [[TMP4326]], label [[LLX_ATOMIC_EXIT407:%.*]], label [[LLX_ATOMIC_CONT408:%.*]]
// CHECK:       llx.atomic.cont408:
// CHECK-NEXT:    store i64 [[TMP4325]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT407]]
// CHECK:       llx.atomic.exit407:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4327:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4328:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4329:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4327]], i64 [[TMP4328]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4330:%.*]] = extractvalue { i64, i1 } [[TMP4329]], 0
// CHECK-NEXT:    [[TMP4331:%.*]] = extractvalue { i64, i1 } [[TMP4329]], 1
// CHECK-NEXT:    br i1 [[TMP4331]], label [[LLX_ATOMIC_EXIT409:%.*]], label [[LLX_ATOMIC_CONT410:%.*]]
// CHECK:       llx.atomic.cont410:
// CHECK-NEXT:    store i64 [[TMP4330]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT409]]
// CHECK:       llx.atomic.exit409:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4332:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4333:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4334:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4332]], i64 [[TMP4333]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4335:%.*]] = extractvalue { i64, i1 } [[TMP4334]], 1
// CHECK-NEXT:    [[TMP4336:%.*]] = sext i1 [[TMP4335]] to i64
// CHECK-NEXT:    store i64 [[TMP4336]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4337:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4338:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4339:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4337]], i64 [[TMP4338]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4340:%.*]] = extractvalue { i64, i1 } [[TMP4339]], 1
// CHECK-NEXT:    [[TMP4341:%.*]] = sext i1 [[TMP4340]] to i64
// CHECK-NEXT:    store i64 [[TMP4341]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4342:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4343:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4344:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4342]], i64 [[TMP4343]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4345:%.*]] = extractvalue { i64, i1 } [[TMP4344]], 0
// CHECK-NEXT:    [[TMP4346:%.*]] = extractvalue { i64, i1 } [[TMP4344]], 1
// CHECK-NEXT:    br i1 [[TMP4346]], label [[LLX_ATOMIC_EXIT411:%.*]], label [[LLX_ATOMIC_CONT412:%.*]]
// CHECK:       llx.atomic.cont412:
// CHECK-NEXT:    store i64 [[TMP4345]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT411]]
// CHECK:       llx.atomic.exit411:
// CHECK-NEXT:    [[TMP4347:%.*]] = extractvalue { i64, i1 } [[TMP4344]], 1
// CHECK-NEXT:    [[TMP4348:%.*]] = sext i1 [[TMP4347]] to i64
// CHECK-NEXT:    store i64 [[TMP4348]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4349:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP4350:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP4351:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4349]], i64 [[TMP4350]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4352:%.*]] = extractvalue { i64, i1 } [[TMP4351]], 0
// CHECK-NEXT:    [[TMP4353:%.*]] = extractvalue { i64, i1 } [[TMP4351]], 1
// CHECK-NEXT:    br i1 [[TMP4353]], label [[LLX_ATOMIC_EXIT413:%.*]], label [[LLX_ATOMIC_CONT414:%.*]]
// CHECK:       llx.atomic.cont414:
// CHECK-NEXT:    store i64 [[TMP4352]], ptr [[LLV]], align 8
// CHECK-NEXT:    br label [[LLX_ATOMIC_EXIT413]]
// CHECK:       llx.atomic.exit413:
// CHECK-NEXT:    [[TMP4354:%.*]] = extractvalue { i64, i1 } [[TMP4351]], 1
// CHECK-NEXT:    [[TMP4355:%.*]] = sext i1 [[TMP4354]] to i64
// CHECK-NEXT:    store i64 [[TMP4355]], ptr [[LLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4356:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4357:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4356]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4357]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4358:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4359:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4358]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4359]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4360:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4361:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4360]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4361]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4362:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4363:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4362]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4363]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4364:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4365:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4366:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4364]], i64 [[TMP4365]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4367:%.*]] = extractvalue { i64, i1 } [[TMP4366]], 0
// CHECK-NEXT:    store i64 [[TMP4367]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4368:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4369:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4370:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4368]], i64 [[TMP4369]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4371:%.*]] = extractvalue { i64, i1 } [[TMP4370]], 0
// CHECK-NEXT:    store i64 [[TMP4371]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4372:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4373:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4372]] monotonic, align 8
// CHECK-NEXT:    [[TMP4374:%.*]] = icmp ugt i64 [[TMP4373]], [[TMP4372]]
// CHECK-NEXT:    [[TMP4375:%.*]] = select i1 [[TMP4374]], i64 [[TMP4372]], i64 [[TMP4373]]
// CHECK-NEXT:    store i64 [[TMP4375]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4376:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4377:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4376]] monotonic, align 8
// CHECK-NEXT:    [[TMP4378:%.*]] = icmp ult i64 [[TMP4377]], [[TMP4376]]
// CHECK-NEXT:    [[TMP4379:%.*]] = select i1 [[TMP4378]], i64 [[TMP4376]], i64 [[TMP4377]]
// CHECK-NEXT:    store i64 [[TMP4379]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4380:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4381:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4380]] monotonic, align 8
// CHECK-NEXT:    [[TMP4382:%.*]] = icmp ult i64 [[TMP4381]], [[TMP4380]]
// CHECK-NEXT:    [[TMP4383:%.*]] = select i1 [[TMP4382]], i64 [[TMP4380]], i64 [[TMP4381]]
// CHECK-NEXT:    store i64 [[TMP4383]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4384:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4385:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4384]] monotonic, align 8
// CHECK-NEXT:    [[TMP4386:%.*]] = icmp ugt i64 [[TMP4385]], [[TMP4384]]
// CHECK-NEXT:    [[TMP4387:%.*]] = select i1 [[TMP4386]], i64 [[TMP4384]], i64 [[TMP4385]]
// CHECK-NEXT:    store i64 [[TMP4387]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4388:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4389:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4390:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4388]], i64 [[TMP4389]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4391:%.*]] = extractvalue { i64, i1 } [[TMP4390]], 0
// CHECK-NEXT:    [[TMP4392:%.*]] = extractvalue { i64, i1 } [[TMP4390]], 1
// CHECK-NEXT:    [[TMP4393:%.*]] = select i1 [[TMP4392]], i64 [[TMP4388]], i64 [[TMP4391]]
// CHECK-NEXT:    store i64 [[TMP4393]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4394:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4395:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4396:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4394]], i64 [[TMP4395]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4397:%.*]] = extractvalue { i64, i1 } [[TMP4396]], 0
// CHECK-NEXT:    [[TMP4398:%.*]] = extractvalue { i64, i1 } [[TMP4396]], 1
// CHECK-NEXT:    [[TMP4399:%.*]] = select i1 [[TMP4398]], i64 [[TMP4394]], i64 [[TMP4397]]
// CHECK-NEXT:    store i64 [[TMP4399]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4400:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4401:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4402:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4400]], i64 [[TMP4401]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4403:%.*]] = extractvalue { i64, i1 } [[TMP4402]], 0
// CHECK-NEXT:    [[TMP4404:%.*]] = extractvalue { i64, i1 } [[TMP4402]], 1
// CHECK-NEXT:    br i1 [[TMP4404]], label [[ULLX_ATOMIC_EXIT:%.*]], label [[ULLX_ATOMIC_CONT:%.*]]
// CHECK:       ullx.atomic.cont:
// CHECK-NEXT:    store i64 [[TMP4403]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT]]
// CHECK:       ullx.atomic.exit:
// CHECK-NEXT:    [[TMP4405:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4406:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4407:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4405]], i64 [[TMP4406]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4408:%.*]] = extractvalue { i64, i1 } [[TMP4407]], 0
// CHECK-NEXT:    [[TMP4409:%.*]] = extractvalue { i64, i1 } [[TMP4407]], 1
// CHECK-NEXT:    br i1 [[TMP4409]], label [[ULLX_ATOMIC_EXIT415:%.*]], label [[ULLX_ATOMIC_CONT416:%.*]]
// CHECK:       ullx.atomic.cont416:
// CHECK-NEXT:    store i64 [[TMP4408]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT415]]
// CHECK:       ullx.atomic.exit415:
// CHECK-NEXT:    [[TMP4410:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4411:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4412:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4410]], i64 [[TMP4411]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4413:%.*]] = extractvalue { i64, i1 } [[TMP4412]], 1
// CHECK-NEXT:    [[TMP4414:%.*]] = zext i1 [[TMP4413]] to i64
// CHECK-NEXT:    store i64 [[TMP4414]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4415:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4416:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4417:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4415]], i64 [[TMP4416]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4418:%.*]] = extractvalue { i64, i1 } [[TMP4417]], 1
// CHECK-NEXT:    [[TMP4419:%.*]] = zext i1 [[TMP4418]] to i64
// CHECK-NEXT:    store i64 [[TMP4419]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4420:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4421:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4422:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4420]], i64 [[TMP4421]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4423:%.*]] = extractvalue { i64, i1 } [[TMP4422]], 0
// CHECK-NEXT:    [[TMP4424:%.*]] = extractvalue { i64, i1 } [[TMP4422]], 1
// CHECK-NEXT:    br i1 [[TMP4424]], label [[ULLX_ATOMIC_EXIT417:%.*]], label [[ULLX_ATOMIC_CONT418:%.*]]
// CHECK:       ullx.atomic.cont418:
// CHECK-NEXT:    store i64 [[TMP4423]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT417]]
// CHECK:       ullx.atomic.exit417:
// CHECK-NEXT:    [[TMP4425:%.*]] = extractvalue { i64, i1 } [[TMP4422]], 1
// CHECK-NEXT:    [[TMP4426:%.*]] = zext i1 [[TMP4425]] to i64
// CHECK-NEXT:    store i64 [[TMP4426]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4427:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4428:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4429:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4427]], i64 [[TMP4428]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4430:%.*]] = extractvalue { i64, i1 } [[TMP4429]], 0
// CHECK-NEXT:    [[TMP4431:%.*]] = extractvalue { i64, i1 } [[TMP4429]], 1
// CHECK-NEXT:    br i1 [[TMP4431]], label [[ULLX_ATOMIC_EXIT419:%.*]], label [[ULLX_ATOMIC_CONT420:%.*]]
// CHECK:       ullx.atomic.cont420:
// CHECK-NEXT:    store i64 [[TMP4430]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT419]]
// CHECK:       ullx.atomic.exit419:
// CHECK-NEXT:    [[TMP4432:%.*]] = extractvalue { i64, i1 } [[TMP4429]], 1
// CHECK-NEXT:    [[TMP4433:%.*]] = zext i1 [[TMP4432]] to i64
// CHECK-NEXT:    store i64 [[TMP4433]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4434:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4435:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4434]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP4435]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4436:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4437:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4436]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP4437]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4438:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4439:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4438]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP4439]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4440:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4441:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4440]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP4441]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4442:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4443:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4444:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4442]], i64 [[TMP4443]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4445:%.*]] = extractvalue { i64, i1 } [[TMP4444]], 0
// CHECK-NEXT:    store i64 [[TMP4445]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4446:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4447:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4448:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4446]], i64 [[TMP4447]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4449:%.*]] = extractvalue { i64, i1 } [[TMP4448]], 0
// CHECK-NEXT:    store i64 [[TMP4449]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4450:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4451:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4450]] acq_rel, align 8
// CHECK-NEXT:    [[TMP4452:%.*]] = icmp ugt i64 [[TMP4451]], [[TMP4450]]
// CHECK-NEXT:    [[TMP4453:%.*]] = select i1 [[TMP4452]], i64 [[TMP4450]], i64 [[TMP4451]]
// CHECK-NEXT:    store i64 [[TMP4453]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4454:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4455:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4454]] acq_rel, align 8
// CHECK-NEXT:    [[TMP4456:%.*]] = icmp ult i64 [[TMP4455]], [[TMP4454]]
// CHECK-NEXT:    [[TMP4457:%.*]] = select i1 [[TMP4456]], i64 [[TMP4454]], i64 [[TMP4455]]
// CHECK-NEXT:    store i64 [[TMP4457]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4458:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4459:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4458]] acq_rel, align 8
// CHECK-NEXT:    [[TMP4460:%.*]] = icmp ult i64 [[TMP4459]], [[TMP4458]]
// CHECK-NEXT:    [[TMP4461:%.*]] = select i1 [[TMP4460]], i64 [[TMP4458]], i64 [[TMP4459]]
// CHECK-NEXT:    store i64 [[TMP4461]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4462:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4463:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4462]] acq_rel, align 8
// CHECK-NEXT:    [[TMP4464:%.*]] = icmp ugt i64 [[TMP4463]], [[TMP4462]]
// CHECK-NEXT:    [[TMP4465:%.*]] = select i1 [[TMP4464]], i64 [[TMP4462]], i64 [[TMP4463]]
// CHECK-NEXT:    store i64 [[TMP4465]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4466:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4467:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4468:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4466]], i64 [[TMP4467]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4469:%.*]] = extractvalue { i64, i1 } [[TMP4468]], 0
// CHECK-NEXT:    [[TMP4470:%.*]] = extractvalue { i64, i1 } [[TMP4468]], 1
// CHECK-NEXT:    [[TMP4471:%.*]] = select i1 [[TMP4470]], i64 [[TMP4466]], i64 [[TMP4469]]
// CHECK-NEXT:    store i64 [[TMP4471]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4472:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4473:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4474:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4472]], i64 [[TMP4473]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4475:%.*]] = extractvalue { i64, i1 } [[TMP4474]], 0
// CHECK-NEXT:    [[TMP4476:%.*]] = extractvalue { i64, i1 } [[TMP4474]], 1
// CHECK-NEXT:    [[TMP4477:%.*]] = select i1 [[TMP4476]], i64 [[TMP4472]], i64 [[TMP4475]]
// CHECK-NEXT:    store i64 [[TMP4477]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4478:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4479:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4480:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4478]], i64 [[TMP4479]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4481:%.*]] = extractvalue { i64, i1 } [[TMP4480]], 0
// CHECK-NEXT:    [[TMP4482:%.*]] = extractvalue { i64, i1 } [[TMP4480]], 1
// CHECK-NEXT:    br i1 [[TMP4482]], label [[ULLX_ATOMIC_EXIT421:%.*]], label [[ULLX_ATOMIC_CONT422:%.*]]
// CHECK:       ullx.atomic.cont422:
// CHECK-NEXT:    store i64 [[TMP4481]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT421]]
// CHECK:       ullx.atomic.exit421:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4483:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4484:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4485:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4483]], i64 [[TMP4484]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4486:%.*]] = extractvalue { i64, i1 } [[TMP4485]], 0
// CHECK-NEXT:    [[TMP4487:%.*]] = extractvalue { i64, i1 } [[TMP4485]], 1
// CHECK-NEXT:    br i1 [[TMP4487]], label [[ULLX_ATOMIC_EXIT423:%.*]], label [[ULLX_ATOMIC_CONT424:%.*]]
// CHECK:       ullx.atomic.cont424:
// CHECK-NEXT:    store i64 [[TMP4486]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT423]]
// CHECK:       ullx.atomic.exit423:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4488:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4489:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4490:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4488]], i64 [[TMP4489]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4491:%.*]] = extractvalue { i64, i1 } [[TMP4490]], 1
// CHECK-NEXT:    [[TMP4492:%.*]] = zext i1 [[TMP4491]] to i64
// CHECK-NEXT:    store i64 [[TMP4492]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4493:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4494:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4495:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4493]], i64 [[TMP4494]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4496:%.*]] = extractvalue { i64, i1 } [[TMP4495]], 1
// CHECK-NEXT:    [[TMP4497:%.*]] = zext i1 [[TMP4496]] to i64
// CHECK-NEXT:    store i64 [[TMP4497]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4498:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4499:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4500:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4498]], i64 [[TMP4499]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4501:%.*]] = extractvalue { i64, i1 } [[TMP4500]], 0
// CHECK-NEXT:    [[TMP4502:%.*]] = extractvalue { i64, i1 } [[TMP4500]], 1
// CHECK-NEXT:    br i1 [[TMP4502]], label [[ULLX_ATOMIC_EXIT425:%.*]], label [[ULLX_ATOMIC_CONT426:%.*]]
// CHECK:       ullx.atomic.cont426:
// CHECK-NEXT:    store i64 [[TMP4501]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT425]]
// CHECK:       ullx.atomic.exit425:
// CHECK-NEXT:    [[TMP4503:%.*]] = extractvalue { i64, i1 } [[TMP4500]], 1
// CHECK-NEXT:    [[TMP4504:%.*]] = zext i1 [[TMP4503]] to i64
// CHECK-NEXT:    store i64 [[TMP4504]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4505:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4506:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4507:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4505]], i64 [[TMP4506]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP4508:%.*]] = extractvalue { i64, i1 } [[TMP4507]], 0
// CHECK-NEXT:    [[TMP4509:%.*]] = extractvalue { i64, i1 } [[TMP4507]], 1
// CHECK-NEXT:    br i1 [[TMP4509]], label [[ULLX_ATOMIC_EXIT427:%.*]], label [[ULLX_ATOMIC_CONT428:%.*]]
// CHECK:       ullx.atomic.cont428:
// CHECK-NEXT:    store i64 [[TMP4508]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT427]]
// CHECK:       ullx.atomic.exit427:
// CHECK-NEXT:    [[TMP4510:%.*]] = extractvalue { i64, i1 } [[TMP4507]], 1
// CHECK-NEXT:    [[TMP4511:%.*]] = zext i1 [[TMP4510]] to i64
// CHECK-NEXT:    store i64 [[TMP4511]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4512:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4513:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4512]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4513]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4514:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4515:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4514]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4515]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4516:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4517:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4516]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4517]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4518:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4519:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4518]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP4519]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4520:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4521:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4522:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4520]], i64 [[TMP4521]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4523:%.*]] = extractvalue { i64, i1 } [[TMP4522]], 0
// CHECK-NEXT:    store i64 [[TMP4523]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4524:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4525:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4526:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4524]], i64 [[TMP4525]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4527:%.*]] = extractvalue { i64, i1 } [[TMP4526]], 0
// CHECK-NEXT:    store i64 [[TMP4527]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4528:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4529:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4528]] acquire, align 8
// CHECK-NEXT:    [[TMP4530:%.*]] = icmp ugt i64 [[TMP4529]], [[TMP4528]]
// CHECK-NEXT:    [[TMP4531:%.*]] = select i1 [[TMP4530]], i64 [[TMP4528]], i64 [[TMP4529]]
// CHECK-NEXT:    store i64 [[TMP4531]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4532:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4533:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4532]] acquire, align 8
// CHECK-NEXT:    [[TMP4534:%.*]] = icmp ult i64 [[TMP4533]], [[TMP4532]]
// CHECK-NEXT:    [[TMP4535:%.*]] = select i1 [[TMP4534]], i64 [[TMP4532]], i64 [[TMP4533]]
// CHECK-NEXT:    store i64 [[TMP4535]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4536:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4537:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4536]] acquire, align 8
// CHECK-NEXT:    [[TMP4538:%.*]] = icmp ult i64 [[TMP4537]], [[TMP4536]]
// CHECK-NEXT:    [[TMP4539:%.*]] = select i1 [[TMP4538]], i64 [[TMP4536]], i64 [[TMP4537]]
// CHECK-NEXT:    store i64 [[TMP4539]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4540:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4541:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4540]] acquire, align 8
// CHECK-NEXT:    [[TMP4542:%.*]] = icmp ugt i64 [[TMP4541]], [[TMP4540]]
// CHECK-NEXT:    [[TMP4543:%.*]] = select i1 [[TMP4542]], i64 [[TMP4540]], i64 [[TMP4541]]
// CHECK-NEXT:    store i64 [[TMP4543]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4544:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4545:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4546:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4544]], i64 [[TMP4545]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4547:%.*]] = extractvalue { i64, i1 } [[TMP4546]], 0
// CHECK-NEXT:    [[TMP4548:%.*]] = extractvalue { i64, i1 } [[TMP4546]], 1
// CHECK-NEXT:    [[TMP4549:%.*]] = select i1 [[TMP4548]], i64 [[TMP4544]], i64 [[TMP4547]]
// CHECK-NEXT:    store i64 [[TMP4549]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4550:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4551:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4552:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4550]], i64 [[TMP4551]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4553:%.*]] = extractvalue { i64, i1 } [[TMP4552]], 0
// CHECK-NEXT:    [[TMP4554:%.*]] = extractvalue { i64, i1 } [[TMP4552]], 1
// CHECK-NEXT:    [[TMP4555:%.*]] = select i1 [[TMP4554]], i64 [[TMP4550]], i64 [[TMP4553]]
// CHECK-NEXT:    store i64 [[TMP4555]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4556:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4557:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4558:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4556]], i64 [[TMP4557]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4559:%.*]] = extractvalue { i64, i1 } [[TMP4558]], 0
// CHECK-NEXT:    [[TMP4560:%.*]] = extractvalue { i64, i1 } [[TMP4558]], 1
// CHECK-NEXT:    br i1 [[TMP4560]], label [[ULLX_ATOMIC_EXIT429:%.*]], label [[ULLX_ATOMIC_CONT430:%.*]]
// CHECK:       ullx.atomic.cont430:
// CHECK-NEXT:    store i64 [[TMP4559]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT429]]
// CHECK:       ullx.atomic.exit429:
// CHECK-NEXT:    [[TMP4561:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4562:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4563:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4561]], i64 [[TMP4562]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4564:%.*]] = extractvalue { i64, i1 } [[TMP4563]], 0
// CHECK-NEXT:    [[TMP4565:%.*]] = extractvalue { i64, i1 } [[TMP4563]], 1
// CHECK-NEXT:    br i1 [[TMP4565]], label [[ULLX_ATOMIC_EXIT431:%.*]], label [[ULLX_ATOMIC_CONT432:%.*]]
// CHECK:       ullx.atomic.cont432:
// CHECK-NEXT:    store i64 [[TMP4564]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT431]]
// CHECK:       ullx.atomic.exit431:
// CHECK-NEXT:    [[TMP4566:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4567:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4568:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4566]], i64 [[TMP4567]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4569:%.*]] = extractvalue { i64, i1 } [[TMP4568]], 1
// CHECK-NEXT:    [[TMP4570:%.*]] = zext i1 [[TMP4569]] to i64
// CHECK-NEXT:    store i64 [[TMP4570]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4571:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4572:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4573:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4571]], i64 [[TMP4572]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4574:%.*]] = extractvalue { i64, i1 } [[TMP4573]], 1
// CHECK-NEXT:    [[TMP4575:%.*]] = zext i1 [[TMP4574]] to i64
// CHECK-NEXT:    store i64 [[TMP4575]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4576:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4577:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4578:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4576]], i64 [[TMP4577]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4579:%.*]] = extractvalue { i64, i1 } [[TMP4578]], 0
// CHECK-NEXT:    [[TMP4580:%.*]] = extractvalue { i64, i1 } [[TMP4578]], 1
// CHECK-NEXT:    br i1 [[TMP4580]], label [[ULLX_ATOMIC_EXIT433:%.*]], label [[ULLX_ATOMIC_CONT434:%.*]]
// CHECK:       ullx.atomic.cont434:
// CHECK-NEXT:    store i64 [[TMP4579]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT433]]
// CHECK:       ullx.atomic.exit433:
// CHECK-NEXT:    [[TMP4581:%.*]] = extractvalue { i64, i1 } [[TMP4578]], 1
// CHECK-NEXT:    [[TMP4582:%.*]] = zext i1 [[TMP4581]] to i64
// CHECK-NEXT:    store i64 [[TMP4582]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4583:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4584:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4585:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4583]], i64 [[TMP4584]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP4586:%.*]] = extractvalue { i64, i1 } [[TMP4585]], 0
// CHECK-NEXT:    [[TMP4587:%.*]] = extractvalue { i64, i1 } [[TMP4585]], 1
// CHECK-NEXT:    br i1 [[TMP4587]], label [[ULLX_ATOMIC_EXIT435:%.*]], label [[ULLX_ATOMIC_CONT436:%.*]]
// CHECK:       ullx.atomic.cont436:
// CHECK-NEXT:    store i64 [[TMP4586]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT435]]
// CHECK:       ullx.atomic.exit435:
// CHECK-NEXT:    [[TMP4588:%.*]] = extractvalue { i64, i1 } [[TMP4585]], 1
// CHECK-NEXT:    [[TMP4589:%.*]] = zext i1 [[TMP4588]] to i64
// CHECK-NEXT:    store i64 [[TMP4589]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4590:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4591:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4590]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4591]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4592:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4593:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4592]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4593]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4594:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4595:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4594]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4595]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4596:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4597:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4596]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP4597]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4598:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4599:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4600:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4598]], i64 [[TMP4599]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4601:%.*]] = extractvalue { i64, i1 } [[TMP4600]], 0
// CHECK-NEXT:    store i64 [[TMP4601]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4602:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4603:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4604:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4602]], i64 [[TMP4603]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4605:%.*]] = extractvalue { i64, i1 } [[TMP4604]], 0
// CHECK-NEXT:    store i64 [[TMP4605]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4606:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4607:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4606]] monotonic, align 8
// CHECK-NEXT:    [[TMP4608:%.*]] = icmp ugt i64 [[TMP4607]], [[TMP4606]]
// CHECK-NEXT:    [[TMP4609:%.*]] = select i1 [[TMP4608]], i64 [[TMP4606]], i64 [[TMP4607]]
// CHECK-NEXT:    store i64 [[TMP4609]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4610:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4611:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4610]] monotonic, align 8
// CHECK-NEXT:    [[TMP4612:%.*]] = icmp ult i64 [[TMP4611]], [[TMP4610]]
// CHECK-NEXT:    [[TMP4613:%.*]] = select i1 [[TMP4612]], i64 [[TMP4610]], i64 [[TMP4611]]
// CHECK-NEXT:    store i64 [[TMP4613]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4614:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4615:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4614]] monotonic, align 8
// CHECK-NEXT:    [[TMP4616:%.*]] = icmp ult i64 [[TMP4615]], [[TMP4614]]
// CHECK-NEXT:    [[TMP4617:%.*]] = select i1 [[TMP4616]], i64 [[TMP4614]], i64 [[TMP4615]]
// CHECK-NEXT:    store i64 [[TMP4617]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4618:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4619:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4618]] monotonic, align 8
// CHECK-NEXT:    [[TMP4620:%.*]] = icmp ugt i64 [[TMP4619]], [[TMP4618]]
// CHECK-NEXT:    [[TMP4621:%.*]] = select i1 [[TMP4620]], i64 [[TMP4618]], i64 [[TMP4619]]
// CHECK-NEXT:    store i64 [[TMP4621]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4622:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4623:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4624:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4622]], i64 [[TMP4623]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4625:%.*]] = extractvalue { i64, i1 } [[TMP4624]], 0
// CHECK-NEXT:    [[TMP4626:%.*]] = extractvalue { i64, i1 } [[TMP4624]], 1
// CHECK-NEXT:    [[TMP4627:%.*]] = select i1 [[TMP4626]], i64 [[TMP4622]], i64 [[TMP4625]]
// CHECK-NEXT:    store i64 [[TMP4627]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4628:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4629:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4630:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4628]], i64 [[TMP4629]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4631:%.*]] = extractvalue { i64, i1 } [[TMP4630]], 0
// CHECK-NEXT:    [[TMP4632:%.*]] = extractvalue { i64, i1 } [[TMP4630]], 1
// CHECK-NEXT:    [[TMP4633:%.*]] = select i1 [[TMP4632]], i64 [[TMP4628]], i64 [[TMP4631]]
// CHECK-NEXT:    store i64 [[TMP4633]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4634:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4635:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4636:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4634]], i64 [[TMP4635]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4637:%.*]] = extractvalue { i64, i1 } [[TMP4636]], 0
// CHECK-NEXT:    [[TMP4638:%.*]] = extractvalue { i64, i1 } [[TMP4636]], 1
// CHECK-NEXT:    br i1 [[TMP4638]], label [[ULLX_ATOMIC_EXIT437:%.*]], label [[ULLX_ATOMIC_CONT438:%.*]]
// CHECK:       ullx.atomic.cont438:
// CHECK-NEXT:    store i64 [[TMP4637]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT437]]
// CHECK:       ullx.atomic.exit437:
// CHECK-NEXT:    [[TMP4639:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4640:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4641:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4639]], i64 [[TMP4640]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4642:%.*]] = extractvalue { i64, i1 } [[TMP4641]], 0
// CHECK-NEXT:    [[TMP4643:%.*]] = extractvalue { i64, i1 } [[TMP4641]], 1
// CHECK-NEXT:    br i1 [[TMP4643]], label [[ULLX_ATOMIC_EXIT439:%.*]], label [[ULLX_ATOMIC_CONT440:%.*]]
// CHECK:       ullx.atomic.cont440:
// CHECK-NEXT:    store i64 [[TMP4642]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT439]]
// CHECK:       ullx.atomic.exit439:
// CHECK-NEXT:    [[TMP4644:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4645:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4646:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4644]], i64 [[TMP4645]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4647:%.*]] = extractvalue { i64, i1 } [[TMP4646]], 1
// CHECK-NEXT:    [[TMP4648:%.*]] = zext i1 [[TMP4647]] to i64
// CHECK-NEXT:    store i64 [[TMP4648]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4649:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4650:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4651:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4649]], i64 [[TMP4650]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4652:%.*]] = extractvalue { i64, i1 } [[TMP4651]], 1
// CHECK-NEXT:    [[TMP4653:%.*]] = zext i1 [[TMP4652]] to i64
// CHECK-NEXT:    store i64 [[TMP4653]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4654:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4655:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4656:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4654]], i64 [[TMP4655]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4657:%.*]] = extractvalue { i64, i1 } [[TMP4656]], 0
// CHECK-NEXT:    [[TMP4658:%.*]] = extractvalue { i64, i1 } [[TMP4656]], 1
// CHECK-NEXT:    br i1 [[TMP4658]], label [[ULLX_ATOMIC_EXIT441:%.*]], label [[ULLX_ATOMIC_CONT442:%.*]]
// CHECK:       ullx.atomic.cont442:
// CHECK-NEXT:    store i64 [[TMP4657]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT441]]
// CHECK:       ullx.atomic.exit441:
// CHECK-NEXT:    [[TMP4659:%.*]] = extractvalue { i64, i1 } [[TMP4656]], 1
// CHECK-NEXT:    [[TMP4660:%.*]] = zext i1 [[TMP4659]] to i64
// CHECK-NEXT:    store i64 [[TMP4660]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4661:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4662:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4663:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4661]], i64 [[TMP4662]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP4664:%.*]] = extractvalue { i64, i1 } [[TMP4663]], 0
// CHECK-NEXT:    [[TMP4665:%.*]] = extractvalue { i64, i1 } [[TMP4663]], 1
// CHECK-NEXT:    br i1 [[TMP4665]], label [[ULLX_ATOMIC_EXIT443:%.*]], label [[ULLX_ATOMIC_CONT444:%.*]]
// CHECK:       ullx.atomic.cont444:
// CHECK-NEXT:    store i64 [[TMP4664]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT443]]
// CHECK:       ullx.atomic.exit443:
// CHECK-NEXT:    [[TMP4666:%.*]] = extractvalue { i64, i1 } [[TMP4663]], 1
// CHECK-NEXT:    [[TMP4667:%.*]] = zext i1 [[TMP4666]] to i64
// CHECK-NEXT:    store i64 [[TMP4667]], ptr [[ULLR]], align 8
// CHECK-NEXT:    [[TMP4668:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4669:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4668]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4669]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4670:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4671:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4670]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4671]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4672:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4673:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4672]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4673]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4674:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4675:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4674]] release, align 8
// CHECK-NEXT:    store i64 [[TMP4675]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4676:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4677:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4678:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4676]], i64 [[TMP4677]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4679:%.*]] = extractvalue { i64, i1 } [[TMP4678]], 0
// CHECK-NEXT:    store i64 [[TMP4679]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4680:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4681:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4682:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4680]], i64 [[TMP4681]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4683:%.*]] = extractvalue { i64, i1 } [[TMP4682]], 0
// CHECK-NEXT:    store i64 [[TMP4683]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4684:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4685:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4684]] release, align 8
// CHECK-NEXT:    [[TMP4686:%.*]] = icmp ugt i64 [[TMP4685]], [[TMP4684]]
// CHECK-NEXT:    [[TMP4687:%.*]] = select i1 [[TMP4686]], i64 [[TMP4684]], i64 [[TMP4685]]
// CHECK-NEXT:    store i64 [[TMP4687]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4688:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4689:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4688]] release, align 8
// CHECK-NEXT:    [[TMP4690:%.*]] = icmp ult i64 [[TMP4689]], [[TMP4688]]
// CHECK-NEXT:    [[TMP4691:%.*]] = select i1 [[TMP4690]], i64 [[TMP4688]], i64 [[TMP4689]]
// CHECK-NEXT:    store i64 [[TMP4691]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4692:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4693:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4692]] release, align 8
// CHECK-NEXT:    [[TMP4694:%.*]] = icmp ult i64 [[TMP4693]], [[TMP4692]]
// CHECK-NEXT:    [[TMP4695:%.*]] = select i1 [[TMP4694]], i64 [[TMP4692]], i64 [[TMP4693]]
// CHECK-NEXT:    store i64 [[TMP4695]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4696:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4697:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4696]] release, align 8
// CHECK-NEXT:    [[TMP4698:%.*]] = icmp ugt i64 [[TMP4697]], [[TMP4696]]
// CHECK-NEXT:    [[TMP4699:%.*]] = select i1 [[TMP4698]], i64 [[TMP4696]], i64 [[TMP4697]]
// CHECK-NEXT:    store i64 [[TMP4699]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4700:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4701:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4702:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4700]], i64 [[TMP4701]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4703:%.*]] = extractvalue { i64, i1 } [[TMP4702]], 0
// CHECK-NEXT:    [[TMP4704:%.*]] = extractvalue { i64, i1 } [[TMP4702]], 1
// CHECK-NEXT:    [[TMP4705:%.*]] = select i1 [[TMP4704]], i64 [[TMP4700]], i64 [[TMP4703]]
// CHECK-NEXT:    store i64 [[TMP4705]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4706:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4707:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4708:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4706]], i64 [[TMP4707]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4709:%.*]] = extractvalue { i64, i1 } [[TMP4708]], 0
// CHECK-NEXT:    [[TMP4710:%.*]] = extractvalue { i64, i1 } [[TMP4708]], 1
// CHECK-NEXT:    [[TMP4711:%.*]] = select i1 [[TMP4710]], i64 [[TMP4706]], i64 [[TMP4709]]
// CHECK-NEXT:    store i64 [[TMP4711]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4712:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4713:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4714:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4712]], i64 [[TMP4713]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4715:%.*]] = extractvalue { i64, i1 } [[TMP4714]], 0
// CHECK-NEXT:    [[TMP4716:%.*]] = extractvalue { i64, i1 } [[TMP4714]], 1
// CHECK-NEXT:    br i1 [[TMP4716]], label [[ULLX_ATOMIC_EXIT445:%.*]], label [[ULLX_ATOMIC_CONT446:%.*]]
// CHECK:       ullx.atomic.cont446:
// CHECK-NEXT:    store i64 [[TMP4715]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT445]]
// CHECK:       ullx.atomic.exit445:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4717:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4718:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4719:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4717]], i64 [[TMP4718]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4720:%.*]] = extractvalue { i64, i1 } [[TMP4719]], 0
// CHECK-NEXT:    [[TMP4721:%.*]] = extractvalue { i64, i1 } [[TMP4719]], 1
// CHECK-NEXT:    br i1 [[TMP4721]], label [[ULLX_ATOMIC_EXIT447:%.*]], label [[ULLX_ATOMIC_CONT448:%.*]]
// CHECK:       ullx.atomic.cont448:
// CHECK-NEXT:    store i64 [[TMP4720]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT447]]
// CHECK:       ullx.atomic.exit447:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4722:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4723:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4724:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4722]], i64 [[TMP4723]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4725:%.*]] = extractvalue { i64, i1 } [[TMP4724]], 1
// CHECK-NEXT:    [[TMP4726:%.*]] = zext i1 [[TMP4725]] to i64
// CHECK-NEXT:    store i64 [[TMP4726]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4727:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4728:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4729:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4727]], i64 [[TMP4728]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4730:%.*]] = extractvalue { i64, i1 } [[TMP4729]], 1
// CHECK-NEXT:    [[TMP4731:%.*]] = zext i1 [[TMP4730]] to i64
// CHECK-NEXT:    store i64 [[TMP4731]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4732:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4733:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4734:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4732]], i64 [[TMP4733]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4735:%.*]] = extractvalue { i64, i1 } [[TMP4734]], 0
// CHECK-NEXT:    [[TMP4736:%.*]] = extractvalue { i64, i1 } [[TMP4734]], 1
// CHECK-NEXT:    br i1 [[TMP4736]], label [[ULLX_ATOMIC_EXIT449:%.*]], label [[ULLX_ATOMIC_CONT450:%.*]]
// CHECK:       ullx.atomic.cont450:
// CHECK-NEXT:    store i64 [[TMP4735]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT449]]
// CHECK:       ullx.atomic.exit449:
// CHECK-NEXT:    [[TMP4737:%.*]] = extractvalue { i64, i1 } [[TMP4734]], 1
// CHECK-NEXT:    [[TMP4738:%.*]] = zext i1 [[TMP4737]] to i64
// CHECK-NEXT:    store i64 [[TMP4738]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4739:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4740:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4741:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4739]], i64 [[TMP4740]] release monotonic, align 8
// CHECK-NEXT:    [[TMP4742:%.*]] = extractvalue { i64, i1 } [[TMP4741]], 0
// CHECK-NEXT:    [[TMP4743:%.*]] = extractvalue { i64, i1 } [[TMP4741]], 1
// CHECK-NEXT:    br i1 [[TMP4743]], label [[ULLX_ATOMIC_EXIT451:%.*]], label [[ULLX_ATOMIC_CONT452:%.*]]
// CHECK:       ullx.atomic.cont452:
// CHECK-NEXT:    store i64 [[TMP4742]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT451]]
// CHECK:       ullx.atomic.exit451:
// CHECK-NEXT:    [[TMP4744:%.*]] = extractvalue { i64, i1 } [[TMP4741]], 1
// CHECK-NEXT:    [[TMP4745:%.*]] = zext i1 [[TMP4744]] to i64
// CHECK-NEXT:    store i64 [[TMP4745]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4746:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4747:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4746]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4747]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4748:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4749:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4748]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4749]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4750:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4751:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4750]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4751]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4752:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4753:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4752]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP4753]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4754:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4755:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4756:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4754]], i64 [[TMP4755]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4757:%.*]] = extractvalue { i64, i1 } [[TMP4756]], 0
// CHECK-NEXT:    store i64 [[TMP4757]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4758:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4759:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4760:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4758]], i64 [[TMP4759]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4761:%.*]] = extractvalue { i64, i1 } [[TMP4760]], 0
// CHECK-NEXT:    store i64 [[TMP4761]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4762:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4763:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4762]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4764:%.*]] = icmp ugt i64 [[TMP4763]], [[TMP4762]]
// CHECK-NEXT:    [[TMP4765:%.*]] = select i1 [[TMP4764]], i64 [[TMP4762]], i64 [[TMP4763]]
// CHECK-NEXT:    store i64 [[TMP4765]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4766:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4767:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4766]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4768:%.*]] = icmp ult i64 [[TMP4767]], [[TMP4766]]
// CHECK-NEXT:    [[TMP4769:%.*]] = select i1 [[TMP4768]], i64 [[TMP4766]], i64 [[TMP4767]]
// CHECK-NEXT:    store i64 [[TMP4769]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4770:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4771:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP4770]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4772:%.*]] = icmp ult i64 [[TMP4771]], [[TMP4770]]
// CHECK-NEXT:    [[TMP4773:%.*]] = select i1 [[TMP4772]], i64 [[TMP4770]], i64 [[TMP4771]]
// CHECK-NEXT:    store i64 [[TMP4773]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4774:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4775:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP4774]] seq_cst, align 8
// CHECK-NEXT:    [[TMP4776:%.*]] = icmp ugt i64 [[TMP4775]], [[TMP4774]]
// CHECK-NEXT:    [[TMP4777:%.*]] = select i1 [[TMP4776]], i64 [[TMP4774]], i64 [[TMP4775]]
// CHECK-NEXT:    store i64 [[TMP4777]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4778:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4779:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4780:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4778]], i64 [[TMP4779]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4781:%.*]] = extractvalue { i64, i1 } [[TMP4780]], 0
// CHECK-NEXT:    [[TMP4782:%.*]] = extractvalue { i64, i1 } [[TMP4780]], 1
// CHECK-NEXT:    [[TMP4783:%.*]] = select i1 [[TMP4782]], i64 [[TMP4778]], i64 [[TMP4781]]
// CHECK-NEXT:    store i64 [[TMP4783]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4784:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4785:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4786:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4784]], i64 [[TMP4785]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4787:%.*]] = extractvalue { i64, i1 } [[TMP4786]], 0
// CHECK-NEXT:    [[TMP4788:%.*]] = extractvalue { i64, i1 } [[TMP4786]], 1
// CHECK-NEXT:    [[TMP4789:%.*]] = select i1 [[TMP4788]], i64 [[TMP4784]], i64 [[TMP4787]]
// CHECK-NEXT:    store i64 [[TMP4789]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4790:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4791:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4792:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4790]], i64 [[TMP4791]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4793:%.*]] = extractvalue { i64, i1 } [[TMP4792]], 0
// CHECK-NEXT:    [[TMP4794:%.*]] = extractvalue { i64, i1 } [[TMP4792]], 1
// CHECK-NEXT:    br i1 [[TMP4794]], label [[ULLX_ATOMIC_EXIT453:%.*]], label [[ULLX_ATOMIC_CONT454:%.*]]
// CHECK:       ullx.atomic.cont454:
// CHECK-NEXT:    store i64 [[TMP4793]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT453]]
// CHECK:       ullx.atomic.exit453:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4795:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4796:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4797:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4795]], i64 [[TMP4796]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4798:%.*]] = extractvalue { i64, i1 } [[TMP4797]], 0
// CHECK-NEXT:    [[TMP4799:%.*]] = extractvalue { i64, i1 } [[TMP4797]], 1
// CHECK-NEXT:    br i1 [[TMP4799]], label [[ULLX_ATOMIC_EXIT455:%.*]], label [[ULLX_ATOMIC_CONT456:%.*]]
// CHECK:       ullx.atomic.cont456:
// CHECK-NEXT:    store i64 [[TMP4798]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT455]]
// CHECK:       ullx.atomic.exit455:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4800:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4801:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4802:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4800]], i64 [[TMP4801]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4803:%.*]] = extractvalue { i64, i1 } [[TMP4802]], 1
// CHECK-NEXT:    [[TMP4804:%.*]] = zext i1 [[TMP4803]] to i64
// CHECK-NEXT:    store i64 [[TMP4804]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4805:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4806:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4807:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4805]], i64 [[TMP4806]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4808:%.*]] = extractvalue { i64, i1 } [[TMP4807]], 1
// CHECK-NEXT:    [[TMP4809:%.*]] = zext i1 [[TMP4808]] to i64
// CHECK-NEXT:    store i64 [[TMP4809]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4810:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4811:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4812:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4810]], i64 [[TMP4811]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4813:%.*]] = extractvalue { i64, i1 } [[TMP4812]], 0
// CHECK-NEXT:    [[TMP4814:%.*]] = extractvalue { i64, i1 } [[TMP4812]], 1
// CHECK-NEXT:    br i1 [[TMP4814]], label [[ULLX_ATOMIC_EXIT457:%.*]], label [[ULLX_ATOMIC_CONT458:%.*]]
// CHECK:       ullx.atomic.cont458:
// CHECK-NEXT:    store i64 [[TMP4813]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT457]]
// CHECK:       ullx.atomic.exit457:
// CHECK-NEXT:    [[TMP4815:%.*]] = extractvalue { i64, i1 } [[TMP4812]], 1
// CHECK-NEXT:    [[TMP4816:%.*]] = zext i1 [[TMP4815]] to i64
// CHECK-NEXT:    store i64 [[TMP4816]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4817:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP4818:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP4819:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4817]], i64 [[TMP4818]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP4820:%.*]] = extractvalue { i64, i1 } [[TMP4819]], 0
// CHECK-NEXT:    [[TMP4821:%.*]] = extractvalue { i64, i1 } [[TMP4819]], 1
// CHECK-NEXT:    br i1 [[TMP4821]], label [[ULLX_ATOMIC_EXIT459:%.*]], label [[ULLX_ATOMIC_CONT460:%.*]]
// CHECK:       ullx.atomic.cont460:
// CHECK-NEXT:    store i64 [[TMP4820]], ptr [[ULLV]], align 8
// CHECK-NEXT:    br label [[ULLX_ATOMIC_EXIT459]]
// CHECK:       ullx.atomic.exit459:
// CHECK-NEXT:    [[TMP4822:%.*]] = extractvalue { i64, i1 } [[TMP4819]], 1
// CHECK-NEXT:    [[TMP4823:%.*]] = zext i1 [[TMP4822]] to i64
// CHECK-NEXT:    store i64 [[TMP4823]], ptr [[ULLR]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4824:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4825:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4824]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP4825]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4826:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4827:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4826]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP4827]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4828:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4829:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4828]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP4829]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4830:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4831:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4830]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP4831]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4832:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4833:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4834:%.*]] = bitcast float [[TMP4832]] to i32
// CHECK-NEXT:    [[TMP4835:%.*]] = bitcast float [[TMP4833]] to i32
// CHECK-NEXT:    [[TMP4836:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4834]], i32 [[TMP4835]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4837:%.*]] = extractvalue { i32, i1 } [[TMP4836]], 0
// CHECK-NEXT:    [[TMP4838:%.*]] = bitcast i32 [[TMP4837]] to float
// CHECK-NEXT:    store float [[TMP4838]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4839:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4840:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4841:%.*]] = bitcast float [[TMP4839]] to i32
// CHECK-NEXT:    [[TMP4842:%.*]] = bitcast float [[TMP4840]] to i32
// CHECK-NEXT:    [[TMP4843:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4841]], i32 [[TMP4842]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4844:%.*]] = extractvalue { i32, i1 } [[TMP4843]], 0
// CHECK-NEXT:    [[TMP4845:%.*]] = bitcast i32 [[TMP4844]] to float
// CHECK-NEXT:    store float [[TMP4845]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4846:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4847:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4846]] monotonic, align 4
// CHECK-NEXT:    [[TMP4848:%.*]] = fcmp ogt float [[TMP4847]], [[TMP4846]]
// CHECK-NEXT:    [[TMP4849:%.*]] = select i1 [[TMP4848]], float [[TMP4846]], float [[TMP4847]]
// CHECK-NEXT:    store float [[TMP4849]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4850:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4851:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4850]] monotonic, align 4
// CHECK-NEXT:    [[TMP4852:%.*]] = fcmp olt float [[TMP4851]], [[TMP4850]]
// CHECK-NEXT:    [[TMP4853:%.*]] = select i1 [[TMP4852]], float [[TMP4850]], float [[TMP4851]]
// CHECK-NEXT:    store float [[TMP4853]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4854:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4855:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4854]] monotonic, align 4
// CHECK-NEXT:    [[TMP4856:%.*]] = fcmp olt float [[TMP4855]], [[TMP4854]]
// CHECK-NEXT:    [[TMP4857:%.*]] = select i1 [[TMP4856]], float [[TMP4854]], float [[TMP4855]]
// CHECK-NEXT:    store float [[TMP4857]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4858:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4859:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4858]] monotonic, align 4
// CHECK-NEXT:    [[TMP4860:%.*]] = fcmp ogt float [[TMP4859]], [[TMP4858]]
// CHECK-NEXT:    [[TMP4861:%.*]] = select i1 [[TMP4860]], float [[TMP4858]], float [[TMP4859]]
// CHECK-NEXT:    store float [[TMP4861]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4862:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4863:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4864:%.*]] = bitcast float [[TMP4862]] to i32
// CHECK-NEXT:    [[TMP4865:%.*]] = bitcast float [[TMP4863]] to i32
// CHECK-NEXT:    [[TMP4866:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4864]], i32 [[TMP4865]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4867:%.*]] = extractvalue { i32, i1 } [[TMP4866]], 0
// CHECK-NEXT:    [[TMP4868:%.*]] = bitcast i32 [[TMP4867]] to float
// CHECK-NEXT:    [[TMP4869:%.*]] = extractvalue { i32, i1 } [[TMP4866]], 1
// CHECK-NEXT:    [[TMP4870:%.*]] = select i1 [[TMP4869]], float [[TMP4862]], float [[TMP4868]]
// CHECK-NEXT:    store float [[TMP4870]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4871:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4872:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4873:%.*]] = bitcast float [[TMP4871]] to i32
// CHECK-NEXT:    [[TMP4874:%.*]] = bitcast float [[TMP4872]] to i32
// CHECK-NEXT:    [[TMP4875:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4873]], i32 [[TMP4874]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4876:%.*]] = extractvalue { i32, i1 } [[TMP4875]], 0
// CHECK-NEXT:    [[TMP4877:%.*]] = bitcast i32 [[TMP4876]] to float
// CHECK-NEXT:    [[TMP4878:%.*]] = extractvalue { i32, i1 } [[TMP4875]], 1
// CHECK-NEXT:    [[TMP4879:%.*]] = select i1 [[TMP4878]], float [[TMP4871]], float [[TMP4877]]
// CHECK-NEXT:    store float [[TMP4879]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4880:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4881:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4882:%.*]] = bitcast float [[TMP4880]] to i32
// CHECK-NEXT:    [[TMP4883:%.*]] = bitcast float [[TMP4881]] to i32
// CHECK-NEXT:    [[TMP4884:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4882]], i32 [[TMP4883]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4885:%.*]] = extractvalue { i32, i1 } [[TMP4884]], 0
// CHECK-NEXT:    [[TMP4886:%.*]] = bitcast i32 [[TMP4885]] to float
// CHECK-NEXT:    [[TMP4887:%.*]] = extractvalue { i32, i1 } [[TMP4884]], 1
// CHECK-NEXT:    br i1 [[TMP4887]], label [[FX_ATOMIC_EXIT:%.*]], label [[FX_ATOMIC_CONT:%.*]]
// CHECK:       fx.atomic.cont:
// CHECK-NEXT:    store float [[TMP4886]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT]]
// CHECK:       fx.atomic.exit:
// CHECK-NEXT:    [[TMP4888:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4889:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4890:%.*]] = bitcast float [[TMP4888]] to i32
// CHECK-NEXT:    [[TMP4891:%.*]] = bitcast float [[TMP4889]] to i32
// CHECK-NEXT:    [[TMP4892:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4890]], i32 [[TMP4891]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4893:%.*]] = extractvalue { i32, i1 } [[TMP4892]], 0
// CHECK-NEXT:    [[TMP4894:%.*]] = bitcast i32 [[TMP4893]] to float
// CHECK-NEXT:    [[TMP4895:%.*]] = extractvalue { i32, i1 } [[TMP4892]], 1
// CHECK-NEXT:    br i1 [[TMP4895]], label [[FX_ATOMIC_EXIT461:%.*]], label [[FX_ATOMIC_CONT462:%.*]]
// CHECK:       fx.atomic.cont462:
// CHECK-NEXT:    store float [[TMP4894]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT461]]
// CHECK:       fx.atomic.exit461:
// CHECK-NEXT:    [[TMP4896:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4897:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4898:%.*]] = bitcast float [[TMP4896]] to i32
// CHECK-NEXT:    [[TMP4899:%.*]] = bitcast float [[TMP4897]] to i32
// CHECK-NEXT:    [[TMP4900:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4898]], i32 [[TMP4899]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4901:%.*]] = extractvalue { i32, i1 } [[TMP4900]], 1
// CHECK-NEXT:    [[TMP4902:%.*]] = sext i1 [[TMP4901]] to i32
// CHECK-NEXT:    store i32 [[TMP4902]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4903:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4904:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4905:%.*]] = bitcast float [[TMP4903]] to i32
// CHECK-NEXT:    [[TMP4906:%.*]] = bitcast float [[TMP4904]] to i32
// CHECK-NEXT:    [[TMP4907:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4905]], i32 [[TMP4906]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4908:%.*]] = extractvalue { i32, i1 } [[TMP4907]], 1
// CHECK-NEXT:    [[TMP4909:%.*]] = sext i1 [[TMP4908]] to i32
// CHECK-NEXT:    store i32 [[TMP4909]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4910:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4911:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4912:%.*]] = bitcast float [[TMP4910]] to i32
// CHECK-NEXT:    [[TMP4913:%.*]] = bitcast float [[TMP4911]] to i32
// CHECK-NEXT:    [[TMP4914:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4912]], i32 [[TMP4913]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4915:%.*]] = extractvalue { i32, i1 } [[TMP4914]], 0
// CHECK-NEXT:    [[TMP4916:%.*]] = bitcast i32 [[TMP4915]] to float
// CHECK-NEXT:    [[TMP4917:%.*]] = extractvalue { i32, i1 } [[TMP4914]], 1
// CHECK-NEXT:    br i1 [[TMP4917]], label [[FX_ATOMIC_EXIT463:%.*]], label [[FX_ATOMIC_CONT464:%.*]]
// CHECK:       fx.atomic.cont464:
// CHECK-NEXT:    store float [[TMP4916]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT463]]
// CHECK:       fx.atomic.exit463:
// CHECK-NEXT:    [[TMP4918:%.*]] = extractvalue { i32, i1 } [[TMP4914]], 1
// CHECK-NEXT:    [[TMP4919:%.*]] = sext i1 [[TMP4918]] to i32
// CHECK-NEXT:    store i32 [[TMP4919]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4920:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4921:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4922:%.*]] = bitcast float [[TMP4920]] to i32
// CHECK-NEXT:    [[TMP4923:%.*]] = bitcast float [[TMP4921]] to i32
// CHECK-NEXT:    [[TMP4924:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4922]], i32 [[TMP4923]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP4925:%.*]] = extractvalue { i32, i1 } [[TMP4924]], 0
// CHECK-NEXT:    [[TMP4926:%.*]] = bitcast i32 [[TMP4925]] to float
// CHECK-NEXT:    [[TMP4927:%.*]] = extractvalue { i32, i1 } [[TMP4924]], 1
// CHECK-NEXT:    br i1 [[TMP4927]], label [[FX_ATOMIC_EXIT465:%.*]], label [[FX_ATOMIC_CONT466:%.*]]
// CHECK:       fx.atomic.cont466:
// CHECK-NEXT:    store float [[TMP4926]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT465]]
// CHECK:       fx.atomic.exit465:
// CHECK-NEXT:    [[TMP4928:%.*]] = extractvalue { i32, i1 } [[TMP4924]], 1
// CHECK-NEXT:    [[TMP4929:%.*]] = sext i1 [[TMP4928]] to i32
// CHECK-NEXT:    store i32 [[TMP4929]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP4930:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4931:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4930]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP4931]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4932:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4933:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4932]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP4933]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4934:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4935:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4934]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP4935]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4936:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4937:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4936]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP4937]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4938:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4939:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4940:%.*]] = bitcast float [[TMP4938]] to i32
// CHECK-NEXT:    [[TMP4941:%.*]] = bitcast float [[TMP4939]] to i32
// CHECK-NEXT:    [[TMP4942:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4940]], i32 [[TMP4941]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4943:%.*]] = extractvalue { i32, i1 } [[TMP4942]], 0
// CHECK-NEXT:    [[TMP4944:%.*]] = bitcast i32 [[TMP4943]] to float
// CHECK-NEXT:    store float [[TMP4944]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4945:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4946:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4947:%.*]] = bitcast float [[TMP4945]] to i32
// CHECK-NEXT:    [[TMP4948:%.*]] = bitcast float [[TMP4946]] to i32
// CHECK-NEXT:    [[TMP4949:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4947]], i32 [[TMP4948]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4950:%.*]] = extractvalue { i32, i1 } [[TMP4949]], 0
// CHECK-NEXT:    [[TMP4951:%.*]] = bitcast i32 [[TMP4950]] to float
// CHECK-NEXT:    store float [[TMP4951]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4952:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4953:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4952]] acq_rel, align 4
// CHECK-NEXT:    [[TMP4954:%.*]] = fcmp ogt float [[TMP4953]], [[TMP4952]]
// CHECK-NEXT:    [[TMP4955:%.*]] = select i1 [[TMP4954]], float [[TMP4952]], float [[TMP4953]]
// CHECK-NEXT:    store float [[TMP4955]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4956:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4957:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4956]] acq_rel, align 4
// CHECK-NEXT:    [[TMP4958:%.*]] = fcmp olt float [[TMP4957]], [[TMP4956]]
// CHECK-NEXT:    [[TMP4959:%.*]] = select i1 [[TMP4958]], float [[TMP4956]], float [[TMP4957]]
// CHECK-NEXT:    store float [[TMP4959]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4960:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4961:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP4960]] acq_rel, align 4
// CHECK-NEXT:    [[TMP4962:%.*]] = fcmp olt float [[TMP4961]], [[TMP4960]]
// CHECK-NEXT:    [[TMP4963:%.*]] = select i1 [[TMP4962]], float [[TMP4960]], float [[TMP4961]]
// CHECK-NEXT:    store float [[TMP4963]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4964:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4965:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP4964]] acq_rel, align 4
// CHECK-NEXT:    [[TMP4966:%.*]] = fcmp ogt float [[TMP4965]], [[TMP4964]]
// CHECK-NEXT:    [[TMP4967:%.*]] = select i1 [[TMP4966]], float [[TMP4964]], float [[TMP4965]]
// CHECK-NEXT:    store float [[TMP4967]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4968:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4969:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4970:%.*]] = bitcast float [[TMP4968]] to i32
// CHECK-NEXT:    [[TMP4971:%.*]] = bitcast float [[TMP4969]] to i32
// CHECK-NEXT:    [[TMP4972:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4970]], i32 [[TMP4971]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4973:%.*]] = extractvalue { i32, i1 } [[TMP4972]], 0
// CHECK-NEXT:    [[TMP4974:%.*]] = bitcast i32 [[TMP4973]] to float
// CHECK-NEXT:    [[TMP4975:%.*]] = extractvalue { i32, i1 } [[TMP4972]], 1
// CHECK-NEXT:    [[TMP4976:%.*]] = select i1 [[TMP4975]], float [[TMP4968]], float [[TMP4974]]
// CHECK-NEXT:    store float [[TMP4976]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4977:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4978:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4979:%.*]] = bitcast float [[TMP4977]] to i32
// CHECK-NEXT:    [[TMP4980:%.*]] = bitcast float [[TMP4978]] to i32
// CHECK-NEXT:    [[TMP4981:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4979]], i32 [[TMP4980]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4982:%.*]] = extractvalue { i32, i1 } [[TMP4981]], 0
// CHECK-NEXT:    [[TMP4983:%.*]] = bitcast i32 [[TMP4982]] to float
// CHECK-NEXT:    [[TMP4984:%.*]] = extractvalue { i32, i1 } [[TMP4981]], 1
// CHECK-NEXT:    [[TMP4985:%.*]] = select i1 [[TMP4984]], float [[TMP4977]], float [[TMP4983]]
// CHECK-NEXT:    store float [[TMP4985]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4986:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4987:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4988:%.*]] = bitcast float [[TMP4986]] to i32
// CHECK-NEXT:    [[TMP4989:%.*]] = bitcast float [[TMP4987]] to i32
// CHECK-NEXT:    [[TMP4990:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4988]], i32 [[TMP4989]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4991:%.*]] = extractvalue { i32, i1 } [[TMP4990]], 0
// CHECK-NEXT:    [[TMP4992:%.*]] = bitcast i32 [[TMP4991]] to float
// CHECK-NEXT:    [[TMP4993:%.*]] = extractvalue { i32, i1 } [[TMP4990]], 1
// CHECK-NEXT:    br i1 [[TMP4993]], label [[FX_ATOMIC_EXIT467:%.*]], label [[FX_ATOMIC_CONT468:%.*]]
// CHECK:       fx.atomic.cont468:
// CHECK-NEXT:    store float [[TMP4992]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT467]]
// CHECK:       fx.atomic.exit467:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP4994:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP4995:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP4996:%.*]] = bitcast float [[TMP4994]] to i32
// CHECK-NEXT:    [[TMP4997:%.*]] = bitcast float [[TMP4995]] to i32
// CHECK-NEXT:    [[TMP4998:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP4996]], i32 [[TMP4997]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP4999:%.*]] = extractvalue { i32, i1 } [[TMP4998]], 0
// CHECK-NEXT:    [[TMP5000:%.*]] = bitcast i32 [[TMP4999]] to float
// CHECK-NEXT:    [[TMP5001:%.*]] = extractvalue { i32, i1 } [[TMP4998]], 1
// CHECK-NEXT:    br i1 [[TMP5001]], label [[FX_ATOMIC_EXIT469:%.*]], label [[FX_ATOMIC_CONT470:%.*]]
// CHECK:       fx.atomic.cont470:
// CHECK-NEXT:    store float [[TMP5000]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT469]]
// CHECK:       fx.atomic.exit469:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5002:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5003:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5004:%.*]] = bitcast float [[TMP5002]] to i32
// CHECK-NEXT:    [[TMP5005:%.*]] = bitcast float [[TMP5003]] to i32
// CHECK-NEXT:    [[TMP5006:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5004]], i32 [[TMP5005]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP5007:%.*]] = extractvalue { i32, i1 } [[TMP5006]], 1
// CHECK-NEXT:    [[TMP5008:%.*]] = sext i1 [[TMP5007]] to i32
// CHECK-NEXT:    store i32 [[TMP5008]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5009:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5010:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5011:%.*]] = bitcast float [[TMP5009]] to i32
// CHECK-NEXT:    [[TMP5012:%.*]] = bitcast float [[TMP5010]] to i32
// CHECK-NEXT:    [[TMP5013:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5011]], i32 [[TMP5012]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP5014:%.*]] = extractvalue { i32, i1 } [[TMP5013]], 1
// CHECK-NEXT:    [[TMP5015:%.*]] = sext i1 [[TMP5014]] to i32
// CHECK-NEXT:    store i32 [[TMP5015]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5016:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5017:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5018:%.*]] = bitcast float [[TMP5016]] to i32
// CHECK-NEXT:    [[TMP5019:%.*]] = bitcast float [[TMP5017]] to i32
// CHECK-NEXT:    [[TMP5020:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5018]], i32 [[TMP5019]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP5021:%.*]] = extractvalue { i32, i1 } [[TMP5020]], 0
// CHECK-NEXT:    [[TMP5022:%.*]] = bitcast i32 [[TMP5021]] to float
// CHECK-NEXT:    [[TMP5023:%.*]] = extractvalue { i32, i1 } [[TMP5020]], 1
// CHECK-NEXT:    br i1 [[TMP5023]], label [[FX_ATOMIC_EXIT471:%.*]], label [[FX_ATOMIC_CONT472:%.*]]
// CHECK:       fx.atomic.cont472:
// CHECK-NEXT:    store float [[TMP5022]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT471]]
// CHECK:       fx.atomic.exit471:
// CHECK-NEXT:    [[TMP5024:%.*]] = extractvalue { i32, i1 } [[TMP5020]], 1
// CHECK-NEXT:    [[TMP5025:%.*]] = sext i1 [[TMP5024]] to i32
// CHECK-NEXT:    store i32 [[TMP5025]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5026:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5027:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5028:%.*]] = bitcast float [[TMP5026]] to i32
// CHECK-NEXT:    [[TMP5029:%.*]] = bitcast float [[TMP5027]] to i32
// CHECK-NEXT:    [[TMP5030:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5028]], i32 [[TMP5029]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP5031:%.*]] = extractvalue { i32, i1 } [[TMP5030]], 0
// CHECK-NEXT:    [[TMP5032:%.*]] = bitcast i32 [[TMP5031]] to float
// CHECK-NEXT:    [[TMP5033:%.*]] = extractvalue { i32, i1 } [[TMP5030]], 1
// CHECK-NEXT:    br i1 [[TMP5033]], label [[FX_ATOMIC_EXIT473:%.*]], label [[FX_ATOMIC_CONT474:%.*]]
// CHECK:       fx.atomic.cont474:
// CHECK-NEXT:    store float [[TMP5032]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT473]]
// CHECK:       fx.atomic.exit473:
// CHECK-NEXT:    [[TMP5034:%.*]] = extractvalue { i32, i1 } [[TMP5030]], 1
// CHECK-NEXT:    [[TMP5035:%.*]] = sext i1 [[TMP5034]] to i32
// CHECK-NEXT:    store i32 [[TMP5035]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5036:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5037:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5036]] acquire, align 4
// CHECK-NEXT:    store float [[TMP5037]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5038:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5039:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5038]] acquire, align 4
// CHECK-NEXT:    store float [[TMP5039]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5040:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5041:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5040]] acquire, align 4
// CHECK-NEXT:    store float [[TMP5041]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5042:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5043:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5042]] acquire, align 4
// CHECK-NEXT:    store float [[TMP5043]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5044:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5045:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5046:%.*]] = bitcast float [[TMP5044]] to i32
// CHECK-NEXT:    [[TMP5047:%.*]] = bitcast float [[TMP5045]] to i32
// CHECK-NEXT:    [[TMP5048:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5046]], i32 [[TMP5047]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP5049:%.*]] = extractvalue { i32, i1 } [[TMP5048]], 0
// CHECK-NEXT:    [[TMP5050:%.*]] = bitcast i32 [[TMP5049]] to float
// CHECK-NEXT:    store float [[TMP5050]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5051:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5052:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5053:%.*]] = bitcast float [[TMP5051]] to i32
// CHECK-NEXT:    [[TMP5054:%.*]] = bitcast float [[TMP5052]] to i32
// CHECK-NEXT:    [[TMP5055:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5053]], i32 [[TMP5054]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP5056:%.*]] = extractvalue { i32, i1 } [[TMP5055]], 0
// CHECK-NEXT:    [[TMP5057:%.*]] = bitcast i32 [[TMP5056]] to float
// CHECK-NEXT:    store float [[TMP5057]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5058:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5059:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5058]] acquire, align 4
// CHECK-NEXT:    [[TMP5060:%.*]] = fcmp ogt float [[TMP5059]], [[TMP5058]]
// CHECK-NEXT:    [[TMP5061:%.*]] = select i1 [[TMP5060]], float [[TMP5058]], float [[TMP5059]]
// CHECK-NEXT:    store float [[TMP5061]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5062:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5063:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5062]] acquire, align 4
// CHECK-NEXT:    [[TMP5064:%.*]] = fcmp olt float [[TMP5063]], [[TMP5062]]
// CHECK-NEXT:    [[TMP5065:%.*]] = select i1 [[TMP5064]], float [[TMP5062]], float [[TMP5063]]
// CHECK-NEXT:    store float [[TMP5065]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5066:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5067:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5066]] acquire, align 4
// CHECK-NEXT:    [[TMP5068:%.*]] = fcmp olt float [[TMP5067]], [[TMP5066]]
// CHECK-NEXT:    [[TMP5069:%.*]] = select i1 [[TMP5068]], float [[TMP5066]], float [[TMP5067]]
// CHECK-NEXT:    store float [[TMP5069]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5070:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5071:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5070]] acquire, align 4
// CHECK-NEXT:    [[TMP5072:%.*]] = fcmp ogt float [[TMP5071]], [[TMP5070]]
// CHECK-NEXT:    [[TMP5073:%.*]] = select i1 [[TMP5072]], float [[TMP5070]], float [[TMP5071]]
// CHECK-NEXT:    store float [[TMP5073]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5074:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5075:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5076:%.*]] = bitcast float [[TMP5074]] to i32
// CHECK-NEXT:    [[TMP5077:%.*]] = bitcast float [[TMP5075]] to i32
// CHECK-NEXT:    [[TMP5078:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5076]], i32 [[TMP5077]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP5079:%.*]] = extractvalue { i32, i1 } [[TMP5078]], 0
// CHECK-NEXT:    [[TMP5080:%.*]] = bitcast i32 [[TMP5079]] to float
// CHECK-NEXT:    [[TMP5081:%.*]] = extractvalue { i32, i1 } [[TMP5078]], 1
// CHECK-NEXT:    [[TMP5082:%.*]] = select i1 [[TMP5081]], float [[TMP5074]], float [[TMP5080]]
// CHECK-NEXT:    store float [[TMP5082]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5083:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5084:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5085:%.*]] = bitcast float [[TMP5083]] to i32
// CHECK-NEXT:    [[TMP5086:%.*]] = bitcast float [[TMP5084]] to i32
// CHECK-NEXT:    [[TMP5087:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5085]], i32 [[TMP5086]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP5088:%.*]] = extractvalue { i32, i1 } [[TMP5087]], 0
// CHECK-NEXT:    [[TMP5089:%.*]] = bitcast i32 [[TMP5088]] to float
// CHECK-NEXT:    [[TMP5090:%.*]] = extractvalue { i32, i1 } [[TMP5087]], 1
// CHECK-NEXT:    [[TMP5091:%.*]] = select i1 [[TMP5090]], float [[TMP5083]], float [[TMP5089]]
// CHECK-NEXT:    store float [[TMP5091]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5092:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5093:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5094:%.*]] = bitcast float [[TMP5092]] to i32
// CHECK-NEXT:    [[TMP5095:%.*]] = bitcast float [[TMP5093]] to i32
// CHECK-NEXT:    [[TMP5096:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5094]], i32 [[TMP5095]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP5097:%.*]] = extractvalue { i32, i1 } [[TMP5096]], 0
// CHECK-NEXT:    [[TMP5098:%.*]] = bitcast i32 [[TMP5097]] to float
// CHECK-NEXT:    [[TMP5099:%.*]] = extractvalue { i32, i1 } [[TMP5096]], 1
// CHECK-NEXT:    br i1 [[TMP5099]], label [[FX_ATOMIC_EXIT475:%.*]], label [[FX_ATOMIC_CONT476:%.*]]
// CHECK:       fx.atomic.cont476:
// CHECK-NEXT:    store float [[TMP5098]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT475]]
// CHECK:       fx.atomic.exit475:
// CHECK-NEXT:    [[TMP5100:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5101:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5102:%.*]] = bitcast float [[TMP5100]] to i32
// CHECK-NEXT:    [[TMP5103:%.*]] = bitcast float [[TMP5101]] to i32
// CHECK-NEXT:    [[TMP5104:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5102]], i32 [[TMP5103]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP5105:%.*]] = extractvalue { i32, i1 } [[TMP5104]], 0
// CHECK-NEXT:    [[TMP5106:%.*]] = bitcast i32 [[TMP5105]] to float
// CHECK-NEXT:    [[TMP5107:%.*]] = extractvalue { i32, i1 } [[TMP5104]], 1
// CHECK-NEXT:    br i1 [[TMP5107]], label [[FX_ATOMIC_EXIT477:%.*]], label [[FX_ATOMIC_CONT478:%.*]]
// CHECK:       fx.atomic.cont478:
// CHECK-NEXT:    store float [[TMP5106]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT477]]
// CHECK:       fx.atomic.exit477:
// CHECK-NEXT:    [[TMP5108:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5109:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5110:%.*]] = bitcast float [[TMP5108]] to i32
// CHECK-NEXT:    [[TMP5111:%.*]] = bitcast float [[TMP5109]] to i32
// CHECK-NEXT:    [[TMP5112:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5110]], i32 [[TMP5111]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP5113:%.*]] = extractvalue { i32, i1 } [[TMP5112]], 1
// CHECK-NEXT:    [[TMP5114:%.*]] = sext i1 [[TMP5113]] to i32
// CHECK-NEXT:    store i32 [[TMP5114]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5115:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5116:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5117:%.*]] = bitcast float [[TMP5115]] to i32
// CHECK-NEXT:    [[TMP5118:%.*]] = bitcast float [[TMP5116]] to i32
// CHECK-NEXT:    [[TMP5119:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5117]], i32 [[TMP5118]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP5120:%.*]] = extractvalue { i32, i1 } [[TMP5119]], 1
// CHECK-NEXT:    [[TMP5121:%.*]] = sext i1 [[TMP5120]] to i32
// CHECK-NEXT:    store i32 [[TMP5121]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5122:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5123:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5124:%.*]] = bitcast float [[TMP5122]] to i32
// CHECK-NEXT:    [[TMP5125:%.*]] = bitcast float [[TMP5123]] to i32
// CHECK-NEXT:    [[TMP5126:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5124]], i32 [[TMP5125]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP5127:%.*]] = extractvalue { i32, i1 } [[TMP5126]], 0
// CHECK-NEXT:    [[TMP5128:%.*]] = bitcast i32 [[TMP5127]] to float
// CHECK-NEXT:    [[TMP5129:%.*]] = extractvalue { i32, i1 } [[TMP5126]], 1
// CHECK-NEXT:    br i1 [[TMP5129]], label [[FX_ATOMIC_EXIT479:%.*]], label [[FX_ATOMIC_CONT480:%.*]]
// CHECK:       fx.atomic.cont480:
// CHECK-NEXT:    store float [[TMP5128]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT479]]
// CHECK:       fx.atomic.exit479:
// CHECK-NEXT:    [[TMP5130:%.*]] = extractvalue { i32, i1 } [[TMP5126]], 1
// CHECK-NEXT:    [[TMP5131:%.*]] = sext i1 [[TMP5130]] to i32
// CHECK-NEXT:    store i32 [[TMP5131]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5132:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5133:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5134:%.*]] = bitcast float [[TMP5132]] to i32
// CHECK-NEXT:    [[TMP5135:%.*]] = bitcast float [[TMP5133]] to i32
// CHECK-NEXT:    [[TMP5136:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5134]], i32 [[TMP5135]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP5137:%.*]] = extractvalue { i32, i1 } [[TMP5136]], 0
// CHECK-NEXT:    [[TMP5138:%.*]] = bitcast i32 [[TMP5137]] to float
// CHECK-NEXT:    [[TMP5139:%.*]] = extractvalue { i32, i1 } [[TMP5136]], 1
// CHECK-NEXT:    br i1 [[TMP5139]], label [[FX_ATOMIC_EXIT481:%.*]], label [[FX_ATOMIC_CONT482:%.*]]
// CHECK:       fx.atomic.cont482:
// CHECK-NEXT:    store float [[TMP5138]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT481]]
// CHECK:       fx.atomic.exit481:
// CHECK-NEXT:    [[TMP5140:%.*]] = extractvalue { i32, i1 } [[TMP5136]], 1
// CHECK-NEXT:    [[TMP5141:%.*]] = sext i1 [[TMP5140]] to i32
// CHECK-NEXT:    store i32 [[TMP5141]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5142:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5143:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5142]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP5143]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5144:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5145:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5144]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP5145]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5146:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5147:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5146]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP5147]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5148:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5149:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5148]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP5149]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5150:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5151:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5152:%.*]] = bitcast float [[TMP5150]] to i32
// CHECK-NEXT:    [[TMP5153:%.*]] = bitcast float [[TMP5151]] to i32
// CHECK-NEXT:    [[TMP5154:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5152]], i32 [[TMP5153]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5155:%.*]] = extractvalue { i32, i1 } [[TMP5154]], 0
// CHECK-NEXT:    [[TMP5156:%.*]] = bitcast i32 [[TMP5155]] to float
// CHECK-NEXT:    store float [[TMP5156]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5157:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5158:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5159:%.*]] = bitcast float [[TMP5157]] to i32
// CHECK-NEXT:    [[TMP5160:%.*]] = bitcast float [[TMP5158]] to i32
// CHECK-NEXT:    [[TMP5161:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5159]], i32 [[TMP5160]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5162:%.*]] = extractvalue { i32, i1 } [[TMP5161]], 0
// CHECK-NEXT:    [[TMP5163:%.*]] = bitcast i32 [[TMP5162]] to float
// CHECK-NEXT:    store float [[TMP5163]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5164:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5165:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5164]] monotonic, align 4
// CHECK-NEXT:    [[TMP5166:%.*]] = fcmp ogt float [[TMP5165]], [[TMP5164]]
// CHECK-NEXT:    [[TMP5167:%.*]] = select i1 [[TMP5166]], float [[TMP5164]], float [[TMP5165]]
// CHECK-NEXT:    store float [[TMP5167]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5168:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5169:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5168]] monotonic, align 4
// CHECK-NEXT:    [[TMP5170:%.*]] = fcmp olt float [[TMP5169]], [[TMP5168]]
// CHECK-NEXT:    [[TMP5171:%.*]] = select i1 [[TMP5170]], float [[TMP5168]], float [[TMP5169]]
// CHECK-NEXT:    store float [[TMP5171]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5172:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5173:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5172]] monotonic, align 4
// CHECK-NEXT:    [[TMP5174:%.*]] = fcmp olt float [[TMP5173]], [[TMP5172]]
// CHECK-NEXT:    [[TMP5175:%.*]] = select i1 [[TMP5174]], float [[TMP5172]], float [[TMP5173]]
// CHECK-NEXT:    store float [[TMP5175]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5176:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5177:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5176]] monotonic, align 4
// CHECK-NEXT:    [[TMP5178:%.*]] = fcmp ogt float [[TMP5177]], [[TMP5176]]
// CHECK-NEXT:    [[TMP5179:%.*]] = select i1 [[TMP5178]], float [[TMP5176]], float [[TMP5177]]
// CHECK-NEXT:    store float [[TMP5179]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5180:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5181:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5182:%.*]] = bitcast float [[TMP5180]] to i32
// CHECK-NEXT:    [[TMP5183:%.*]] = bitcast float [[TMP5181]] to i32
// CHECK-NEXT:    [[TMP5184:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5182]], i32 [[TMP5183]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5185:%.*]] = extractvalue { i32, i1 } [[TMP5184]], 0
// CHECK-NEXT:    [[TMP5186:%.*]] = bitcast i32 [[TMP5185]] to float
// CHECK-NEXT:    [[TMP5187:%.*]] = extractvalue { i32, i1 } [[TMP5184]], 1
// CHECK-NEXT:    [[TMP5188:%.*]] = select i1 [[TMP5187]], float [[TMP5180]], float [[TMP5186]]
// CHECK-NEXT:    store float [[TMP5188]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5189:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5190:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5191:%.*]] = bitcast float [[TMP5189]] to i32
// CHECK-NEXT:    [[TMP5192:%.*]] = bitcast float [[TMP5190]] to i32
// CHECK-NEXT:    [[TMP5193:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5191]], i32 [[TMP5192]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5194:%.*]] = extractvalue { i32, i1 } [[TMP5193]], 0
// CHECK-NEXT:    [[TMP5195:%.*]] = bitcast i32 [[TMP5194]] to float
// CHECK-NEXT:    [[TMP5196:%.*]] = extractvalue { i32, i1 } [[TMP5193]], 1
// CHECK-NEXT:    [[TMP5197:%.*]] = select i1 [[TMP5196]], float [[TMP5189]], float [[TMP5195]]
// CHECK-NEXT:    store float [[TMP5197]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP5198:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5199:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5200:%.*]] = bitcast float [[TMP5198]] to i32
// CHECK-NEXT:    [[TMP5201:%.*]] = bitcast float [[TMP5199]] to i32
// CHECK-NEXT:    [[TMP5202:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5200]], i32 [[TMP5201]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5203:%.*]] = extractvalue { i32, i1 } [[TMP5202]], 0
// CHECK-NEXT:    [[TMP5204:%.*]] = bitcast i32 [[TMP5203]] to float
// CHECK-NEXT:    [[TMP5205:%.*]] = extractvalue { i32, i1 } [[TMP5202]], 1
// CHECK-NEXT:    br i1 [[TMP5205]], label [[FX_ATOMIC_EXIT483:%.*]], label [[FX_ATOMIC_CONT484:%.*]]
// CHECK:       fx.atomic.cont484:
// CHECK-NEXT:    store float [[TMP5204]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT483]]
// CHECK:       fx.atomic.exit483:
// CHECK-NEXT:    [[TMP5206:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5207:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5208:%.*]] = bitcast float [[TMP5206]] to i32
// CHECK-NEXT:    [[TMP5209:%.*]] = bitcast float [[TMP5207]] to i32
// CHECK-NEXT:    [[TMP5210:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5208]], i32 [[TMP5209]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5211:%.*]] = extractvalue { i32, i1 } [[TMP5210]], 0
// CHECK-NEXT:    [[TMP5212:%.*]] = bitcast i32 [[TMP5211]] to float
// CHECK-NEXT:    [[TMP5213:%.*]] = extractvalue { i32, i1 } [[TMP5210]], 1
// CHECK-NEXT:    br i1 [[TMP5213]], label [[FX_ATOMIC_EXIT485:%.*]], label [[FX_ATOMIC_CONT486:%.*]]
// CHECK:       fx.atomic.cont486:
// CHECK-NEXT:    store float [[TMP5212]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT485]]
// CHECK:       fx.atomic.exit485:
// CHECK-NEXT:    [[TMP5214:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5215:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5216:%.*]] = bitcast float [[TMP5214]] to i32
// CHECK-NEXT:    [[TMP5217:%.*]] = bitcast float [[TMP5215]] to i32
// CHECK-NEXT:    [[TMP5218:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5216]], i32 [[TMP5217]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5219:%.*]] = extractvalue { i32, i1 } [[TMP5218]], 1
// CHECK-NEXT:    [[TMP5220:%.*]] = sext i1 [[TMP5219]] to i32
// CHECK-NEXT:    store i32 [[TMP5220]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5221:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5222:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5223:%.*]] = bitcast float [[TMP5221]] to i32
// CHECK-NEXT:    [[TMP5224:%.*]] = bitcast float [[TMP5222]] to i32
// CHECK-NEXT:    [[TMP5225:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5223]], i32 [[TMP5224]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5226:%.*]] = extractvalue { i32, i1 } [[TMP5225]], 1
// CHECK-NEXT:    [[TMP5227:%.*]] = sext i1 [[TMP5226]] to i32
// CHECK-NEXT:    store i32 [[TMP5227]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5228:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5229:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5230:%.*]] = bitcast float [[TMP5228]] to i32
// CHECK-NEXT:    [[TMP5231:%.*]] = bitcast float [[TMP5229]] to i32
// CHECK-NEXT:    [[TMP5232:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5230]], i32 [[TMP5231]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5233:%.*]] = extractvalue { i32, i1 } [[TMP5232]], 0
// CHECK-NEXT:    [[TMP5234:%.*]] = bitcast i32 [[TMP5233]] to float
// CHECK-NEXT:    [[TMP5235:%.*]] = extractvalue { i32, i1 } [[TMP5232]], 1
// CHECK-NEXT:    br i1 [[TMP5235]], label [[FX_ATOMIC_EXIT487:%.*]], label [[FX_ATOMIC_CONT488:%.*]]
// CHECK:       fx.atomic.cont488:
// CHECK-NEXT:    store float [[TMP5234]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT487]]
// CHECK:       fx.atomic.exit487:
// CHECK-NEXT:    [[TMP5236:%.*]] = extractvalue { i32, i1 } [[TMP5232]], 1
// CHECK-NEXT:    [[TMP5237:%.*]] = sext i1 [[TMP5236]] to i32
// CHECK-NEXT:    store i32 [[TMP5237]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5238:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5239:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5240:%.*]] = bitcast float [[TMP5238]] to i32
// CHECK-NEXT:    [[TMP5241:%.*]] = bitcast float [[TMP5239]] to i32
// CHECK-NEXT:    [[TMP5242:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5240]], i32 [[TMP5241]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP5243:%.*]] = extractvalue { i32, i1 } [[TMP5242]], 0
// CHECK-NEXT:    [[TMP5244:%.*]] = bitcast i32 [[TMP5243]] to float
// CHECK-NEXT:    [[TMP5245:%.*]] = extractvalue { i32, i1 } [[TMP5242]], 1
// CHECK-NEXT:    br i1 [[TMP5245]], label [[FX_ATOMIC_EXIT489:%.*]], label [[FX_ATOMIC_CONT490:%.*]]
// CHECK:       fx.atomic.cont490:
// CHECK-NEXT:    store float [[TMP5244]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT489]]
// CHECK:       fx.atomic.exit489:
// CHECK-NEXT:    [[TMP5246:%.*]] = extractvalue { i32, i1 } [[TMP5242]], 1
// CHECK-NEXT:    [[TMP5247:%.*]] = sext i1 [[TMP5246]] to i32
// CHECK-NEXT:    store i32 [[TMP5247]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5248:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5249:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5248]] release, align 4
// CHECK-NEXT:    store float [[TMP5249]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5250:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5251:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5250]] release, align 4
// CHECK-NEXT:    store float [[TMP5251]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5252:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5253:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5252]] release, align 4
// CHECK-NEXT:    store float [[TMP5253]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5254:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5255:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5254]] release, align 4
// CHECK-NEXT:    store float [[TMP5255]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5256:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5257:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5258:%.*]] = bitcast float [[TMP5256]] to i32
// CHECK-NEXT:    [[TMP5259:%.*]] = bitcast float [[TMP5257]] to i32
// CHECK-NEXT:    [[TMP5260:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5258]], i32 [[TMP5259]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5261:%.*]] = extractvalue { i32, i1 } [[TMP5260]], 0
// CHECK-NEXT:    [[TMP5262:%.*]] = bitcast i32 [[TMP5261]] to float
// CHECK-NEXT:    store float [[TMP5262]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5263:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5264:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5265:%.*]] = bitcast float [[TMP5263]] to i32
// CHECK-NEXT:    [[TMP5266:%.*]] = bitcast float [[TMP5264]] to i32
// CHECK-NEXT:    [[TMP5267:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5265]], i32 [[TMP5266]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5268:%.*]] = extractvalue { i32, i1 } [[TMP5267]], 0
// CHECK-NEXT:    [[TMP5269:%.*]] = bitcast i32 [[TMP5268]] to float
// CHECK-NEXT:    store float [[TMP5269]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5270:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5271:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5270]] release, align 4
// CHECK-NEXT:    [[TMP5272:%.*]] = fcmp ogt float [[TMP5271]], [[TMP5270]]
// CHECK-NEXT:    [[TMP5273:%.*]] = select i1 [[TMP5272]], float [[TMP5270]], float [[TMP5271]]
// CHECK-NEXT:    store float [[TMP5273]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5274:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5275:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5274]] release, align 4
// CHECK-NEXT:    [[TMP5276:%.*]] = fcmp olt float [[TMP5275]], [[TMP5274]]
// CHECK-NEXT:    [[TMP5277:%.*]] = select i1 [[TMP5276]], float [[TMP5274]], float [[TMP5275]]
// CHECK-NEXT:    store float [[TMP5277]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5278:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5279:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5278]] release, align 4
// CHECK-NEXT:    [[TMP5280:%.*]] = fcmp olt float [[TMP5279]], [[TMP5278]]
// CHECK-NEXT:    [[TMP5281:%.*]] = select i1 [[TMP5280]], float [[TMP5278]], float [[TMP5279]]
// CHECK-NEXT:    store float [[TMP5281]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5282:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5283:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5282]] release, align 4
// CHECK-NEXT:    [[TMP5284:%.*]] = fcmp ogt float [[TMP5283]], [[TMP5282]]
// CHECK-NEXT:    [[TMP5285:%.*]] = select i1 [[TMP5284]], float [[TMP5282]], float [[TMP5283]]
// CHECK-NEXT:    store float [[TMP5285]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5286:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5287:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5288:%.*]] = bitcast float [[TMP5286]] to i32
// CHECK-NEXT:    [[TMP5289:%.*]] = bitcast float [[TMP5287]] to i32
// CHECK-NEXT:    [[TMP5290:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5288]], i32 [[TMP5289]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5291:%.*]] = extractvalue { i32, i1 } [[TMP5290]], 0
// CHECK-NEXT:    [[TMP5292:%.*]] = bitcast i32 [[TMP5291]] to float
// CHECK-NEXT:    [[TMP5293:%.*]] = extractvalue { i32, i1 } [[TMP5290]], 1
// CHECK-NEXT:    [[TMP5294:%.*]] = select i1 [[TMP5293]], float [[TMP5286]], float [[TMP5292]]
// CHECK-NEXT:    store float [[TMP5294]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5295:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5296:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5297:%.*]] = bitcast float [[TMP5295]] to i32
// CHECK-NEXT:    [[TMP5298:%.*]] = bitcast float [[TMP5296]] to i32
// CHECK-NEXT:    [[TMP5299:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5297]], i32 [[TMP5298]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5300:%.*]] = extractvalue { i32, i1 } [[TMP5299]], 0
// CHECK-NEXT:    [[TMP5301:%.*]] = bitcast i32 [[TMP5300]] to float
// CHECK-NEXT:    [[TMP5302:%.*]] = extractvalue { i32, i1 } [[TMP5299]], 1
// CHECK-NEXT:    [[TMP5303:%.*]] = select i1 [[TMP5302]], float [[TMP5295]], float [[TMP5301]]
// CHECK-NEXT:    store float [[TMP5303]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5304:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5305:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5306:%.*]] = bitcast float [[TMP5304]] to i32
// CHECK-NEXT:    [[TMP5307:%.*]] = bitcast float [[TMP5305]] to i32
// CHECK-NEXT:    [[TMP5308:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5306]], i32 [[TMP5307]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5309:%.*]] = extractvalue { i32, i1 } [[TMP5308]], 0
// CHECK-NEXT:    [[TMP5310:%.*]] = bitcast i32 [[TMP5309]] to float
// CHECK-NEXT:    [[TMP5311:%.*]] = extractvalue { i32, i1 } [[TMP5308]], 1
// CHECK-NEXT:    br i1 [[TMP5311]], label [[FX_ATOMIC_EXIT491:%.*]], label [[FX_ATOMIC_CONT492:%.*]]
// CHECK:       fx.atomic.cont492:
// CHECK-NEXT:    store float [[TMP5310]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT491]]
// CHECK:       fx.atomic.exit491:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5312:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5313:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5314:%.*]] = bitcast float [[TMP5312]] to i32
// CHECK-NEXT:    [[TMP5315:%.*]] = bitcast float [[TMP5313]] to i32
// CHECK-NEXT:    [[TMP5316:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5314]], i32 [[TMP5315]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5317:%.*]] = extractvalue { i32, i1 } [[TMP5316]], 0
// CHECK-NEXT:    [[TMP5318:%.*]] = bitcast i32 [[TMP5317]] to float
// CHECK-NEXT:    [[TMP5319:%.*]] = extractvalue { i32, i1 } [[TMP5316]], 1
// CHECK-NEXT:    br i1 [[TMP5319]], label [[FX_ATOMIC_EXIT493:%.*]], label [[FX_ATOMIC_CONT494:%.*]]
// CHECK:       fx.atomic.cont494:
// CHECK-NEXT:    store float [[TMP5318]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT493]]
// CHECK:       fx.atomic.exit493:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5320:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5321:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5322:%.*]] = bitcast float [[TMP5320]] to i32
// CHECK-NEXT:    [[TMP5323:%.*]] = bitcast float [[TMP5321]] to i32
// CHECK-NEXT:    [[TMP5324:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5322]], i32 [[TMP5323]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5325:%.*]] = extractvalue { i32, i1 } [[TMP5324]], 1
// CHECK-NEXT:    [[TMP5326:%.*]] = sext i1 [[TMP5325]] to i32
// CHECK-NEXT:    store i32 [[TMP5326]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5327:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5328:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5329:%.*]] = bitcast float [[TMP5327]] to i32
// CHECK-NEXT:    [[TMP5330:%.*]] = bitcast float [[TMP5328]] to i32
// CHECK-NEXT:    [[TMP5331:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5329]], i32 [[TMP5330]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5332:%.*]] = extractvalue { i32, i1 } [[TMP5331]], 1
// CHECK-NEXT:    [[TMP5333:%.*]] = sext i1 [[TMP5332]] to i32
// CHECK-NEXT:    store i32 [[TMP5333]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5334:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5335:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5336:%.*]] = bitcast float [[TMP5334]] to i32
// CHECK-NEXT:    [[TMP5337:%.*]] = bitcast float [[TMP5335]] to i32
// CHECK-NEXT:    [[TMP5338:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5336]], i32 [[TMP5337]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5339:%.*]] = extractvalue { i32, i1 } [[TMP5338]], 0
// CHECK-NEXT:    [[TMP5340:%.*]] = bitcast i32 [[TMP5339]] to float
// CHECK-NEXT:    [[TMP5341:%.*]] = extractvalue { i32, i1 } [[TMP5338]], 1
// CHECK-NEXT:    br i1 [[TMP5341]], label [[FX_ATOMIC_EXIT495:%.*]], label [[FX_ATOMIC_CONT496:%.*]]
// CHECK:       fx.atomic.cont496:
// CHECK-NEXT:    store float [[TMP5340]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT495]]
// CHECK:       fx.atomic.exit495:
// CHECK-NEXT:    [[TMP5342:%.*]] = extractvalue { i32, i1 } [[TMP5338]], 1
// CHECK-NEXT:    [[TMP5343:%.*]] = sext i1 [[TMP5342]] to i32
// CHECK-NEXT:    store i32 [[TMP5343]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5344:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5345:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5346:%.*]] = bitcast float [[TMP5344]] to i32
// CHECK-NEXT:    [[TMP5347:%.*]] = bitcast float [[TMP5345]] to i32
// CHECK-NEXT:    [[TMP5348:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5346]], i32 [[TMP5347]] release monotonic, align 4
// CHECK-NEXT:    [[TMP5349:%.*]] = extractvalue { i32, i1 } [[TMP5348]], 0
// CHECK-NEXT:    [[TMP5350:%.*]] = bitcast i32 [[TMP5349]] to float
// CHECK-NEXT:    [[TMP5351:%.*]] = extractvalue { i32, i1 } [[TMP5348]], 1
// CHECK-NEXT:    br i1 [[TMP5351]], label [[FX_ATOMIC_EXIT497:%.*]], label [[FX_ATOMIC_CONT498:%.*]]
// CHECK:       fx.atomic.cont498:
// CHECK-NEXT:    store float [[TMP5350]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT497]]
// CHECK:       fx.atomic.exit497:
// CHECK-NEXT:    [[TMP5352:%.*]] = extractvalue { i32, i1 } [[TMP5348]], 1
// CHECK-NEXT:    [[TMP5353:%.*]] = sext i1 [[TMP5352]] to i32
// CHECK-NEXT:    store i32 [[TMP5353]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5354:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5355:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5354]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP5355]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5356:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5357:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5356]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP5357]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5358:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5359:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5358]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP5359]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5360:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5361:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5360]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP5361]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5362:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5363:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5364:%.*]] = bitcast float [[TMP5362]] to i32
// CHECK-NEXT:    [[TMP5365:%.*]] = bitcast float [[TMP5363]] to i32
// CHECK-NEXT:    [[TMP5366:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5364]], i32 [[TMP5365]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5367:%.*]] = extractvalue { i32, i1 } [[TMP5366]], 0
// CHECK-NEXT:    [[TMP5368:%.*]] = bitcast i32 [[TMP5367]] to float
// CHECK-NEXT:    store float [[TMP5368]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5369:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5370:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5371:%.*]] = bitcast float [[TMP5369]] to i32
// CHECK-NEXT:    [[TMP5372:%.*]] = bitcast float [[TMP5370]] to i32
// CHECK-NEXT:    [[TMP5373:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5371]], i32 [[TMP5372]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5374:%.*]] = extractvalue { i32, i1 } [[TMP5373]], 0
// CHECK-NEXT:    [[TMP5375:%.*]] = bitcast i32 [[TMP5374]] to float
// CHECK-NEXT:    store float [[TMP5375]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5376:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5377:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5376]] seq_cst, align 4
// CHECK-NEXT:    [[TMP5378:%.*]] = fcmp ogt float [[TMP5377]], [[TMP5376]]
// CHECK-NEXT:    [[TMP5379:%.*]] = select i1 [[TMP5378]], float [[TMP5376]], float [[TMP5377]]
// CHECK-NEXT:    store float [[TMP5379]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5380:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5381:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5380]] seq_cst, align 4
// CHECK-NEXT:    [[TMP5382:%.*]] = fcmp olt float [[TMP5381]], [[TMP5380]]
// CHECK-NEXT:    [[TMP5383:%.*]] = select i1 [[TMP5382]], float [[TMP5380]], float [[TMP5381]]
// CHECK-NEXT:    store float [[TMP5383]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5384:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5385:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP5384]] seq_cst, align 4
// CHECK-NEXT:    [[TMP5386:%.*]] = fcmp olt float [[TMP5385]], [[TMP5384]]
// CHECK-NEXT:    [[TMP5387:%.*]] = select i1 [[TMP5386]], float [[TMP5384]], float [[TMP5385]]
// CHECK-NEXT:    store float [[TMP5387]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5388:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5389:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP5388]] seq_cst, align 4
// CHECK-NEXT:    [[TMP5390:%.*]] = fcmp ogt float [[TMP5389]], [[TMP5388]]
// CHECK-NEXT:    [[TMP5391:%.*]] = select i1 [[TMP5390]], float [[TMP5388]], float [[TMP5389]]
// CHECK-NEXT:    store float [[TMP5391]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5392:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5393:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5394:%.*]] = bitcast float [[TMP5392]] to i32
// CHECK-NEXT:    [[TMP5395:%.*]] = bitcast float [[TMP5393]] to i32
// CHECK-NEXT:    [[TMP5396:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5394]], i32 [[TMP5395]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5397:%.*]] = extractvalue { i32, i1 } [[TMP5396]], 0
// CHECK-NEXT:    [[TMP5398:%.*]] = bitcast i32 [[TMP5397]] to float
// CHECK-NEXT:    [[TMP5399:%.*]] = extractvalue { i32, i1 } [[TMP5396]], 1
// CHECK-NEXT:    [[TMP5400:%.*]] = select i1 [[TMP5399]], float [[TMP5392]], float [[TMP5398]]
// CHECK-NEXT:    store float [[TMP5400]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5401:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5402:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5403:%.*]] = bitcast float [[TMP5401]] to i32
// CHECK-NEXT:    [[TMP5404:%.*]] = bitcast float [[TMP5402]] to i32
// CHECK-NEXT:    [[TMP5405:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5403]], i32 [[TMP5404]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5406:%.*]] = extractvalue { i32, i1 } [[TMP5405]], 0
// CHECK-NEXT:    [[TMP5407:%.*]] = bitcast i32 [[TMP5406]] to float
// CHECK-NEXT:    [[TMP5408:%.*]] = extractvalue { i32, i1 } [[TMP5405]], 1
// CHECK-NEXT:    [[TMP5409:%.*]] = select i1 [[TMP5408]], float [[TMP5401]], float [[TMP5407]]
// CHECK-NEXT:    store float [[TMP5409]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5410:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5411:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5412:%.*]] = bitcast float [[TMP5410]] to i32
// CHECK-NEXT:    [[TMP5413:%.*]] = bitcast float [[TMP5411]] to i32
// CHECK-NEXT:    [[TMP5414:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5412]], i32 [[TMP5413]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5415:%.*]] = extractvalue { i32, i1 } [[TMP5414]], 0
// CHECK-NEXT:    [[TMP5416:%.*]] = bitcast i32 [[TMP5415]] to float
// CHECK-NEXT:    [[TMP5417:%.*]] = extractvalue { i32, i1 } [[TMP5414]], 1
// CHECK-NEXT:    br i1 [[TMP5417]], label [[FX_ATOMIC_EXIT499:%.*]], label [[FX_ATOMIC_CONT500:%.*]]
// CHECK:       fx.atomic.cont500:
// CHECK-NEXT:    store float [[TMP5416]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT499]]
// CHECK:       fx.atomic.exit499:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5418:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5419:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5420:%.*]] = bitcast float [[TMP5418]] to i32
// CHECK-NEXT:    [[TMP5421:%.*]] = bitcast float [[TMP5419]] to i32
// CHECK-NEXT:    [[TMP5422:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5420]], i32 [[TMP5421]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5423:%.*]] = extractvalue { i32, i1 } [[TMP5422]], 0
// CHECK-NEXT:    [[TMP5424:%.*]] = bitcast i32 [[TMP5423]] to float
// CHECK-NEXT:    [[TMP5425:%.*]] = extractvalue { i32, i1 } [[TMP5422]], 1
// CHECK-NEXT:    br i1 [[TMP5425]], label [[FX_ATOMIC_EXIT501:%.*]], label [[FX_ATOMIC_CONT502:%.*]]
// CHECK:       fx.atomic.cont502:
// CHECK-NEXT:    store float [[TMP5424]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT501]]
// CHECK:       fx.atomic.exit501:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5426:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5427:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5428:%.*]] = bitcast float [[TMP5426]] to i32
// CHECK-NEXT:    [[TMP5429:%.*]] = bitcast float [[TMP5427]] to i32
// CHECK-NEXT:    [[TMP5430:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5428]], i32 [[TMP5429]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5431:%.*]] = extractvalue { i32, i1 } [[TMP5430]], 1
// CHECK-NEXT:    [[TMP5432:%.*]] = sext i1 [[TMP5431]] to i32
// CHECK-NEXT:    store i32 [[TMP5432]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5433:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5434:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5435:%.*]] = bitcast float [[TMP5433]] to i32
// CHECK-NEXT:    [[TMP5436:%.*]] = bitcast float [[TMP5434]] to i32
// CHECK-NEXT:    [[TMP5437:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5435]], i32 [[TMP5436]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5438:%.*]] = extractvalue { i32, i1 } [[TMP5437]], 1
// CHECK-NEXT:    [[TMP5439:%.*]] = sext i1 [[TMP5438]] to i32
// CHECK-NEXT:    store i32 [[TMP5439]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5440:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5441:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5442:%.*]] = bitcast float [[TMP5440]] to i32
// CHECK-NEXT:    [[TMP5443:%.*]] = bitcast float [[TMP5441]] to i32
// CHECK-NEXT:    [[TMP5444:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5442]], i32 [[TMP5443]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5445:%.*]] = extractvalue { i32, i1 } [[TMP5444]], 0
// CHECK-NEXT:    [[TMP5446:%.*]] = bitcast i32 [[TMP5445]] to float
// CHECK-NEXT:    [[TMP5447:%.*]] = extractvalue { i32, i1 } [[TMP5444]], 1
// CHECK-NEXT:    br i1 [[TMP5447]], label [[FX_ATOMIC_EXIT503:%.*]], label [[FX_ATOMIC_CONT504:%.*]]
// CHECK:       fx.atomic.cont504:
// CHECK-NEXT:    store float [[TMP5446]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT503]]
// CHECK:       fx.atomic.exit503:
// CHECK-NEXT:    [[TMP5448:%.*]] = extractvalue { i32, i1 } [[TMP5444]], 1
// CHECK-NEXT:    [[TMP5449:%.*]] = sext i1 [[TMP5448]] to i32
// CHECK-NEXT:    store i32 [[TMP5449]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5450:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5451:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP5452:%.*]] = bitcast float [[TMP5450]] to i32
// CHECK-NEXT:    [[TMP5453:%.*]] = bitcast float [[TMP5451]] to i32
// CHECK-NEXT:    [[TMP5454:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP5452]], i32 [[TMP5453]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP5455:%.*]] = extractvalue { i32, i1 } [[TMP5454]], 0
// CHECK-NEXT:    [[TMP5456:%.*]] = bitcast i32 [[TMP5455]] to float
// CHECK-NEXT:    [[TMP5457:%.*]] = extractvalue { i32, i1 } [[TMP5454]], 1
// CHECK-NEXT:    br i1 [[TMP5457]], label [[FX_ATOMIC_EXIT505:%.*]], label [[FX_ATOMIC_CONT506:%.*]]
// CHECK:       fx.atomic.cont506:
// CHECK-NEXT:    store float [[TMP5456]], ptr [[FV]], align 4
// CHECK-NEXT:    br label [[FX_ATOMIC_EXIT505]]
// CHECK:       fx.atomic.exit505:
// CHECK-NEXT:    [[TMP5458:%.*]] = extractvalue { i32, i1 } [[TMP5454]], 1
// CHECK-NEXT:    [[TMP5459:%.*]] = sext i1 [[TMP5458]] to i32
// CHECK-NEXT:    store i32 [[TMP5459]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5460:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5461:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5460]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5461]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5462:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5463:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5462]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5463]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5464:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5465:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5464]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5465]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5466:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5467:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5466]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5467]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5468:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5469:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5470:%.*]] = bitcast double [[TMP5468]] to i64
// CHECK-NEXT:    [[TMP5471:%.*]] = bitcast double [[TMP5469]] to i64
// CHECK-NEXT:    [[TMP5472:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5470]], i64 [[TMP5471]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5473:%.*]] = extractvalue { i64, i1 } [[TMP5472]], 0
// CHECK-NEXT:    [[TMP5474:%.*]] = bitcast i64 [[TMP5473]] to double
// CHECK-NEXT:    store double [[TMP5474]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5475:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5476:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5477:%.*]] = bitcast double [[TMP5475]] to i64
// CHECK-NEXT:    [[TMP5478:%.*]] = bitcast double [[TMP5476]] to i64
// CHECK-NEXT:    [[TMP5479:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5477]], i64 [[TMP5478]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5480:%.*]] = extractvalue { i64, i1 } [[TMP5479]], 0
// CHECK-NEXT:    [[TMP5481:%.*]] = bitcast i64 [[TMP5480]] to double
// CHECK-NEXT:    store double [[TMP5481]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5482:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5483:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5482]] monotonic, align 8
// CHECK-NEXT:    [[TMP5484:%.*]] = fcmp ogt double [[TMP5483]], [[TMP5482]]
// CHECK-NEXT:    [[TMP5485:%.*]] = select i1 [[TMP5484]], double [[TMP5482]], double [[TMP5483]]
// CHECK-NEXT:    store double [[TMP5485]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5486:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5487:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5486]] monotonic, align 8
// CHECK-NEXT:    [[TMP5488:%.*]] = fcmp olt double [[TMP5487]], [[TMP5486]]
// CHECK-NEXT:    [[TMP5489:%.*]] = select i1 [[TMP5488]], double [[TMP5486]], double [[TMP5487]]
// CHECK-NEXT:    store double [[TMP5489]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5490:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5491:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5490]] monotonic, align 8
// CHECK-NEXT:    [[TMP5492:%.*]] = fcmp olt double [[TMP5491]], [[TMP5490]]
// CHECK-NEXT:    [[TMP5493:%.*]] = select i1 [[TMP5492]], double [[TMP5490]], double [[TMP5491]]
// CHECK-NEXT:    store double [[TMP5493]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5494:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5495:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5494]] monotonic, align 8
// CHECK-NEXT:    [[TMP5496:%.*]] = fcmp ogt double [[TMP5495]], [[TMP5494]]
// CHECK-NEXT:    [[TMP5497:%.*]] = select i1 [[TMP5496]], double [[TMP5494]], double [[TMP5495]]
// CHECK-NEXT:    store double [[TMP5497]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5498:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5499:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5500:%.*]] = bitcast double [[TMP5498]] to i64
// CHECK-NEXT:    [[TMP5501:%.*]] = bitcast double [[TMP5499]] to i64
// CHECK-NEXT:    [[TMP5502:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5500]], i64 [[TMP5501]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5503:%.*]] = extractvalue { i64, i1 } [[TMP5502]], 0
// CHECK-NEXT:    [[TMP5504:%.*]] = bitcast i64 [[TMP5503]] to double
// CHECK-NEXT:    [[TMP5505:%.*]] = extractvalue { i64, i1 } [[TMP5502]], 1
// CHECK-NEXT:    [[TMP5506:%.*]] = select i1 [[TMP5505]], double [[TMP5498]], double [[TMP5504]]
// CHECK-NEXT:    store double [[TMP5506]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5507:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5508:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5509:%.*]] = bitcast double [[TMP5507]] to i64
// CHECK-NEXT:    [[TMP5510:%.*]] = bitcast double [[TMP5508]] to i64
// CHECK-NEXT:    [[TMP5511:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5509]], i64 [[TMP5510]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5512:%.*]] = extractvalue { i64, i1 } [[TMP5511]], 0
// CHECK-NEXT:    [[TMP5513:%.*]] = bitcast i64 [[TMP5512]] to double
// CHECK-NEXT:    [[TMP5514:%.*]] = extractvalue { i64, i1 } [[TMP5511]], 1
// CHECK-NEXT:    [[TMP5515:%.*]] = select i1 [[TMP5514]], double [[TMP5507]], double [[TMP5513]]
// CHECK-NEXT:    store double [[TMP5515]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5516:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5517:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5518:%.*]] = bitcast double [[TMP5516]] to i64
// CHECK-NEXT:    [[TMP5519:%.*]] = bitcast double [[TMP5517]] to i64
// CHECK-NEXT:    [[TMP5520:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5518]], i64 [[TMP5519]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5521:%.*]] = extractvalue { i64, i1 } [[TMP5520]], 0
// CHECK-NEXT:    [[TMP5522:%.*]] = bitcast i64 [[TMP5521]] to double
// CHECK-NEXT:    [[TMP5523:%.*]] = extractvalue { i64, i1 } [[TMP5520]], 1
// CHECK-NEXT:    br i1 [[TMP5523]], label [[DX_ATOMIC_EXIT:%.*]], label [[DX_ATOMIC_CONT:%.*]]
// CHECK:       dx.atomic.cont:
// CHECK-NEXT:    store double [[TMP5522]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT]]
// CHECK:       dx.atomic.exit:
// CHECK-NEXT:    [[TMP5524:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5525:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5526:%.*]] = bitcast double [[TMP5524]] to i64
// CHECK-NEXT:    [[TMP5527:%.*]] = bitcast double [[TMP5525]] to i64
// CHECK-NEXT:    [[TMP5528:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5526]], i64 [[TMP5527]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5529:%.*]] = extractvalue { i64, i1 } [[TMP5528]], 0
// CHECK-NEXT:    [[TMP5530:%.*]] = bitcast i64 [[TMP5529]] to double
// CHECK-NEXT:    [[TMP5531:%.*]] = extractvalue { i64, i1 } [[TMP5528]], 1
// CHECK-NEXT:    br i1 [[TMP5531]], label [[DX_ATOMIC_EXIT507:%.*]], label [[DX_ATOMIC_CONT508:%.*]]
// CHECK:       dx.atomic.cont508:
// CHECK-NEXT:    store double [[TMP5530]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT507]]
// CHECK:       dx.atomic.exit507:
// CHECK-NEXT:    [[TMP5532:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5533:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5534:%.*]] = bitcast double [[TMP5532]] to i64
// CHECK-NEXT:    [[TMP5535:%.*]] = bitcast double [[TMP5533]] to i64
// CHECK-NEXT:    [[TMP5536:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5534]], i64 [[TMP5535]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5537:%.*]] = extractvalue { i64, i1 } [[TMP5536]], 1
// CHECK-NEXT:    [[TMP5538:%.*]] = sext i1 [[TMP5537]] to i32
// CHECK-NEXT:    store i32 [[TMP5538]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5539:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5540:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5541:%.*]] = bitcast double [[TMP5539]] to i64
// CHECK-NEXT:    [[TMP5542:%.*]] = bitcast double [[TMP5540]] to i64
// CHECK-NEXT:    [[TMP5543:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5541]], i64 [[TMP5542]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5544:%.*]] = extractvalue { i64, i1 } [[TMP5543]], 1
// CHECK-NEXT:    [[TMP5545:%.*]] = sext i1 [[TMP5544]] to i32
// CHECK-NEXT:    store i32 [[TMP5545]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5546:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5547:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5548:%.*]] = bitcast double [[TMP5546]] to i64
// CHECK-NEXT:    [[TMP5549:%.*]] = bitcast double [[TMP5547]] to i64
// CHECK-NEXT:    [[TMP5550:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5548]], i64 [[TMP5549]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5551:%.*]] = extractvalue { i64, i1 } [[TMP5550]], 0
// CHECK-NEXT:    [[TMP5552:%.*]] = bitcast i64 [[TMP5551]] to double
// CHECK-NEXT:    [[TMP5553:%.*]] = extractvalue { i64, i1 } [[TMP5550]], 1
// CHECK-NEXT:    br i1 [[TMP5553]], label [[DX_ATOMIC_EXIT509:%.*]], label [[DX_ATOMIC_CONT510:%.*]]
// CHECK:       dx.atomic.cont510:
// CHECK-NEXT:    store double [[TMP5552]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT509]]
// CHECK:       dx.atomic.exit509:
// CHECK-NEXT:    [[TMP5554:%.*]] = extractvalue { i64, i1 } [[TMP5550]], 1
// CHECK-NEXT:    [[TMP5555:%.*]] = sext i1 [[TMP5554]] to i32
// CHECK-NEXT:    store i32 [[TMP5555]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5556:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5557:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5558:%.*]] = bitcast double [[TMP5556]] to i64
// CHECK-NEXT:    [[TMP5559:%.*]] = bitcast double [[TMP5557]] to i64
// CHECK-NEXT:    [[TMP5560:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5558]], i64 [[TMP5559]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5561:%.*]] = extractvalue { i64, i1 } [[TMP5560]], 0
// CHECK-NEXT:    [[TMP5562:%.*]] = bitcast i64 [[TMP5561]] to double
// CHECK-NEXT:    [[TMP5563:%.*]] = extractvalue { i64, i1 } [[TMP5560]], 1
// CHECK-NEXT:    br i1 [[TMP5563]], label [[DX_ATOMIC_EXIT511:%.*]], label [[DX_ATOMIC_CONT512:%.*]]
// CHECK:       dx.atomic.cont512:
// CHECK-NEXT:    store double [[TMP5562]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT511]]
// CHECK:       dx.atomic.exit511:
// CHECK-NEXT:    [[TMP5564:%.*]] = extractvalue { i64, i1 } [[TMP5560]], 1
// CHECK-NEXT:    [[TMP5565:%.*]] = sext i1 [[TMP5564]] to i32
// CHECK-NEXT:    store i32 [[TMP5565]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5566:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5567:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5566]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP5567]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5568:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5569:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5568]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP5569]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5570:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5571:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5570]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP5571]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5572:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5573:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5572]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP5573]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5574:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5575:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5576:%.*]] = bitcast double [[TMP5574]] to i64
// CHECK-NEXT:    [[TMP5577:%.*]] = bitcast double [[TMP5575]] to i64
// CHECK-NEXT:    [[TMP5578:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5576]], i64 [[TMP5577]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5579:%.*]] = extractvalue { i64, i1 } [[TMP5578]], 0
// CHECK-NEXT:    [[TMP5580:%.*]] = bitcast i64 [[TMP5579]] to double
// CHECK-NEXT:    store double [[TMP5580]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5581:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5582:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5583:%.*]] = bitcast double [[TMP5581]] to i64
// CHECK-NEXT:    [[TMP5584:%.*]] = bitcast double [[TMP5582]] to i64
// CHECK-NEXT:    [[TMP5585:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5583]], i64 [[TMP5584]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5586:%.*]] = extractvalue { i64, i1 } [[TMP5585]], 0
// CHECK-NEXT:    [[TMP5587:%.*]] = bitcast i64 [[TMP5586]] to double
// CHECK-NEXT:    store double [[TMP5587]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5588:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5589:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5588]] acq_rel, align 8
// CHECK-NEXT:    [[TMP5590:%.*]] = fcmp ogt double [[TMP5589]], [[TMP5588]]
// CHECK-NEXT:    [[TMP5591:%.*]] = select i1 [[TMP5590]], double [[TMP5588]], double [[TMP5589]]
// CHECK-NEXT:    store double [[TMP5591]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5592:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5593:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5592]] acq_rel, align 8
// CHECK-NEXT:    [[TMP5594:%.*]] = fcmp olt double [[TMP5593]], [[TMP5592]]
// CHECK-NEXT:    [[TMP5595:%.*]] = select i1 [[TMP5594]], double [[TMP5592]], double [[TMP5593]]
// CHECK-NEXT:    store double [[TMP5595]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5596:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5597:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5596]] acq_rel, align 8
// CHECK-NEXT:    [[TMP5598:%.*]] = fcmp olt double [[TMP5597]], [[TMP5596]]
// CHECK-NEXT:    [[TMP5599:%.*]] = select i1 [[TMP5598]], double [[TMP5596]], double [[TMP5597]]
// CHECK-NEXT:    store double [[TMP5599]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5600:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5601:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5600]] acq_rel, align 8
// CHECK-NEXT:    [[TMP5602:%.*]] = fcmp ogt double [[TMP5601]], [[TMP5600]]
// CHECK-NEXT:    [[TMP5603:%.*]] = select i1 [[TMP5602]], double [[TMP5600]], double [[TMP5601]]
// CHECK-NEXT:    store double [[TMP5603]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5604:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5605:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5606:%.*]] = bitcast double [[TMP5604]] to i64
// CHECK-NEXT:    [[TMP5607:%.*]] = bitcast double [[TMP5605]] to i64
// CHECK-NEXT:    [[TMP5608:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5606]], i64 [[TMP5607]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5609:%.*]] = extractvalue { i64, i1 } [[TMP5608]], 0
// CHECK-NEXT:    [[TMP5610:%.*]] = bitcast i64 [[TMP5609]] to double
// CHECK-NEXT:    [[TMP5611:%.*]] = extractvalue { i64, i1 } [[TMP5608]], 1
// CHECK-NEXT:    [[TMP5612:%.*]] = select i1 [[TMP5611]], double [[TMP5604]], double [[TMP5610]]
// CHECK-NEXT:    store double [[TMP5612]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5613:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5614:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5615:%.*]] = bitcast double [[TMP5613]] to i64
// CHECK-NEXT:    [[TMP5616:%.*]] = bitcast double [[TMP5614]] to i64
// CHECK-NEXT:    [[TMP5617:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5615]], i64 [[TMP5616]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5618:%.*]] = extractvalue { i64, i1 } [[TMP5617]], 0
// CHECK-NEXT:    [[TMP5619:%.*]] = bitcast i64 [[TMP5618]] to double
// CHECK-NEXT:    [[TMP5620:%.*]] = extractvalue { i64, i1 } [[TMP5617]], 1
// CHECK-NEXT:    [[TMP5621:%.*]] = select i1 [[TMP5620]], double [[TMP5613]], double [[TMP5619]]
// CHECK-NEXT:    store double [[TMP5621]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5622:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5623:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5624:%.*]] = bitcast double [[TMP5622]] to i64
// CHECK-NEXT:    [[TMP5625:%.*]] = bitcast double [[TMP5623]] to i64
// CHECK-NEXT:    [[TMP5626:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5624]], i64 [[TMP5625]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5627:%.*]] = extractvalue { i64, i1 } [[TMP5626]], 0
// CHECK-NEXT:    [[TMP5628:%.*]] = bitcast i64 [[TMP5627]] to double
// CHECK-NEXT:    [[TMP5629:%.*]] = extractvalue { i64, i1 } [[TMP5626]], 1
// CHECK-NEXT:    br i1 [[TMP5629]], label [[DX_ATOMIC_EXIT513:%.*]], label [[DX_ATOMIC_CONT514:%.*]]
// CHECK:       dx.atomic.cont514:
// CHECK-NEXT:    store double [[TMP5628]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT513]]
// CHECK:       dx.atomic.exit513:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5630:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5631:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5632:%.*]] = bitcast double [[TMP5630]] to i64
// CHECK-NEXT:    [[TMP5633:%.*]] = bitcast double [[TMP5631]] to i64
// CHECK-NEXT:    [[TMP5634:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5632]], i64 [[TMP5633]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5635:%.*]] = extractvalue { i64, i1 } [[TMP5634]], 0
// CHECK-NEXT:    [[TMP5636:%.*]] = bitcast i64 [[TMP5635]] to double
// CHECK-NEXT:    [[TMP5637:%.*]] = extractvalue { i64, i1 } [[TMP5634]], 1
// CHECK-NEXT:    br i1 [[TMP5637]], label [[DX_ATOMIC_EXIT515:%.*]], label [[DX_ATOMIC_CONT516:%.*]]
// CHECK:       dx.atomic.cont516:
// CHECK-NEXT:    store double [[TMP5636]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT515]]
// CHECK:       dx.atomic.exit515:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5638:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5639:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5640:%.*]] = bitcast double [[TMP5638]] to i64
// CHECK-NEXT:    [[TMP5641:%.*]] = bitcast double [[TMP5639]] to i64
// CHECK-NEXT:    [[TMP5642:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5640]], i64 [[TMP5641]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5643:%.*]] = extractvalue { i64, i1 } [[TMP5642]], 1
// CHECK-NEXT:    [[TMP5644:%.*]] = sext i1 [[TMP5643]] to i32
// CHECK-NEXT:    store i32 [[TMP5644]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5645:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5646:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5647:%.*]] = bitcast double [[TMP5645]] to i64
// CHECK-NEXT:    [[TMP5648:%.*]] = bitcast double [[TMP5646]] to i64
// CHECK-NEXT:    [[TMP5649:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5647]], i64 [[TMP5648]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5650:%.*]] = extractvalue { i64, i1 } [[TMP5649]], 1
// CHECK-NEXT:    [[TMP5651:%.*]] = sext i1 [[TMP5650]] to i32
// CHECK-NEXT:    store i32 [[TMP5651]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5652:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5653:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5654:%.*]] = bitcast double [[TMP5652]] to i64
// CHECK-NEXT:    [[TMP5655:%.*]] = bitcast double [[TMP5653]] to i64
// CHECK-NEXT:    [[TMP5656:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5654]], i64 [[TMP5655]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5657:%.*]] = extractvalue { i64, i1 } [[TMP5656]], 0
// CHECK-NEXT:    [[TMP5658:%.*]] = bitcast i64 [[TMP5657]] to double
// CHECK-NEXT:    [[TMP5659:%.*]] = extractvalue { i64, i1 } [[TMP5656]], 1
// CHECK-NEXT:    br i1 [[TMP5659]], label [[DX_ATOMIC_EXIT517:%.*]], label [[DX_ATOMIC_CONT518:%.*]]
// CHECK:       dx.atomic.cont518:
// CHECK-NEXT:    store double [[TMP5658]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT517]]
// CHECK:       dx.atomic.exit517:
// CHECK-NEXT:    [[TMP5660:%.*]] = extractvalue { i64, i1 } [[TMP5656]], 1
// CHECK-NEXT:    [[TMP5661:%.*]] = sext i1 [[TMP5660]] to i32
// CHECK-NEXT:    store i32 [[TMP5661]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5662:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5663:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5664:%.*]] = bitcast double [[TMP5662]] to i64
// CHECK-NEXT:    [[TMP5665:%.*]] = bitcast double [[TMP5663]] to i64
// CHECK-NEXT:    [[TMP5666:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5664]], i64 [[TMP5665]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP5667:%.*]] = extractvalue { i64, i1 } [[TMP5666]], 0
// CHECK-NEXT:    [[TMP5668:%.*]] = bitcast i64 [[TMP5667]] to double
// CHECK-NEXT:    [[TMP5669:%.*]] = extractvalue { i64, i1 } [[TMP5666]], 1
// CHECK-NEXT:    br i1 [[TMP5669]], label [[DX_ATOMIC_EXIT519:%.*]], label [[DX_ATOMIC_CONT520:%.*]]
// CHECK:       dx.atomic.cont520:
// CHECK-NEXT:    store double [[TMP5668]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT519]]
// CHECK:       dx.atomic.exit519:
// CHECK-NEXT:    [[TMP5670:%.*]] = extractvalue { i64, i1 } [[TMP5666]], 1
// CHECK-NEXT:    [[TMP5671:%.*]] = sext i1 [[TMP5670]] to i32
// CHECK-NEXT:    store i32 [[TMP5671]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5672:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5673:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5672]] acquire, align 8
// CHECK-NEXT:    store double [[TMP5673]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5674:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5675:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5674]] acquire, align 8
// CHECK-NEXT:    store double [[TMP5675]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5676:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5677:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5676]] acquire, align 8
// CHECK-NEXT:    store double [[TMP5677]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5678:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5679:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5678]] acquire, align 8
// CHECK-NEXT:    store double [[TMP5679]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5680:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5681:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5682:%.*]] = bitcast double [[TMP5680]] to i64
// CHECK-NEXT:    [[TMP5683:%.*]] = bitcast double [[TMP5681]] to i64
// CHECK-NEXT:    [[TMP5684:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5682]], i64 [[TMP5683]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5685:%.*]] = extractvalue { i64, i1 } [[TMP5684]], 0
// CHECK-NEXT:    [[TMP5686:%.*]] = bitcast i64 [[TMP5685]] to double
// CHECK-NEXT:    store double [[TMP5686]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5687:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5688:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5689:%.*]] = bitcast double [[TMP5687]] to i64
// CHECK-NEXT:    [[TMP5690:%.*]] = bitcast double [[TMP5688]] to i64
// CHECK-NEXT:    [[TMP5691:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5689]], i64 [[TMP5690]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5692:%.*]] = extractvalue { i64, i1 } [[TMP5691]], 0
// CHECK-NEXT:    [[TMP5693:%.*]] = bitcast i64 [[TMP5692]] to double
// CHECK-NEXT:    store double [[TMP5693]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5694:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5695:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5694]] acquire, align 8
// CHECK-NEXT:    [[TMP5696:%.*]] = fcmp ogt double [[TMP5695]], [[TMP5694]]
// CHECK-NEXT:    [[TMP5697:%.*]] = select i1 [[TMP5696]], double [[TMP5694]], double [[TMP5695]]
// CHECK-NEXT:    store double [[TMP5697]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5698:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5699:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5698]] acquire, align 8
// CHECK-NEXT:    [[TMP5700:%.*]] = fcmp olt double [[TMP5699]], [[TMP5698]]
// CHECK-NEXT:    [[TMP5701:%.*]] = select i1 [[TMP5700]], double [[TMP5698]], double [[TMP5699]]
// CHECK-NEXT:    store double [[TMP5701]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5702:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5703:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5702]] acquire, align 8
// CHECK-NEXT:    [[TMP5704:%.*]] = fcmp olt double [[TMP5703]], [[TMP5702]]
// CHECK-NEXT:    [[TMP5705:%.*]] = select i1 [[TMP5704]], double [[TMP5702]], double [[TMP5703]]
// CHECK-NEXT:    store double [[TMP5705]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5706:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5707:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5706]] acquire, align 8
// CHECK-NEXT:    [[TMP5708:%.*]] = fcmp ogt double [[TMP5707]], [[TMP5706]]
// CHECK-NEXT:    [[TMP5709:%.*]] = select i1 [[TMP5708]], double [[TMP5706]], double [[TMP5707]]
// CHECK-NEXT:    store double [[TMP5709]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5710:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5711:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5712:%.*]] = bitcast double [[TMP5710]] to i64
// CHECK-NEXT:    [[TMP5713:%.*]] = bitcast double [[TMP5711]] to i64
// CHECK-NEXT:    [[TMP5714:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5712]], i64 [[TMP5713]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5715:%.*]] = extractvalue { i64, i1 } [[TMP5714]], 0
// CHECK-NEXT:    [[TMP5716:%.*]] = bitcast i64 [[TMP5715]] to double
// CHECK-NEXT:    [[TMP5717:%.*]] = extractvalue { i64, i1 } [[TMP5714]], 1
// CHECK-NEXT:    [[TMP5718:%.*]] = select i1 [[TMP5717]], double [[TMP5710]], double [[TMP5716]]
// CHECK-NEXT:    store double [[TMP5718]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5719:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5720:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5721:%.*]] = bitcast double [[TMP5719]] to i64
// CHECK-NEXT:    [[TMP5722:%.*]] = bitcast double [[TMP5720]] to i64
// CHECK-NEXT:    [[TMP5723:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5721]], i64 [[TMP5722]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5724:%.*]] = extractvalue { i64, i1 } [[TMP5723]], 0
// CHECK-NEXT:    [[TMP5725:%.*]] = bitcast i64 [[TMP5724]] to double
// CHECK-NEXT:    [[TMP5726:%.*]] = extractvalue { i64, i1 } [[TMP5723]], 1
// CHECK-NEXT:    [[TMP5727:%.*]] = select i1 [[TMP5726]], double [[TMP5719]], double [[TMP5725]]
// CHECK-NEXT:    store double [[TMP5727]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5728:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5729:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5730:%.*]] = bitcast double [[TMP5728]] to i64
// CHECK-NEXT:    [[TMP5731:%.*]] = bitcast double [[TMP5729]] to i64
// CHECK-NEXT:    [[TMP5732:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5730]], i64 [[TMP5731]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5733:%.*]] = extractvalue { i64, i1 } [[TMP5732]], 0
// CHECK-NEXT:    [[TMP5734:%.*]] = bitcast i64 [[TMP5733]] to double
// CHECK-NEXT:    [[TMP5735:%.*]] = extractvalue { i64, i1 } [[TMP5732]], 1
// CHECK-NEXT:    br i1 [[TMP5735]], label [[DX_ATOMIC_EXIT521:%.*]], label [[DX_ATOMIC_CONT522:%.*]]
// CHECK:       dx.atomic.cont522:
// CHECK-NEXT:    store double [[TMP5734]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT521]]
// CHECK:       dx.atomic.exit521:
// CHECK-NEXT:    [[TMP5736:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5737:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5738:%.*]] = bitcast double [[TMP5736]] to i64
// CHECK-NEXT:    [[TMP5739:%.*]] = bitcast double [[TMP5737]] to i64
// CHECK-NEXT:    [[TMP5740:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5738]], i64 [[TMP5739]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5741:%.*]] = extractvalue { i64, i1 } [[TMP5740]], 0
// CHECK-NEXT:    [[TMP5742:%.*]] = bitcast i64 [[TMP5741]] to double
// CHECK-NEXT:    [[TMP5743:%.*]] = extractvalue { i64, i1 } [[TMP5740]], 1
// CHECK-NEXT:    br i1 [[TMP5743]], label [[DX_ATOMIC_EXIT523:%.*]], label [[DX_ATOMIC_CONT524:%.*]]
// CHECK:       dx.atomic.cont524:
// CHECK-NEXT:    store double [[TMP5742]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT523]]
// CHECK:       dx.atomic.exit523:
// CHECK-NEXT:    [[TMP5744:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5745:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5746:%.*]] = bitcast double [[TMP5744]] to i64
// CHECK-NEXT:    [[TMP5747:%.*]] = bitcast double [[TMP5745]] to i64
// CHECK-NEXT:    [[TMP5748:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5746]], i64 [[TMP5747]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5749:%.*]] = extractvalue { i64, i1 } [[TMP5748]], 1
// CHECK-NEXT:    [[TMP5750:%.*]] = sext i1 [[TMP5749]] to i32
// CHECK-NEXT:    store i32 [[TMP5750]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5751:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5752:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5753:%.*]] = bitcast double [[TMP5751]] to i64
// CHECK-NEXT:    [[TMP5754:%.*]] = bitcast double [[TMP5752]] to i64
// CHECK-NEXT:    [[TMP5755:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5753]], i64 [[TMP5754]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5756:%.*]] = extractvalue { i64, i1 } [[TMP5755]], 1
// CHECK-NEXT:    [[TMP5757:%.*]] = sext i1 [[TMP5756]] to i32
// CHECK-NEXT:    store i32 [[TMP5757]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5758:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5759:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5760:%.*]] = bitcast double [[TMP5758]] to i64
// CHECK-NEXT:    [[TMP5761:%.*]] = bitcast double [[TMP5759]] to i64
// CHECK-NEXT:    [[TMP5762:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5760]], i64 [[TMP5761]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5763:%.*]] = extractvalue { i64, i1 } [[TMP5762]], 0
// CHECK-NEXT:    [[TMP5764:%.*]] = bitcast i64 [[TMP5763]] to double
// CHECK-NEXT:    [[TMP5765:%.*]] = extractvalue { i64, i1 } [[TMP5762]], 1
// CHECK-NEXT:    br i1 [[TMP5765]], label [[DX_ATOMIC_EXIT525:%.*]], label [[DX_ATOMIC_CONT526:%.*]]
// CHECK:       dx.atomic.cont526:
// CHECK-NEXT:    store double [[TMP5764]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT525]]
// CHECK:       dx.atomic.exit525:
// CHECK-NEXT:    [[TMP5766:%.*]] = extractvalue { i64, i1 } [[TMP5762]], 1
// CHECK-NEXT:    [[TMP5767:%.*]] = sext i1 [[TMP5766]] to i32
// CHECK-NEXT:    store i32 [[TMP5767]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5768:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5769:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5770:%.*]] = bitcast double [[TMP5768]] to i64
// CHECK-NEXT:    [[TMP5771:%.*]] = bitcast double [[TMP5769]] to i64
// CHECK-NEXT:    [[TMP5772:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5770]], i64 [[TMP5771]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP5773:%.*]] = extractvalue { i64, i1 } [[TMP5772]], 0
// CHECK-NEXT:    [[TMP5774:%.*]] = bitcast i64 [[TMP5773]] to double
// CHECK-NEXT:    [[TMP5775:%.*]] = extractvalue { i64, i1 } [[TMP5772]], 1
// CHECK-NEXT:    br i1 [[TMP5775]], label [[DX_ATOMIC_EXIT527:%.*]], label [[DX_ATOMIC_CONT528:%.*]]
// CHECK:       dx.atomic.cont528:
// CHECK-NEXT:    store double [[TMP5774]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT527]]
// CHECK:       dx.atomic.exit527:
// CHECK-NEXT:    [[TMP5776:%.*]] = extractvalue { i64, i1 } [[TMP5772]], 1
// CHECK-NEXT:    [[TMP5777:%.*]] = sext i1 [[TMP5776]] to i32
// CHECK-NEXT:    store i32 [[TMP5777]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5778:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5779:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5778]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5779]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5780:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5781:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5780]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5781]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5782:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5783:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5782]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5783]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5784:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5785:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5784]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP5785]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5786:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5787:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5788:%.*]] = bitcast double [[TMP5786]] to i64
// CHECK-NEXT:    [[TMP5789:%.*]] = bitcast double [[TMP5787]] to i64
// CHECK-NEXT:    [[TMP5790:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5788]], i64 [[TMP5789]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5791:%.*]] = extractvalue { i64, i1 } [[TMP5790]], 0
// CHECK-NEXT:    [[TMP5792:%.*]] = bitcast i64 [[TMP5791]] to double
// CHECK-NEXT:    store double [[TMP5792]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5793:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5794:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5795:%.*]] = bitcast double [[TMP5793]] to i64
// CHECK-NEXT:    [[TMP5796:%.*]] = bitcast double [[TMP5794]] to i64
// CHECK-NEXT:    [[TMP5797:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5795]], i64 [[TMP5796]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5798:%.*]] = extractvalue { i64, i1 } [[TMP5797]], 0
// CHECK-NEXT:    [[TMP5799:%.*]] = bitcast i64 [[TMP5798]] to double
// CHECK-NEXT:    store double [[TMP5799]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5800:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5801:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5800]] monotonic, align 8
// CHECK-NEXT:    [[TMP5802:%.*]] = fcmp ogt double [[TMP5801]], [[TMP5800]]
// CHECK-NEXT:    [[TMP5803:%.*]] = select i1 [[TMP5802]], double [[TMP5800]], double [[TMP5801]]
// CHECK-NEXT:    store double [[TMP5803]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5804:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5805:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5804]] monotonic, align 8
// CHECK-NEXT:    [[TMP5806:%.*]] = fcmp olt double [[TMP5805]], [[TMP5804]]
// CHECK-NEXT:    [[TMP5807:%.*]] = select i1 [[TMP5806]], double [[TMP5804]], double [[TMP5805]]
// CHECK-NEXT:    store double [[TMP5807]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5808:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5809:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5808]] monotonic, align 8
// CHECK-NEXT:    [[TMP5810:%.*]] = fcmp olt double [[TMP5809]], [[TMP5808]]
// CHECK-NEXT:    [[TMP5811:%.*]] = select i1 [[TMP5810]], double [[TMP5808]], double [[TMP5809]]
// CHECK-NEXT:    store double [[TMP5811]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5812:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5813:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5812]] monotonic, align 8
// CHECK-NEXT:    [[TMP5814:%.*]] = fcmp ogt double [[TMP5813]], [[TMP5812]]
// CHECK-NEXT:    [[TMP5815:%.*]] = select i1 [[TMP5814]], double [[TMP5812]], double [[TMP5813]]
// CHECK-NEXT:    store double [[TMP5815]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5816:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5817:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5818:%.*]] = bitcast double [[TMP5816]] to i64
// CHECK-NEXT:    [[TMP5819:%.*]] = bitcast double [[TMP5817]] to i64
// CHECK-NEXT:    [[TMP5820:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5818]], i64 [[TMP5819]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5821:%.*]] = extractvalue { i64, i1 } [[TMP5820]], 0
// CHECK-NEXT:    [[TMP5822:%.*]] = bitcast i64 [[TMP5821]] to double
// CHECK-NEXT:    [[TMP5823:%.*]] = extractvalue { i64, i1 } [[TMP5820]], 1
// CHECK-NEXT:    [[TMP5824:%.*]] = select i1 [[TMP5823]], double [[TMP5816]], double [[TMP5822]]
// CHECK-NEXT:    store double [[TMP5824]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5825:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5826:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5827:%.*]] = bitcast double [[TMP5825]] to i64
// CHECK-NEXT:    [[TMP5828:%.*]] = bitcast double [[TMP5826]] to i64
// CHECK-NEXT:    [[TMP5829:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5827]], i64 [[TMP5828]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5830:%.*]] = extractvalue { i64, i1 } [[TMP5829]], 0
// CHECK-NEXT:    [[TMP5831:%.*]] = bitcast i64 [[TMP5830]] to double
// CHECK-NEXT:    [[TMP5832:%.*]] = extractvalue { i64, i1 } [[TMP5829]], 1
// CHECK-NEXT:    [[TMP5833:%.*]] = select i1 [[TMP5832]], double [[TMP5825]], double [[TMP5831]]
// CHECK-NEXT:    store double [[TMP5833]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP5834:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5835:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5836:%.*]] = bitcast double [[TMP5834]] to i64
// CHECK-NEXT:    [[TMP5837:%.*]] = bitcast double [[TMP5835]] to i64
// CHECK-NEXT:    [[TMP5838:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5836]], i64 [[TMP5837]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5839:%.*]] = extractvalue { i64, i1 } [[TMP5838]], 0
// CHECK-NEXT:    [[TMP5840:%.*]] = bitcast i64 [[TMP5839]] to double
// CHECK-NEXT:    [[TMP5841:%.*]] = extractvalue { i64, i1 } [[TMP5838]], 1
// CHECK-NEXT:    br i1 [[TMP5841]], label [[DX_ATOMIC_EXIT529:%.*]], label [[DX_ATOMIC_CONT530:%.*]]
// CHECK:       dx.atomic.cont530:
// CHECK-NEXT:    store double [[TMP5840]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT529]]
// CHECK:       dx.atomic.exit529:
// CHECK-NEXT:    [[TMP5842:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5843:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5844:%.*]] = bitcast double [[TMP5842]] to i64
// CHECK-NEXT:    [[TMP5845:%.*]] = bitcast double [[TMP5843]] to i64
// CHECK-NEXT:    [[TMP5846:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5844]], i64 [[TMP5845]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5847:%.*]] = extractvalue { i64, i1 } [[TMP5846]], 0
// CHECK-NEXT:    [[TMP5848:%.*]] = bitcast i64 [[TMP5847]] to double
// CHECK-NEXT:    [[TMP5849:%.*]] = extractvalue { i64, i1 } [[TMP5846]], 1
// CHECK-NEXT:    br i1 [[TMP5849]], label [[DX_ATOMIC_EXIT531:%.*]], label [[DX_ATOMIC_CONT532:%.*]]
// CHECK:       dx.atomic.cont532:
// CHECK-NEXT:    store double [[TMP5848]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT531]]
// CHECK:       dx.atomic.exit531:
// CHECK-NEXT:    [[TMP5850:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5851:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5852:%.*]] = bitcast double [[TMP5850]] to i64
// CHECK-NEXT:    [[TMP5853:%.*]] = bitcast double [[TMP5851]] to i64
// CHECK-NEXT:    [[TMP5854:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5852]], i64 [[TMP5853]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5855:%.*]] = extractvalue { i64, i1 } [[TMP5854]], 1
// CHECK-NEXT:    [[TMP5856:%.*]] = sext i1 [[TMP5855]] to i32
// CHECK-NEXT:    store i32 [[TMP5856]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5857:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5858:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5859:%.*]] = bitcast double [[TMP5857]] to i64
// CHECK-NEXT:    [[TMP5860:%.*]] = bitcast double [[TMP5858]] to i64
// CHECK-NEXT:    [[TMP5861:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5859]], i64 [[TMP5860]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5862:%.*]] = extractvalue { i64, i1 } [[TMP5861]], 1
// CHECK-NEXT:    [[TMP5863:%.*]] = sext i1 [[TMP5862]] to i32
// CHECK-NEXT:    store i32 [[TMP5863]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5864:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5865:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5866:%.*]] = bitcast double [[TMP5864]] to i64
// CHECK-NEXT:    [[TMP5867:%.*]] = bitcast double [[TMP5865]] to i64
// CHECK-NEXT:    [[TMP5868:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5866]], i64 [[TMP5867]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5869:%.*]] = extractvalue { i64, i1 } [[TMP5868]], 0
// CHECK-NEXT:    [[TMP5870:%.*]] = bitcast i64 [[TMP5869]] to double
// CHECK-NEXT:    [[TMP5871:%.*]] = extractvalue { i64, i1 } [[TMP5868]], 1
// CHECK-NEXT:    br i1 [[TMP5871]], label [[DX_ATOMIC_EXIT533:%.*]], label [[DX_ATOMIC_CONT534:%.*]]
// CHECK:       dx.atomic.cont534:
// CHECK-NEXT:    store double [[TMP5870]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT533]]
// CHECK:       dx.atomic.exit533:
// CHECK-NEXT:    [[TMP5872:%.*]] = extractvalue { i64, i1 } [[TMP5868]], 1
// CHECK-NEXT:    [[TMP5873:%.*]] = sext i1 [[TMP5872]] to i32
// CHECK-NEXT:    store i32 [[TMP5873]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5874:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5875:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5876:%.*]] = bitcast double [[TMP5874]] to i64
// CHECK-NEXT:    [[TMP5877:%.*]] = bitcast double [[TMP5875]] to i64
// CHECK-NEXT:    [[TMP5878:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5876]], i64 [[TMP5877]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5879:%.*]] = extractvalue { i64, i1 } [[TMP5878]], 0
// CHECK-NEXT:    [[TMP5880:%.*]] = bitcast i64 [[TMP5879]] to double
// CHECK-NEXT:    [[TMP5881:%.*]] = extractvalue { i64, i1 } [[TMP5878]], 1
// CHECK-NEXT:    br i1 [[TMP5881]], label [[DX_ATOMIC_EXIT535:%.*]], label [[DX_ATOMIC_CONT536:%.*]]
// CHECK:       dx.atomic.cont536:
// CHECK-NEXT:    store double [[TMP5880]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT535]]
// CHECK:       dx.atomic.exit535:
// CHECK-NEXT:    [[TMP5882:%.*]] = extractvalue { i64, i1 } [[TMP5878]], 1
// CHECK-NEXT:    [[TMP5883:%.*]] = sext i1 [[TMP5882]] to i32
// CHECK-NEXT:    store i32 [[TMP5883]], ptr [[IR]], align 4
// CHECK-NEXT:    [[TMP5884:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5885:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5884]] release, align 8
// CHECK-NEXT:    store double [[TMP5885]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5886:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5887:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5886]] release, align 8
// CHECK-NEXT:    store double [[TMP5887]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5888:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5889:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5888]] release, align 8
// CHECK-NEXT:    store double [[TMP5889]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5890:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5891:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5890]] release, align 8
// CHECK-NEXT:    store double [[TMP5891]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5892:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5893:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5894:%.*]] = bitcast double [[TMP5892]] to i64
// CHECK-NEXT:    [[TMP5895:%.*]] = bitcast double [[TMP5893]] to i64
// CHECK-NEXT:    [[TMP5896:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5894]], i64 [[TMP5895]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5897:%.*]] = extractvalue { i64, i1 } [[TMP5896]], 0
// CHECK-NEXT:    [[TMP5898:%.*]] = bitcast i64 [[TMP5897]] to double
// CHECK-NEXT:    store double [[TMP5898]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5899:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5900:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5901:%.*]] = bitcast double [[TMP5899]] to i64
// CHECK-NEXT:    [[TMP5902:%.*]] = bitcast double [[TMP5900]] to i64
// CHECK-NEXT:    [[TMP5903:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5901]], i64 [[TMP5902]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5904:%.*]] = extractvalue { i64, i1 } [[TMP5903]], 0
// CHECK-NEXT:    [[TMP5905:%.*]] = bitcast i64 [[TMP5904]] to double
// CHECK-NEXT:    store double [[TMP5905]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5906:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5907:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5906]] release, align 8
// CHECK-NEXT:    [[TMP5908:%.*]] = fcmp ogt double [[TMP5907]], [[TMP5906]]
// CHECK-NEXT:    [[TMP5909:%.*]] = select i1 [[TMP5908]], double [[TMP5906]], double [[TMP5907]]
// CHECK-NEXT:    store double [[TMP5909]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5910:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5911:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5910]] release, align 8
// CHECK-NEXT:    [[TMP5912:%.*]] = fcmp olt double [[TMP5911]], [[TMP5910]]
// CHECK-NEXT:    [[TMP5913:%.*]] = select i1 [[TMP5912]], double [[TMP5910]], double [[TMP5911]]
// CHECK-NEXT:    store double [[TMP5913]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5914:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5915:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5914]] release, align 8
// CHECK-NEXT:    [[TMP5916:%.*]] = fcmp olt double [[TMP5915]], [[TMP5914]]
// CHECK-NEXT:    [[TMP5917:%.*]] = select i1 [[TMP5916]], double [[TMP5914]], double [[TMP5915]]
// CHECK-NEXT:    store double [[TMP5917]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5918:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5919:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5918]] release, align 8
// CHECK-NEXT:    [[TMP5920:%.*]] = fcmp ogt double [[TMP5919]], [[TMP5918]]
// CHECK-NEXT:    [[TMP5921:%.*]] = select i1 [[TMP5920]], double [[TMP5918]], double [[TMP5919]]
// CHECK-NEXT:    store double [[TMP5921]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5922:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5923:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5924:%.*]] = bitcast double [[TMP5922]] to i64
// CHECK-NEXT:    [[TMP5925:%.*]] = bitcast double [[TMP5923]] to i64
// CHECK-NEXT:    [[TMP5926:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5924]], i64 [[TMP5925]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5927:%.*]] = extractvalue { i64, i1 } [[TMP5926]], 0
// CHECK-NEXT:    [[TMP5928:%.*]] = bitcast i64 [[TMP5927]] to double
// CHECK-NEXT:    [[TMP5929:%.*]] = extractvalue { i64, i1 } [[TMP5926]], 1
// CHECK-NEXT:    [[TMP5930:%.*]] = select i1 [[TMP5929]], double [[TMP5922]], double [[TMP5928]]
// CHECK-NEXT:    store double [[TMP5930]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5931:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5932:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5933:%.*]] = bitcast double [[TMP5931]] to i64
// CHECK-NEXT:    [[TMP5934:%.*]] = bitcast double [[TMP5932]] to i64
// CHECK-NEXT:    [[TMP5935:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5933]], i64 [[TMP5934]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5936:%.*]] = extractvalue { i64, i1 } [[TMP5935]], 0
// CHECK-NEXT:    [[TMP5937:%.*]] = bitcast i64 [[TMP5936]] to double
// CHECK-NEXT:    [[TMP5938:%.*]] = extractvalue { i64, i1 } [[TMP5935]], 1
// CHECK-NEXT:    [[TMP5939:%.*]] = select i1 [[TMP5938]], double [[TMP5931]], double [[TMP5937]]
// CHECK-NEXT:    store double [[TMP5939]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5940:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5941:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5942:%.*]] = bitcast double [[TMP5940]] to i64
// CHECK-NEXT:    [[TMP5943:%.*]] = bitcast double [[TMP5941]] to i64
// CHECK-NEXT:    [[TMP5944:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5942]], i64 [[TMP5943]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5945:%.*]] = extractvalue { i64, i1 } [[TMP5944]], 0
// CHECK-NEXT:    [[TMP5946:%.*]] = bitcast i64 [[TMP5945]] to double
// CHECK-NEXT:    [[TMP5947:%.*]] = extractvalue { i64, i1 } [[TMP5944]], 1
// CHECK-NEXT:    br i1 [[TMP5947]], label [[DX_ATOMIC_EXIT537:%.*]], label [[DX_ATOMIC_CONT538:%.*]]
// CHECK:       dx.atomic.cont538:
// CHECK-NEXT:    store double [[TMP5946]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT537]]
// CHECK:       dx.atomic.exit537:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5948:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5949:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5950:%.*]] = bitcast double [[TMP5948]] to i64
// CHECK-NEXT:    [[TMP5951:%.*]] = bitcast double [[TMP5949]] to i64
// CHECK-NEXT:    [[TMP5952:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5950]], i64 [[TMP5951]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5953:%.*]] = extractvalue { i64, i1 } [[TMP5952]], 0
// CHECK-NEXT:    [[TMP5954:%.*]] = bitcast i64 [[TMP5953]] to double
// CHECK-NEXT:    [[TMP5955:%.*]] = extractvalue { i64, i1 } [[TMP5952]], 1
// CHECK-NEXT:    br i1 [[TMP5955]], label [[DX_ATOMIC_EXIT539:%.*]], label [[DX_ATOMIC_CONT540:%.*]]
// CHECK:       dx.atomic.cont540:
// CHECK-NEXT:    store double [[TMP5954]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT539]]
// CHECK:       dx.atomic.exit539:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5956:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5957:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5958:%.*]] = bitcast double [[TMP5956]] to i64
// CHECK-NEXT:    [[TMP5959:%.*]] = bitcast double [[TMP5957]] to i64
// CHECK-NEXT:    [[TMP5960:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5958]], i64 [[TMP5959]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5961:%.*]] = extractvalue { i64, i1 } [[TMP5960]], 1
// CHECK-NEXT:    [[TMP5962:%.*]] = sext i1 [[TMP5961]] to i32
// CHECK-NEXT:    store i32 [[TMP5962]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5963:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5964:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5965:%.*]] = bitcast double [[TMP5963]] to i64
// CHECK-NEXT:    [[TMP5966:%.*]] = bitcast double [[TMP5964]] to i64
// CHECK-NEXT:    [[TMP5967:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5965]], i64 [[TMP5966]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5968:%.*]] = extractvalue { i64, i1 } [[TMP5967]], 1
// CHECK-NEXT:    [[TMP5969:%.*]] = sext i1 [[TMP5968]] to i32
// CHECK-NEXT:    store i32 [[TMP5969]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5970:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5971:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5972:%.*]] = bitcast double [[TMP5970]] to i64
// CHECK-NEXT:    [[TMP5973:%.*]] = bitcast double [[TMP5971]] to i64
// CHECK-NEXT:    [[TMP5974:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5972]], i64 [[TMP5973]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5975:%.*]] = extractvalue { i64, i1 } [[TMP5974]], 0
// CHECK-NEXT:    [[TMP5976:%.*]] = bitcast i64 [[TMP5975]] to double
// CHECK-NEXT:    [[TMP5977:%.*]] = extractvalue { i64, i1 } [[TMP5974]], 1
// CHECK-NEXT:    br i1 [[TMP5977]], label [[DX_ATOMIC_EXIT541:%.*]], label [[DX_ATOMIC_CONT542:%.*]]
// CHECK:       dx.atomic.cont542:
// CHECK-NEXT:    store double [[TMP5976]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT541]]
// CHECK:       dx.atomic.exit541:
// CHECK-NEXT:    [[TMP5978:%.*]] = extractvalue { i64, i1 } [[TMP5974]], 1
// CHECK-NEXT:    [[TMP5979:%.*]] = sext i1 [[TMP5978]] to i32
// CHECK-NEXT:    store i32 [[TMP5979]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5980:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5981:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP5982:%.*]] = bitcast double [[TMP5980]] to i64
// CHECK-NEXT:    [[TMP5983:%.*]] = bitcast double [[TMP5981]] to i64
// CHECK-NEXT:    [[TMP5984:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP5982]], i64 [[TMP5983]] release monotonic, align 8
// CHECK-NEXT:    [[TMP5985:%.*]] = extractvalue { i64, i1 } [[TMP5984]], 0
// CHECK-NEXT:    [[TMP5986:%.*]] = bitcast i64 [[TMP5985]] to double
// CHECK-NEXT:    [[TMP5987:%.*]] = extractvalue { i64, i1 } [[TMP5984]], 1
// CHECK-NEXT:    br i1 [[TMP5987]], label [[DX_ATOMIC_EXIT543:%.*]], label [[DX_ATOMIC_CONT544:%.*]]
// CHECK:       dx.atomic.cont544:
// CHECK-NEXT:    store double [[TMP5986]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT543]]
// CHECK:       dx.atomic.exit543:
// CHECK-NEXT:    [[TMP5988:%.*]] = extractvalue { i64, i1 } [[TMP5984]], 1
// CHECK-NEXT:    [[TMP5989:%.*]] = sext i1 [[TMP5988]] to i32
// CHECK-NEXT:    store i32 [[TMP5989]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5990:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5991:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5990]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP5991]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5992:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5993:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5992]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP5993]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5994:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5995:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP5994]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP5995]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5996:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5997:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP5996]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP5997]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP5998:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5999:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6000:%.*]] = bitcast double [[TMP5998]] to i64
// CHECK-NEXT:    [[TMP6001:%.*]] = bitcast double [[TMP5999]] to i64
// CHECK-NEXT:    [[TMP6002:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6000]], i64 [[TMP6001]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP6003:%.*]] = extractvalue { i64, i1 } [[TMP6002]], 0
// CHECK-NEXT:    [[TMP6004:%.*]] = bitcast i64 [[TMP6003]] to double
// CHECK-NEXT:    store double [[TMP6004]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6005:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6006:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6007:%.*]] = bitcast double [[TMP6005]] to i64
// CHECK-NEXT:    [[TMP6008:%.*]] = bitcast double [[TMP6006]] to i64
// CHECK-NEXT:    [[TMP6009:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6007]], i64 [[TMP6008]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP6010:%.*]] = extractvalue { i64, i1 } [[TMP6009]], 0
// CHECK-NEXT:    [[TMP6011:%.*]] = bitcast i64 [[TMP6010]] to double
// CHECK-NEXT:    store double [[TMP6011]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6012:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6013:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP6012]] seq_cst, align 8
// CHECK-NEXT:    [[TMP6014:%.*]] = fcmp ogt double [[TMP6013]], [[TMP6012]]
// CHECK-NEXT:    [[TMP6015:%.*]] = select i1 [[TMP6014]], double [[TMP6012]], double [[TMP6013]]
// CHECK-NEXT:    store double [[TMP6015]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6016:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6017:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP6016]] seq_cst, align 8
// CHECK-NEXT:    [[TMP6018:%.*]] = fcmp olt double [[TMP6017]], [[TMP6016]]
// CHECK-NEXT:    [[TMP6019:%.*]] = select i1 [[TMP6018]], double [[TMP6016]], double [[TMP6017]]
// CHECK-NEXT:    store double [[TMP6019]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6020:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6021:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP6020]] seq_cst, align 8
// CHECK-NEXT:    [[TMP6022:%.*]] = fcmp olt double [[TMP6021]], [[TMP6020]]
// CHECK-NEXT:    [[TMP6023:%.*]] = select i1 [[TMP6022]], double [[TMP6020]], double [[TMP6021]]
// CHECK-NEXT:    store double [[TMP6023]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6024:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6025:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP6024]] seq_cst, align 8
// CHECK-NEXT:    [[TMP6026:%.*]] = fcmp ogt double [[TMP6025]], [[TMP6024]]
// CHECK-NEXT:    [[TMP6027:%.*]] = select i1 [[TMP6026]], double [[TMP6024]], double [[TMP6025]]
// CHECK-NEXT:    store double [[TMP6027]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6028:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6029:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6030:%.*]] = bitcast double [[TMP6028]] to i64
// CHECK-NEXT:    [[TMP6031:%.*]] = bitcast double [[TMP6029]] to i64
// CHECK-NEXT:    [[TMP6032:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6030]], i64 [[TMP6031]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP6033:%.*]] = extractvalue { i64, i1 } [[TMP6032]], 0
// CHECK-NEXT:    [[TMP6034:%.*]] = bitcast i64 [[TMP6033]] to double
// CHECK-NEXT:    [[TMP6035:%.*]] = extractvalue { i64, i1 } [[TMP6032]], 1
// CHECK-NEXT:    [[TMP6036:%.*]] = select i1 [[TMP6035]], double [[TMP6028]], double [[TMP6034]]
// CHECK-NEXT:    store double [[TMP6036]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6037:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6038:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6039:%.*]] = bitcast double [[TMP6037]] to i64
// CHECK-NEXT:    [[TMP6040:%.*]] = bitcast double [[TMP6038]] to i64
// CHECK-NEXT:    [[TMP6041:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6039]], i64 [[TMP6040]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP6042:%.*]] = extractvalue { i64, i1 } [[TMP6041]], 0
// CHECK-NEXT:    [[TMP6043:%.*]] = bitcast i64 [[TMP6042]] to double
// CHECK-NEXT:    [[TMP6044:%.*]] = extractvalue { i64, i1 } [[TMP6041]], 1
// CHECK-NEXT:    [[TMP6045:%.*]] = select i1 [[TMP6044]], double [[TMP6037]], double [[TMP6043]]
// CHECK-NEXT:    store double [[TMP6045]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6046:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6047:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6048:%.*]] = bitcast double [[TMP6046]] to i64
// CHECK-NEXT:    [[TMP6049:%.*]] = bitcast double [[TMP6047]] to i64
// CHECK-NEXT:    [[TMP6050:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6048]], i64 [[TMP6049]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP6051:%.*]] = extractvalue { i64, i1 } [[TMP6050]], 0
// CHECK-NEXT:    [[TMP6052:%.*]] = bitcast i64 [[TMP6051]] to double
// CHECK-NEXT:    [[TMP6053:%.*]] = extractvalue { i64, i1 } [[TMP6050]], 1
// CHECK-NEXT:    br i1 [[TMP6053]], label [[DX_ATOMIC_EXIT545:%.*]], label [[DX_ATOMIC_CONT546:%.*]]
// CHECK:       dx.atomic.cont546:
// CHECK-NEXT:    store double [[TMP6052]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT545]]
// CHECK:       dx.atomic.exit545:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6054:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6055:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6056:%.*]] = bitcast double [[TMP6054]] to i64
// CHECK-NEXT:    [[TMP6057:%.*]] = bitcast double [[TMP6055]] to i64
// CHECK-NEXT:    [[TMP6058:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6056]], i64 [[TMP6057]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP6059:%.*]] = extractvalue { i64, i1 } [[TMP6058]], 0
// CHECK-NEXT:    [[TMP6060:%.*]] = bitcast i64 [[TMP6059]] to double
// CHECK-NEXT:    [[TMP6061:%.*]] = extractvalue { i64, i1 } [[TMP6058]], 1
// CHECK-NEXT:    br i1 [[TMP6061]], label [[DX_ATOMIC_EXIT547:%.*]], label [[DX_ATOMIC_CONT548:%.*]]
// CHECK:       dx.atomic.cont548:
// CHECK-NEXT:    store double [[TMP6060]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT547]]
// CHECK:       dx.atomic.exit547:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6062:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6063:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6064:%.*]] = bitcast double [[TMP6062]] to i64
// CHECK-NEXT:    [[TMP6065:%.*]] = bitcast double [[TMP6063]] to i64
// CHECK-NEXT:    [[TMP6066:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6064]], i64 [[TMP6065]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP6067:%.*]] = extractvalue { i64, i1 } [[TMP6066]], 1
// CHECK-NEXT:    [[TMP6068:%.*]] = sext i1 [[TMP6067]] to i32
// CHECK-NEXT:    store i32 [[TMP6068]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6069:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6070:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6071:%.*]] = bitcast double [[TMP6069]] to i64
// CHECK-NEXT:    [[TMP6072:%.*]] = bitcast double [[TMP6070]] to i64
// CHECK-NEXT:    [[TMP6073:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6071]], i64 [[TMP6072]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP6074:%.*]] = extractvalue { i64, i1 } [[TMP6073]], 1
// CHECK-NEXT:    [[TMP6075:%.*]] = sext i1 [[TMP6074]] to i32
// CHECK-NEXT:    store i32 [[TMP6075]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6076:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6077:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6078:%.*]] = bitcast double [[TMP6076]] to i64
// CHECK-NEXT:    [[TMP6079:%.*]] = bitcast double [[TMP6077]] to i64
// CHECK-NEXT:    [[TMP6080:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6078]], i64 [[TMP6079]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP6081:%.*]] = extractvalue { i64, i1 } [[TMP6080]], 0
// CHECK-NEXT:    [[TMP6082:%.*]] = bitcast i64 [[TMP6081]] to double
// CHECK-NEXT:    [[TMP6083:%.*]] = extractvalue { i64, i1 } [[TMP6080]], 1
// CHECK-NEXT:    br i1 [[TMP6083]], label [[DX_ATOMIC_EXIT549:%.*]], label [[DX_ATOMIC_CONT550:%.*]]
// CHECK:       dx.atomic.cont550:
// CHECK-NEXT:    store double [[TMP6082]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT549]]
// CHECK:       dx.atomic.exit549:
// CHECK-NEXT:    [[TMP6084:%.*]] = extractvalue { i64, i1 } [[TMP6080]], 1
// CHECK-NEXT:    [[TMP6085:%.*]] = sext i1 [[TMP6084]] to i32
// CHECK-NEXT:    store i32 [[TMP6085]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP6086:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP6087:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6088:%.*]] = bitcast double [[TMP6086]] to i64
// CHECK-NEXT:    [[TMP6089:%.*]] = bitcast double [[TMP6087]] to i64
// CHECK-NEXT:    [[TMP6090:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6088]], i64 [[TMP6089]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP6091:%.*]] = extractvalue { i64, i1 } [[TMP6090]], 0
// CHECK-NEXT:    [[TMP6092:%.*]] = bitcast i64 [[TMP6091]] to double
// CHECK-NEXT:    [[TMP6093:%.*]] = extractvalue { i64, i1 } [[TMP6090]], 1
// CHECK-NEXT:    br i1 [[TMP6093]], label [[DX_ATOMIC_EXIT551:%.*]], label [[DX_ATOMIC_CONT552:%.*]]
// CHECK:       dx.atomic.cont552:
// CHECK-NEXT:    store double [[TMP6092]], ptr [[DV]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT551]]
// CHECK:       dx.atomic.exit551:
// CHECK-NEXT:    [[TMP6094:%.*]] = extractvalue { i64, i1 } [[TMP6090]], 1
// CHECK-NEXT:    [[TMP6095:%.*]] = sext i1 [[TMP6094]] to i32
// CHECK-NEXT:    store i32 [[TMP6095]], ptr [[IR]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @cxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[CX:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[CV:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[CE:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[CD:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[TMP0:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP0]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP1]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP2:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP2]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP3]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP4:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP5:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP4]], b8 [[TMP5]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { b8, i1 } [[TMP6]], 0
// CHECK-NEXT:    store b8 [[TMP7]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP8:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP8]] monotonic, align 1
// CHECK-NEXT:    [[TMP10:%.*]] = bytecast b8 [[TMP9]] to i8
// CHECK-NEXT:    [[TMP11:%.*]] = bytecast b8 [[TMP8]] to i8
// CHECK-NEXT:    [[TMP12:%.*]] = icmp slt i8 [[TMP10]], [[TMP11]]
// CHECK-NEXT:    [[TMP13:%.*]] = select i1 [[TMP12]], i8 [[TMP11]], i8 [[TMP10]]
// CHECK-NEXT:    store i8 [[TMP13]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP14:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP15:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP14]] monotonic, align 1
// CHECK-NEXT:    [[TMP16:%.*]] = bytecast b8 [[TMP15]] to i8
// CHECK-NEXT:    [[TMP17:%.*]] = bytecast b8 [[TMP14]] to i8
// CHECK-NEXT:    [[TMP18:%.*]] = icmp sgt i8 [[TMP16]], [[TMP17]]
// CHECK-NEXT:    [[TMP19:%.*]] = select i1 [[TMP18]], i8 [[TMP17]], i8 [[TMP16]]
// CHECK-NEXT:    store i8 [[TMP19]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP20:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP21:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP22:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP20]], b8 [[TMP21]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { b8, i1 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = extractvalue { b8, i1 } [[TMP22]], 1
// CHECK-NEXT:    [[TMP25:%.*]] = select i1 [[TMP24]], b8 [[TMP20]], b8 [[TMP23]]
// CHECK-NEXT:    store b8 [[TMP25]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP26:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP27:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP26]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP27]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP28:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP28]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP29]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP31:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP32:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP30]], b8 [[TMP31]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP33:%.*]] = extractvalue { b8, i1 } [[TMP32]], 0
// CHECK-NEXT:    store b8 [[TMP33]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP34]] acq_rel, align 1
// CHECK-NEXT:    [[TMP36:%.*]] = bytecast b8 [[TMP35]] to i8
// CHECK-NEXT:    [[TMP37:%.*]] = bytecast b8 [[TMP34]] to i8
// CHECK-NEXT:    [[TMP38:%.*]] = icmp slt i8 [[TMP36]], [[TMP37]]
// CHECK-NEXT:    [[TMP39:%.*]] = select i1 [[TMP38]], i8 [[TMP37]], i8 [[TMP36]]
// CHECK-NEXT:    store i8 [[TMP39]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP40:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP41:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP40]] acq_rel, align 1
// CHECK-NEXT:    [[TMP42:%.*]] = bytecast b8 [[TMP41]] to i8
// CHECK-NEXT:    [[TMP43:%.*]] = bytecast b8 [[TMP40]] to i8
// CHECK-NEXT:    [[TMP44:%.*]] = icmp sgt i8 [[TMP42]], [[TMP43]]
// CHECK-NEXT:    [[TMP45:%.*]] = select i1 [[TMP44]], i8 [[TMP43]], i8 [[TMP42]]
// CHECK-NEXT:    store i8 [[TMP45]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP46:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP47:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP48:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP46]], b8 [[TMP47]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP49:%.*]] = extractvalue { b8, i1 } [[TMP48]], 0
// CHECK-NEXT:    [[TMP50:%.*]] = extractvalue { b8, i1 } [[TMP48]], 1
// CHECK-NEXT:    [[TMP51:%.*]] = select i1 [[TMP50]], b8 [[TMP46]], b8 [[TMP49]]
// CHECK-NEXT:    store b8 [[TMP51]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP52:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP52]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP53]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP54:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP55:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP54]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP55]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP56:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP57:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP58:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP56]], b8 [[TMP57]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP59:%.*]] = extractvalue { b8, i1 } [[TMP58]], 0
// CHECK-NEXT:    store b8 [[TMP59]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP60:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP61:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP60]] acquire, align 1
// CHECK-NEXT:    [[TMP62:%.*]] = bytecast b8 [[TMP61]] to i8
// CHECK-NEXT:    [[TMP63:%.*]] = bytecast b8 [[TMP60]] to i8
// CHECK-NEXT:    [[TMP64:%.*]] = icmp slt i8 [[TMP62]], [[TMP63]]
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i8 [[TMP63]], i8 [[TMP62]]
// CHECK-NEXT:    store i8 [[TMP65]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP66:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP66]] acquire, align 1
// CHECK-NEXT:    [[TMP68:%.*]] = bytecast b8 [[TMP67]] to i8
// CHECK-NEXT:    [[TMP69:%.*]] = bytecast b8 [[TMP66]] to i8
// CHECK-NEXT:    [[TMP70:%.*]] = icmp sgt i8 [[TMP68]], [[TMP69]]
// CHECK-NEXT:    [[TMP71:%.*]] = select i1 [[TMP70]], i8 [[TMP69]], i8 [[TMP68]]
// CHECK-NEXT:    store i8 [[TMP71]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP72:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP73:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP74:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP72]], b8 [[TMP73]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { b8, i1 } [[TMP74]], 0
// CHECK-NEXT:    [[TMP76:%.*]] = extractvalue { b8, i1 } [[TMP74]], 1
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], b8 [[TMP72]], b8 [[TMP75]]
// CHECK-NEXT:    store b8 [[TMP77]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP78:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP78]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP79]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP80:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP81:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP80]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP81]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP82:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP83:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP82]], b8 [[TMP83]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { b8, i1 } [[TMP84]], 0
// CHECK-NEXT:    store b8 [[TMP85]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP86:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP87:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP86]] monotonic, align 1
// CHECK-NEXT:    [[TMP88:%.*]] = bytecast b8 [[TMP87]] to i8
// CHECK-NEXT:    [[TMP89:%.*]] = bytecast b8 [[TMP86]] to i8
// CHECK-NEXT:    [[TMP90:%.*]] = icmp slt i8 [[TMP88]], [[TMP89]]
// CHECK-NEXT:    [[TMP91:%.*]] = select i1 [[TMP90]], i8 [[TMP89]], i8 [[TMP88]]
// CHECK-NEXT:    store i8 [[TMP91]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP92:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP93:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP92]] monotonic, align 1
// CHECK-NEXT:    [[TMP94:%.*]] = bytecast b8 [[TMP93]] to i8
// CHECK-NEXT:    [[TMP95:%.*]] = bytecast b8 [[TMP92]] to i8
// CHECK-NEXT:    [[TMP96:%.*]] = icmp sgt i8 [[TMP94]], [[TMP95]]
// CHECK-NEXT:    [[TMP97:%.*]] = select i1 [[TMP96]], i8 [[TMP95]], i8 [[TMP94]]
// CHECK-NEXT:    store i8 [[TMP97]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP98:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP99:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP100:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP98]], b8 [[TMP99]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP101:%.*]] = extractvalue { b8, i1 } [[TMP100]], 0
// CHECK-NEXT:    [[TMP102:%.*]] = extractvalue { b8, i1 } [[TMP100]], 1
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], b8 [[TMP98]], b8 [[TMP101]]
// CHECK-NEXT:    store b8 [[TMP103]], ptr [[CV]], align 1
// CHECK-NEXT:    [[TMP104:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP105:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP104]] release, align 1
// CHECK-NEXT:    store b8 [[TMP105]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP106:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP107:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP106]] release, align 1
// CHECK-NEXT:    store b8 [[TMP107]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP108:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP109:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP110:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP108]], b8 [[TMP109]] release monotonic, align 1
// CHECK-NEXT:    [[TMP111:%.*]] = extractvalue { b8, i1 } [[TMP110]], 0
// CHECK-NEXT:    store b8 [[TMP111]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP112]] release, align 1
// CHECK-NEXT:    [[TMP114:%.*]] = bytecast b8 [[TMP113]] to i8
// CHECK-NEXT:    [[TMP115:%.*]] = bytecast b8 [[TMP112]] to i8
// CHECK-NEXT:    [[TMP116:%.*]] = icmp slt i8 [[TMP114]], [[TMP115]]
// CHECK-NEXT:    [[TMP117:%.*]] = select i1 [[TMP116]], i8 [[TMP115]], i8 [[TMP114]]
// CHECK-NEXT:    store i8 [[TMP117]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP118]] release, align 1
// CHECK-NEXT:    [[TMP120:%.*]] = bytecast b8 [[TMP119]] to i8
// CHECK-NEXT:    [[TMP121:%.*]] = bytecast b8 [[TMP118]] to i8
// CHECK-NEXT:    [[TMP122:%.*]] = icmp sgt i8 [[TMP120]], [[TMP121]]
// CHECK-NEXT:    [[TMP123:%.*]] = select i1 [[TMP122]], i8 [[TMP121]], i8 [[TMP120]]
// CHECK-NEXT:    store i8 [[TMP123]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP124:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP125:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP126:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP124]], b8 [[TMP125]] release monotonic, align 1
// CHECK-NEXT:    [[TMP127:%.*]] = extractvalue { b8, i1 } [[TMP126]], 0
// CHECK-NEXT:    [[TMP128:%.*]] = extractvalue { b8, i1 } [[TMP126]], 1
// CHECK-NEXT:    [[TMP129:%.*]] = select i1 [[TMP128]], b8 [[TMP124]], b8 [[TMP127]]
// CHECK-NEXT:    store b8 [[TMP129]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP130:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP131:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP130]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP131]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP133:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP132]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP133]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP134:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP135:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP136:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP134]], b8 [[TMP135]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP137:%.*]] = extractvalue { b8, i1 } [[TMP136]], 0
// CHECK-NEXT:    store b8 [[TMP137]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP138:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP139:%.*]] = atomicrmw min ptr [[CX]], b8 [[TMP138]] seq_cst, align 1
// CHECK-NEXT:    [[TMP140:%.*]] = bytecast b8 [[TMP139]] to i8
// CHECK-NEXT:    [[TMP141:%.*]] = bytecast b8 [[TMP138]] to i8
// CHECK-NEXT:    [[TMP142:%.*]] = icmp slt i8 [[TMP140]], [[TMP141]]
// CHECK-NEXT:    [[TMP143:%.*]] = select i1 [[TMP142]], i8 [[TMP141]], i8 [[TMP140]]
// CHECK-NEXT:    store i8 [[TMP143]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP144:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP145:%.*]] = atomicrmw max ptr [[CX]], b8 [[TMP144]] seq_cst, align 1
// CHECK-NEXT:    [[TMP146:%.*]] = bytecast b8 [[TMP145]] to i8
// CHECK-NEXT:    [[TMP147:%.*]] = bytecast b8 [[TMP144]] to i8
// CHECK-NEXT:    [[TMP148:%.*]] = icmp sgt i8 [[TMP146]], [[TMP147]]
// CHECK-NEXT:    [[TMP149:%.*]] = select i1 [[TMP148]], i8 [[TMP147]], i8 [[TMP146]]
// CHECK-NEXT:    store i8 [[TMP149]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP150:%.*]] = load b8, ptr [[CE]], align 1
// CHECK-NEXT:    [[TMP151:%.*]] = load b8, ptr [[CD]], align 1
// CHECK-NEXT:    [[TMP152:%.*]] = cmpxchg ptr [[CX]], b8 [[TMP150]], b8 [[TMP151]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP153:%.*]] = extractvalue { b8, i1 } [[TMP152]], 0
// CHECK-NEXT:    [[TMP154:%.*]] = extractvalue { b8, i1 } [[TMP152]], 1
// CHECK-NEXT:    [[TMP155:%.*]] = select i1 [[TMP154]], b8 [[TMP150]], b8 [[TMP153]]
// CHECK-NEXT:    store b8 [[TMP155]], ptr [[CV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP156:%.*]] = load b8, ptr [[CV]], align 1
// CHECK-NEXT:    ret b8 [[TMP156]]
//
//
// CHECK-LABEL: @ucxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[UCX:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCV:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCE:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[UCD:%.*]] = alloca b8, align 1
// CHECK-NEXT:    [[TMP0:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP0]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP1]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP2:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP2]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP3]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP4:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP5:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP4]], b8 [[TMP5]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { b8, i1 } [[TMP6]], 0
// CHECK-NEXT:    store b8 [[TMP7]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP8:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP8]] monotonic, align 1
// CHECK-NEXT:    [[TMP10:%.*]] = bytecast b8 [[TMP9]] to i8
// CHECK-NEXT:    [[TMP11:%.*]] = bytecast b8 [[TMP8]] to i8
// CHECK-NEXT:    [[TMP12:%.*]] = icmp ult i8 [[TMP10]], [[TMP11]]
// CHECK-NEXT:    [[TMP13:%.*]] = select i1 [[TMP12]], i8 [[TMP11]], i8 [[TMP10]]
// CHECK-NEXT:    store i8 [[TMP13]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP14:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP15:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP14]] monotonic, align 1
// CHECK-NEXT:    [[TMP16:%.*]] = bytecast b8 [[TMP15]] to i8
// CHECK-NEXT:    [[TMP17:%.*]] = bytecast b8 [[TMP14]] to i8
// CHECK-NEXT:    [[TMP18:%.*]] = icmp ugt i8 [[TMP16]], [[TMP17]]
// CHECK-NEXT:    [[TMP19:%.*]] = select i1 [[TMP18]], i8 [[TMP17]], i8 [[TMP16]]
// CHECK-NEXT:    store i8 [[TMP19]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP20:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP21:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP22:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP20]], b8 [[TMP21]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { b8, i1 } [[TMP22]], 0
// CHECK-NEXT:    [[TMP24:%.*]] = extractvalue { b8, i1 } [[TMP22]], 1
// CHECK-NEXT:    [[TMP25:%.*]] = select i1 [[TMP24]], b8 [[TMP20]], b8 [[TMP23]]
// CHECK-NEXT:    store b8 [[TMP25]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP26:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP27:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP26]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP27]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP28:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP28]] acq_rel, align 1
// CHECK-NEXT:    store b8 [[TMP29]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP31:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP32:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP30]], b8 [[TMP31]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP33:%.*]] = extractvalue { b8, i1 } [[TMP32]], 0
// CHECK-NEXT:    store b8 [[TMP33]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP34]] acq_rel, align 1
// CHECK-NEXT:    [[TMP36:%.*]] = bytecast b8 [[TMP35]] to i8
// CHECK-NEXT:    [[TMP37:%.*]] = bytecast b8 [[TMP34]] to i8
// CHECK-NEXT:    [[TMP38:%.*]] = icmp ult i8 [[TMP36]], [[TMP37]]
// CHECK-NEXT:    [[TMP39:%.*]] = select i1 [[TMP38]], i8 [[TMP37]], i8 [[TMP36]]
// CHECK-NEXT:    store i8 [[TMP39]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP40:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP41:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP40]] acq_rel, align 1
// CHECK-NEXT:    [[TMP42:%.*]] = bytecast b8 [[TMP41]] to i8
// CHECK-NEXT:    [[TMP43:%.*]] = bytecast b8 [[TMP40]] to i8
// CHECK-NEXT:    [[TMP44:%.*]] = icmp ugt i8 [[TMP42]], [[TMP43]]
// CHECK-NEXT:    [[TMP45:%.*]] = select i1 [[TMP44]], i8 [[TMP43]], i8 [[TMP42]]
// CHECK-NEXT:    store i8 [[TMP45]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP46:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP47:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP48:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP46]], b8 [[TMP47]] acq_rel acquire, align 1
// CHECK-NEXT:    [[TMP49:%.*]] = extractvalue { b8, i1 } [[TMP48]], 0
// CHECK-NEXT:    [[TMP50:%.*]] = extractvalue { b8, i1 } [[TMP48]], 1
// CHECK-NEXT:    [[TMP51:%.*]] = select i1 [[TMP50]], b8 [[TMP46]], b8 [[TMP49]]
// CHECK-NEXT:    store b8 [[TMP51]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP52:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP52]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP53]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP54:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP55:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP54]] acquire, align 1
// CHECK-NEXT:    store b8 [[TMP55]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP56:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP57:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP58:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP56]], b8 [[TMP57]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP59:%.*]] = extractvalue { b8, i1 } [[TMP58]], 0
// CHECK-NEXT:    store b8 [[TMP59]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP60:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP61:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP60]] acquire, align 1
// CHECK-NEXT:    [[TMP62:%.*]] = bytecast b8 [[TMP61]] to i8
// CHECK-NEXT:    [[TMP63:%.*]] = bytecast b8 [[TMP60]] to i8
// CHECK-NEXT:    [[TMP64:%.*]] = icmp ult i8 [[TMP62]], [[TMP63]]
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i8 [[TMP63]], i8 [[TMP62]]
// CHECK-NEXT:    store i8 [[TMP65]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP66:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP66]] acquire, align 1
// CHECK-NEXT:    [[TMP68:%.*]] = bytecast b8 [[TMP67]] to i8
// CHECK-NEXT:    [[TMP69:%.*]] = bytecast b8 [[TMP66]] to i8
// CHECK-NEXT:    [[TMP70:%.*]] = icmp ugt i8 [[TMP68]], [[TMP69]]
// CHECK-NEXT:    [[TMP71:%.*]] = select i1 [[TMP70]], i8 [[TMP69]], i8 [[TMP68]]
// CHECK-NEXT:    store i8 [[TMP71]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP72:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP73:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP74:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP72]], b8 [[TMP73]] acquire acquire, align 1
// CHECK-NEXT:    [[TMP75:%.*]] = extractvalue { b8, i1 } [[TMP74]], 0
// CHECK-NEXT:    [[TMP76:%.*]] = extractvalue { b8, i1 } [[TMP74]], 1
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], b8 [[TMP72]], b8 [[TMP75]]
// CHECK-NEXT:    store b8 [[TMP77]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP78:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP78]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP79]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP80:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP81:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP80]] monotonic, align 1
// CHECK-NEXT:    store b8 [[TMP81]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP82:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP83:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP82]], b8 [[TMP83]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { b8, i1 } [[TMP84]], 0
// CHECK-NEXT:    store b8 [[TMP85]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP86:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP87:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP86]] monotonic, align 1
// CHECK-NEXT:    [[TMP88:%.*]] = bytecast b8 [[TMP87]] to i8
// CHECK-NEXT:    [[TMP89:%.*]] = bytecast b8 [[TMP86]] to i8
// CHECK-NEXT:    [[TMP90:%.*]] = icmp ult i8 [[TMP88]], [[TMP89]]
// CHECK-NEXT:    [[TMP91:%.*]] = select i1 [[TMP90]], i8 [[TMP89]], i8 [[TMP88]]
// CHECK-NEXT:    store i8 [[TMP91]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP92:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP93:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP92]] monotonic, align 1
// CHECK-NEXT:    [[TMP94:%.*]] = bytecast b8 [[TMP93]] to i8
// CHECK-NEXT:    [[TMP95:%.*]] = bytecast b8 [[TMP92]] to i8
// CHECK-NEXT:    [[TMP96:%.*]] = icmp ugt i8 [[TMP94]], [[TMP95]]
// CHECK-NEXT:    [[TMP97:%.*]] = select i1 [[TMP96]], i8 [[TMP95]], i8 [[TMP94]]
// CHECK-NEXT:    store i8 [[TMP97]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP98:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP99:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP100:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP98]], b8 [[TMP99]] monotonic monotonic, align 1
// CHECK-NEXT:    [[TMP101:%.*]] = extractvalue { b8, i1 } [[TMP100]], 0
// CHECK-NEXT:    [[TMP102:%.*]] = extractvalue { b8, i1 } [[TMP100]], 1
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], b8 [[TMP98]], b8 [[TMP101]]
// CHECK-NEXT:    store b8 [[TMP103]], ptr [[UCV]], align 1
// CHECK-NEXT:    [[TMP104:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP105:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP104]] release, align 1
// CHECK-NEXT:    store b8 [[TMP105]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP106:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP107:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP106]] release, align 1
// CHECK-NEXT:    store b8 [[TMP107]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP108:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP109:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP110:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP108]], b8 [[TMP109]] release monotonic, align 1
// CHECK-NEXT:    [[TMP111:%.*]] = extractvalue { b8, i1 } [[TMP110]], 0
// CHECK-NEXT:    store b8 [[TMP111]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP112]] release, align 1
// CHECK-NEXT:    [[TMP114:%.*]] = bytecast b8 [[TMP113]] to i8
// CHECK-NEXT:    [[TMP115:%.*]] = bytecast b8 [[TMP112]] to i8
// CHECK-NEXT:    [[TMP116:%.*]] = icmp ult i8 [[TMP114]], [[TMP115]]
// CHECK-NEXT:    [[TMP117:%.*]] = select i1 [[TMP116]], i8 [[TMP115]], i8 [[TMP114]]
// CHECK-NEXT:    store i8 [[TMP117]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP118]] release, align 1
// CHECK-NEXT:    [[TMP120:%.*]] = bytecast b8 [[TMP119]] to i8
// CHECK-NEXT:    [[TMP121:%.*]] = bytecast b8 [[TMP118]] to i8
// CHECK-NEXT:    [[TMP122:%.*]] = icmp ugt i8 [[TMP120]], [[TMP121]]
// CHECK-NEXT:    [[TMP123:%.*]] = select i1 [[TMP122]], i8 [[TMP121]], i8 [[TMP120]]
// CHECK-NEXT:    store i8 [[TMP123]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP124:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP125:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP126:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP124]], b8 [[TMP125]] release monotonic, align 1
// CHECK-NEXT:    [[TMP127:%.*]] = extractvalue { b8, i1 } [[TMP126]], 0
// CHECK-NEXT:    [[TMP128:%.*]] = extractvalue { b8, i1 } [[TMP126]], 1
// CHECK-NEXT:    [[TMP129:%.*]] = select i1 [[TMP128]], b8 [[TMP124]], b8 [[TMP127]]
// CHECK-NEXT:    store b8 [[TMP129]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP130:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP131:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP130]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP131]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP133:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP132]] seq_cst, align 1
// CHECK-NEXT:    store b8 [[TMP133]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP134:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP135:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP136:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP134]], b8 [[TMP135]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP137:%.*]] = extractvalue { b8, i1 } [[TMP136]], 0
// CHECK-NEXT:    store b8 [[TMP137]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP138:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP139:%.*]] = atomicrmw umin ptr [[UCX]], b8 [[TMP138]] seq_cst, align 1
// CHECK-NEXT:    [[TMP140:%.*]] = bytecast b8 [[TMP139]] to i8
// CHECK-NEXT:    [[TMP141:%.*]] = bytecast b8 [[TMP138]] to i8
// CHECK-NEXT:    [[TMP142:%.*]] = icmp ult i8 [[TMP140]], [[TMP141]]
// CHECK-NEXT:    [[TMP143:%.*]] = select i1 [[TMP142]], i8 [[TMP141]], i8 [[TMP140]]
// CHECK-NEXT:    store i8 [[TMP143]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP144:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP145:%.*]] = atomicrmw umax ptr [[UCX]], b8 [[TMP144]] seq_cst, align 1
// CHECK-NEXT:    [[TMP146:%.*]] = bytecast b8 [[TMP145]] to i8
// CHECK-NEXT:    [[TMP147:%.*]] = bytecast b8 [[TMP144]] to i8
// CHECK-NEXT:    [[TMP148:%.*]] = icmp ugt i8 [[TMP146]], [[TMP147]]
// CHECK-NEXT:    [[TMP149:%.*]] = select i1 [[TMP148]], i8 [[TMP147]], i8 [[TMP146]]
// CHECK-NEXT:    store i8 [[TMP149]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP150:%.*]] = load b8, ptr [[UCE]], align 1
// CHECK-NEXT:    [[TMP151:%.*]] = load b8, ptr [[UCD]], align 1
// CHECK-NEXT:    [[TMP152:%.*]] = cmpxchg ptr [[UCX]], b8 [[TMP150]], b8 [[TMP151]] seq_cst seq_cst, align 1
// CHECK-NEXT:    [[TMP153:%.*]] = extractvalue { b8, i1 } [[TMP152]], 0
// CHECK-NEXT:    [[TMP154:%.*]] = extractvalue { b8, i1 } [[TMP152]], 1
// CHECK-NEXT:    [[TMP155:%.*]] = select i1 [[TMP154]], b8 [[TMP150]], b8 [[TMP153]]
// CHECK-NEXT:    store b8 [[TMP155]], ptr [[UCV]], align 1
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP156:%.*]] = load b8, ptr [[UCV]], align 1
// CHECK-NEXT:    ret b8 [[TMP156]]
//
//
// CHECK-LABEL: @sxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[SX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SV:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[SD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP0]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP2]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP3]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP4]], i16 [[TMP5]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i16, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i16 [[TMP7]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP8]] monotonic, align 2
// CHECK-NEXT:    [[TMP10:%.*]] = icmp slt i16 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i16 [[TMP8]], i16 [[TMP9]]
// CHECK-NEXT:    store i16 [[TMP11]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP12:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP12]] monotonic, align 2
// CHECK-NEXT:    [[TMP14:%.*]] = icmp sgt i16 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i16 [[TMP12]], i16 [[TMP13]]
// CHECK-NEXT:    store i16 [[TMP15]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP16:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP17:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP16]], i16 [[TMP17]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i16, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i16, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i16 [[TMP16]], i16 [[TMP19]]
// CHECK-NEXT:    store i16 [[TMP21]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP22:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP22]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP23]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP24]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP25]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP27:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP26]], i16 [[TMP27]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i16, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i16 [[TMP29]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP30]] acq_rel, align 2
// CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i16 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i16 [[TMP30]], i16 [[TMP31]]
// CHECK-NEXT:    store i16 [[TMP33]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP34]] acq_rel, align 2
// CHECK-NEXT:    [[TMP36:%.*]] = icmp sgt i16 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i16 [[TMP34]], i16 [[TMP35]]
// CHECK-NEXT:    store i16 [[TMP37]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP39:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP38]], i16 [[TMP39]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i16, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i16, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i16 [[TMP38]], i16 [[TMP41]]
// CHECK-NEXT:    store i16 [[TMP43]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP44]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP45]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP46:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP46]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP47]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP48:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP49:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP48]], i16 [[TMP49]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i16, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i16 [[TMP51]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP52:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP52]] acquire, align 2
// CHECK-NEXT:    [[TMP54:%.*]] = icmp slt i16 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i16 [[TMP52]], i16 [[TMP53]]
// CHECK-NEXT:    store i16 [[TMP55]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP56:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP56]] acquire, align 2
// CHECK-NEXT:    [[TMP58:%.*]] = icmp sgt i16 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i16 [[TMP56]], i16 [[TMP57]]
// CHECK-NEXT:    store i16 [[TMP59]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP60:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP61:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP60]], i16 [[TMP61]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i16, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i16, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i16 [[TMP60]], i16 [[TMP63]]
// CHECK-NEXT:    store i16 [[TMP65]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP66:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP66]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP67]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP68:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP68]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP69]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP70:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP71:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP70]], i16 [[TMP71]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i16, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i16 [[TMP73]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP74:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP74]] monotonic, align 2
// CHECK-NEXT:    [[TMP76:%.*]] = icmp slt i16 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i16 [[TMP74]], i16 [[TMP75]]
// CHECK-NEXT:    store i16 [[TMP77]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP78:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP78]] monotonic, align 2
// CHECK-NEXT:    [[TMP80:%.*]] = icmp sgt i16 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i16 [[TMP78]], i16 [[TMP79]]
// CHECK-NEXT:    store i16 [[TMP81]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP82:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP83:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP82]], i16 [[TMP83]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i16, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i16, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i16 [[TMP82]], i16 [[TMP85]]
// CHECK-NEXT:    store i16 [[TMP87]], ptr [[SV]], align 2
// CHECK-NEXT:    [[TMP88:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP88]] release, align 2
// CHECK-NEXT:    store i16 [[TMP89]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP90]] release, align 2
// CHECK-NEXT:    store i16 [[TMP91]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP93:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP92]], i16 [[TMP93]] release monotonic, align 2
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i16, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i16 [[TMP95]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP96]] release, align 2
// CHECK-NEXT:    [[TMP98:%.*]] = icmp slt i16 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i16 [[TMP96]], i16 [[TMP97]]
// CHECK-NEXT:    store i16 [[TMP99]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP100]] release, align 2
// CHECK-NEXT:    [[TMP102:%.*]] = icmp sgt i16 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i16 [[TMP100]], i16 [[TMP101]]
// CHECK-NEXT:    store i16 [[TMP103]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP105:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP104]], i16 [[TMP105]] release monotonic, align 2
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i16, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i16, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i16 [[TMP104]], i16 [[TMP107]]
// CHECK-NEXT:    store i16 [[TMP109]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP110]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP111]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP112]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP113]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP115:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP114]], i16 [[TMP115]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i16, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i16 [[TMP117]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[SX]], i16 [[TMP118]] seq_cst, align 2
// CHECK-NEXT:    [[TMP120:%.*]] = icmp slt i16 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i16 [[TMP118]], i16 [[TMP119]]
// CHECK-NEXT:    store i16 [[TMP121]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[SX]], i16 [[TMP122]] seq_cst, align 2
// CHECK-NEXT:    [[TMP124:%.*]] = icmp sgt i16 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i16 [[TMP122]], i16 [[TMP123]]
// CHECK-NEXT:    store i16 [[TMP125]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i16, ptr [[SE]], align 2
// CHECK-NEXT:    [[TMP127:%.*]] = load i16, ptr [[SD]], align 2
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[SX]], i16 [[TMP126]], i16 [[TMP127]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i16, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i16, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i16 [[TMP126]], i16 [[TMP129]]
// CHECK-NEXT:    store i16 [[TMP131]], ptr [[SV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i16, ptr [[SV]], align 2
// CHECK-NEXT:    ret i16 [[TMP132]]
//
//
// CHECK-LABEL: @usxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[USX:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USV:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USE:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[USD:%.*]] = alloca i16, align 2
// CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP0]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP1]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP2]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP3]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP4]], i16 [[TMP5]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i16, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i16 [[TMP7]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP8]] monotonic, align 2
// CHECK-NEXT:    [[TMP10:%.*]] = icmp ult i16 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i16 [[TMP8]], i16 [[TMP9]]
// CHECK-NEXT:    store i16 [[TMP11]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP12:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP12]] monotonic, align 2
// CHECK-NEXT:    [[TMP14:%.*]] = icmp ugt i16 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i16 [[TMP12]], i16 [[TMP13]]
// CHECK-NEXT:    store i16 [[TMP15]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP16:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP17:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP16]], i16 [[TMP17]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i16, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i16, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i16 [[TMP16]], i16 [[TMP19]]
// CHECK-NEXT:    store i16 [[TMP21]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP22:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP22]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP23]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP24]] acq_rel, align 2
// CHECK-NEXT:    store i16 [[TMP25]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP27:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP26]], i16 [[TMP27]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i16, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i16 [[TMP29]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP30]] acq_rel, align 2
// CHECK-NEXT:    [[TMP32:%.*]] = icmp ult i16 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i16 [[TMP30]], i16 [[TMP31]]
// CHECK-NEXT:    store i16 [[TMP33]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP34]] acq_rel, align 2
// CHECK-NEXT:    [[TMP36:%.*]] = icmp ugt i16 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i16 [[TMP34]], i16 [[TMP35]]
// CHECK-NEXT:    store i16 [[TMP37]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP39:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP38]], i16 [[TMP39]] acq_rel acquire, align 2
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i16, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i16, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i16 [[TMP38]], i16 [[TMP41]]
// CHECK-NEXT:    store i16 [[TMP43]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP44]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP45]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP46:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP46]] acquire, align 2
// CHECK-NEXT:    store i16 [[TMP47]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP48:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP49:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP48]], i16 [[TMP49]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i16, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i16 [[TMP51]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP52:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP52]] acquire, align 2
// CHECK-NEXT:    [[TMP54:%.*]] = icmp ult i16 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i16 [[TMP52]], i16 [[TMP53]]
// CHECK-NEXT:    store i16 [[TMP55]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP56:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP56]] acquire, align 2
// CHECK-NEXT:    [[TMP58:%.*]] = icmp ugt i16 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i16 [[TMP56]], i16 [[TMP57]]
// CHECK-NEXT:    store i16 [[TMP59]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP60:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP61:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP60]], i16 [[TMP61]] acquire acquire, align 2
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i16, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i16, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i16 [[TMP60]], i16 [[TMP63]]
// CHECK-NEXT:    store i16 [[TMP65]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP66:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP66]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP67]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP68:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP68]] monotonic, align 2
// CHECK-NEXT:    store i16 [[TMP69]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP70:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP71:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP70]], i16 [[TMP71]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i16, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i16 [[TMP73]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP74:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP74]] monotonic, align 2
// CHECK-NEXT:    [[TMP76:%.*]] = icmp ult i16 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i16 [[TMP74]], i16 [[TMP75]]
// CHECK-NEXT:    store i16 [[TMP77]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP78:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP78]] monotonic, align 2
// CHECK-NEXT:    [[TMP80:%.*]] = icmp ugt i16 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i16 [[TMP78]], i16 [[TMP79]]
// CHECK-NEXT:    store i16 [[TMP81]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP82:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP83:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP82]], i16 [[TMP83]] monotonic monotonic, align 2
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i16, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i16, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i16 [[TMP82]], i16 [[TMP85]]
// CHECK-NEXT:    store i16 [[TMP87]], ptr [[USV]], align 2
// CHECK-NEXT:    [[TMP88:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP88]] release, align 2
// CHECK-NEXT:    store i16 [[TMP89]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP90]] release, align 2
// CHECK-NEXT:    store i16 [[TMP91]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP93:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP92]], i16 [[TMP93]] release monotonic, align 2
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i16, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i16 [[TMP95]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP96]] release, align 2
// CHECK-NEXT:    [[TMP98:%.*]] = icmp ult i16 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i16 [[TMP96]], i16 [[TMP97]]
// CHECK-NEXT:    store i16 [[TMP99]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP100]] release, align 2
// CHECK-NEXT:    [[TMP102:%.*]] = icmp ugt i16 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i16 [[TMP100]], i16 [[TMP101]]
// CHECK-NEXT:    store i16 [[TMP103]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP105:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP104]], i16 [[TMP105]] release monotonic, align 2
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i16, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i16, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i16 [[TMP104]], i16 [[TMP107]]
// CHECK-NEXT:    store i16 [[TMP109]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP110]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP111]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP112]] seq_cst, align 2
// CHECK-NEXT:    store i16 [[TMP113]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP115:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP114]], i16 [[TMP115]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i16, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i16 [[TMP117]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw umin ptr [[USX]], i16 [[TMP118]] seq_cst, align 2
// CHECK-NEXT:    [[TMP120:%.*]] = icmp ult i16 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i16 [[TMP118]], i16 [[TMP119]]
// CHECK-NEXT:    store i16 [[TMP121]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw umax ptr [[USX]], i16 [[TMP122]] seq_cst, align 2
// CHECK-NEXT:    [[TMP124:%.*]] = icmp ugt i16 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i16 [[TMP122]], i16 [[TMP123]]
// CHECK-NEXT:    store i16 [[TMP125]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i16, ptr [[USE]], align 2
// CHECK-NEXT:    [[TMP127:%.*]] = load i16, ptr [[USD]], align 2
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[USX]], i16 [[TMP126]], i16 [[TMP127]] seq_cst seq_cst, align 2
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i16, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i16, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i16 [[TMP126]], i16 [[TMP129]]
// CHECK-NEXT:    store i16 [[TMP131]], ptr [[USV]], align 2
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i16, ptr [[USV]], align 2
// CHECK-NEXT:    ret i16 [[TMP132]]
//
//
// CHECK-LABEL: @ixevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[IX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IV:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[IE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP0]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP2]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP4]], i32 [[TMP5]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i32, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP8]] monotonic, align 4
// CHECK-NEXT:    [[TMP10:%.*]] = icmp slt i32 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i32 [[TMP8]], i32 [[TMP9]]
// CHECK-NEXT:    store i32 [[TMP11]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP12]] monotonic, align 4
// CHECK-NEXT:    [[TMP14:%.*]] = icmp sgt i32 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i32 [[TMP12]], i32 [[TMP13]]
// CHECK-NEXT:    store i32 [[TMP15]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP16]], i32 [[TMP17]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i32, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i32 [[TMP16]], i32 [[TMP19]]
// CHECK-NEXT:    store i32 [[TMP21]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP22:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP22]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP23]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP24]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP25]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP26]], i32 [[TMP27]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i32 [[TMP29]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP30]] acq_rel, align 4
// CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i32 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i32 [[TMP30]], i32 [[TMP31]]
// CHECK-NEXT:    store i32 [[TMP33]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP34]] acq_rel, align 4
// CHECK-NEXT:    [[TMP36:%.*]] = icmp sgt i32 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i32 [[TMP34]], i32 [[TMP35]]
// CHECK-NEXT:    store i32 [[TMP37]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP39:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP38]], i32 [[TMP39]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i32, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i32 [[TMP38]], i32 [[TMP41]]
// CHECK-NEXT:    store i32 [[TMP43]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP44]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP45]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP46:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP46]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP47]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP49:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP48]], i32 [[TMP49]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i32 [[TMP51]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP52:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP52]] acquire, align 4
// CHECK-NEXT:    [[TMP54:%.*]] = icmp slt i32 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i32 [[TMP52]], i32 [[TMP53]]
// CHECK-NEXT:    store i32 [[TMP55]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP56:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP56]] acquire, align 4
// CHECK-NEXT:    [[TMP58:%.*]] = icmp sgt i32 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i32 [[TMP56]], i32 [[TMP57]]
// CHECK-NEXT:    store i32 [[TMP59]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP60:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP61:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP60]], i32 [[TMP61]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i32, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i32 [[TMP60]], i32 [[TMP63]]
// CHECK-NEXT:    store i32 [[TMP65]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP66:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP66]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP67]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP68:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP68]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP69]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP70:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP71:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP70]], i32 [[TMP71]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i32, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i32 [[TMP73]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP74:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP74]] monotonic, align 4
// CHECK-NEXT:    [[TMP76:%.*]] = icmp slt i32 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i32 [[TMP74]], i32 [[TMP75]]
// CHECK-NEXT:    store i32 [[TMP77]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP78:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP78]] monotonic, align 4
// CHECK-NEXT:    [[TMP80:%.*]] = icmp sgt i32 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i32 [[TMP78]], i32 [[TMP79]]
// CHECK-NEXT:    store i32 [[TMP81]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP82:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP83:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP82]], i32 [[TMP83]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i32, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i32, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i32 [[TMP82]], i32 [[TMP85]]
// CHECK-NEXT:    store i32 [[TMP87]], ptr [[IV]], align 4
// CHECK-NEXT:    [[TMP88:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP88]] release, align 4
// CHECK-NEXT:    store i32 [[TMP89]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP90]] release, align 4
// CHECK-NEXT:    store i32 [[TMP91]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP93:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP92]], i32 [[TMP93]] release monotonic, align 4
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i32, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i32 [[TMP95]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP96]] release, align 4
// CHECK-NEXT:    [[TMP98:%.*]] = icmp slt i32 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i32 [[TMP96]], i32 [[TMP97]]
// CHECK-NEXT:    store i32 [[TMP99]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP100]] release, align 4
// CHECK-NEXT:    [[TMP102:%.*]] = icmp sgt i32 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i32 [[TMP100]], i32 [[TMP101]]
// CHECK-NEXT:    store i32 [[TMP103]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP105:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP104]], i32 [[TMP105]] release monotonic, align 4
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i32, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i32, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i32 [[TMP104]], i32 [[TMP107]]
// CHECK-NEXT:    store i32 [[TMP109]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP110]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP111]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP112]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP113]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP115:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP114]], i32 [[TMP115]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i32, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i32 [[TMP117]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[IX]], i32 [[TMP118]] seq_cst, align 4
// CHECK-NEXT:    [[TMP120:%.*]] = icmp slt i32 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i32 [[TMP118]], i32 [[TMP119]]
// CHECK-NEXT:    store i32 [[TMP121]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[IX]], i32 [[TMP122]] seq_cst, align 4
// CHECK-NEXT:    [[TMP124:%.*]] = icmp sgt i32 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i32 [[TMP122]], i32 [[TMP123]]
// CHECK-NEXT:    store i32 [[TMP125]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i32, ptr [[IE]], align 4
// CHECK-NEXT:    [[TMP127:%.*]] = load i32, ptr [[ID]], align 4
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[IX]], i32 [[TMP126]], i32 [[TMP127]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i32, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i32, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i32 [[TMP126]], i32 [[TMP129]]
// CHECK-NEXT:    store i32 [[TMP131]], ptr [[IV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i32, ptr [[IV]], align 4
// CHECK-NEXT:    ret i32 [[TMP132]]
//
//
// CHECK-LABEL: @uixevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIV:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[UID:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP0]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP1]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP2]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP3]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP4]], i32 [[TMP5]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i32, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i32 [[TMP7]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP8]] monotonic, align 4
// CHECK-NEXT:    [[TMP10:%.*]] = icmp ult i32 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i32 [[TMP8]], i32 [[TMP9]]
// CHECK-NEXT:    store i32 [[TMP11]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP12]] monotonic, align 4
// CHECK-NEXT:    [[TMP14:%.*]] = icmp ugt i32 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i32 [[TMP12]], i32 [[TMP13]]
// CHECK-NEXT:    store i32 [[TMP15]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP16]], i32 [[TMP17]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i32, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i32 [[TMP16]], i32 [[TMP19]]
// CHECK-NEXT:    store i32 [[TMP21]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP22:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP22]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP23]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP24]] acq_rel, align 4
// CHECK-NEXT:    store i32 [[TMP25]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP26]], i32 [[TMP27]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i32 [[TMP29]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP30]] acq_rel, align 4
// CHECK-NEXT:    [[TMP32:%.*]] = icmp ult i32 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i32 [[TMP30]], i32 [[TMP31]]
// CHECK-NEXT:    store i32 [[TMP33]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP34]] acq_rel, align 4
// CHECK-NEXT:    [[TMP36:%.*]] = icmp ugt i32 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i32 [[TMP34]], i32 [[TMP35]]
// CHECK-NEXT:    store i32 [[TMP37]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP39:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP38]], i32 [[TMP39]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i32, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i32 [[TMP38]], i32 [[TMP41]]
// CHECK-NEXT:    store i32 [[TMP43]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP44]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP45]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP46:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP46]] acquire, align 4
// CHECK-NEXT:    store i32 [[TMP47]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP49:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP48]], i32 [[TMP49]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i32, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i32 [[TMP51]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP52:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP52]] acquire, align 4
// CHECK-NEXT:    [[TMP54:%.*]] = icmp ult i32 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i32 [[TMP52]], i32 [[TMP53]]
// CHECK-NEXT:    store i32 [[TMP55]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP56:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP56]] acquire, align 4
// CHECK-NEXT:    [[TMP58:%.*]] = icmp ugt i32 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i32 [[TMP56]], i32 [[TMP57]]
// CHECK-NEXT:    store i32 [[TMP59]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP60:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP61:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP60]], i32 [[TMP61]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i32, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i32, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i32 [[TMP60]], i32 [[TMP63]]
// CHECK-NEXT:    store i32 [[TMP65]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP66:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP66]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP67]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP68:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP68]] monotonic, align 4
// CHECK-NEXT:    store i32 [[TMP69]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP70:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP71:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP70]], i32 [[TMP71]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i32, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i32 [[TMP73]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP74:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP74]] monotonic, align 4
// CHECK-NEXT:    [[TMP76:%.*]] = icmp ult i32 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i32 [[TMP74]], i32 [[TMP75]]
// CHECK-NEXT:    store i32 [[TMP77]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP78:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP78]] monotonic, align 4
// CHECK-NEXT:    [[TMP80:%.*]] = icmp ugt i32 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i32 [[TMP78]], i32 [[TMP79]]
// CHECK-NEXT:    store i32 [[TMP81]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP82:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP83:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP82]], i32 [[TMP83]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i32, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i32, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i32 [[TMP82]], i32 [[TMP85]]
// CHECK-NEXT:    store i32 [[TMP87]], ptr [[UIV]], align 4
// CHECK-NEXT:    [[TMP88:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP88]] release, align 4
// CHECK-NEXT:    store i32 [[TMP89]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP90]] release, align 4
// CHECK-NEXT:    store i32 [[TMP91]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP93:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP92]], i32 [[TMP93]] release monotonic, align 4
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i32, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i32 [[TMP95]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP96]] release, align 4
// CHECK-NEXT:    [[TMP98:%.*]] = icmp ult i32 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i32 [[TMP96]], i32 [[TMP97]]
// CHECK-NEXT:    store i32 [[TMP99]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP100]] release, align 4
// CHECK-NEXT:    [[TMP102:%.*]] = icmp ugt i32 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i32 [[TMP100]], i32 [[TMP101]]
// CHECK-NEXT:    store i32 [[TMP103]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP105:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP104]], i32 [[TMP105]] release monotonic, align 4
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i32, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i32, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i32 [[TMP104]], i32 [[TMP107]]
// CHECK-NEXT:    store i32 [[TMP109]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP110]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP111]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP112]] seq_cst, align 4
// CHECK-NEXT:    store i32 [[TMP113]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP115:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP114]], i32 [[TMP115]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i32, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i32 [[TMP117]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw umin ptr [[UIX]], i32 [[TMP118]] seq_cst, align 4
// CHECK-NEXT:    [[TMP120:%.*]] = icmp ult i32 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i32 [[TMP118]], i32 [[TMP119]]
// CHECK-NEXT:    store i32 [[TMP121]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw umax ptr [[UIX]], i32 [[TMP122]] seq_cst, align 4
// CHECK-NEXT:    [[TMP124:%.*]] = icmp ugt i32 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i32 [[TMP122]], i32 [[TMP123]]
// CHECK-NEXT:    store i32 [[TMP125]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i32, ptr [[UIE]], align 4
// CHECK-NEXT:    [[TMP127:%.*]] = load i32, ptr [[UID]], align 4
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[UIX]], i32 [[TMP126]], i32 [[TMP127]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i32, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i32, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i32 [[TMP126]], i32 [[TMP129]]
// CHECK-NEXT:    store i32 [[TMP131]], ptr [[UIV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i32, ptr [[UIV]], align 4
// CHECK-NEXT:    ret i32 [[TMP132]]
//
//
// CHECK-LABEL: @lxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[LX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP0]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP2]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP4]], i64 [[TMP5]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP8]] monotonic, align 8
// CHECK-NEXT:    [[TMP10:%.*]] = icmp slt i64 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP8]], i64 [[TMP9]]
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP12]] monotonic, align 8
// CHECK-NEXT:    [[TMP14:%.*]] = icmp sgt i64 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i64 [[TMP12]], i64 [[TMP13]]
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP16]], i64 [[TMP17]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i64 [[TMP16]], i64 [[TMP19]]
// CHECK-NEXT:    store i64 [[TMP21]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP22]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP23]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP24]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP26]], i64 [[TMP27]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP30]] acq_rel, align 8
// CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i64 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i64 [[TMP30]], i64 [[TMP31]]
// CHECK-NEXT:    store i64 [[TMP33]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP34]] acq_rel, align 8
// CHECK-NEXT:    [[TMP36:%.*]] = icmp sgt i64 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i64 [[TMP34]], i64 [[TMP35]]
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP38]], i64 [[TMP39]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i64, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i64 [[TMP38]], i64 [[TMP41]]
// CHECK-NEXT:    store i64 [[TMP43]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP44]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP46]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP48]], i64 [[TMP49]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i64 [[TMP51]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP52]] acquire, align 8
// CHECK-NEXT:    [[TMP54:%.*]] = icmp slt i64 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i64 [[TMP52]], i64 [[TMP53]]
// CHECK-NEXT:    store i64 [[TMP55]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP56:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP56]] acquire, align 8
// CHECK-NEXT:    [[TMP58:%.*]] = icmp sgt i64 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i64 [[TMP56]], i64 [[TMP57]]
// CHECK-NEXT:    store i64 [[TMP59]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP60:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP61:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP60]], i64 [[TMP61]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i64, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i64, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i64 [[TMP60]], i64 [[TMP63]]
// CHECK-NEXT:    store i64 [[TMP65]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP66:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP66]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP67]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP68]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP69]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP70:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP71:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP70]], i64 [[TMP71]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i64 [[TMP73]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP74]] monotonic, align 8
// CHECK-NEXT:    [[TMP76:%.*]] = icmp slt i64 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i64 [[TMP74]], i64 [[TMP75]]
// CHECK-NEXT:    store i64 [[TMP77]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP78:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP78]] monotonic, align 8
// CHECK-NEXT:    [[TMP80:%.*]] = icmp sgt i64 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i64 [[TMP78]], i64 [[TMP79]]
// CHECK-NEXT:    store i64 [[TMP81]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP82:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP83:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP82]], i64 [[TMP83]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i64 [[TMP82]], i64 [[TMP85]]
// CHECK-NEXT:    store i64 [[TMP87]], ptr [[LV]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP88]] release, align 8
// CHECK-NEXT:    store i64 [[TMP89]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP90]] release, align 8
// CHECK-NEXT:    store i64 [[TMP91]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP93:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP92]], i64 [[TMP93]] release monotonic, align 8
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i64 [[TMP95]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP96]] release, align 8
// CHECK-NEXT:    [[TMP98:%.*]] = icmp slt i64 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i64 [[TMP96]], i64 [[TMP97]]
// CHECK-NEXT:    store i64 [[TMP99]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP100]] release, align 8
// CHECK-NEXT:    [[TMP102:%.*]] = icmp sgt i64 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i64 [[TMP100]], i64 [[TMP101]]
// CHECK-NEXT:    store i64 [[TMP103]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP104]], i64 [[TMP105]] release monotonic, align 8
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i64, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i64, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i64 [[TMP104]], i64 [[TMP107]]
// CHECK-NEXT:    store i64 [[TMP109]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP110]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP111]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP112]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP113]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP114]], i64 [[TMP115]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i64 [[TMP117]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[LX]], i64 [[TMP118]] seq_cst, align 8
// CHECK-NEXT:    [[TMP120:%.*]] = icmp slt i64 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i64 [[TMP118]], i64 [[TMP119]]
// CHECK-NEXT:    store i64 [[TMP121]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[LX]], i64 [[TMP122]] seq_cst, align 8
// CHECK-NEXT:    [[TMP124:%.*]] = icmp sgt i64 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i64 [[TMP122]], i64 [[TMP123]]
// CHECK-NEXT:    store i64 [[TMP125]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i64, ptr [[LE]], align 8
// CHECK-NEXT:    [[TMP127:%.*]] = load i64, ptr [[LD]], align 8
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[LX]], i64 [[TMP126]], i64 [[TMP127]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i64, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i64, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i64 [[TMP126]], i64 [[TMP129]]
// CHECK-NEXT:    store i64 [[TMP131]], ptr [[LV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i64, ptr [[LV]], align 8
// CHECK-NEXT:    ret i64 [[TMP132]]
//
//
// CHECK-LABEL: @ulxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP0]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP2]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP4]], i64 [[TMP5]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP8]] monotonic, align 8
// CHECK-NEXT:    [[TMP10:%.*]] = icmp ult i64 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP8]], i64 [[TMP9]]
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP12]] monotonic, align 8
// CHECK-NEXT:    [[TMP14:%.*]] = icmp ugt i64 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i64 [[TMP12]], i64 [[TMP13]]
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP16]], i64 [[TMP17]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i64 [[TMP16]], i64 [[TMP19]]
// CHECK-NEXT:    store i64 [[TMP21]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP22]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP23]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP24]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP26]], i64 [[TMP27]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP30]] acq_rel, align 8
// CHECK-NEXT:    [[TMP32:%.*]] = icmp ult i64 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i64 [[TMP30]], i64 [[TMP31]]
// CHECK-NEXT:    store i64 [[TMP33]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP34]] acq_rel, align 8
// CHECK-NEXT:    [[TMP36:%.*]] = icmp ugt i64 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i64 [[TMP34]], i64 [[TMP35]]
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP38]], i64 [[TMP39]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i64, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i64 [[TMP38]], i64 [[TMP41]]
// CHECK-NEXT:    store i64 [[TMP43]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP44]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP46]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP48]], i64 [[TMP49]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i64 [[TMP51]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP52]] acquire, align 8
// CHECK-NEXT:    [[TMP54:%.*]] = icmp ult i64 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i64 [[TMP52]], i64 [[TMP53]]
// CHECK-NEXT:    store i64 [[TMP55]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP56:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP56]] acquire, align 8
// CHECK-NEXT:    [[TMP58:%.*]] = icmp ugt i64 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i64 [[TMP56]], i64 [[TMP57]]
// CHECK-NEXT:    store i64 [[TMP59]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP60:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP61:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP60]], i64 [[TMP61]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i64, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i64, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i64 [[TMP60]], i64 [[TMP63]]
// CHECK-NEXT:    store i64 [[TMP65]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP66:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP66]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP67]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP68]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP69]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP71:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP70]], i64 [[TMP71]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i64 [[TMP73]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP74]] monotonic, align 8
// CHECK-NEXT:    [[TMP76:%.*]] = icmp ult i64 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i64 [[TMP74]], i64 [[TMP75]]
// CHECK-NEXT:    store i64 [[TMP77]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP78:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP78]] monotonic, align 8
// CHECK-NEXT:    [[TMP80:%.*]] = icmp ugt i64 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i64 [[TMP78]], i64 [[TMP79]]
// CHECK-NEXT:    store i64 [[TMP81]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP83:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP82]], i64 [[TMP83]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i64 [[TMP82]], i64 [[TMP85]]
// CHECK-NEXT:    store i64 [[TMP87]], ptr [[ULV]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP88]] release, align 8
// CHECK-NEXT:    store i64 [[TMP89]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP90]] release, align 8
// CHECK-NEXT:    store i64 [[TMP91]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP93:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP92]], i64 [[TMP93]] release monotonic, align 8
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i64 [[TMP95]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP96]] release, align 8
// CHECK-NEXT:    [[TMP98:%.*]] = icmp ult i64 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i64 [[TMP96]], i64 [[TMP97]]
// CHECK-NEXT:    store i64 [[TMP99]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP100]] release, align 8
// CHECK-NEXT:    [[TMP102:%.*]] = icmp ugt i64 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i64 [[TMP100]], i64 [[TMP101]]
// CHECK-NEXT:    store i64 [[TMP103]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP104]], i64 [[TMP105]] release monotonic, align 8
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i64, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i64, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i64 [[TMP104]], i64 [[TMP107]]
// CHECK-NEXT:    store i64 [[TMP109]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP110]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP111]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP112]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP113]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP114]], i64 [[TMP115]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i64 [[TMP117]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw umin ptr [[ULX]], i64 [[TMP118]] seq_cst, align 8
// CHECK-NEXT:    [[TMP120:%.*]] = icmp ult i64 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i64 [[TMP118]], i64 [[TMP119]]
// CHECK-NEXT:    store i64 [[TMP121]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw umax ptr [[ULX]], i64 [[TMP122]] seq_cst, align 8
// CHECK-NEXT:    [[TMP124:%.*]] = icmp ugt i64 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i64 [[TMP122]], i64 [[TMP123]]
// CHECK-NEXT:    store i64 [[TMP125]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i64, ptr [[ULE]], align 8
// CHECK-NEXT:    [[TMP127:%.*]] = load i64, ptr [[ULD]], align 8
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[ULX]], i64 [[TMP126]], i64 [[TMP127]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i64, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i64, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i64 [[TMP126]], i64 [[TMP129]]
// CHECK-NEXT:    store i64 [[TMP131]], ptr [[ULV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i64, ptr [[ULV]], align 8
// CHECK-NEXT:    ret i64 [[TMP132]]
//
//
// CHECK-LABEL: @llxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP0]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP2]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP4]], i64 [[TMP5]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP8]] monotonic, align 8
// CHECK-NEXT:    [[TMP10:%.*]] = icmp slt i64 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP8]], i64 [[TMP9]]
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP12]] monotonic, align 8
// CHECK-NEXT:    [[TMP14:%.*]] = icmp sgt i64 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i64 [[TMP12]], i64 [[TMP13]]
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP16]], i64 [[TMP17]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i64 [[TMP16]], i64 [[TMP19]]
// CHECK-NEXT:    store i64 [[TMP21]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP22]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP23]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP24]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP26]], i64 [[TMP27]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP30]] acq_rel, align 8
// CHECK-NEXT:    [[TMP32:%.*]] = icmp slt i64 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i64 [[TMP30]], i64 [[TMP31]]
// CHECK-NEXT:    store i64 [[TMP33]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP34]] acq_rel, align 8
// CHECK-NEXT:    [[TMP36:%.*]] = icmp sgt i64 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i64 [[TMP34]], i64 [[TMP35]]
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP38]], i64 [[TMP39]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i64, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i64 [[TMP38]], i64 [[TMP41]]
// CHECK-NEXT:    store i64 [[TMP43]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP44]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP46]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP48]], i64 [[TMP49]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i64 [[TMP51]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP52]] acquire, align 8
// CHECK-NEXT:    [[TMP54:%.*]] = icmp slt i64 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i64 [[TMP52]], i64 [[TMP53]]
// CHECK-NEXT:    store i64 [[TMP55]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP56:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP56]] acquire, align 8
// CHECK-NEXT:    [[TMP58:%.*]] = icmp sgt i64 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i64 [[TMP56]], i64 [[TMP57]]
// CHECK-NEXT:    store i64 [[TMP59]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP60:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP61:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP60]], i64 [[TMP61]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i64, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i64, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i64 [[TMP60]], i64 [[TMP63]]
// CHECK-NEXT:    store i64 [[TMP65]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP66:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP66]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP67]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP68]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP69]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP70:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP71:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP70]], i64 [[TMP71]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i64 [[TMP73]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP74]] monotonic, align 8
// CHECK-NEXT:    [[TMP76:%.*]] = icmp slt i64 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i64 [[TMP74]], i64 [[TMP75]]
// CHECK-NEXT:    store i64 [[TMP77]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP78:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP78]] monotonic, align 8
// CHECK-NEXT:    [[TMP80:%.*]] = icmp sgt i64 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i64 [[TMP78]], i64 [[TMP79]]
// CHECK-NEXT:    store i64 [[TMP81]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP82:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP83:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP82]], i64 [[TMP83]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i64 [[TMP82]], i64 [[TMP85]]
// CHECK-NEXT:    store i64 [[TMP87]], ptr [[LLV]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP88]] release, align 8
// CHECK-NEXT:    store i64 [[TMP89]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP90]] release, align 8
// CHECK-NEXT:    store i64 [[TMP91]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP93:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP92]], i64 [[TMP93]] release monotonic, align 8
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i64 [[TMP95]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP96]] release, align 8
// CHECK-NEXT:    [[TMP98:%.*]] = icmp slt i64 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i64 [[TMP96]], i64 [[TMP97]]
// CHECK-NEXT:    store i64 [[TMP99]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP100]] release, align 8
// CHECK-NEXT:    [[TMP102:%.*]] = icmp sgt i64 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i64 [[TMP100]], i64 [[TMP101]]
// CHECK-NEXT:    store i64 [[TMP103]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP104]], i64 [[TMP105]] release monotonic, align 8
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i64, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i64, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i64 [[TMP104]], i64 [[TMP107]]
// CHECK-NEXT:    store i64 [[TMP109]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP110]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP111]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP112]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP113]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP114]], i64 [[TMP115]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i64 [[TMP117]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw min ptr [[LLX]], i64 [[TMP118]] seq_cst, align 8
// CHECK-NEXT:    [[TMP120:%.*]] = icmp slt i64 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i64 [[TMP118]], i64 [[TMP119]]
// CHECK-NEXT:    store i64 [[TMP121]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw max ptr [[LLX]], i64 [[TMP122]] seq_cst, align 8
// CHECK-NEXT:    [[TMP124:%.*]] = icmp sgt i64 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i64 [[TMP122]], i64 [[TMP123]]
// CHECK-NEXT:    store i64 [[TMP125]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i64, ptr [[LLE]], align 8
// CHECK-NEXT:    [[TMP127:%.*]] = load i64, ptr [[LLD]], align 8
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[LLX]], i64 [[TMP126]], i64 [[TMP127]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i64, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i64, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i64 [[TMP126]], i64 [[TMP129]]
// CHECK-NEXT:    store i64 [[TMP131]], ptr [[LLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i64, ptr [[LLV]], align 8
// CHECK-NEXT:    ret i64 [[TMP132]]
//
//
// CHECK-LABEL: @ullxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLV:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP0]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP1]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP2]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP3]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP4]], i64 [[TMP5]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP6]], 0
// CHECK-NEXT:    store i64 [[TMP7]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP8]] monotonic, align 8
// CHECK-NEXT:    [[TMP10:%.*]] = icmp ult i64 [[TMP9]], [[TMP8]]
// CHECK-NEXT:    [[TMP11:%.*]] = select i1 [[TMP10]], i64 [[TMP8]], i64 [[TMP9]]
// CHECK-NEXT:    store i64 [[TMP11]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP12]] monotonic, align 8
// CHECK-NEXT:    [[TMP14:%.*]] = icmp ugt i64 [[TMP13]], [[TMP12]]
// CHECK-NEXT:    [[TMP15:%.*]] = select i1 [[TMP14]], i64 [[TMP12]], i64 [[TMP13]]
// CHECK-NEXT:    store i64 [[TMP15]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP16]], i64 [[TMP17]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP19:%.*]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHECK-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHECK-NEXT:    [[TMP21:%.*]] = select i1 [[TMP20]], i64 [[TMP16]], i64 [[TMP19]]
// CHECK-NEXT:    store i64 [[TMP21]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP22]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP23]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP24]] acq_rel, align 8
// CHECK-NEXT:    store i64 [[TMP25]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP26]], i64 [[TMP27]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHECK-NEXT:    store i64 [[TMP29]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP30]] acq_rel, align 8
// CHECK-NEXT:    [[TMP32:%.*]] = icmp ult i64 [[TMP31]], [[TMP30]]
// CHECK-NEXT:    [[TMP33:%.*]] = select i1 [[TMP32]], i64 [[TMP30]], i64 [[TMP31]]
// CHECK-NEXT:    store i64 [[TMP33]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP34:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP35:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP34]] acq_rel, align 8
// CHECK-NEXT:    [[TMP36:%.*]] = icmp ugt i64 [[TMP35]], [[TMP34]]
// CHECK-NEXT:    [[TMP37:%.*]] = select i1 [[TMP36]], i64 [[TMP34]], i64 [[TMP35]]
// CHECK-NEXT:    store i64 [[TMP37]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP38]], i64 [[TMP39]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP40]], 0
// CHECK-NEXT:    [[TMP42:%.*]] = extractvalue { i64, i1 } [[TMP40]], 1
// CHECK-NEXT:    [[TMP43:%.*]] = select i1 [[TMP42]], i64 [[TMP38]], i64 [[TMP41]]
// CHECK-NEXT:    store i64 [[TMP43]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP44:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP45:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP44]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP45]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP46]] acquire, align 8
// CHECK-NEXT:    store i64 [[TMP47]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP48]], i64 [[TMP49]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP50]], 0
// CHECK-NEXT:    store i64 [[TMP51]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP53:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP52]] acquire, align 8
// CHECK-NEXT:    [[TMP54:%.*]] = icmp ult i64 [[TMP53]], [[TMP52]]
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], i64 [[TMP52]], i64 [[TMP53]]
// CHECK-NEXT:    store i64 [[TMP55]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP56:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP56]] acquire, align 8
// CHECK-NEXT:    [[TMP58:%.*]] = icmp ugt i64 [[TMP57]], [[TMP56]]
// CHECK-NEXT:    [[TMP59:%.*]] = select i1 [[TMP58]], i64 [[TMP56]], i64 [[TMP57]]
// CHECK-NEXT:    store i64 [[TMP59]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP60:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP61:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP60]], i64 [[TMP61]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i64, i1 } [[TMP62]], 0
// CHECK-NEXT:    [[TMP64:%.*]] = extractvalue { i64, i1 } [[TMP62]], 1
// CHECK-NEXT:    [[TMP65:%.*]] = select i1 [[TMP64]], i64 [[TMP60]], i64 [[TMP63]]
// CHECK-NEXT:    store i64 [[TMP65]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP66:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP67:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP66]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP67]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP69:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP68]] monotonic, align 8
// CHECK-NEXT:    store i64 [[TMP69]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP71:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP70]], i64 [[TMP71]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP72]], 0
// CHECK-NEXT:    store i64 [[TMP73]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP74]] monotonic, align 8
// CHECK-NEXT:    [[TMP76:%.*]] = icmp ult i64 [[TMP75]], [[TMP74]]
// CHECK-NEXT:    [[TMP77:%.*]] = select i1 [[TMP76]], i64 [[TMP74]], i64 [[TMP75]]
// CHECK-NEXT:    store i64 [[TMP77]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP78:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP79:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP78]] monotonic, align 8
// CHECK-NEXT:    [[TMP80:%.*]] = icmp ugt i64 [[TMP79]], [[TMP78]]
// CHECK-NEXT:    [[TMP81:%.*]] = select i1 [[TMP80]], i64 [[TMP78]], i64 [[TMP79]]
// CHECK-NEXT:    store i64 [[TMP81]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP83:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP82]], i64 [[TMP83]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHECK-NEXT:    [[TMP87:%.*]] = select i1 [[TMP86]], i64 [[TMP82]], i64 [[TMP85]]
// CHECK-NEXT:    store i64 [[TMP87]], ptr [[ULLV]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP88]] release, align 8
// CHECK-NEXT:    store i64 [[TMP89]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP90:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP91:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP90]] release, align 8
// CHECK-NEXT:    store i64 [[TMP91]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP92:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP93:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP94:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP92]], i64 [[TMP93]] release monotonic, align 8
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP94]], 0
// CHECK-NEXT:    store i64 [[TMP95]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP96:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP97:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP96]] release, align 8
// CHECK-NEXT:    [[TMP98:%.*]] = icmp ult i64 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = select i1 [[TMP98]], i64 [[TMP96]], i64 [[TMP97]]
// CHECK-NEXT:    store i64 [[TMP99]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP100:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP101:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP100]] release, align 8
// CHECK-NEXT:    [[TMP102:%.*]] = icmp ugt i64 [[TMP101]], [[TMP100]]
// CHECK-NEXT:    [[TMP103:%.*]] = select i1 [[TMP102]], i64 [[TMP100]], i64 [[TMP101]]
// CHECK-NEXT:    store i64 [[TMP103]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP106:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP104]], i64 [[TMP105]] release monotonic, align 8
// CHECK-NEXT:    [[TMP107:%.*]] = extractvalue { i64, i1 } [[TMP106]], 0
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i64, i1 } [[TMP106]], 1
// CHECK-NEXT:    [[TMP109:%.*]] = select i1 [[TMP108]], i64 [[TMP104]], i64 [[TMP107]]
// CHECK-NEXT:    store i64 [[TMP109]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP110:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP111:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP110]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP111]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP112]] seq_cst, align 8
// CHECK-NEXT:    store i64 [[TMP113]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP114]], i64 [[TMP115]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHECK-NEXT:    store i64 [[TMP117]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP118:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP119:%.*]] = atomicrmw umin ptr [[ULLX]], i64 [[TMP118]] seq_cst, align 8
// CHECK-NEXT:    [[TMP120:%.*]] = icmp ult i64 [[TMP119]], [[TMP118]]
// CHECK-NEXT:    [[TMP121:%.*]] = select i1 [[TMP120]], i64 [[TMP118]], i64 [[TMP119]]
// CHECK-NEXT:    store i64 [[TMP121]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw umax ptr [[ULLX]], i64 [[TMP122]] seq_cst, align 8
// CHECK-NEXT:    [[TMP124:%.*]] = icmp ugt i64 [[TMP123]], [[TMP122]]
// CHECK-NEXT:    [[TMP125:%.*]] = select i1 [[TMP124]], i64 [[TMP122]], i64 [[TMP123]]
// CHECK-NEXT:    store i64 [[TMP125]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP126:%.*]] = load i64, ptr [[ULLE]], align 8
// CHECK-NEXT:    [[TMP127:%.*]] = load i64, ptr [[ULLD]], align 8
// CHECK-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[ULLX]], i64 [[TMP126]], i64 [[TMP127]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP129:%.*]] = extractvalue { i64, i1 } [[TMP128]], 0
// CHECK-NEXT:    [[TMP130:%.*]] = extractvalue { i64, i1 } [[TMP128]], 1
// CHECK-NEXT:    [[TMP131:%.*]] = select i1 [[TMP130]], i64 [[TMP126]], i64 [[TMP129]]
// CHECK-NEXT:    store i64 [[TMP131]], ptr [[ULLV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP132:%.*]] = load i64, ptr [[ULLV]], align 8
// CHECK-NEXT:    ret i64 [[TMP132]]
//
//
// CHECK-LABEL: @fxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[FX:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FV:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FE:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[FD:%.*]] = alloca float, align 4
// CHECK-NEXT:    [[TMP0:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP0]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP1]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP2]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP3]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP5:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP6:%.*]] = bitcast float [[TMP4]] to i32
// CHECK-NEXT:    [[TMP7:%.*]] = bitcast float [[TMP5]] to i32
// CHECK-NEXT:    [[TMP8:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP6]], i32 [[TMP7]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP9:%.*]] = extractvalue { i32, i1 } [[TMP8]], 0
// CHECK-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP9]] to float
// CHECK-NEXT:    store float [[TMP10]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP11:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP12:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP11]] monotonic, align 4
// CHECK-NEXT:    [[TMP13:%.*]] = fcmp olt float [[TMP12]], [[TMP11]]
// CHECK-NEXT:    [[TMP14:%.*]] = select i1 [[TMP13]], float [[TMP11]], float [[TMP12]]
// CHECK-NEXT:    store float [[TMP14]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP16:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP15]] monotonic, align 4
// CHECK-NEXT:    [[TMP17:%.*]] = fcmp ogt float [[TMP16]], [[TMP15]]
// CHECK-NEXT:    [[TMP18:%.*]] = select i1 [[TMP17]], float [[TMP15]], float [[TMP16]]
// CHECK-NEXT:    store float [[TMP18]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP19:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP20:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP21:%.*]] = bitcast float [[TMP19]] to i32
// CHECK-NEXT:    [[TMP22:%.*]] = bitcast float [[TMP20]] to i32
// CHECK-NEXT:    [[TMP23:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP21]], i32 [[TMP22]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP24:%.*]] = extractvalue { i32, i1 } [[TMP23]], 0
// CHECK-NEXT:    [[TMP25:%.*]] = bitcast i32 [[TMP24]] to float
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i1 } [[TMP23]], 1
// CHECK-NEXT:    [[TMP27:%.*]] = select i1 [[TMP26]], float [[TMP19]], float [[TMP25]]
// CHECK-NEXT:    store float [[TMP27]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP28:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP28]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP29]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP30]] acq_rel, align 4
// CHECK-NEXT:    store float [[TMP31]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP32:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP33:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP34:%.*]] = bitcast float [[TMP32]] to i32
// CHECK-NEXT:    [[TMP35:%.*]] = bitcast float [[TMP33]] to i32
// CHECK-NEXT:    [[TMP36:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP34]], i32 [[TMP35]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP37:%.*]] = extractvalue { i32, i1 } [[TMP36]], 0
// CHECK-NEXT:    [[TMP38:%.*]] = bitcast i32 [[TMP37]] to float
// CHECK-NEXT:    store float [[TMP38]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP39:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP40:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP39]] acq_rel, align 4
// CHECK-NEXT:    [[TMP41:%.*]] = fcmp olt float [[TMP40]], [[TMP39]]
// CHECK-NEXT:    [[TMP42:%.*]] = select i1 [[TMP41]], float [[TMP39]], float [[TMP40]]
// CHECK-NEXT:    store float [[TMP42]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP43:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP43]] acq_rel, align 4
// CHECK-NEXT:    [[TMP45:%.*]] = fcmp ogt float [[TMP44]], [[TMP43]]
// CHECK-NEXT:    [[TMP46:%.*]] = select i1 [[TMP45]], float [[TMP43]], float [[TMP44]]
// CHECK-NEXT:    store float [[TMP46]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP47:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP48:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP49:%.*]] = bitcast float [[TMP47]] to i32
// CHECK-NEXT:    [[TMP50:%.*]] = bitcast float [[TMP48]] to i32
// CHECK-NEXT:    [[TMP51:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP49]], i32 [[TMP50]] acq_rel acquire, align 4
// CHECK-NEXT:    [[TMP52:%.*]] = extractvalue { i32, i1 } [[TMP51]], 0
// CHECK-NEXT:    [[TMP53:%.*]] = bitcast i32 [[TMP52]] to float
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i1 } [[TMP51]], 1
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], float [[TMP47]], float [[TMP53]]
// CHECK-NEXT:    store float [[TMP55]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP56:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP56]] acquire, align 4
// CHECK-NEXT:    store float [[TMP57]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP58:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP59:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP58]] acquire, align 4
// CHECK-NEXT:    store float [[TMP59]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP60:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP61:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP62:%.*]] = bitcast float [[TMP60]] to i32
// CHECK-NEXT:    [[TMP63:%.*]] = bitcast float [[TMP61]] to i32
// CHECK-NEXT:    [[TMP64:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP62]], i32 [[TMP63]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP65:%.*]] = extractvalue { i32, i1 } [[TMP64]], 0
// CHECK-NEXT:    [[TMP66:%.*]] = bitcast i32 [[TMP65]] to float
// CHECK-NEXT:    store float [[TMP66]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP67:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP68:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP67]] acquire, align 4
// CHECK-NEXT:    [[TMP69:%.*]] = fcmp olt float [[TMP68]], [[TMP67]]
// CHECK-NEXT:    [[TMP70:%.*]] = select i1 [[TMP69]], float [[TMP67]], float [[TMP68]]
// CHECK-NEXT:    store float [[TMP70]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP71:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP72:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP71]] acquire, align 4
// CHECK-NEXT:    [[TMP73:%.*]] = fcmp ogt float [[TMP72]], [[TMP71]]
// CHECK-NEXT:    [[TMP74:%.*]] = select i1 [[TMP73]], float [[TMP71]], float [[TMP72]]
// CHECK-NEXT:    store float [[TMP74]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP75:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP76:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP77:%.*]] = bitcast float [[TMP75]] to i32
// CHECK-NEXT:    [[TMP78:%.*]] = bitcast float [[TMP76]] to i32
// CHECK-NEXT:    [[TMP79:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP77]], i32 [[TMP78]] acquire acquire, align 4
// CHECK-NEXT:    [[TMP80:%.*]] = extractvalue { i32, i1 } [[TMP79]], 0
// CHECK-NEXT:    [[TMP81:%.*]] = bitcast i32 [[TMP80]] to float
// CHECK-NEXT:    [[TMP82:%.*]] = extractvalue { i32, i1 } [[TMP79]], 1
// CHECK-NEXT:    [[TMP83:%.*]] = select i1 [[TMP82]], float [[TMP75]], float [[TMP81]]
// CHECK-NEXT:    store float [[TMP83]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP84:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP85:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP84]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP85]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP86:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP87:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP86]] monotonic, align 4
// CHECK-NEXT:    store float [[TMP87]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP88:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP89:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP90:%.*]] = bitcast float [[TMP88]] to i32
// CHECK-NEXT:    [[TMP91:%.*]] = bitcast float [[TMP89]] to i32
// CHECK-NEXT:    [[TMP92:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP90]], i32 [[TMP91]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i32, i1 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = bitcast i32 [[TMP93]] to float
// CHECK-NEXT:    store float [[TMP94]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP95:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP96:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP95]] monotonic, align 4
// CHECK-NEXT:    [[TMP97:%.*]] = fcmp olt float [[TMP96]], [[TMP95]]
// CHECK-NEXT:    [[TMP98:%.*]] = select i1 [[TMP97]], float [[TMP95]], float [[TMP96]]
// CHECK-NEXT:    store float [[TMP98]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP99:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP100:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP99]] monotonic, align 4
// CHECK-NEXT:    [[TMP101:%.*]] = fcmp ogt float [[TMP100]], [[TMP99]]
// CHECK-NEXT:    [[TMP102:%.*]] = select i1 [[TMP101]], float [[TMP99]], float [[TMP100]]
// CHECK-NEXT:    store float [[TMP102]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP103:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP104:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP105:%.*]] = bitcast float [[TMP103]] to i32
// CHECK-NEXT:    [[TMP106:%.*]] = bitcast float [[TMP104]] to i32
// CHECK-NEXT:    [[TMP107:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP105]], i32 [[TMP106]] monotonic monotonic, align 4
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i32, i1 } [[TMP107]], 0
// CHECK-NEXT:    [[TMP109:%.*]] = bitcast i32 [[TMP108]] to float
// CHECK-NEXT:    [[TMP110:%.*]] = extractvalue { i32, i1 } [[TMP107]], 1
// CHECK-NEXT:    [[TMP111:%.*]] = select i1 [[TMP110]], float [[TMP103]], float [[TMP109]]
// CHECK-NEXT:    store float [[TMP111]], ptr [[FV]], align 4
// CHECK-NEXT:    [[TMP112:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP112]] release, align 4
// CHECK-NEXT:    store float [[TMP113]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP115:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP114]] release, align 4
// CHECK-NEXT:    store float [[TMP115]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP116:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP117:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP118:%.*]] = bitcast float [[TMP116]] to i32
// CHECK-NEXT:    [[TMP119:%.*]] = bitcast float [[TMP117]] to i32
// CHECK-NEXT:    [[TMP120:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP118]], i32 [[TMP119]] release monotonic, align 4
// CHECK-NEXT:    [[TMP121:%.*]] = extractvalue { i32, i1 } [[TMP120]], 0
// CHECK-NEXT:    [[TMP122:%.*]] = bitcast i32 [[TMP121]] to float
// CHECK-NEXT:    store float [[TMP122]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP123:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP124:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP123]] release, align 4
// CHECK-NEXT:    [[TMP125:%.*]] = fcmp olt float [[TMP124]], [[TMP123]]
// CHECK-NEXT:    [[TMP126:%.*]] = select i1 [[TMP125]], float [[TMP123]], float [[TMP124]]
// CHECK-NEXT:    store float [[TMP126]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP127:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP128:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP127]] release, align 4
// CHECK-NEXT:    [[TMP129:%.*]] = fcmp ogt float [[TMP128]], [[TMP127]]
// CHECK-NEXT:    [[TMP130:%.*]] = select i1 [[TMP129]], float [[TMP127]], float [[TMP128]]
// CHECK-NEXT:    store float [[TMP130]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP131:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP132:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP133:%.*]] = bitcast float [[TMP131]] to i32
// CHECK-NEXT:    [[TMP134:%.*]] = bitcast float [[TMP132]] to i32
// CHECK-NEXT:    [[TMP135:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP133]], i32 [[TMP134]] release monotonic, align 4
// CHECK-NEXT:    [[TMP136:%.*]] = extractvalue { i32, i1 } [[TMP135]], 0
// CHECK-NEXT:    [[TMP137:%.*]] = bitcast i32 [[TMP136]] to float
// CHECK-NEXT:    [[TMP138:%.*]] = extractvalue { i32, i1 } [[TMP135]], 1
// CHECK-NEXT:    [[TMP139:%.*]] = select i1 [[TMP138]], float [[TMP131]], float [[TMP137]]
// CHECK-NEXT:    store float [[TMP139]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP140:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP141:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP140]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP141]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP142:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP143:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP142]] seq_cst, align 4
// CHECK-NEXT:    store float [[TMP143]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP144:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP145:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP146:%.*]] = bitcast float [[TMP144]] to i32
// CHECK-NEXT:    [[TMP147:%.*]] = bitcast float [[TMP145]] to i32
// CHECK-NEXT:    [[TMP148:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP146]], i32 [[TMP147]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP149:%.*]] = extractvalue { i32, i1 } [[TMP148]], 0
// CHECK-NEXT:    [[TMP150:%.*]] = bitcast i32 [[TMP149]] to float
// CHECK-NEXT:    store float [[TMP150]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP151:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP152:%.*]] = atomicrmw fmin ptr [[FX]], float [[TMP151]] seq_cst, align 4
// CHECK-NEXT:    [[TMP153:%.*]] = fcmp olt float [[TMP152]], [[TMP151]]
// CHECK-NEXT:    [[TMP154:%.*]] = select i1 [[TMP153]], float [[TMP151]], float [[TMP152]]
// CHECK-NEXT:    store float [[TMP154]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP155:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP156:%.*]] = atomicrmw fmax ptr [[FX]], float [[TMP155]] seq_cst, align 4
// CHECK-NEXT:    [[TMP157:%.*]] = fcmp ogt float [[TMP156]], [[TMP155]]
// CHECK-NEXT:    [[TMP158:%.*]] = select i1 [[TMP157]], float [[TMP155]], float [[TMP156]]
// CHECK-NEXT:    store float [[TMP158]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP159:%.*]] = load float, ptr [[FE]], align 4
// CHECK-NEXT:    [[TMP160:%.*]] = load float, ptr [[FD]], align 4
// CHECK-NEXT:    [[TMP161:%.*]] = bitcast float [[TMP159]] to i32
// CHECK-NEXT:    [[TMP162:%.*]] = bitcast float [[TMP160]] to i32
// CHECK-NEXT:    [[TMP163:%.*]] = cmpxchg ptr [[FX]], i32 [[TMP161]], i32 [[TMP162]] seq_cst seq_cst, align 4
// CHECK-NEXT:    [[TMP164:%.*]] = extractvalue { i32, i1 } [[TMP163]], 0
// CHECK-NEXT:    [[TMP165:%.*]] = bitcast i32 [[TMP164]] to float
// CHECK-NEXT:    [[TMP166:%.*]] = extractvalue { i32, i1 } [[TMP163]], 1
// CHECK-NEXT:    [[TMP167:%.*]] = select i1 [[TMP166]], float [[TMP159]], float [[TMP165]]
// CHECK-NEXT:    store float [[TMP167]], ptr [[FV]], align 4
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP168:%.*]] = load float, ptr [[FV]], align 4
// CHECK-NEXT:    ret float [[TMP168]]
//
//
// CHECK-LABEL: @dxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DX:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DV:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DE:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DD:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP0]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP1]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP2]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP3]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = bitcast double [[TMP4]] to i64
// CHECK-NEXT:    [[TMP7:%.*]] = bitcast double [[TMP5]] to i64
// CHECK-NEXT:    [[TMP8:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP6]], i64 [[TMP7]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP9:%.*]] = extractvalue { i64, i1 } [[TMP8]], 0
// CHECK-NEXT:    [[TMP10:%.*]] = bitcast i64 [[TMP9]] to double
// CHECK-NEXT:    store double [[TMP10]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP11:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP11]] monotonic, align 8
// CHECK-NEXT:    [[TMP13:%.*]] = fcmp olt double [[TMP12]], [[TMP11]]
// CHECK-NEXT:    [[TMP14:%.*]] = select i1 [[TMP13]], double [[TMP11]], double [[TMP12]]
// CHECK-NEXT:    store double [[TMP14]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP15]] monotonic, align 8
// CHECK-NEXT:    [[TMP17:%.*]] = fcmp ogt double [[TMP16]], [[TMP15]]
// CHECK-NEXT:    [[TMP18:%.*]] = select i1 [[TMP17]], double [[TMP15]], double [[TMP16]]
// CHECK-NEXT:    store double [[TMP18]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP19:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP20:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP21:%.*]] = bitcast double [[TMP19]] to i64
// CHECK-NEXT:    [[TMP22:%.*]] = bitcast double [[TMP20]] to i64
// CHECK-NEXT:    [[TMP23:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP21]], i64 [[TMP22]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP24:%.*]] = extractvalue { i64, i1 } [[TMP23]], 0
// CHECK-NEXT:    [[TMP25:%.*]] = bitcast i64 [[TMP24]] to double
// CHECK-NEXT:    [[TMP26:%.*]] = extractvalue { i64, i1 } [[TMP23]], 1
// CHECK-NEXT:    [[TMP27:%.*]] = select i1 [[TMP26]], double [[TMP19]], double [[TMP25]]
// CHECK-NEXT:    store double [[TMP27]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP29:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP28]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP29]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP30:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP30]] acq_rel, align 8
// CHECK-NEXT:    store double [[TMP31]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP32:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP33:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP34:%.*]] = bitcast double [[TMP32]] to i64
// CHECK-NEXT:    [[TMP35:%.*]] = bitcast double [[TMP33]] to i64
// CHECK-NEXT:    [[TMP36:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP34]], i64 [[TMP35]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP37:%.*]] = extractvalue { i64, i1 } [[TMP36]], 0
// CHECK-NEXT:    [[TMP38:%.*]] = bitcast i64 [[TMP37]] to double
// CHECK-NEXT:    store double [[TMP38]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP39:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP39]] acq_rel, align 8
// CHECK-NEXT:    [[TMP41:%.*]] = fcmp olt double [[TMP40]], [[TMP39]]
// CHECK-NEXT:    [[TMP42:%.*]] = select i1 [[TMP41]], double [[TMP39]], double [[TMP40]]
// CHECK-NEXT:    store double [[TMP42]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP43:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP44:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP43]] acq_rel, align 8
// CHECK-NEXT:    [[TMP45:%.*]] = fcmp ogt double [[TMP44]], [[TMP43]]
// CHECK-NEXT:    [[TMP46:%.*]] = select i1 [[TMP45]], double [[TMP43]], double [[TMP44]]
// CHECK-NEXT:    store double [[TMP46]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP47:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = bitcast double [[TMP47]] to i64
// CHECK-NEXT:    [[TMP50:%.*]] = bitcast double [[TMP48]] to i64
// CHECK-NEXT:    [[TMP51:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP49]], i64 [[TMP50]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP52:%.*]] = extractvalue { i64, i1 } [[TMP51]], 0
// CHECK-NEXT:    [[TMP53:%.*]] = bitcast i64 [[TMP52]] to double
// CHECK-NEXT:    [[TMP54:%.*]] = extractvalue { i64, i1 } [[TMP51]], 1
// CHECK-NEXT:    [[TMP55:%.*]] = select i1 [[TMP54]], double [[TMP47]], double [[TMP53]]
// CHECK-NEXT:    store double [[TMP55]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP56:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP56]] acquire, align 8
// CHECK-NEXT:    store double [[TMP57]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP58:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP59:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP58]] acquire, align 8
// CHECK-NEXT:    store double [[TMP59]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP60:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP61:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = bitcast double [[TMP60]] to i64
// CHECK-NEXT:    [[TMP63:%.*]] = bitcast double [[TMP61]] to i64
// CHECK-NEXT:    [[TMP64:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP62]], i64 [[TMP63]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP65:%.*]] = extractvalue { i64, i1 } [[TMP64]], 0
// CHECK-NEXT:    [[TMP66:%.*]] = bitcast i64 [[TMP65]] to double
// CHECK-NEXT:    store double [[TMP66]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP67:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP67]] acquire, align 8
// CHECK-NEXT:    [[TMP69:%.*]] = fcmp olt double [[TMP68]], [[TMP67]]
// CHECK-NEXT:    [[TMP70:%.*]] = select i1 [[TMP69]], double [[TMP67]], double [[TMP68]]
// CHECK-NEXT:    store double [[TMP70]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP71:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP71]] acquire, align 8
// CHECK-NEXT:    [[TMP73:%.*]] = fcmp ogt double [[TMP72]], [[TMP71]]
// CHECK-NEXT:    [[TMP74:%.*]] = select i1 [[TMP73]], double [[TMP71]], double [[TMP72]]
// CHECK-NEXT:    store double [[TMP74]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP76:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP77:%.*]] = bitcast double [[TMP75]] to i64
// CHECK-NEXT:    [[TMP78:%.*]] = bitcast double [[TMP76]] to i64
// CHECK-NEXT:    [[TMP79:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP77]], i64 [[TMP78]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP80:%.*]] = extractvalue { i64, i1 } [[TMP79]], 0
// CHECK-NEXT:    [[TMP81:%.*]] = bitcast i64 [[TMP80]] to double
// CHECK-NEXT:    [[TMP82:%.*]] = extractvalue { i64, i1 } [[TMP79]], 1
// CHECK-NEXT:    [[TMP83:%.*]] = select i1 [[TMP82]], double [[TMP75]], double [[TMP81]]
// CHECK-NEXT:    store double [[TMP83]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP85:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP84]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP85]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP86:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP87:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP86]] monotonic, align 8
// CHECK-NEXT:    store double [[TMP87]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP90:%.*]] = bitcast double [[TMP88]] to i64
// CHECK-NEXT:    [[TMP91:%.*]] = bitcast double [[TMP89]] to i64
// CHECK-NEXT:    [[TMP92:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP90]], i64 [[TMP91]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i64, i1 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = bitcast i64 [[TMP93]] to double
// CHECK-NEXT:    store double [[TMP94]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP95:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP96:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP95]] monotonic, align 8
// CHECK-NEXT:    [[TMP97:%.*]] = fcmp olt double [[TMP96]], [[TMP95]]
// CHECK-NEXT:    [[TMP98:%.*]] = select i1 [[TMP97]], double [[TMP95]], double [[TMP96]]
// CHECK-NEXT:    store double [[TMP98]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP99:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP100:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP99]] monotonic, align 8
// CHECK-NEXT:    [[TMP101:%.*]] = fcmp ogt double [[TMP100]], [[TMP99]]
// CHECK-NEXT:    [[TMP102:%.*]] = select i1 [[TMP101]], double [[TMP99]], double [[TMP100]]
// CHECK-NEXT:    store double [[TMP102]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP103:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP104:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = bitcast double [[TMP103]] to i64
// CHECK-NEXT:    [[TMP106:%.*]] = bitcast double [[TMP104]] to i64
// CHECK-NEXT:    [[TMP107:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP105]], i64 [[TMP106]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP108:%.*]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHECK-NEXT:    [[TMP109:%.*]] = bitcast i64 [[TMP108]] to double
// CHECK-NEXT:    [[TMP110:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHECK-NEXT:    [[TMP111:%.*]] = select i1 [[TMP110]], double [[TMP103]], double [[TMP109]]
// CHECK-NEXT:    store double [[TMP111]], ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP112:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP112]] release, align 8
// CHECK-NEXT:    store double [[TMP113]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP114:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP114]] release, align 8
// CHECK-NEXT:    store double [[TMP115]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP116:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP117:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP118:%.*]] = bitcast double [[TMP116]] to i64
// CHECK-NEXT:    [[TMP119:%.*]] = bitcast double [[TMP117]] to i64
// CHECK-NEXT:    [[TMP120:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP118]], i64 [[TMP119]] release monotonic, align 8
// CHECK-NEXT:    [[TMP121:%.*]] = extractvalue { i64, i1 } [[TMP120]], 0
// CHECK-NEXT:    [[TMP122:%.*]] = bitcast i64 [[TMP121]] to double
// CHECK-NEXT:    store double [[TMP122]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP123:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP124:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP123]] release, align 8
// CHECK-NEXT:    [[TMP125:%.*]] = fcmp olt double [[TMP124]], [[TMP123]]
// CHECK-NEXT:    [[TMP126:%.*]] = select i1 [[TMP125]], double [[TMP123]], double [[TMP124]]
// CHECK-NEXT:    store double [[TMP126]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP127:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP128:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP127]] release, align 8
// CHECK-NEXT:    [[TMP129:%.*]] = fcmp ogt double [[TMP128]], [[TMP127]]
// CHECK-NEXT:    [[TMP130:%.*]] = select i1 [[TMP129]], double [[TMP127]], double [[TMP128]]
// CHECK-NEXT:    store double [[TMP130]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP131:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP132:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP133:%.*]] = bitcast double [[TMP131]] to i64
// CHECK-NEXT:    [[TMP134:%.*]] = bitcast double [[TMP132]] to i64
// CHECK-NEXT:    [[TMP135:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP133]], i64 [[TMP134]] release monotonic, align 8
// CHECK-NEXT:    [[TMP136:%.*]] = extractvalue { i64, i1 } [[TMP135]], 0
// CHECK-NEXT:    [[TMP137:%.*]] = bitcast i64 [[TMP136]] to double
// CHECK-NEXT:    [[TMP138:%.*]] = extractvalue { i64, i1 } [[TMP135]], 1
// CHECK-NEXT:    [[TMP139:%.*]] = select i1 [[TMP138]], double [[TMP131]], double [[TMP137]]
// CHECK-NEXT:    store double [[TMP139]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP140:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP141:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP140]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP141]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP142:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP143:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP142]] seq_cst, align 8
// CHECK-NEXT:    store double [[TMP143]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP144:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP145:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP146:%.*]] = bitcast double [[TMP144]] to i64
// CHECK-NEXT:    [[TMP147:%.*]] = bitcast double [[TMP145]] to i64
// CHECK-NEXT:    [[TMP148:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP146]], i64 [[TMP147]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP149:%.*]] = extractvalue { i64, i1 } [[TMP148]], 0
// CHECK-NEXT:    [[TMP150:%.*]] = bitcast i64 [[TMP149]] to double
// CHECK-NEXT:    store double [[TMP150]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP151:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP152:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP151]] seq_cst, align 8
// CHECK-NEXT:    [[TMP153:%.*]] = fcmp olt double [[TMP152]], [[TMP151]]
// CHECK-NEXT:    [[TMP154:%.*]] = select i1 [[TMP153]], double [[TMP151]], double [[TMP152]]
// CHECK-NEXT:    store double [[TMP154]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP155:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP156:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP155]] seq_cst, align 8
// CHECK-NEXT:    [[TMP157:%.*]] = fcmp ogt double [[TMP156]], [[TMP155]]
// CHECK-NEXT:    [[TMP158:%.*]] = select i1 [[TMP157]], double [[TMP155]], double [[TMP156]]
// CHECK-NEXT:    store double [[TMP158]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP159:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP160:%.*]] = load double, ptr [[DD]], align 8
// CHECK-NEXT:    [[TMP161:%.*]] = bitcast double [[TMP159]] to i64
// CHECK-NEXT:    [[TMP162:%.*]] = bitcast double [[TMP160]] to i64
// CHECK-NEXT:    [[TMP163:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP161]], i64 [[TMP162]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP164:%.*]] = extractvalue { i64, i1 } [[TMP163]], 0
// CHECK-NEXT:    [[TMP165:%.*]] = bitcast i64 [[TMP164]] to double
// CHECK-NEXT:    [[TMP166:%.*]] = extractvalue { i64, i1 } [[TMP163]], 1
// CHECK-NEXT:    [[TMP167:%.*]] = select i1 [[TMP166]], double [[TMP159]], double [[TMP165]]
// CHECK-NEXT:    store double [[TMP167]], ptr [[DV]], align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP168:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    ret double [[TMP168]]
//
//
// CHECK-LABEL: @fail_dxevd(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DX:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DV:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DE:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[DD:%.*]] = alloca double, align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = bitcast double [[TMP0]] to i64
// CHECK-NEXT:    [[TMP3:%.*]] = bitcast double [[TMP1]] to i64
// CHECK-NEXT:    [[TMP4:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP2]], i64 [[TMP3]] monotonic monotonic, align 8
// CHECK-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP4]], 0
// CHECK-NEXT:    [[TMP6:%.*]] = bitcast i64 [[TMP5]] to double
// CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP4]], 1
// CHECK-NEXT:    br i1 [[TMP7]], label [[DX_ATOMIC_EXIT:%.*]], label [[DX_ATOMIC_CONT:%.*]]
// CHECK:       dx.atomic.cont:
// CHECK-NEXT:    store double [[TMP6]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT]]
// CHECK:       dx.atomic.exit:
// CHECK-NEXT:    [[TMP8:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP10:%.*]] = bitcast double [[TMP8]] to i64
// CHECK-NEXT:    [[TMP11:%.*]] = bitcast double [[TMP9]] to i64
// CHECK-NEXT:    [[TMP12:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP10]], i64 [[TMP11]] acquire monotonic, align 8
// CHECK-NEXT:    [[TMP13:%.*]] = extractvalue { i64, i1 } [[TMP12]], 0
// CHECK-NEXT:    [[TMP14:%.*]] = bitcast i64 [[TMP13]] to double
// CHECK-NEXT:    [[TMP15:%.*]] = extractvalue { i64, i1 } [[TMP12]], 1
// CHECK-NEXT:    br i1 [[TMP15]], label [[DX_ATOMIC_EXIT1:%.*]], label [[DX_ATOMIC_CONT2:%.*]]
// CHECK:       dx.atomic.cont2:
// CHECK-NEXT:    store double [[TMP14]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT1]]
// CHECK:       dx.atomic.exit1:
// CHECK-NEXT:    [[TMP16:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP18:%.*]] = bitcast double [[TMP16]] to i64
// CHECK-NEXT:    [[TMP19:%.*]] = bitcast double [[TMP17]] to i64
// CHECK-NEXT:    [[TMP20:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP18]], i64 [[TMP19]] release monotonic, align 8
// CHECK-NEXT:    [[TMP21:%.*]] = extractvalue { i64, i1 } [[TMP20]], 0
// CHECK-NEXT:    [[TMP22:%.*]] = bitcast i64 [[TMP21]] to double
// CHECK-NEXT:    [[TMP23:%.*]] = extractvalue { i64, i1 } [[TMP20]], 1
// CHECK-NEXT:    br i1 [[TMP23]], label [[DX_ATOMIC_EXIT3:%.*]], label [[DX_ATOMIC_CONT4:%.*]]
// CHECK:       dx.atomic.cont4:
// CHECK-NEXT:    store double [[TMP22]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT3]]
// CHECK:       dx.atomic.exit3:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP24:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP26:%.*]] = bitcast double [[TMP24]] to i64
// CHECK-NEXT:    [[TMP27:%.*]] = bitcast double [[TMP25]] to i64
// CHECK-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP26]], i64 [[TMP27]] acq_rel monotonic, align 8
// CHECK-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHECK-NEXT:    [[TMP30:%.*]] = bitcast i64 [[TMP29]] to double
// CHECK-NEXT:    [[TMP31:%.*]] = extractvalue { i64, i1 } [[TMP28]], 1
// CHECK-NEXT:    br i1 [[TMP31]], label [[DX_ATOMIC_EXIT5:%.*]], label [[DX_ATOMIC_CONT6:%.*]]
// CHECK:       dx.atomic.cont6:
// CHECK-NEXT:    store double [[TMP30]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT5]]
// CHECK:       dx.atomic.exit5:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP32:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP33:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP34:%.*]] = bitcast double [[TMP32]] to i64
// CHECK-NEXT:    [[TMP35:%.*]] = bitcast double [[TMP33]] to i64
// CHECK-NEXT:    [[TMP36:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP34]], i64 [[TMP35]] seq_cst monotonic, align 8
// CHECK-NEXT:    [[TMP37:%.*]] = extractvalue { i64, i1 } [[TMP36]], 0
// CHECK-NEXT:    [[TMP38:%.*]] = bitcast i64 [[TMP37]] to double
// CHECK-NEXT:    [[TMP39:%.*]] = extractvalue { i64, i1 } [[TMP36]], 1
// CHECK-NEXT:    br i1 [[TMP39]], label [[DX_ATOMIC_EXIT7:%.*]], label [[DX_ATOMIC_CONT8:%.*]]
// CHECK:       dx.atomic.cont8:
// CHECK-NEXT:    store double [[TMP38]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT7]]
// CHECK:       dx.atomic.exit7:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP40:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP41:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP42:%.*]] = bitcast double [[TMP40]] to i64
// CHECK-NEXT:    [[TMP43:%.*]] = bitcast double [[TMP41]] to i64
// CHECK-NEXT:    [[TMP44:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP42]], i64 [[TMP43]] monotonic acquire, align 8
// CHECK-NEXT:    [[TMP45:%.*]] = extractvalue { i64, i1 } [[TMP44]], 0
// CHECK-NEXT:    [[TMP46:%.*]] = bitcast i64 [[TMP45]] to double
// CHECK-NEXT:    [[TMP47:%.*]] = extractvalue { i64, i1 } [[TMP44]], 1
// CHECK-NEXT:    br i1 [[TMP47]], label [[DX_ATOMIC_EXIT9:%.*]], label [[DX_ATOMIC_CONT10:%.*]]
// CHECK:       dx.atomic.cont10:
// CHECK-NEXT:    store double [[TMP46]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT9]]
// CHECK:       dx.atomic.exit9:
// CHECK-NEXT:    [[TMP48:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = bitcast double [[TMP48]] to i64
// CHECK-NEXT:    [[TMP51:%.*]] = bitcast double [[TMP49]] to i64
// CHECK-NEXT:    [[TMP52:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP50]], i64 [[TMP51]] acquire acquire, align 8
// CHECK-NEXT:    [[TMP53:%.*]] = extractvalue { i64, i1 } [[TMP52]], 0
// CHECK-NEXT:    [[TMP54:%.*]] = bitcast i64 [[TMP53]] to double
// CHECK-NEXT:    [[TMP55:%.*]] = extractvalue { i64, i1 } [[TMP52]], 1
// CHECK-NEXT:    br i1 [[TMP55]], label [[DX_ATOMIC_EXIT11:%.*]], label [[DX_ATOMIC_CONT12:%.*]]
// CHECK:       dx.atomic.cont12:
// CHECK-NEXT:    store double [[TMP54]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT11]]
// CHECK:       dx.atomic.exit11:
// CHECK-NEXT:    [[TMP56:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP57:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP58:%.*]] = bitcast double [[TMP56]] to i64
// CHECK-NEXT:    [[TMP59:%.*]] = bitcast double [[TMP57]] to i64
// CHECK-NEXT:    [[TMP60:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP58]], i64 [[TMP59]] release acquire, align 8
// CHECK-NEXT:    [[TMP61:%.*]] = extractvalue { i64, i1 } [[TMP60]], 0
// CHECK-NEXT:    [[TMP62:%.*]] = bitcast i64 [[TMP61]] to double
// CHECK-NEXT:    [[TMP63:%.*]] = extractvalue { i64, i1 } [[TMP60]], 1
// CHECK-NEXT:    br i1 [[TMP63]], label [[DX_ATOMIC_EXIT13:%.*]], label [[DX_ATOMIC_CONT14:%.*]]
// CHECK:       dx.atomic.cont14:
// CHECK-NEXT:    store double [[TMP62]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT13]]
// CHECK:       dx.atomic.exit13:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP64:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP65:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP66:%.*]] = bitcast double [[TMP64]] to i64
// CHECK-NEXT:    [[TMP67:%.*]] = bitcast double [[TMP65]] to i64
// CHECK-NEXT:    [[TMP68:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP66]], i64 [[TMP67]] acq_rel acquire, align 8
// CHECK-NEXT:    [[TMP69:%.*]] = extractvalue { i64, i1 } [[TMP68]], 0
// CHECK-NEXT:    [[TMP70:%.*]] = bitcast i64 [[TMP69]] to double
// CHECK-NEXT:    [[TMP71:%.*]] = extractvalue { i64, i1 } [[TMP68]], 1
// CHECK-NEXT:    br i1 [[TMP71]], label [[DX_ATOMIC_EXIT15:%.*]], label [[DX_ATOMIC_CONT16:%.*]]
// CHECK:       dx.atomic.cont16:
// CHECK-NEXT:    store double [[TMP70]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT15]]
// CHECK:       dx.atomic.exit15:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP72:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP73:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = bitcast double [[TMP72]] to i64
// CHECK-NEXT:    [[TMP75:%.*]] = bitcast double [[TMP73]] to i64
// CHECK-NEXT:    [[TMP76:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP74]], i64 [[TMP75]] seq_cst acquire, align 8
// CHECK-NEXT:    [[TMP77:%.*]] = extractvalue { i64, i1 } [[TMP76]], 0
// CHECK-NEXT:    [[TMP78:%.*]] = bitcast i64 [[TMP77]] to double
// CHECK-NEXT:    [[TMP79:%.*]] = extractvalue { i64, i1 } [[TMP76]], 1
// CHECK-NEXT:    br i1 [[TMP79]], label [[DX_ATOMIC_EXIT17:%.*]], label [[DX_ATOMIC_CONT18:%.*]]
// CHECK:       dx.atomic.cont18:
// CHECK-NEXT:    store double [[TMP78]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT17]]
// CHECK:       dx.atomic.exit17:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP80:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP81:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP82:%.*]] = bitcast double [[TMP80]] to i64
// CHECK-NEXT:    [[TMP83:%.*]] = bitcast double [[TMP81]] to i64
// CHECK-NEXT:    [[TMP84:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP82]], i64 [[TMP83]] monotonic seq_cst, align 8
// CHECK-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHECK-NEXT:    [[TMP86:%.*]] = bitcast i64 [[TMP85]] to double
// CHECK-NEXT:    [[TMP87:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHECK-NEXT:    br i1 [[TMP87]], label [[DX_ATOMIC_EXIT19:%.*]], label [[DX_ATOMIC_CONT20:%.*]]
// CHECK:       dx.atomic.cont20:
// CHECK-NEXT:    store double [[TMP86]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT19]]
// CHECK:       dx.atomic.exit19:
// CHECK-NEXT:    [[TMP88:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP90:%.*]] = bitcast double [[TMP88]] to i64
// CHECK-NEXT:    [[TMP91:%.*]] = bitcast double [[TMP89]] to i64
// CHECK-NEXT:    [[TMP92:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP90]], i64 [[TMP91]] acquire seq_cst, align 8
// CHECK-NEXT:    [[TMP93:%.*]] = extractvalue { i64, i1 } [[TMP92]], 0
// CHECK-NEXT:    [[TMP94:%.*]] = bitcast i64 [[TMP93]] to double
// CHECK-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP92]], 1
// CHECK-NEXT:    br i1 [[TMP95]], label [[DX_ATOMIC_EXIT21:%.*]], label [[DX_ATOMIC_CONT22:%.*]]
// CHECK:       dx.atomic.cont22:
// CHECK-NEXT:    store double [[TMP94]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT21]]
// CHECK:       dx.atomic.exit21:
// CHECK-NEXT:    [[TMP96:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP97:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP98:%.*]] = bitcast double [[TMP96]] to i64
// CHECK-NEXT:    [[TMP99:%.*]] = bitcast double [[TMP97]] to i64
// CHECK-NEXT:    [[TMP100:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP98]], i64 [[TMP99]] release seq_cst, align 8
// CHECK-NEXT:    [[TMP101:%.*]] = extractvalue { i64, i1 } [[TMP100]], 0
// CHECK-NEXT:    [[TMP102:%.*]] = bitcast i64 [[TMP101]] to double
// CHECK-NEXT:    [[TMP103:%.*]] = extractvalue { i64, i1 } [[TMP100]], 1
// CHECK-NEXT:    br i1 [[TMP103]], label [[DX_ATOMIC_EXIT23:%.*]], label [[DX_ATOMIC_CONT24:%.*]]
// CHECK:       dx.atomic.cont24:
// CHECK-NEXT:    store double [[TMP102]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT23]]
// CHECK:       dx.atomic.exit23:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP104:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP105:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP106:%.*]] = bitcast double [[TMP104]] to i64
// CHECK-NEXT:    [[TMP107:%.*]] = bitcast double [[TMP105]] to i64
// CHECK-NEXT:    [[TMP108:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP106]], i64 [[TMP107]] acq_rel seq_cst, align 8
// CHECK-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP108]], 0
// CHECK-NEXT:    [[TMP110:%.*]] = bitcast i64 [[TMP109]] to double
// CHECK-NEXT:    [[TMP111:%.*]] = extractvalue { i64, i1 } [[TMP108]], 1
// CHECK-NEXT:    br i1 [[TMP111]], label [[DX_ATOMIC_EXIT25:%.*]], label [[DX_ATOMIC_CONT26:%.*]]
// CHECK:       dx.atomic.cont26:
// CHECK-NEXT:    store double [[TMP110]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT25]]
// CHECK:       dx.atomic.exit25:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP112:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP113:%.*]] = load double, ptr [[DV]], align 8
// CHECK-NEXT:    [[TMP114:%.*]] = bitcast double [[TMP112]] to i64
// CHECK-NEXT:    [[TMP115:%.*]] = bitcast double [[TMP113]] to i64
// CHECK-NEXT:    [[TMP116:%.*]] = cmpxchg ptr [[DX]], i64 [[TMP114]], i64 [[TMP115]] seq_cst seq_cst, align 8
// CHECK-NEXT:    [[TMP117:%.*]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHECK-NEXT:    [[TMP118:%.*]] = bitcast i64 [[TMP117]] to double
// CHECK-NEXT:    [[TMP119:%.*]] = extractvalue { i64, i1 } [[TMP116]], 1
// CHECK-NEXT:    br i1 [[TMP119]], label [[DX_ATOMIC_EXIT27:%.*]], label [[DX_ATOMIC_CONT28:%.*]]
// CHECK:       dx.atomic.cont28:
// CHECK-NEXT:    store double [[TMP118]], ptr [[DD]], align 8
// CHECK-NEXT:    br label [[DX_ATOMIC_EXIT27]]
// CHECK:       dx.atomic.exit27:
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP120:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP121:%.*]] = atomicrmw fmax ptr [[DX]], double [[TMP120]] seq_cst, align 8
// CHECK-NEXT:    call void @__kmpc_flush(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP122:%.*]] = load double, ptr [[DE]], align 8
// CHECK-NEXT:    [[TMP123:%.*]] = atomicrmw fmin ptr [[DX]], double [[TMP122]] monotonic, align 8
// CHECK-NEXT:    [[TMP124:%.*]] = load double, ptr [[DX]], align 8
// CHECK-NEXT:    ret double [[TMP124]]
//
//
// SIMD-ONLY0-LABEL: @foo(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[CX:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[CE:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[CD:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCX:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCE:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCD:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[SX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[IX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[ID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[LX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[FX:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FE:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FD:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[DX:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DE:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DD:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = bytecast b8 [[TMP0]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1:%.*]] = sext i8 [[CONV]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV2:%.*]] = bytecast b8 [[TMP1]] to i8
// SIMD-ONLY0-NEXT:    [[CONV3:%.*]] = sext i8 [[CONV2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV1]], [[CONV3]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV5:%.*]] = bytecast b8 [[TMP2]] to i8
// SIMD-ONLY0-NEXT:    [[CONV6:%.*]] = sext i8 [[CONV5]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV7:%.*]] = bytecast b8 [[TMP3]] to i8
// SIMD-ONLY0-NEXT:    [[CONV8:%.*]] = sext i8 [[CONV7]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV6]], [[COND_TRUE]] ], [ [[CONV8]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    [[CONV9:%.*]] = trunc i32 [[COND]] to i8
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = bitcast i8 [[CONV9]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP4]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV10:%.*]] = bytecast b8 [[TMP5]] to i8
// SIMD-ONLY0-NEXT:    [[CONV11:%.*]] = sext i8 [[CONV10]] to i32
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV12:%.*]] = bytecast b8 [[TMP6]] to i8
// SIMD-ONLY0-NEXT:    [[CONV13:%.*]] = sext i8 [[CONV12]] to i32
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = icmp slt i32 [[CONV11]], [[CONV13]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE16:%.*]], label [[COND_FALSE19:%.*]]
// SIMD-ONLY0:       cond.true16:
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV17:%.*]] = bytecast b8 [[TMP7]] to i8
// SIMD-ONLY0-NEXT:    [[CONV18:%.*]] = sext i8 [[CONV17]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false19:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV20:%.*]] = bytecast b8 [[TMP8]] to i8
// SIMD-ONLY0-NEXT:    [[CONV21:%.*]] = sext i8 [[CONV20]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi i32 [ [[CONV18]], [[COND_TRUE16]] ], [ [[CONV21]], [[COND_FALSE19]] ]
// SIMD-ONLY0-NEXT:    [[CONV24:%.*]] = trunc i32 [[COND23]] to i8
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = bitcast i8 [[CONV24]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP9]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV25:%.*]] = bytecast b8 [[TMP10]] to i8
// SIMD-ONLY0-NEXT:    [[CONV26:%.*]] = sext i8 [[CONV25]] to i32
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV27:%.*]] = bytecast b8 [[TMP11]] to i8
// SIMD-ONLY0-NEXT:    [[CONV28:%.*]] = sext i8 [[CONV27]] to i32
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = icmp sgt i32 [[CONV26]], [[CONV28]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE31:%.*]], label [[COND_FALSE34:%.*]]
// SIMD-ONLY0:       cond.true31:
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV32:%.*]] = bytecast b8 [[TMP12]] to i8
// SIMD-ONLY0-NEXT:    [[CONV33:%.*]] = sext i8 [[CONV32]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false34:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV35:%.*]] = bytecast b8 [[TMP13]] to i8
// SIMD-ONLY0-NEXT:    [[CONV36:%.*]] = sext i8 [[CONV35]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi i32 [ [[CONV33]], [[COND_TRUE31]] ], [ [[CONV36]], [[COND_FALSE34]] ]
// SIMD-ONLY0-NEXT:    [[CONV39:%.*]] = trunc i32 [[COND38]] to i8
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = bitcast i8 [[CONV39]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP14]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV40:%.*]] = bytecast b8 [[TMP15]] to i8
// SIMD-ONLY0-NEXT:    [[CONV41:%.*]] = sext i8 [[CONV40]] to i32
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV42:%.*]] = bytecast b8 [[TMP16]] to i8
// SIMD-ONLY0-NEXT:    [[CONV43:%.*]] = sext i8 [[CONV42]] to i32
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp slt i32 [[CONV41]], [[CONV43]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE46:%.*]], label [[COND_FALSE49:%.*]]
// SIMD-ONLY0:       cond.true46:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV47:%.*]] = bytecast b8 [[TMP17]] to i8
// SIMD-ONLY0-NEXT:    [[CONV48:%.*]] = sext i8 [[CONV47]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false49:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV50:%.*]] = bytecast b8 [[TMP18]] to i8
// SIMD-ONLY0-NEXT:    [[CONV51:%.*]] = sext i8 [[CONV50]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi i32 [ [[CONV48]], [[COND_TRUE46]] ], [ [[CONV51]], [[COND_FALSE49]] ]
// SIMD-ONLY0-NEXT:    [[CONV54:%.*]] = trunc i32 [[COND53]] to i8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = bitcast i8 [[CONV54]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP19]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV55:%.*]] = bytecast b8 [[TMP20]] to i8
// SIMD-ONLY0-NEXT:    [[CONV56:%.*]] = sext i8 [[CONV55]] to i32
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV57:%.*]] = bytecast b8 [[TMP21]] to i8
// SIMD-ONLY0-NEXT:    [[CONV58:%.*]] = sext i8 [[CONV57]] to i32
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = icmp sgt i32 [[CONV56]], [[CONV58]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// SIMD-ONLY0:       if.then:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP22]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END]]
// SIMD-ONLY0:       if.end:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV61:%.*]] = bytecast b8 [[TMP23]] to i8
// SIMD-ONLY0-NEXT:    [[CONV62:%.*]] = sext i8 [[CONV61]] to i32
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV63:%.*]] = bytecast b8 [[TMP24]] to i8
// SIMD-ONLY0-NEXT:    [[CONV64:%.*]] = sext i8 [[CONV63]] to i32
// SIMD-ONLY0-NEXT:    [[CMP65:%.*]] = icmp slt i32 [[CONV62]], [[CONV64]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP65]], label [[IF_THEN67:%.*]], label [[IF_END68:%.*]]
// SIMD-ONLY0:       if.then67:
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP25]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END68]]
// SIMD-ONLY0:       if.end68:
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV69:%.*]] = bytecast b8 [[TMP26]] to i8
// SIMD-ONLY0-NEXT:    [[CONV70:%.*]] = sext i8 [[CONV69]] to i32
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV71:%.*]] = bytecast b8 [[TMP27]] to i8
// SIMD-ONLY0-NEXT:    [[CONV72:%.*]] = sext i8 [[CONV71]] to i32
// SIMD-ONLY0-NEXT:    [[CMP73:%.*]] = icmp sgt i32 [[CONV70]], [[CONV72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP73]], label [[IF_THEN75:%.*]], label [[IF_END76:%.*]]
// SIMD-ONLY0:       if.then75:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP28]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END76]]
// SIMD-ONLY0:       if.end76:
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV77:%.*]] = bytecast b8 [[TMP29]] to i8
// SIMD-ONLY0-NEXT:    [[CONV78:%.*]] = sext i8 [[CONV77]] to i32
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV79:%.*]] = bytecast b8 [[TMP30]] to i8
// SIMD-ONLY0-NEXT:    [[CONV80:%.*]] = sext i8 [[CONV79]] to i32
// SIMD-ONLY0-NEXT:    [[CMP81:%.*]] = icmp slt i32 [[CONV78]], [[CONV80]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP81]], label [[IF_THEN83:%.*]], label [[IF_END84:%.*]]
// SIMD-ONLY0:       if.then83:
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP31]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END84]]
// SIMD-ONLY0:       if.end84:
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV85:%.*]] = bytecast b8 [[TMP32]] to i8
// SIMD-ONLY0-NEXT:    [[CONV86:%.*]] = sext i8 [[CONV85]] to i32
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV87:%.*]] = bytecast b8 [[TMP33]] to i8
// SIMD-ONLY0-NEXT:    [[CONV88:%.*]] = sext i8 [[CONV87]] to i32
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = icmp eq i32 [[CONV86]], [[CONV88]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE91:%.*]], label [[COND_FALSE94:%.*]]
// SIMD-ONLY0:       cond.true91:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV92:%.*]] = bytecast b8 [[TMP34]] to i8
// SIMD-ONLY0-NEXT:    [[CONV93:%.*]] = sext i8 [[CONV92]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false94:
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV95:%.*]] = bytecast b8 [[TMP35]] to i8
// SIMD-ONLY0-NEXT:    [[CONV96:%.*]] = sext i8 [[CONV95]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi i32 [ [[CONV93]], [[COND_TRUE91]] ], [ [[CONV96]], [[COND_FALSE94]] ]
// SIMD-ONLY0-NEXT:    [[CONV99:%.*]] = trunc i32 [[COND98]] to i8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = bitcast i8 [[CONV99]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP36]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV100:%.*]] = bytecast b8 [[TMP37]] to i8
// SIMD-ONLY0-NEXT:    [[CONV101:%.*]] = sext i8 [[CONV100]] to i32
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV102:%.*]] = bytecast b8 [[TMP38]] to i8
// SIMD-ONLY0-NEXT:    [[CONV103:%.*]] = sext i8 [[CONV102]] to i32
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = icmp eq i32 [[CONV101]], [[CONV103]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE106:%.*]], label [[COND_FALSE109:%.*]]
// SIMD-ONLY0:       cond.true106:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV107:%.*]] = bytecast b8 [[TMP39]] to i8
// SIMD-ONLY0-NEXT:    [[CONV108:%.*]] = sext i8 [[CONV107]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false109:
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV110:%.*]] = bytecast b8 [[TMP40]] to i8
// SIMD-ONLY0-NEXT:    [[CONV111:%.*]] = sext i8 [[CONV110]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi i32 [ [[CONV108]], [[COND_TRUE106]] ], [ [[CONV111]], [[COND_FALSE109]] ]
// SIMD-ONLY0-NEXT:    [[CONV114:%.*]] = trunc i32 [[COND113]] to i8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = bitcast i8 [[CONV114]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP41]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = bytecast b8 [[TMP42]] to i8
// SIMD-ONLY0-NEXT:    [[CONV116:%.*]] = sext i8 [[CONV115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV117:%.*]] = bytecast b8 [[TMP43]] to i8
// SIMD-ONLY0-NEXT:    [[CONV118:%.*]] = sext i8 [[CONV117]] to i32
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = icmp eq i32 [[CONV116]], [[CONV118]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[IF_THEN121:%.*]], label [[IF_END122:%.*]]
// SIMD-ONLY0:       if.then121:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP44]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END122]]
// SIMD-ONLY0:       if.end122:
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV123:%.*]] = bytecast b8 [[TMP45]] to i8
// SIMD-ONLY0-NEXT:    [[CONV124:%.*]] = sext i8 [[CONV123]] to i32
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV125:%.*]] = bytecast b8 [[TMP46]] to i8
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = sext i8 [[CONV125]] to i32
// SIMD-ONLY0-NEXT:    [[CMP127:%.*]] = icmp eq i32 [[CONV124]], [[CONV126]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP127]], label [[IF_THEN129:%.*]], label [[IF_END130:%.*]]
// SIMD-ONLY0:       if.then129:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP47]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END130]]
// SIMD-ONLY0:       if.end130:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV131:%.*]] = bytecast b8 [[TMP48]] to i8
// SIMD-ONLY0-NEXT:    [[CONV132:%.*]] = zext i8 [[CONV131]] to i32
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV133:%.*]] = bytecast b8 [[TMP49]] to i8
// SIMD-ONLY0-NEXT:    [[CONV134:%.*]] = zext i8 [[CONV133]] to i32
// SIMD-ONLY0-NEXT:    [[CMP135:%.*]] = icmp sgt i32 [[CONV132]], [[CONV134]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP135]], label [[COND_TRUE137:%.*]], label [[COND_FALSE140:%.*]]
// SIMD-ONLY0:       cond.true137:
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV138:%.*]] = bytecast b8 [[TMP50]] to i8
// SIMD-ONLY0-NEXT:    [[CONV139:%.*]] = zext i8 [[CONV138]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END143:%.*]]
// SIMD-ONLY0:       cond.false140:
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV141:%.*]] = bytecast b8 [[TMP51]] to i8
// SIMD-ONLY0-NEXT:    [[CONV142:%.*]] = zext i8 [[CONV141]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END143]]
// SIMD-ONLY0:       cond.end143:
// SIMD-ONLY0-NEXT:    [[COND144:%.*]] = phi i32 [ [[CONV139]], [[COND_TRUE137]] ], [ [[CONV142]], [[COND_FALSE140]] ]
// SIMD-ONLY0-NEXT:    [[CONV145:%.*]] = trunc i32 [[COND144]] to i8
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = bitcast i8 [[CONV145]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP52]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV146:%.*]] = bytecast b8 [[TMP53]] to i8
// SIMD-ONLY0-NEXT:    [[CONV147:%.*]] = zext i8 [[CONV146]] to i32
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = bytecast b8 [[TMP54]] to i8
// SIMD-ONLY0-NEXT:    [[CONV149:%.*]] = zext i8 [[CONV148]] to i32
// SIMD-ONLY0-NEXT:    [[CMP150:%.*]] = icmp slt i32 [[CONV147]], [[CONV149]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP150]], label [[COND_TRUE152:%.*]], label [[COND_FALSE155:%.*]]
// SIMD-ONLY0:       cond.true152:
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV153:%.*]] = bytecast b8 [[TMP55]] to i8
// SIMD-ONLY0-NEXT:    [[CONV154:%.*]] = zext i8 [[CONV153]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END158:%.*]]
// SIMD-ONLY0:       cond.false155:
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV156:%.*]] = bytecast b8 [[TMP56]] to i8
// SIMD-ONLY0-NEXT:    [[CONV157:%.*]] = zext i8 [[CONV156]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END158]]
// SIMD-ONLY0:       cond.end158:
// SIMD-ONLY0-NEXT:    [[COND159:%.*]] = phi i32 [ [[CONV154]], [[COND_TRUE152]] ], [ [[CONV157]], [[COND_FALSE155]] ]
// SIMD-ONLY0-NEXT:    [[CONV160:%.*]] = trunc i32 [[COND159]] to i8
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = bitcast i8 [[CONV160]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP57]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV161:%.*]] = bytecast b8 [[TMP58]] to i8
// SIMD-ONLY0-NEXT:    [[CONV162:%.*]] = zext i8 [[CONV161]] to i32
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV163:%.*]] = bytecast b8 [[TMP59]] to i8
// SIMD-ONLY0-NEXT:    [[CONV164:%.*]] = zext i8 [[CONV163]] to i32
// SIMD-ONLY0-NEXT:    [[CMP165:%.*]] = icmp sgt i32 [[CONV162]], [[CONV164]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP165]], label [[COND_TRUE167:%.*]], label [[COND_FALSE170:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV168:%.*]] = bytecast b8 [[TMP60]] to i8
// SIMD-ONLY0-NEXT:    [[CONV169:%.*]] = zext i8 [[CONV168]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END173:%.*]]
// SIMD-ONLY0:       cond.false170:
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV171:%.*]] = bytecast b8 [[TMP61]] to i8
// SIMD-ONLY0-NEXT:    [[CONV172:%.*]] = zext i8 [[CONV171]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END173]]
// SIMD-ONLY0:       cond.end173:
// SIMD-ONLY0-NEXT:    [[COND174:%.*]] = phi i32 [ [[CONV169]], [[COND_TRUE167]] ], [ [[CONV172]], [[COND_FALSE170]] ]
// SIMD-ONLY0-NEXT:    [[CONV175:%.*]] = trunc i32 [[COND174]] to i8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = bitcast i8 [[CONV175]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP62]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV176:%.*]] = bytecast b8 [[TMP63]] to i8
// SIMD-ONLY0-NEXT:    [[CONV177:%.*]] = zext i8 [[CONV176]] to i32
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV178:%.*]] = bytecast b8 [[TMP64]] to i8
// SIMD-ONLY0-NEXT:    [[CONV179:%.*]] = zext i8 [[CONV178]] to i32
// SIMD-ONLY0-NEXT:    [[CMP180:%.*]] = icmp slt i32 [[CONV177]], [[CONV179]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP180]], label [[COND_TRUE182:%.*]], label [[COND_FALSE185:%.*]]
// SIMD-ONLY0:       cond.true182:
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV183:%.*]] = bytecast b8 [[TMP65]] to i8
// SIMD-ONLY0-NEXT:    [[CONV184:%.*]] = zext i8 [[CONV183]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END188:%.*]]
// SIMD-ONLY0:       cond.false185:
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV186:%.*]] = bytecast b8 [[TMP66]] to i8
// SIMD-ONLY0-NEXT:    [[CONV187:%.*]] = zext i8 [[CONV186]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END188]]
// SIMD-ONLY0:       cond.end188:
// SIMD-ONLY0-NEXT:    [[COND189:%.*]] = phi i32 [ [[CONV184]], [[COND_TRUE182]] ], [ [[CONV187]], [[COND_FALSE185]] ]
// SIMD-ONLY0-NEXT:    [[CONV190:%.*]] = trunc i32 [[COND189]] to i8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = bitcast i8 [[CONV190]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP67]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV191:%.*]] = bytecast b8 [[TMP68]] to i8
// SIMD-ONLY0-NEXT:    [[CONV192:%.*]] = zext i8 [[CONV191]] to i32
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV193:%.*]] = bytecast b8 [[TMP69]] to i8
// SIMD-ONLY0-NEXT:    [[CONV194:%.*]] = zext i8 [[CONV193]] to i32
// SIMD-ONLY0-NEXT:    [[CMP195:%.*]] = icmp sgt i32 [[CONV192]], [[CONV194]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP195]], label [[IF_THEN197:%.*]], label [[IF_END198:%.*]]
// SIMD-ONLY0:       if.then197:
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP70]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END198]]
// SIMD-ONLY0:       if.end198:
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV199:%.*]] = bytecast b8 [[TMP71]] to i8
// SIMD-ONLY0-NEXT:    [[CONV200:%.*]] = zext i8 [[CONV199]] to i32
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV201:%.*]] = bytecast b8 [[TMP72]] to i8
// SIMD-ONLY0-NEXT:    [[CONV202:%.*]] = zext i8 [[CONV201]] to i32
// SIMD-ONLY0-NEXT:    [[CMP203:%.*]] = icmp slt i32 [[CONV200]], [[CONV202]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP203]], label [[IF_THEN205:%.*]], label [[IF_END206:%.*]]
// SIMD-ONLY0:       if.then205:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP73]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END206]]
// SIMD-ONLY0:       if.end206:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV207:%.*]] = bytecast b8 [[TMP74]] to i8
// SIMD-ONLY0-NEXT:    [[CONV208:%.*]] = zext i8 [[CONV207]] to i32
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV209:%.*]] = bytecast b8 [[TMP75]] to i8
// SIMD-ONLY0-NEXT:    [[CONV210:%.*]] = zext i8 [[CONV209]] to i32
// SIMD-ONLY0-NEXT:    [[CMP211:%.*]] = icmp sgt i32 [[CONV208]], [[CONV210]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP211]], label [[IF_THEN213:%.*]], label [[IF_END214:%.*]]
// SIMD-ONLY0:       if.then213:
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP76]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END214]]
// SIMD-ONLY0:       if.end214:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV215:%.*]] = bytecast b8 [[TMP77]] to i8
// SIMD-ONLY0-NEXT:    [[CONV216:%.*]] = zext i8 [[CONV215]] to i32
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV217:%.*]] = bytecast b8 [[TMP78]] to i8
// SIMD-ONLY0-NEXT:    [[CONV218:%.*]] = zext i8 [[CONV217]] to i32
// SIMD-ONLY0-NEXT:    [[CMP219:%.*]] = icmp slt i32 [[CONV216]], [[CONV218]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP219]], label [[IF_THEN221:%.*]], label [[IF_END222:%.*]]
// SIMD-ONLY0:       if.then221:
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP79]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END222]]
// SIMD-ONLY0:       if.end222:
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV223:%.*]] = bytecast b8 [[TMP80]] to i8
// SIMD-ONLY0-NEXT:    [[CONV224:%.*]] = zext i8 [[CONV223]] to i32
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV225:%.*]] = bytecast b8 [[TMP81]] to i8
// SIMD-ONLY0-NEXT:    [[CONV226:%.*]] = zext i8 [[CONV225]] to i32
// SIMD-ONLY0-NEXT:    [[CMP227:%.*]] = icmp eq i32 [[CONV224]], [[CONV226]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP227]], label [[COND_TRUE229:%.*]], label [[COND_FALSE232:%.*]]
// SIMD-ONLY0:       cond.true229:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV230:%.*]] = bytecast b8 [[TMP82]] to i8
// SIMD-ONLY0-NEXT:    [[CONV231:%.*]] = zext i8 [[CONV230]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END235:%.*]]
// SIMD-ONLY0:       cond.false232:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV233:%.*]] = bytecast b8 [[TMP83]] to i8
// SIMD-ONLY0-NEXT:    [[CONV234:%.*]] = zext i8 [[CONV233]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END235]]
// SIMD-ONLY0:       cond.end235:
// SIMD-ONLY0-NEXT:    [[COND236:%.*]] = phi i32 [ [[CONV231]], [[COND_TRUE229]] ], [ [[CONV234]], [[COND_FALSE232]] ]
// SIMD-ONLY0-NEXT:    [[CONV237:%.*]] = trunc i32 [[COND236]] to i8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = bitcast i8 [[CONV237]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP84]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV238:%.*]] = bytecast b8 [[TMP85]] to i8
// SIMD-ONLY0-NEXT:    [[CONV239:%.*]] = zext i8 [[CONV238]] to i32
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV240:%.*]] = bytecast b8 [[TMP86]] to i8
// SIMD-ONLY0-NEXT:    [[CONV241:%.*]] = zext i8 [[CONV240]] to i32
// SIMD-ONLY0-NEXT:    [[CMP242:%.*]] = icmp eq i32 [[CONV239]], [[CONV241]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP242]], label [[COND_TRUE244:%.*]], label [[COND_FALSE247:%.*]]
// SIMD-ONLY0:       cond.true244:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV245:%.*]] = bytecast b8 [[TMP87]] to i8
// SIMD-ONLY0-NEXT:    [[CONV246:%.*]] = zext i8 [[CONV245]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END250:%.*]]
// SIMD-ONLY0:       cond.false247:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV248:%.*]] = bytecast b8 [[TMP88]] to i8
// SIMD-ONLY0-NEXT:    [[CONV249:%.*]] = zext i8 [[CONV248]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END250]]
// SIMD-ONLY0:       cond.end250:
// SIMD-ONLY0-NEXT:    [[COND251:%.*]] = phi i32 [ [[CONV246]], [[COND_TRUE244]] ], [ [[CONV249]], [[COND_FALSE247]] ]
// SIMD-ONLY0-NEXT:    [[CONV252:%.*]] = trunc i32 [[COND251]] to i8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = bitcast i8 [[CONV252]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP89]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV253:%.*]] = bytecast b8 [[TMP90]] to i8
// SIMD-ONLY0-NEXT:    [[CONV254:%.*]] = zext i8 [[CONV253]] to i32
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV255:%.*]] = bytecast b8 [[TMP91]] to i8
// SIMD-ONLY0-NEXT:    [[CONV256:%.*]] = zext i8 [[CONV255]] to i32
// SIMD-ONLY0-NEXT:    [[CMP257:%.*]] = icmp eq i32 [[CONV254]], [[CONV256]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP257]], label [[IF_THEN259:%.*]], label [[IF_END260:%.*]]
// SIMD-ONLY0:       if.then259:
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP92]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END260]]
// SIMD-ONLY0:       if.end260:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV261:%.*]] = bytecast b8 [[TMP93]] to i8
// SIMD-ONLY0-NEXT:    [[CONV262:%.*]] = zext i8 [[CONV261]] to i32
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV263:%.*]] = bytecast b8 [[TMP94]] to i8
// SIMD-ONLY0-NEXT:    [[CONV264:%.*]] = zext i8 [[CONV263]] to i32
// SIMD-ONLY0-NEXT:    [[CMP265:%.*]] = icmp eq i32 [[CONV262]], [[CONV264]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP265]], label [[IF_THEN267:%.*]], label [[IF_END268:%.*]]
// SIMD-ONLY0:       if.then267:
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP95]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END268]]
// SIMD-ONLY0:       if.end268:
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV269:%.*]] = bytecast b8 [[TMP96]] to i8
// SIMD-ONLY0-NEXT:    [[CONV270:%.*]] = sext i8 [[CONV269]] to i32
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV271:%.*]] = bytecast b8 [[TMP97]] to i8
// SIMD-ONLY0-NEXT:    [[CONV272:%.*]] = sext i8 [[CONV271]] to i32
// SIMD-ONLY0-NEXT:    [[CMP273:%.*]] = icmp sgt i32 [[CONV270]], [[CONV272]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP273]], label [[COND_TRUE275:%.*]], label [[COND_FALSE278:%.*]]
// SIMD-ONLY0:       cond.true275:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV276:%.*]] = bytecast b8 [[TMP98]] to i8
// SIMD-ONLY0-NEXT:    [[CONV277:%.*]] = sext i8 [[CONV276]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END281:%.*]]
// SIMD-ONLY0:       cond.false278:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV279:%.*]] = bytecast b8 [[TMP99]] to i8
// SIMD-ONLY0-NEXT:    [[CONV280:%.*]] = sext i8 [[CONV279]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END281]]
// SIMD-ONLY0:       cond.end281:
// SIMD-ONLY0-NEXT:    [[COND282:%.*]] = phi i32 [ [[CONV277]], [[COND_TRUE275]] ], [ [[CONV280]], [[COND_FALSE278]] ]
// SIMD-ONLY0-NEXT:    [[CONV283:%.*]] = trunc i32 [[COND282]] to i8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = bitcast i8 [[CONV283]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP100]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV284:%.*]] = bytecast b8 [[TMP101]] to i8
// SIMD-ONLY0-NEXT:    [[CONV285:%.*]] = sext i8 [[CONV284]] to i32
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV286:%.*]] = bytecast b8 [[TMP102]] to i8
// SIMD-ONLY0-NEXT:    [[CONV287:%.*]] = sext i8 [[CONV286]] to i32
// SIMD-ONLY0-NEXT:    [[CMP288:%.*]] = icmp slt i32 [[CONV285]], [[CONV287]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP288]], label [[COND_TRUE290:%.*]], label [[COND_FALSE293:%.*]]
// SIMD-ONLY0:       cond.true290:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV291:%.*]] = bytecast b8 [[TMP103]] to i8
// SIMD-ONLY0-NEXT:    [[CONV292:%.*]] = sext i8 [[CONV291]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END296:%.*]]
// SIMD-ONLY0:       cond.false293:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV294:%.*]] = bytecast b8 [[TMP104]] to i8
// SIMD-ONLY0-NEXT:    [[CONV295:%.*]] = sext i8 [[CONV294]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END296]]
// SIMD-ONLY0:       cond.end296:
// SIMD-ONLY0-NEXT:    [[COND297:%.*]] = phi i32 [ [[CONV292]], [[COND_TRUE290]] ], [ [[CONV295]], [[COND_FALSE293]] ]
// SIMD-ONLY0-NEXT:    [[CONV298:%.*]] = trunc i32 [[COND297]] to i8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = bitcast i8 [[CONV298]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP105]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV299:%.*]] = bytecast b8 [[TMP106]] to i8
// SIMD-ONLY0-NEXT:    [[CONV300:%.*]] = sext i8 [[CONV299]] to i32
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV301:%.*]] = bytecast b8 [[TMP107]] to i8
// SIMD-ONLY0-NEXT:    [[CONV302:%.*]] = sext i8 [[CONV301]] to i32
// SIMD-ONLY0-NEXT:    [[CMP303:%.*]] = icmp sgt i32 [[CONV300]], [[CONV302]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP303]], label [[COND_TRUE305:%.*]], label [[COND_FALSE308:%.*]]
// SIMD-ONLY0:       cond.true305:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV306:%.*]] = bytecast b8 [[TMP108]] to i8
// SIMD-ONLY0-NEXT:    [[CONV307:%.*]] = sext i8 [[CONV306]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END311:%.*]]
// SIMD-ONLY0:       cond.false308:
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV309:%.*]] = bytecast b8 [[TMP109]] to i8
// SIMD-ONLY0-NEXT:    [[CONV310:%.*]] = sext i8 [[CONV309]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END311]]
// SIMD-ONLY0:       cond.end311:
// SIMD-ONLY0-NEXT:    [[COND312:%.*]] = phi i32 [ [[CONV307]], [[COND_TRUE305]] ], [ [[CONV310]], [[COND_FALSE308]] ]
// SIMD-ONLY0-NEXT:    [[CONV313:%.*]] = trunc i32 [[COND312]] to i8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = bitcast i8 [[CONV313]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP110]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV314:%.*]] = bytecast b8 [[TMP111]] to i8
// SIMD-ONLY0-NEXT:    [[CONV315:%.*]] = sext i8 [[CONV314]] to i32
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV316:%.*]] = bytecast b8 [[TMP112]] to i8
// SIMD-ONLY0-NEXT:    [[CONV317:%.*]] = sext i8 [[CONV316]] to i32
// SIMD-ONLY0-NEXT:    [[CMP318:%.*]] = icmp slt i32 [[CONV315]], [[CONV317]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP318]], label [[COND_TRUE320:%.*]], label [[COND_FALSE323:%.*]]
// SIMD-ONLY0:       cond.true320:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV321:%.*]] = bytecast b8 [[TMP113]] to i8
// SIMD-ONLY0-NEXT:    [[CONV322:%.*]] = sext i8 [[CONV321]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END326:%.*]]
// SIMD-ONLY0:       cond.false323:
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV324:%.*]] = bytecast b8 [[TMP114]] to i8
// SIMD-ONLY0-NEXT:    [[CONV325:%.*]] = sext i8 [[CONV324]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END326]]
// SIMD-ONLY0:       cond.end326:
// SIMD-ONLY0-NEXT:    [[COND327:%.*]] = phi i32 [ [[CONV322]], [[COND_TRUE320]] ], [ [[CONV325]], [[COND_FALSE323]] ]
// SIMD-ONLY0-NEXT:    [[CONV328:%.*]] = trunc i32 [[COND327]] to i8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = bitcast i8 [[CONV328]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP115]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV329:%.*]] = bytecast b8 [[TMP116]] to i8
// SIMD-ONLY0-NEXT:    [[CONV330:%.*]] = sext i8 [[CONV329]] to i32
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV331:%.*]] = bytecast b8 [[TMP117]] to i8
// SIMD-ONLY0-NEXT:    [[CONV332:%.*]] = sext i8 [[CONV331]] to i32
// SIMD-ONLY0-NEXT:    [[CMP333:%.*]] = icmp sgt i32 [[CONV330]], [[CONV332]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP333]], label [[IF_THEN335:%.*]], label [[IF_END336:%.*]]
// SIMD-ONLY0:       if.then335:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP118]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END336]]
// SIMD-ONLY0:       if.end336:
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV337:%.*]] = bytecast b8 [[TMP119]] to i8
// SIMD-ONLY0-NEXT:    [[CONV338:%.*]] = sext i8 [[CONV337]] to i32
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV339:%.*]] = bytecast b8 [[TMP120]] to i8
// SIMD-ONLY0-NEXT:    [[CONV340:%.*]] = sext i8 [[CONV339]] to i32
// SIMD-ONLY0-NEXT:    [[CMP341:%.*]] = icmp slt i32 [[CONV338]], [[CONV340]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP341]], label [[IF_THEN343:%.*]], label [[IF_END344:%.*]]
// SIMD-ONLY0:       if.then343:
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP121]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END344]]
// SIMD-ONLY0:       if.end344:
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV345:%.*]] = bytecast b8 [[TMP122]] to i8
// SIMD-ONLY0-NEXT:    [[CONV346:%.*]] = sext i8 [[CONV345]] to i32
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV347:%.*]] = bytecast b8 [[TMP123]] to i8
// SIMD-ONLY0-NEXT:    [[CONV348:%.*]] = sext i8 [[CONV347]] to i32
// SIMD-ONLY0-NEXT:    [[CMP349:%.*]] = icmp sgt i32 [[CONV346]], [[CONV348]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP349]], label [[IF_THEN351:%.*]], label [[IF_END352:%.*]]
// SIMD-ONLY0:       if.then351:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP124]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END352]]
// SIMD-ONLY0:       if.end352:
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV353:%.*]] = bytecast b8 [[TMP125]] to i8
// SIMD-ONLY0-NEXT:    [[CONV354:%.*]] = sext i8 [[CONV353]] to i32
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV355:%.*]] = bytecast b8 [[TMP126]] to i8
// SIMD-ONLY0-NEXT:    [[CONV356:%.*]] = sext i8 [[CONV355]] to i32
// SIMD-ONLY0-NEXT:    [[CMP357:%.*]] = icmp slt i32 [[CONV354]], [[CONV356]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP357]], label [[IF_THEN359:%.*]], label [[IF_END360:%.*]]
// SIMD-ONLY0:       if.then359:
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP127]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END360]]
// SIMD-ONLY0:       if.end360:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV361:%.*]] = bytecast b8 [[TMP128]] to i8
// SIMD-ONLY0-NEXT:    [[CONV362:%.*]] = sext i8 [[CONV361]] to i32
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV363:%.*]] = bytecast b8 [[TMP129]] to i8
// SIMD-ONLY0-NEXT:    [[CONV364:%.*]] = sext i8 [[CONV363]] to i32
// SIMD-ONLY0-NEXT:    [[CMP365:%.*]] = icmp eq i32 [[CONV362]], [[CONV364]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP365]], label [[COND_TRUE367:%.*]], label [[COND_FALSE370:%.*]]
// SIMD-ONLY0:       cond.true367:
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV368:%.*]] = bytecast b8 [[TMP130]] to i8
// SIMD-ONLY0-NEXT:    [[CONV369:%.*]] = sext i8 [[CONV368]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END373:%.*]]
// SIMD-ONLY0:       cond.false370:
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV371:%.*]] = bytecast b8 [[TMP131]] to i8
// SIMD-ONLY0-NEXT:    [[CONV372:%.*]] = sext i8 [[CONV371]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END373]]
// SIMD-ONLY0:       cond.end373:
// SIMD-ONLY0-NEXT:    [[COND374:%.*]] = phi i32 [ [[CONV369]], [[COND_TRUE367]] ], [ [[CONV372]], [[COND_FALSE370]] ]
// SIMD-ONLY0-NEXT:    [[CONV375:%.*]] = trunc i32 [[COND374]] to i8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = bitcast i8 [[CONV375]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP132]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV376:%.*]] = bytecast b8 [[TMP133]] to i8
// SIMD-ONLY0-NEXT:    [[CONV377:%.*]] = sext i8 [[CONV376]] to i32
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV378:%.*]] = bytecast b8 [[TMP134]] to i8
// SIMD-ONLY0-NEXT:    [[CONV379:%.*]] = sext i8 [[CONV378]] to i32
// SIMD-ONLY0-NEXT:    [[CMP380:%.*]] = icmp eq i32 [[CONV377]], [[CONV379]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP380]], label [[COND_TRUE382:%.*]], label [[COND_FALSE385:%.*]]
// SIMD-ONLY0:       cond.true382:
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV383:%.*]] = bytecast b8 [[TMP135]] to i8
// SIMD-ONLY0-NEXT:    [[CONV384:%.*]] = sext i8 [[CONV383]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END388:%.*]]
// SIMD-ONLY0:       cond.false385:
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV386:%.*]] = bytecast b8 [[TMP136]] to i8
// SIMD-ONLY0-NEXT:    [[CONV387:%.*]] = sext i8 [[CONV386]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END388]]
// SIMD-ONLY0:       cond.end388:
// SIMD-ONLY0-NEXT:    [[COND389:%.*]] = phi i32 [ [[CONV384]], [[COND_TRUE382]] ], [ [[CONV387]], [[COND_FALSE385]] ]
// SIMD-ONLY0-NEXT:    [[CONV390:%.*]] = trunc i32 [[COND389]] to i8
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = bitcast i8 [[CONV390]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP137]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV391:%.*]] = bytecast b8 [[TMP138]] to i8
// SIMD-ONLY0-NEXT:    [[CONV392:%.*]] = sext i8 [[CONV391]] to i32
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV393:%.*]] = bytecast b8 [[TMP139]] to i8
// SIMD-ONLY0-NEXT:    [[CONV394:%.*]] = sext i8 [[CONV393]] to i32
// SIMD-ONLY0-NEXT:    [[CMP395:%.*]] = icmp eq i32 [[CONV392]], [[CONV394]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP395]], label [[IF_THEN397:%.*]], label [[IF_END398:%.*]]
// SIMD-ONLY0:       if.then397:
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP140]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END398]]
// SIMD-ONLY0:       if.end398:
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV399:%.*]] = bytecast b8 [[TMP141]] to i8
// SIMD-ONLY0-NEXT:    [[CONV400:%.*]] = sext i8 [[CONV399]] to i32
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV401:%.*]] = bytecast b8 [[TMP142]] to i8
// SIMD-ONLY0-NEXT:    [[CONV402:%.*]] = sext i8 [[CONV401]] to i32
// SIMD-ONLY0-NEXT:    [[CMP403:%.*]] = icmp eq i32 [[CONV400]], [[CONV402]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP403]], label [[IF_THEN405:%.*]], label [[IF_END406:%.*]]
// SIMD-ONLY0:       if.then405:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP143]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END406]]
// SIMD-ONLY0:       if.end406:
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV407:%.*]] = bytecast b8 [[TMP144]] to i8
// SIMD-ONLY0-NEXT:    [[CONV408:%.*]] = zext i8 [[CONV407]] to i32
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV409:%.*]] = bytecast b8 [[TMP145]] to i8
// SIMD-ONLY0-NEXT:    [[CONV410:%.*]] = zext i8 [[CONV409]] to i32
// SIMD-ONLY0-NEXT:    [[CMP411:%.*]] = icmp sgt i32 [[CONV408]], [[CONV410]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP411]], label [[COND_TRUE413:%.*]], label [[COND_FALSE416:%.*]]
// SIMD-ONLY0:       cond.true413:
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV414:%.*]] = bytecast b8 [[TMP146]] to i8
// SIMD-ONLY0-NEXT:    [[CONV415:%.*]] = zext i8 [[CONV414]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END419:%.*]]
// SIMD-ONLY0:       cond.false416:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV417:%.*]] = bytecast b8 [[TMP147]] to i8
// SIMD-ONLY0-NEXT:    [[CONV418:%.*]] = zext i8 [[CONV417]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END419]]
// SIMD-ONLY0:       cond.end419:
// SIMD-ONLY0-NEXT:    [[COND420:%.*]] = phi i32 [ [[CONV415]], [[COND_TRUE413]] ], [ [[CONV418]], [[COND_FALSE416]] ]
// SIMD-ONLY0-NEXT:    [[CONV421:%.*]] = trunc i32 [[COND420]] to i8
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = bitcast i8 [[CONV421]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP148]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV422:%.*]] = bytecast b8 [[TMP149]] to i8
// SIMD-ONLY0-NEXT:    [[CONV423:%.*]] = zext i8 [[CONV422]] to i32
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV424:%.*]] = bytecast b8 [[TMP150]] to i8
// SIMD-ONLY0-NEXT:    [[CONV425:%.*]] = zext i8 [[CONV424]] to i32
// SIMD-ONLY0-NEXT:    [[CMP426:%.*]] = icmp slt i32 [[CONV423]], [[CONV425]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP426]], label [[COND_TRUE428:%.*]], label [[COND_FALSE431:%.*]]
// SIMD-ONLY0:       cond.true428:
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV429:%.*]] = bytecast b8 [[TMP151]] to i8
// SIMD-ONLY0-NEXT:    [[CONV430:%.*]] = zext i8 [[CONV429]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END434:%.*]]
// SIMD-ONLY0:       cond.false431:
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV432:%.*]] = bytecast b8 [[TMP152]] to i8
// SIMD-ONLY0-NEXT:    [[CONV433:%.*]] = zext i8 [[CONV432]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END434]]
// SIMD-ONLY0:       cond.end434:
// SIMD-ONLY0-NEXT:    [[COND435:%.*]] = phi i32 [ [[CONV430]], [[COND_TRUE428]] ], [ [[CONV433]], [[COND_FALSE431]] ]
// SIMD-ONLY0-NEXT:    [[CONV436:%.*]] = trunc i32 [[COND435]] to i8
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = bitcast i8 [[CONV436]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP153]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV437:%.*]] = bytecast b8 [[TMP154]] to i8
// SIMD-ONLY0-NEXT:    [[CONV438:%.*]] = zext i8 [[CONV437]] to i32
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV439:%.*]] = bytecast b8 [[TMP155]] to i8
// SIMD-ONLY0-NEXT:    [[CONV440:%.*]] = zext i8 [[CONV439]] to i32
// SIMD-ONLY0-NEXT:    [[CMP441:%.*]] = icmp sgt i32 [[CONV438]], [[CONV440]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP441]], label [[COND_TRUE443:%.*]], label [[COND_FALSE446:%.*]]
// SIMD-ONLY0:       cond.true443:
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV444:%.*]] = bytecast b8 [[TMP156]] to i8
// SIMD-ONLY0-NEXT:    [[CONV445:%.*]] = zext i8 [[CONV444]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END449:%.*]]
// SIMD-ONLY0:       cond.false446:
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV447:%.*]] = bytecast b8 [[TMP157]] to i8
// SIMD-ONLY0-NEXT:    [[CONV448:%.*]] = zext i8 [[CONV447]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END449]]
// SIMD-ONLY0:       cond.end449:
// SIMD-ONLY0-NEXT:    [[COND450:%.*]] = phi i32 [ [[CONV445]], [[COND_TRUE443]] ], [ [[CONV448]], [[COND_FALSE446]] ]
// SIMD-ONLY0-NEXT:    [[CONV451:%.*]] = trunc i32 [[COND450]] to i8
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = bitcast i8 [[CONV451]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP158]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV452:%.*]] = bytecast b8 [[TMP159]] to i8
// SIMD-ONLY0-NEXT:    [[CONV453:%.*]] = zext i8 [[CONV452]] to i32
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV454:%.*]] = bytecast b8 [[TMP160]] to i8
// SIMD-ONLY0-NEXT:    [[CONV455:%.*]] = zext i8 [[CONV454]] to i32
// SIMD-ONLY0-NEXT:    [[CMP456:%.*]] = icmp slt i32 [[CONV453]], [[CONV455]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP456]], label [[COND_TRUE458:%.*]], label [[COND_FALSE461:%.*]]
// SIMD-ONLY0:       cond.true458:
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV459:%.*]] = bytecast b8 [[TMP161]] to i8
// SIMD-ONLY0-NEXT:    [[CONV460:%.*]] = zext i8 [[CONV459]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END464:%.*]]
// SIMD-ONLY0:       cond.false461:
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV462:%.*]] = bytecast b8 [[TMP162]] to i8
// SIMD-ONLY0-NEXT:    [[CONV463:%.*]] = zext i8 [[CONV462]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END464]]
// SIMD-ONLY0:       cond.end464:
// SIMD-ONLY0-NEXT:    [[COND465:%.*]] = phi i32 [ [[CONV460]], [[COND_TRUE458]] ], [ [[CONV463]], [[COND_FALSE461]] ]
// SIMD-ONLY0-NEXT:    [[CONV466:%.*]] = trunc i32 [[COND465]] to i8
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = bitcast i8 [[CONV466]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP163]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV467:%.*]] = bytecast b8 [[TMP164]] to i8
// SIMD-ONLY0-NEXT:    [[CONV468:%.*]] = zext i8 [[CONV467]] to i32
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV469:%.*]] = bytecast b8 [[TMP165]] to i8
// SIMD-ONLY0-NEXT:    [[CONV470:%.*]] = zext i8 [[CONV469]] to i32
// SIMD-ONLY0-NEXT:    [[CMP471:%.*]] = icmp sgt i32 [[CONV468]], [[CONV470]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP471]], label [[IF_THEN473:%.*]], label [[IF_END474:%.*]]
// SIMD-ONLY0:       if.then473:
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP166]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END474]]
// SIMD-ONLY0:       if.end474:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV475:%.*]] = bytecast b8 [[TMP167]] to i8
// SIMD-ONLY0-NEXT:    [[CONV476:%.*]] = zext i8 [[CONV475]] to i32
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV477:%.*]] = bytecast b8 [[TMP168]] to i8
// SIMD-ONLY0-NEXT:    [[CONV478:%.*]] = zext i8 [[CONV477]] to i32
// SIMD-ONLY0-NEXT:    [[CMP479:%.*]] = icmp slt i32 [[CONV476]], [[CONV478]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP479]], label [[IF_THEN481:%.*]], label [[IF_END482:%.*]]
// SIMD-ONLY0:       if.then481:
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP169]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END482]]
// SIMD-ONLY0:       if.end482:
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV483:%.*]] = bytecast b8 [[TMP170]] to i8
// SIMD-ONLY0-NEXT:    [[CONV484:%.*]] = zext i8 [[CONV483]] to i32
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV485:%.*]] = bytecast b8 [[TMP171]] to i8
// SIMD-ONLY0-NEXT:    [[CONV486:%.*]] = zext i8 [[CONV485]] to i32
// SIMD-ONLY0-NEXT:    [[CMP487:%.*]] = icmp sgt i32 [[CONV484]], [[CONV486]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP487]], label [[IF_THEN489:%.*]], label [[IF_END490:%.*]]
// SIMD-ONLY0:       if.then489:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP172]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END490]]
// SIMD-ONLY0:       if.end490:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV491:%.*]] = bytecast b8 [[TMP173]] to i8
// SIMD-ONLY0-NEXT:    [[CONV492:%.*]] = zext i8 [[CONV491]] to i32
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV493:%.*]] = bytecast b8 [[TMP174]] to i8
// SIMD-ONLY0-NEXT:    [[CONV494:%.*]] = zext i8 [[CONV493]] to i32
// SIMD-ONLY0-NEXT:    [[CMP495:%.*]] = icmp slt i32 [[CONV492]], [[CONV494]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP495]], label [[IF_THEN497:%.*]], label [[IF_END498:%.*]]
// SIMD-ONLY0:       if.then497:
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP175]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END498]]
// SIMD-ONLY0:       if.end498:
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV499:%.*]] = bytecast b8 [[TMP176]] to i8
// SIMD-ONLY0-NEXT:    [[CONV500:%.*]] = zext i8 [[CONV499]] to i32
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV501:%.*]] = bytecast b8 [[TMP177]] to i8
// SIMD-ONLY0-NEXT:    [[CONV502:%.*]] = zext i8 [[CONV501]] to i32
// SIMD-ONLY0-NEXT:    [[CMP503:%.*]] = icmp eq i32 [[CONV500]], [[CONV502]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP503]], label [[COND_TRUE505:%.*]], label [[COND_FALSE508:%.*]]
// SIMD-ONLY0:       cond.true505:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV506:%.*]] = bytecast b8 [[TMP178]] to i8
// SIMD-ONLY0-NEXT:    [[CONV507:%.*]] = zext i8 [[CONV506]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END511:%.*]]
// SIMD-ONLY0:       cond.false508:
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV509:%.*]] = bytecast b8 [[TMP179]] to i8
// SIMD-ONLY0-NEXT:    [[CONV510:%.*]] = zext i8 [[CONV509]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END511]]
// SIMD-ONLY0:       cond.end511:
// SIMD-ONLY0-NEXT:    [[COND512:%.*]] = phi i32 [ [[CONV507]], [[COND_TRUE505]] ], [ [[CONV510]], [[COND_FALSE508]] ]
// SIMD-ONLY0-NEXT:    [[CONV513:%.*]] = trunc i32 [[COND512]] to i8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = bitcast i8 [[CONV513]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP180]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP181:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV514:%.*]] = bytecast b8 [[TMP181]] to i8
// SIMD-ONLY0-NEXT:    [[CONV515:%.*]] = zext i8 [[CONV514]] to i32
// SIMD-ONLY0-NEXT:    [[TMP182:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV516:%.*]] = bytecast b8 [[TMP182]] to i8
// SIMD-ONLY0-NEXT:    [[CONV517:%.*]] = zext i8 [[CONV516]] to i32
// SIMD-ONLY0-NEXT:    [[CMP518:%.*]] = icmp eq i32 [[CONV515]], [[CONV517]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP518]], label [[COND_TRUE520:%.*]], label [[COND_FALSE523:%.*]]
// SIMD-ONLY0:       cond.true520:
// SIMD-ONLY0-NEXT:    [[TMP183:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV521:%.*]] = bytecast b8 [[TMP183]] to i8
// SIMD-ONLY0-NEXT:    [[CONV522:%.*]] = zext i8 [[CONV521]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END526:%.*]]
// SIMD-ONLY0:       cond.false523:
// SIMD-ONLY0-NEXT:    [[TMP184:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV524:%.*]] = bytecast b8 [[TMP184]] to i8
// SIMD-ONLY0-NEXT:    [[CONV525:%.*]] = zext i8 [[CONV524]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END526]]
// SIMD-ONLY0:       cond.end526:
// SIMD-ONLY0-NEXT:    [[COND527:%.*]] = phi i32 [ [[CONV522]], [[COND_TRUE520]] ], [ [[CONV525]], [[COND_FALSE523]] ]
// SIMD-ONLY0-NEXT:    [[CONV528:%.*]] = trunc i32 [[COND527]] to i8
// SIMD-ONLY0-NEXT:    [[TMP185:%.*]] = bitcast i8 [[CONV528]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP185]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP186:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV529:%.*]] = bytecast b8 [[TMP186]] to i8
// SIMD-ONLY0-NEXT:    [[CONV530:%.*]] = zext i8 [[CONV529]] to i32
// SIMD-ONLY0-NEXT:    [[TMP187:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV531:%.*]] = bytecast b8 [[TMP187]] to i8
// SIMD-ONLY0-NEXT:    [[CONV532:%.*]] = zext i8 [[CONV531]] to i32
// SIMD-ONLY0-NEXT:    [[CMP533:%.*]] = icmp eq i32 [[CONV530]], [[CONV532]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP533]], label [[IF_THEN535:%.*]], label [[IF_END536:%.*]]
// SIMD-ONLY0:       if.then535:
// SIMD-ONLY0-NEXT:    [[TMP188:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP188]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END536]]
// SIMD-ONLY0:       if.end536:
// SIMD-ONLY0-NEXT:    [[TMP189:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV537:%.*]] = bytecast b8 [[TMP189]] to i8
// SIMD-ONLY0-NEXT:    [[CONV538:%.*]] = zext i8 [[CONV537]] to i32
// SIMD-ONLY0-NEXT:    [[TMP190:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV539:%.*]] = bytecast b8 [[TMP190]] to i8
// SIMD-ONLY0-NEXT:    [[CONV540:%.*]] = zext i8 [[CONV539]] to i32
// SIMD-ONLY0-NEXT:    [[CMP541:%.*]] = icmp eq i32 [[CONV538]], [[CONV540]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP541]], label [[IF_THEN543:%.*]], label [[IF_END544:%.*]]
// SIMD-ONLY0:       if.then543:
// SIMD-ONLY0-NEXT:    [[TMP191:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP191]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END544]]
// SIMD-ONLY0:       if.end544:
// SIMD-ONLY0-NEXT:    [[TMP192:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV545:%.*]] = bytecast b8 [[TMP192]] to i8
// SIMD-ONLY0-NEXT:    [[CONV546:%.*]] = sext i8 [[CONV545]] to i32
// SIMD-ONLY0-NEXT:    [[TMP193:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV547:%.*]] = bytecast b8 [[TMP193]] to i8
// SIMD-ONLY0-NEXT:    [[CONV548:%.*]] = sext i8 [[CONV547]] to i32
// SIMD-ONLY0-NEXT:    [[CMP549:%.*]] = icmp sgt i32 [[CONV546]], [[CONV548]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP549]], label [[COND_TRUE551:%.*]], label [[COND_FALSE554:%.*]]
// SIMD-ONLY0:       cond.true551:
// SIMD-ONLY0-NEXT:    [[TMP194:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV552:%.*]] = bytecast b8 [[TMP194]] to i8
// SIMD-ONLY0-NEXT:    [[CONV553:%.*]] = sext i8 [[CONV552]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END557:%.*]]
// SIMD-ONLY0:       cond.false554:
// SIMD-ONLY0-NEXT:    [[TMP195:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV555:%.*]] = bytecast b8 [[TMP195]] to i8
// SIMD-ONLY0-NEXT:    [[CONV556:%.*]] = sext i8 [[CONV555]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END557]]
// SIMD-ONLY0:       cond.end557:
// SIMD-ONLY0-NEXT:    [[COND558:%.*]] = phi i32 [ [[CONV553]], [[COND_TRUE551]] ], [ [[CONV556]], [[COND_FALSE554]] ]
// SIMD-ONLY0-NEXT:    [[CONV559:%.*]] = trunc i32 [[COND558]] to i8
// SIMD-ONLY0-NEXT:    [[TMP196:%.*]] = bitcast i8 [[CONV559]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP196]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP197:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV560:%.*]] = bytecast b8 [[TMP197]] to i8
// SIMD-ONLY0-NEXT:    [[CONV561:%.*]] = sext i8 [[CONV560]] to i32
// SIMD-ONLY0-NEXT:    [[TMP198:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV562:%.*]] = bytecast b8 [[TMP198]] to i8
// SIMD-ONLY0-NEXT:    [[CONV563:%.*]] = sext i8 [[CONV562]] to i32
// SIMD-ONLY0-NEXT:    [[CMP564:%.*]] = icmp slt i32 [[CONV561]], [[CONV563]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP564]], label [[COND_TRUE566:%.*]], label [[COND_FALSE569:%.*]]
// SIMD-ONLY0:       cond.true566:
// SIMD-ONLY0-NEXT:    [[TMP199:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV567:%.*]] = bytecast b8 [[TMP199]] to i8
// SIMD-ONLY0-NEXT:    [[CONV568:%.*]] = sext i8 [[CONV567]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END572:%.*]]
// SIMD-ONLY0:       cond.false569:
// SIMD-ONLY0-NEXT:    [[TMP200:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV570:%.*]] = bytecast b8 [[TMP200]] to i8
// SIMD-ONLY0-NEXT:    [[CONV571:%.*]] = sext i8 [[CONV570]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END572]]
// SIMD-ONLY0:       cond.end572:
// SIMD-ONLY0-NEXT:    [[COND573:%.*]] = phi i32 [ [[CONV568]], [[COND_TRUE566]] ], [ [[CONV571]], [[COND_FALSE569]] ]
// SIMD-ONLY0-NEXT:    [[CONV574:%.*]] = trunc i32 [[COND573]] to i8
// SIMD-ONLY0-NEXT:    [[TMP201:%.*]] = bitcast i8 [[CONV574]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP201]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP202:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV575:%.*]] = bytecast b8 [[TMP202]] to i8
// SIMD-ONLY0-NEXT:    [[CONV576:%.*]] = sext i8 [[CONV575]] to i32
// SIMD-ONLY0-NEXT:    [[TMP203:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV577:%.*]] = bytecast b8 [[TMP203]] to i8
// SIMD-ONLY0-NEXT:    [[CONV578:%.*]] = sext i8 [[CONV577]] to i32
// SIMD-ONLY0-NEXT:    [[CMP579:%.*]] = icmp sgt i32 [[CONV576]], [[CONV578]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP579]], label [[COND_TRUE581:%.*]], label [[COND_FALSE584:%.*]]
// SIMD-ONLY0:       cond.true581:
// SIMD-ONLY0-NEXT:    [[TMP204:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV582:%.*]] = bytecast b8 [[TMP204]] to i8
// SIMD-ONLY0-NEXT:    [[CONV583:%.*]] = sext i8 [[CONV582]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END587:%.*]]
// SIMD-ONLY0:       cond.false584:
// SIMD-ONLY0-NEXT:    [[TMP205:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV585:%.*]] = bytecast b8 [[TMP205]] to i8
// SIMD-ONLY0-NEXT:    [[CONV586:%.*]] = sext i8 [[CONV585]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END587]]
// SIMD-ONLY0:       cond.end587:
// SIMD-ONLY0-NEXT:    [[COND588:%.*]] = phi i32 [ [[CONV583]], [[COND_TRUE581]] ], [ [[CONV586]], [[COND_FALSE584]] ]
// SIMD-ONLY0-NEXT:    [[CONV589:%.*]] = trunc i32 [[COND588]] to i8
// SIMD-ONLY0-NEXT:    [[TMP206:%.*]] = bitcast i8 [[CONV589]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP206]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP207:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV590:%.*]] = bytecast b8 [[TMP207]] to i8
// SIMD-ONLY0-NEXT:    [[CONV591:%.*]] = sext i8 [[CONV590]] to i32
// SIMD-ONLY0-NEXT:    [[TMP208:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV592:%.*]] = bytecast b8 [[TMP208]] to i8
// SIMD-ONLY0-NEXT:    [[CONV593:%.*]] = sext i8 [[CONV592]] to i32
// SIMD-ONLY0-NEXT:    [[CMP594:%.*]] = icmp slt i32 [[CONV591]], [[CONV593]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP594]], label [[COND_TRUE596:%.*]], label [[COND_FALSE599:%.*]]
// SIMD-ONLY0:       cond.true596:
// SIMD-ONLY0-NEXT:    [[TMP209:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV597:%.*]] = bytecast b8 [[TMP209]] to i8
// SIMD-ONLY0-NEXT:    [[CONV598:%.*]] = sext i8 [[CONV597]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END602:%.*]]
// SIMD-ONLY0:       cond.false599:
// SIMD-ONLY0-NEXT:    [[TMP210:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV600:%.*]] = bytecast b8 [[TMP210]] to i8
// SIMD-ONLY0-NEXT:    [[CONV601:%.*]] = sext i8 [[CONV600]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END602]]
// SIMD-ONLY0:       cond.end602:
// SIMD-ONLY0-NEXT:    [[COND603:%.*]] = phi i32 [ [[CONV598]], [[COND_TRUE596]] ], [ [[CONV601]], [[COND_FALSE599]] ]
// SIMD-ONLY0-NEXT:    [[CONV604:%.*]] = trunc i32 [[COND603]] to i8
// SIMD-ONLY0-NEXT:    [[TMP211:%.*]] = bitcast i8 [[CONV604]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP211]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP212:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV605:%.*]] = bytecast b8 [[TMP212]] to i8
// SIMD-ONLY0-NEXT:    [[CONV606:%.*]] = sext i8 [[CONV605]] to i32
// SIMD-ONLY0-NEXT:    [[TMP213:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV607:%.*]] = bytecast b8 [[TMP213]] to i8
// SIMD-ONLY0-NEXT:    [[CONV608:%.*]] = sext i8 [[CONV607]] to i32
// SIMD-ONLY0-NEXT:    [[CMP609:%.*]] = icmp sgt i32 [[CONV606]], [[CONV608]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP609]], label [[IF_THEN611:%.*]], label [[IF_END612:%.*]]
// SIMD-ONLY0:       if.then611:
// SIMD-ONLY0-NEXT:    [[TMP214:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP214]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END612]]
// SIMD-ONLY0:       if.end612:
// SIMD-ONLY0-NEXT:    [[TMP215:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV613:%.*]] = bytecast b8 [[TMP215]] to i8
// SIMD-ONLY0-NEXT:    [[CONV614:%.*]] = sext i8 [[CONV613]] to i32
// SIMD-ONLY0-NEXT:    [[TMP216:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV615:%.*]] = bytecast b8 [[TMP216]] to i8
// SIMD-ONLY0-NEXT:    [[CONV616:%.*]] = sext i8 [[CONV615]] to i32
// SIMD-ONLY0-NEXT:    [[CMP617:%.*]] = icmp slt i32 [[CONV614]], [[CONV616]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP617]], label [[IF_THEN619:%.*]], label [[IF_END620:%.*]]
// SIMD-ONLY0:       if.then619:
// SIMD-ONLY0-NEXT:    [[TMP217:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP217]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END620]]
// SIMD-ONLY0:       if.end620:
// SIMD-ONLY0-NEXT:    [[TMP218:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV621:%.*]] = bytecast b8 [[TMP218]] to i8
// SIMD-ONLY0-NEXT:    [[CONV622:%.*]] = sext i8 [[CONV621]] to i32
// SIMD-ONLY0-NEXT:    [[TMP219:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV623:%.*]] = bytecast b8 [[TMP219]] to i8
// SIMD-ONLY0-NEXT:    [[CONV624:%.*]] = sext i8 [[CONV623]] to i32
// SIMD-ONLY0-NEXT:    [[CMP625:%.*]] = icmp sgt i32 [[CONV622]], [[CONV624]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP625]], label [[IF_THEN627:%.*]], label [[IF_END628:%.*]]
// SIMD-ONLY0:       if.then627:
// SIMD-ONLY0-NEXT:    [[TMP220:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP220]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END628]]
// SIMD-ONLY0:       if.end628:
// SIMD-ONLY0-NEXT:    [[TMP221:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV629:%.*]] = bytecast b8 [[TMP221]] to i8
// SIMD-ONLY0-NEXT:    [[CONV630:%.*]] = sext i8 [[CONV629]] to i32
// SIMD-ONLY0-NEXT:    [[TMP222:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV631:%.*]] = bytecast b8 [[TMP222]] to i8
// SIMD-ONLY0-NEXT:    [[CONV632:%.*]] = sext i8 [[CONV631]] to i32
// SIMD-ONLY0-NEXT:    [[CMP633:%.*]] = icmp slt i32 [[CONV630]], [[CONV632]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP633]], label [[IF_THEN635:%.*]], label [[IF_END636:%.*]]
// SIMD-ONLY0:       if.then635:
// SIMD-ONLY0-NEXT:    [[TMP223:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP223]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END636]]
// SIMD-ONLY0:       if.end636:
// SIMD-ONLY0-NEXT:    [[TMP224:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV637:%.*]] = bytecast b8 [[TMP224]] to i8
// SIMD-ONLY0-NEXT:    [[CONV638:%.*]] = sext i8 [[CONV637]] to i32
// SIMD-ONLY0-NEXT:    [[TMP225:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV639:%.*]] = bytecast b8 [[TMP225]] to i8
// SIMD-ONLY0-NEXT:    [[CONV640:%.*]] = sext i8 [[CONV639]] to i32
// SIMD-ONLY0-NEXT:    [[CMP641:%.*]] = icmp eq i32 [[CONV638]], [[CONV640]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP641]], label [[COND_TRUE643:%.*]], label [[COND_FALSE646:%.*]]
// SIMD-ONLY0:       cond.true643:
// SIMD-ONLY0-NEXT:    [[TMP226:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV644:%.*]] = bytecast b8 [[TMP226]] to i8
// SIMD-ONLY0-NEXT:    [[CONV645:%.*]] = sext i8 [[CONV644]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END649:%.*]]
// SIMD-ONLY0:       cond.false646:
// SIMD-ONLY0-NEXT:    [[TMP227:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV647:%.*]] = bytecast b8 [[TMP227]] to i8
// SIMD-ONLY0-NEXT:    [[CONV648:%.*]] = sext i8 [[CONV647]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END649]]
// SIMD-ONLY0:       cond.end649:
// SIMD-ONLY0-NEXT:    [[COND650:%.*]] = phi i32 [ [[CONV645]], [[COND_TRUE643]] ], [ [[CONV648]], [[COND_FALSE646]] ]
// SIMD-ONLY0-NEXT:    [[CONV651:%.*]] = trunc i32 [[COND650]] to i8
// SIMD-ONLY0-NEXT:    [[TMP228:%.*]] = bitcast i8 [[CONV651]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP228]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP229:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV652:%.*]] = bytecast b8 [[TMP229]] to i8
// SIMD-ONLY0-NEXT:    [[CONV653:%.*]] = sext i8 [[CONV652]] to i32
// SIMD-ONLY0-NEXT:    [[TMP230:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV654:%.*]] = bytecast b8 [[TMP230]] to i8
// SIMD-ONLY0-NEXT:    [[CONV655:%.*]] = sext i8 [[CONV654]] to i32
// SIMD-ONLY0-NEXT:    [[CMP656:%.*]] = icmp eq i32 [[CONV653]], [[CONV655]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP656]], label [[COND_TRUE658:%.*]], label [[COND_FALSE661:%.*]]
// SIMD-ONLY0:       cond.true658:
// SIMD-ONLY0-NEXT:    [[TMP231:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV659:%.*]] = bytecast b8 [[TMP231]] to i8
// SIMD-ONLY0-NEXT:    [[CONV660:%.*]] = sext i8 [[CONV659]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END664:%.*]]
// SIMD-ONLY0:       cond.false661:
// SIMD-ONLY0-NEXT:    [[TMP232:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV662:%.*]] = bytecast b8 [[TMP232]] to i8
// SIMD-ONLY0-NEXT:    [[CONV663:%.*]] = sext i8 [[CONV662]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END664]]
// SIMD-ONLY0:       cond.end664:
// SIMD-ONLY0-NEXT:    [[COND665:%.*]] = phi i32 [ [[CONV660]], [[COND_TRUE658]] ], [ [[CONV663]], [[COND_FALSE661]] ]
// SIMD-ONLY0-NEXT:    [[CONV666:%.*]] = trunc i32 [[COND665]] to i8
// SIMD-ONLY0-NEXT:    [[TMP233:%.*]] = bitcast i8 [[CONV666]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP233]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP234:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV667:%.*]] = bytecast b8 [[TMP234]] to i8
// SIMD-ONLY0-NEXT:    [[CONV668:%.*]] = sext i8 [[CONV667]] to i32
// SIMD-ONLY0-NEXT:    [[TMP235:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV669:%.*]] = bytecast b8 [[TMP235]] to i8
// SIMD-ONLY0-NEXT:    [[CONV670:%.*]] = sext i8 [[CONV669]] to i32
// SIMD-ONLY0-NEXT:    [[CMP671:%.*]] = icmp eq i32 [[CONV668]], [[CONV670]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP671]], label [[IF_THEN673:%.*]], label [[IF_END674:%.*]]
// SIMD-ONLY0:       if.then673:
// SIMD-ONLY0-NEXT:    [[TMP236:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP236]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END674]]
// SIMD-ONLY0:       if.end674:
// SIMD-ONLY0-NEXT:    [[TMP237:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV675:%.*]] = bytecast b8 [[TMP237]] to i8
// SIMD-ONLY0-NEXT:    [[CONV676:%.*]] = sext i8 [[CONV675]] to i32
// SIMD-ONLY0-NEXT:    [[TMP238:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV677:%.*]] = bytecast b8 [[TMP238]] to i8
// SIMD-ONLY0-NEXT:    [[CONV678:%.*]] = sext i8 [[CONV677]] to i32
// SIMD-ONLY0-NEXT:    [[CMP679:%.*]] = icmp eq i32 [[CONV676]], [[CONV678]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP679]], label [[IF_THEN681:%.*]], label [[IF_END682:%.*]]
// SIMD-ONLY0:       if.then681:
// SIMD-ONLY0-NEXT:    [[TMP239:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP239]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END682]]
// SIMD-ONLY0:       if.end682:
// SIMD-ONLY0-NEXT:    [[TMP240:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV683:%.*]] = bytecast b8 [[TMP240]] to i8
// SIMD-ONLY0-NEXT:    [[CONV684:%.*]] = zext i8 [[CONV683]] to i32
// SIMD-ONLY0-NEXT:    [[TMP241:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV685:%.*]] = bytecast b8 [[TMP241]] to i8
// SIMD-ONLY0-NEXT:    [[CONV686:%.*]] = zext i8 [[CONV685]] to i32
// SIMD-ONLY0-NEXT:    [[CMP687:%.*]] = icmp sgt i32 [[CONV684]], [[CONV686]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP687]], label [[COND_TRUE689:%.*]], label [[COND_FALSE692:%.*]]
// SIMD-ONLY0:       cond.true689:
// SIMD-ONLY0-NEXT:    [[TMP242:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV690:%.*]] = bytecast b8 [[TMP242]] to i8
// SIMD-ONLY0-NEXT:    [[CONV691:%.*]] = zext i8 [[CONV690]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END695:%.*]]
// SIMD-ONLY0:       cond.false692:
// SIMD-ONLY0-NEXT:    [[TMP243:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV693:%.*]] = bytecast b8 [[TMP243]] to i8
// SIMD-ONLY0-NEXT:    [[CONV694:%.*]] = zext i8 [[CONV693]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END695]]
// SIMD-ONLY0:       cond.end695:
// SIMD-ONLY0-NEXT:    [[COND696:%.*]] = phi i32 [ [[CONV691]], [[COND_TRUE689]] ], [ [[CONV694]], [[COND_FALSE692]] ]
// SIMD-ONLY0-NEXT:    [[CONV697:%.*]] = trunc i32 [[COND696]] to i8
// SIMD-ONLY0-NEXT:    [[TMP244:%.*]] = bitcast i8 [[CONV697]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP244]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP245:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV698:%.*]] = bytecast b8 [[TMP245]] to i8
// SIMD-ONLY0-NEXT:    [[CONV699:%.*]] = zext i8 [[CONV698]] to i32
// SIMD-ONLY0-NEXT:    [[TMP246:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV700:%.*]] = bytecast b8 [[TMP246]] to i8
// SIMD-ONLY0-NEXT:    [[CONV701:%.*]] = zext i8 [[CONV700]] to i32
// SIMD-ONLY0-NEXT:    [[CMP702:%.*]] = icmp slt i32 [[CONV699]], [[CONV701]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP702]], label [[COND_TRUE704:%.*]], label [[COND_FALSE707:%.*]]
// SIMD-ONLY0:       cond.true704:
// SIMD-ONLY0-NEXT:    [[TMP247:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV705:%.*]] = bytecast b8 [[TMP247]] to i8
// SIMD-ONLY0-NEXT:    [[CONV706:%.*]] = zext i8 [[CONV705]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END710:%.*]]
// SIMD-ONLY0:       cond.false707:
// SIMD-ONLY0-NEXT:    [[TMP248:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV708:%.*]] = bytecast b8 [[TMP248]] to i8
// SIMD-ONLY0-NEXT:    [[CONV709:%.*]] = zext i8 [[CONV708]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END710]]
// SIMD-ONLY0:       cond.end710:
// SIMD-ONLY0-NEXT:    [[COND711:%.*]] = phi i32 [ [[CONV706]], [[COND_TRUE704]] ], [ [[CONV709]], [[COND_FALSE707]] ]
// SIMD-ONLY0-NEXT:    [[CONV712:%.*]] = trunc i32 [[COND711]] to i8
// SIMD-ONLY0-NEXT:    [[TMP249:%.*]] = bitcast i8 [[CONV712]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP249]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP250:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV713:%.*]] = bytecast b8 [[TMP250]] to i8
// SIMD-ONLY0-NEXT:    [[CONV714:%.*]] = zext i8 [[CONV713]] to i32
// SIMD-ONLY0-NEXT:    [[TMP251:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV715:%.*]] = bytecast b8 [[TMP251]] to i8
// SIMD-ONLY0-NEXT:    [[CONV716:%.*]] = zext i8 [[CONV715]] to i32
// SIMD-ONLY0-NEXT:    [[CMP717:%.*]] = icmp sgt i32 [[CONV714]], [[CONV716]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP717]], label [[COND_TRUE719:%.*]], label [[COND_FALSE722:%.*]]
// SIMD-ONLY0:       cond.true719:
// SIMD-ONLY0-NEXT:    [[TMP252:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV720:%.*]] = bytecast b8 [[TMP252]] to i8
// SIMD-ONLY0-NEXT:    [[CONV721:%.*]] = zext i8 [[CONV720]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END725:%.*]]
// SIMD-ONLY0:       cond.false722:
// SIMD-ONLY0-NEXT:    [[TMP253:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV723:%.*]] = bytecast b8 [[TMP253]] to i8
// SIMD-ONLY0-NEXT:    [[CONV724:%.*]] = zext i8 [[CONV723]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END725]]
// SIMD-ONLY0:       cond.end725:
// SIMD-ONLY0-NEXT:    [[COND726:%.*]] = phi i32 [ [[CONV721]], [[COND_TRUE719]] ], [ [[CONV724]], [[COND_FALSE722]] ]
// SIMD-ONLY0-NEXT:    [[CONV727:%.*]] = trunc i32 [[COND726]] to i8
// SIMD-ONLY0-NEXT:    [[TMP254:%.*]] = bitcast i8 [[CONV727]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP254]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP255:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV728:%.*]] = bytecast b8 [[TMP255]] to i8
// SIMD-ONLY0-NEXT:    [[CONV729:%.*]] = zext i8 [[CONV728]] to i32
// SIMD-ONLY0-NEXT:    [[TMP256:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV730:%.*]] = bytecast b8 [[TMP256]] to i8
// SIMD-ONLY0-NEXT:    [[CONV731:%.*]] = zext i8 [[CONV730]] to i32
// SIMD-ONLY0-NEXT:    [[CMP732:%.*]] = icmp slt i32 [[CONV729]], [[CONV731]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP732]], label [[COND_TRUE734:%.*]], label [[COND_FALSE737:%.*]]
// SIMD-ONLY0:       cond.true734:
// SIMD-ONLY0-NEXT:    [[TMP257:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV735:%.*]] = bytecast b8 [[TMP257]] to i8
// SIMD-ONLY0-NEXT:    [[CONV736:%.*]] = zext i8 [[CONV735]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END740:%.*]]
// SIMD-ONLY0:       cond.false737:
// SIMD-ONLY0-NEXT:    [[TMP258:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV738:%.*]] = bytecast b8 [[TMP258]] to i8
// SIMD-ONLY0-NEXT:    [[CONV739:%.*]] = zext i8 [[CONV738]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END740]]
// SIMD-ONLY0:       cond.end740:
// SIMD-ONLY0-NEXT:    [[COND741:%.*]] = phi i32 [ [[CONV736]], [[COND_TRUE734]] ], [ [[CONV739]], [[COND_FALSE737]] ]
// SIMD-ONLY0-NEXT:    [[CONV742:%.*]] = trunc i32 [[COND741]] to i8
// SIMD-ONLY0-NEXT:    [[TMP259:%.*]] = bitcast i8 [[CONV742]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP259]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP260:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV743:%.*]] = bytecast b8 [[TMP260]] to i8
// SIMD-ONLY0-NEXT:    [[CONV744:%.*]] = zext i8 [[CONV743]] to i32
// SIMD-ONLY0-NEXT:    [[TMP261:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV745:%.*]] = bytecast b8 [[TMP261]] to i8
// SIMD-ONLY0-NEXT:    [[CONV746:%.*]] = zext i8 [[CONV745]] to i32
// SIMD-ONLY0-NEXT:    [[CMP747:%.*]] = icmp sgt i32 [[CONV744]], [[CONV746]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP747]], label [[IF_THEN749:%.*]], label [[IF_END750:%.*]]
// SIMD-ONLY0:       if.then749:
// SIMD-ONLY0-NEXT:    [[TMP262:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP262]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END750]]
// SIMD-ONLY0:       if.end750:
// SIMD-ONLY0-NEXT:    [[TMP263:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV751:%.*]] = bytecast b8 [[TMP263]] to i8
// SIMD-ONLY0-NEXT:    [[CONV752:%.*]] = zext i8 [[CONV751]] to i32
// SIMD-ONLY0-NEXT:    [[TMP264:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV753:%.*]] = bytecast b8 [[TMP264]] to i8
// SIMD-ONLY0-NEXT:    [[CONV754:%.*]] = zext i8 [[CONV753]] to i32
// SIMD-ONLY0-NEXT:    [[CMP755:%.*]] = icmp slt i32 [[CONV752]], [[CONV754]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP755]], label [[IF_THEN757:%.*]], label [[IF_END758:%.*]]
// SIMD-ONLY0:       if.then757:
// SIMD-ONLY0-NEXT:    [[TMP265:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP265]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END758]]
// SIMD-ONLY0:       if.end758:
// SIMD-ONLY0-NEXT:    [[TMP266:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV759:%.*]] = bytecast b8 [[TMP266]] to i8
// SIMD-ONLY0-NEXT:    [[CONV760:%.*]] = zext i8 [[CONV759]] to i32
// SIMD-ONLY0-NEXT:    [[TMP267:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV761:%.*]] = bytecast b8 [[TMP267]] to i8
// SIMD-ONLY0-NEXT:    [[CONV762:%.*]] = zext i8 [[CONV761]] to i32
// SIMD-ONLY0-NEXT:    [[CMP763:%.*]] = icmp sgt i32 [[CONV760]], [[CONV762]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP763]], label [[IF_THEN765:%.*]], label [[IF_END766:%.*]]
// SIMD-ONLY0:       if.then765:
// SIMD-ONLY0-NEXT:    [[TMP268:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP268]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END766]]
// SIMD-ONLY0:       if.end766:
// SIMD-ONLY0-NEXT:    [[TMP269:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV767:%.*]] = bytecast b8 [[TMP269]] to i8
// SIMD-ONLY0-NEXT:    [[CONV768:%.*]] = zext i8 [[CONV767]] to i32
// SIMD-ONLY0-NEXT:    [[TMP270:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV769:%.*]] = bytecast b8 [[TMP270]] to i8
// SIMD-ONLY0-NEXT:    [[CONV770:%.*]] = zext i8 [[CONV769]] to i32
// SIMD-ONLY0-NEXT:    [[CMP771:%.*]] = icmp slt i32 [[CONV768]], [[CONV770]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP771]], label [[IF_THEN773:%.*]], label [[IF_END774:%.*]]
// SIMD-ONLY0:       if.then773:
// SIMD-ONLY0-NEXT:    [[TMP271:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP271]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END774]]
// SIMD-ONLY0:       if.end774:
// SIMD-ONLY0-NEXT:    [[TMP272:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV775:%.*]] = bytecast b8 [[TMP272]] to i8
// SIMD-ONLY0-NEXT:    [[CONV776:%.*]] = zext i8 [[CONV775]] to i32
// SIMD-ONLY0-NEXT:    [[TMP273:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV777:%.*]] = bytecast b8 [[TMP273]] to i8
// SIMD-ONLY0-NEXT:    [[CONV778:%.*]] = zext i8 [[CONV777]] to i32
// SIMD-ONLY0-NEXT:    [[CMP779:%.*]] = icmp eq i32 [[CONV776]], [[CONV778]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP779]], label [[COND_TRUE781:%.*]], label [[COND_FALSE784:%.*]]
// SIMD-ONLY0:       cond.true781:
// SIMD-ONLY0-NEXT:    [[TMP274:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV782:%.*]] = bytecast b8 [[TMP274]] to i8
// SIMD-ONLY0-NEXT:    [[CONV783:%.*]] = zext i8 [[CONV782]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END787:%.*]]
// SIMD-ONLY0:       cond.false784:
// SIMD-ONLY0-NEXT:    [[TMP275:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV785:%.*]] = bytecast b8 [[TMP275]] to i8
// SIMD-ONLY0-NEXT:    [[CONV786:%.*]] = zext i8 [[CONV785]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END787]]
// SIMD-ONLY0:       cond.end787:
// SIMD-ONLY0-NEXT:    [[COND788:%.*]] = phi i32 [ [[CONV783]], [[COND_TRUE781]] ], [ [[CONV786]], [[COND_FALSE784]] ]
// SIMD-ONLY0-NEXT:    [[CONV789:%.*]] = trunc i32 [[COND788]] to i8
// SIMD-ONLY0-NEXT:    [[TMP276:%.*]] = bitcast i8 [[CONV789]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP276]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP277:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV790:%.*]] = bytecast b8 [[TMP277]] to i8
// SIMD-ONLY0-NEXT:    [[CONV791:%.*]] = zext i8 [[CONV790]] to i32
// SIMD-ONLY0-NEXT:    [[TMP278:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV792:%.*]] = bytecast b8 [[TMP278]] to i8
// SIMD-ONLY0-NEXT:    [[CONV793:%.*]] = zext i8 [[CONV792]] to i32
// SIMD-ONLY0-NEXT:    [[CMP794:%.*]] = icmp eq i32 [[CONV791]], [[CONV793]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP794]], label [[COND_TRUE796:%.*]], label [[COND_FALSE799:%.*]]
// SIMD-ONLY0:       cond.true796:
// SIMD-ONLY0-NEXT:    [[TMP279:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV797:%.*]] = bytecast b8 [[TMP279]] to i8
// SIMD-ONLY0-NEXT:    [[CONV798:%.*]] = zext i8 [[CONV797]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END802:%.*]]
// SIMD-ONLY0:       cond.false799:
// SIMD-ONLY0-NEXT:    [[TMP280:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV800:%.*]] = bytecast b8 [[TMP280]] to i8
// SIMD-ONLY0-NEXT:    [[CONV801:%.*]] = zext i8 [[CONV800]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END802]]
// SIMD-ONLY0:       cond.end802:
// SIMD-ONLY0-NEXT:    [[COND803:%.*]] = phi i32 [ [[CONV798]], [[COND_TRUE796]] ], [ [[CONV801]], [[COND_FALSE799]] ]
// SIMD-ONLY0-NEXT:    [[CONV804:%.*]] = trunc i32 [[COND803]] to i8
// SIMD-ONLY0-NEXT:    [[TMP281:%.*]] = bitcast i8 [[CONV804]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP281]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP282:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV805:%.*]] = bytecast b8 [[TMP282]] to i8
// SIMD-ONLY0-NEXT:    [[CONV806:%.*]] = zext i8 [[CONV805]] to i32
// SIMD-ONLY0-NEXT:    [[TMP283:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV807:%.*]] = bytecast b8 [[TMP283]] to i8
// SIMD-ONLY0-NEXT:    [[CONV808:%.*]] = zext i8 [[CONV807]] to i32
// SIMD-ONLY0-NEXT:    [[CMP809:%.*]] = icmp eq i32 [[CONV806]], [[CONV808]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP809]], label [[IF_THEN811:%.*]], label [[IF_END812:%.*]]
// SIMD-ONLY0:       if.then811:
// SIMD-ONLY0-NEXT:    [[TMP284:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP284]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END812]]
// SIMD-ONLY0:       if.end812:
// SIMD-ONLY0-NEXT:    [[TMP285:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV813:%.*]] = bytecast b8 [[TMP285]] to i8
// SIMD-ONLY0-NEXT:    [[CONV814:%.*]] = zext i8 [[CONV813]] to i32
// SIMD-ONLY0-NEXT:    [[TMP286:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV815:%.*]] = bytecast b8 [[TMP286]] to i8
// SIMD-ONLY0-NEXT:    [[CONV816:%.*]] = zext i8 [[CONV815]] to i32
// SIMD-ONLY0-NEXT:    [[CMP817:%.*]] = icmp eq i32 [[CONV814]], [[CONV816]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP817]], label [[IF_THEN819:%.*]], label [[IF_END820:%.*]]
// SIMD-ONLY0:       if.then819:
// SIMD-ONLY0-NEXT:    [[TMP287:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP287]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END820]]
// SIMD-ONLY0:       if.end820:
// SIMD-ONLY0-NEXT:    [[TMP288:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV821:%.*]] = bytecast b8 [[TMP288]] to i8
// SIMD-ONLY0-NEXT:    [[CONV822:%.*]] = sext i8 [[CONV821]] to i32
// SIMD-ONLY0-NEXT:    [[TMP289:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV823:%.*]] = bytecast b8 [[TMP289]] to i8
// SIMD-ONLY0-NEXT:    [[CONV824:%.*]] = sext i8 [[CONV823]] to i32
// SIMD-ONLY0-NEXT:    [[CMP825:%.*]] = icmp sgt i32 [[CONV822]], [[CONV824]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP825]], label [[COND_TRUE827:%.*]], label [[COND_FALSE830:%.*]]
// SIMD-ONLY0:       cond.true827:
// SIMD-ONLY0-NEXT:    [[TMP290:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV828:%.*]] = bytecast b8 [[TMP290]] to i8
// SIMD-ONLY0-NEXT:    [[CONV829:%.*]] = sext i8 [[CONV828]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END833:%.*]]
// SIMD-ONLY0:       cond.false830:
// SIMD-ONLY0-NEXT:    [[TMP291:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV831:%.*]] = bytecast b8 [[TMP291]] to i8
// SIMD-ONLY0-NEXT:    [[CONV832:%.*]] = sext i8 [[CONV831]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END833]]
// SIMD-ONLY0:       cond.end833:
// SIMD-ONLY0-NEXT:    [[COND834:%.*]] = phi i32 [ [[CONV829]], [[COND_TRUE827]] ], [ [[CONV832]], [[COND_FALSE830]] ]
// SIMD-ONLY0-NEXT:    [[CONV835:%.*]] = trunc i32 [[COND834]] to i8
// SIMD-ONLY0-NEXT:    [[TMP292:%.*]] = bitcast i8 [[CONV835]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP292]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP293:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV836:%.*]] = bytecast b8 [[TMP293]] to i8
// SIMD-ONLY0-NEXT:    [[CONV837:%.*]] = sext i8 [[CONV836]] to i32
// SIMD-ONLY0-NEXT:    [[TMP294:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV838:%.*]] = bytecast b8 [[TMP294]] to i8
// SIMD-ONLY0-NEXT:    [[CONV839:%.*]] = sext i8 [[CONV838]] to i32
// SIMD-ONLY0-NEXT:    [[CMP840:%.*]] = icmp slt i32 [[CONV837]], [[CONV839]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP840]], label [[COND_TRUE842:%.*]], label [[COND_FALSE845:%.*]]
// SIMD-ONLY0:       cond.true842:
// SIMD-ONLY0-NEXT:    [[TMP295:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV843:%.*]] = bytecast b8 [[TMP295]] to i8
// SIMD-ONLY0-NEXT:    [[CONV844:%.*]] = sext i8 [[CONV843]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END848:%.*]]
// SIMD-ONLY0:       cond.false845:
// SIMD-ONLY0-NEXT:    [[TMP296:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV846:%.*]] = bytecast b8 [[TMP296]] to i8
// SIMD-ONLY0-NEXT:    [[CONV847:%.*]] = sext i8 [[CONV846]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END848]]
// SIMD-ONLY0:       cond.end848:
// SIMD-ONLY0-NEXT:    [[COND849:%.*]] = phi i32 [ [[CONV844]], [[COND_TRUE842]] ], [ [[CONV847]], [[COND_FALSE845]] ]
// SIMD-ONLY0-NEXT:    [[CONV850:%.*]] = trunc i32 [[COND849]] to i8
// SIMD-ONLY0-NEXT:    [[TMP297:%.*]] = bitcast i8 [[CONV850]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP297]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP298:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV851:%.*]] = bytecast b8 [[TMP298]] to i8
// SIMD-ONLY0-NEXT:    [[CONV852:%.*]] = sext i8 [[CONV851]] to i32
// SIMD-ONLY0-NEXT:    [[TMP299:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV853:%.*]] = bytecast b8 [[TMP299]] to i8
// SIMD-ONLY0-NEXT:    [[CONV854:%.*]] = sext i8 [[CONV853]] to i32
// SIMD-ONLY0-NEXT:    [[CMP855:%.*]] = icmp sgt i32 [[CONV852]], [[CONV854]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP855]], label [[COND_TRUE857:%.*]], label [[COND_FALSE860:%.*]]
// SIMD-ONLY0:       cond.true857:
// SIMD-ONLY0-NEXT:    [[TMP300:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV858:%.*]] = bytecast b8 [[TMP300]] to i8
// SIMD-ONLY0-NEXT:    [[CONV859:%.*]] = sext i8 [[CONV858]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END863:%.*]]
// SIMD-ONLY0:       cond.false860:
// SIMD-ONLY0-NEXT:    [[TMP301:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV861:%.*]] = bytecast b8 [[TMP301]] to i8
// SIMD-ONLY0-NEXT:    [[CONV862:%.*]] = sext i8 [[CONV861]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END863]]
// SIMD-ONLY0:       cond.end863:
// SIMD-ONLY0-NEXT:    [[COND864:%.*]] = phi i32 [ [[CONV859]], [[COND_TRUE857]] ], [ [[CONV862]], [[COND_FALSE860]] ]
// SIMD-ONLY0-NEXT:    [[CONV865:%.*]] = trunc i32 [[COND864]] to i8
// SIMD-ONLY0-NEXT:    [[TMP302:%.*]] = bitcast i8 [[CONV865]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP302]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP303:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV866:%.*]] = bytecast b8 [[TMP303]] to i8
// SIMD-ONLY0-NEXT:    [[CONV867:%.*]] = sext i8 [[CONV866]] to i32
// SIMD-ONLY0-NEXT:    [[TMP304:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV868:%.*]] = bytecast b8 [[TMP304]] to i8
// SIMD-ONLY0-NEXT:    [[CONV869:%.*]] = sext i8 [[CONV868]] to i32
// SIMD-ONLY0-NEXT:    [[CMP870:%.*]] = icmp slt i32 [[CONV867]], [[CONV869]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP870]], label [[COND_TRUE872:%.*]], label [[COND_FALSE875:%.*]]
// SIMD-ONLY0:       cond.true872:
// SIMD-ONLY0-NEXT:    [[TMP305:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV873:%.*]] = bytecast b8 [[TMP305]] to i8
// SIMD-ONLY0-NEXT:    [[CONV874:%.*]] = sext i8 [[CONV873]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END878:%.*]]
// SIMD-ONLY0:       cond.false875:
// SIMD-ONLY0-NEXT:    [[TMP306:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV876:%.*]] = bytecast b8 [[TMP306]] to i8
// SIMD-ONLY0-NEXT:    [[CONV877:%.*]] = sext i8 [[CONV876]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END878]]
// SIMD-ONLY0:       cond.end878:
// SIMD-ONLY0-NEXT:    [[COND879:%.*]] = phi i32 [ [[CONV874]], [[COND_TRUE872]] ], [ [[CONV877]], [[COND_FALSE875]] ]
// SIMD-ONLY0-NEXT:    [[CONV880:%.*]] = trunc i32 [[COND879]] to i8
// SIMD-ONLY0-NEXT:    [[TMP307:%.*]] = bitcast i8 [[CONV880]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP307]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP308:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV881:%.*]] = bytecast b8 [[TMP308]] to i8
// SIMD-ONLY0-NEXT:    [[CONV882:%.*]] = sext i8 [[CONV881]] to i32
// SIMD-ONLY0-NEXT:    [[TMP309:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV883:%.*]] = bytecast b8 [[TMP309]] to i8
// SIMD-ONLY0-NEXT:    [[CONV884:%.*]] = sext i8 [[CONV883]] to i32
// SIMD-ONLY0-NEXT:    [[CMP885:%.*]] = icmp sgt i32 [[CONV882]], [[CONV884]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP885]], label [[IF_THEN887:%.*]], label [[IF_END888:%.*]]
// SIMD-ONLY0:       if.then887:
// SIMD-ONLY0-NEXT:    [[TMP310:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP310]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END888]]
// SIMD-ONLY0:       if.end888:
// SIMD-ONLY0-NEXT:    [[TMP311:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV889:%.*]] = bytecast b8 [[TMP311]] to i8
// SIMD-ONLY0-NEXT:    [[CONV890:%.*]] = sext i8 [[CONV889]] to i32
// SIMD-ONLY0-NEXT:    [[TMP312:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV891:%.*]] = bytecast b8 [[TMP312]] to i8
// SIMD-ONLY0-NEXT:    [[CONV892:%.*]] = sext i8 [[CONV891]] to i32
// SIMD-ONLY0-NEXT:    [[CMP893:%.*]] = icmp slt i32 [[CONV890]], [[CONV892]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP893]], label [[IF_THEN895:%.*]], label [[IF_END896:%.*]]
// SIMD-ONLY0:       if.then895:
// SIMD-ONLY0-NEXT:    [[TMP313:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP313]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END896]]
// SIMD-ONLY0:       if.end896:
// SIMD-ONLY0-NEXT:    [[TMP314:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV897:%.*]] = bytecast b8 [[TMP314]] to i8
// SIMD-ONLY0-NEXT:    [[CONV898:%.*]] = sext i8 [[CONV897]] to i32
// SIMD-ONLY0-NEXT:    [[TMP315:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV899:%.*]] = bytecast b8 [[TMP315]] to i8
// SIMD-ONLY0-NEXT:    [[CONV900:%.*]] = sext i8 [[CONV899]] to i32
// SIMD-ONLY0-NEXT:    [[CMP901:%.*]] = icmp sgt i32 [[CONV898]], [[CONV900]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP901]], label [[IF_THEN903:%.*]], label [[IF_END904:%.*]]
// SIMD-ONLY0:       if.then903:
// SIMD-ONLY0-NEXT:    [[TMP316:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP316]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END904]]
// SIMD-ONLY0:       if.end904:
// SIMD-ONLY0-NEXT:    [[TMP317:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV905:%.*]] = bytecast b8 [[TMP317]] to i8
// SIMD-ONLY0-NEXT:    [[CONV906:%.*]] = sext i8 [[CONV905]] to i32
// SIMD-ONLY0-NEXT:    [[TMP318:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV907:%.*]] = bytecast b8 [[TMP318]] to i8
// SIMD-ONLY0-NEXT:    [[CONV908:%.*]] = sext i8 [[CONV907]] to i32
// SIMD-ONLY0-NEXT:    [[CMP909:%.*]] = icmp slt i32 [[CONV906]], [[CONV908]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP909]], label [[IF_THEN911:%.*]], label [[IF_END912:%.*]]
// SIMD-ONLY0:       if.then911:
// SIMD-ONLY0-NEXT:    [[TMP319:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP319]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END912]]
// SIMD-ONLY0:       if.end912:
// SIMD-ONLY0-NEXT:    [[TMP320:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV913:%.*]] = bytecast b8 [[TMP320]] to i8
// SIMD-ONLY0-NEXT:    [[CONV914:%.*]] = sext i8 [[CONV913]] to i32
// SIMD-ONLY0-NEXT:    [[TMP321:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV915:%.*]] = bytecast b8 [[TMP321]] to i8
// SIMD-ONLY0-NEXT:    [[CONV916:%.*]] = sext i8 [[CONV915]] to i32
// SIMD-ONLY0-NEXT:    [[CMP917:%.*]] = icmp eq i32 [[CONV914]], [[CONV916]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP917]], label [[COND_TRUE919:%.*]], label [[COND_FALSE922:%.*]]
// SIMD-ONLY0:       cond.true919:
// SIMD-ONLY0-NEXT:    [[TMP322:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV920:%.*]] = bytecast b8 [[TMP322]] to i8
// SIMD-ONLY0-NEXT:    [[CONV921:%.*]] = sext i8 [[CONV920]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END925:%.*]]
// SIMD-ONLY0:       cond.false922:
// SIMD-ONLY0-NEXT:    [[TMP323:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV923:%.*]] = bytecast b8 [[TMP323]] to i8
// SIMD-ONLY0-NEXT:    [[CONV924:%.*]] = sext i8 [[CONV923]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END925]]
// SIMD-ONLY0:       cond.end925:
// SIMD-ONLY0-NEXT:    [[COND926:%.*]] = phi i32 [ [[CONV921]], [[COND_TRUE919]] ], [ [[CONV924]], [[COND_FALSE922]] ]
// SIMD-ONLY0-NEXT:    [[CONV927:%.*]] = trunc i32 [[COND926]] to i8
// SIMD-ONLY0-NEXT:    [[TMP324:%.*]] = bitcast i8 [[CONV927]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP324]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP325:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV928:%.*]] = bytecast b8 [[TMP325]] to i8
// SIMD-ONLY0-NEXT:    [[CONV929:%.*]] = sext i8 [[CONV928]] to i32
// SIMD-ONLY0-NEXT:    [[TMP326:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV930:%.*]] = bytecast b8 [[TMP326]] to i8
// SIMD-ONLY0-NEXT:    [[CONV931:%.*]] = sext i8 [[CONV930]] to i32
// SIMD-ONLY0-NEXT:    [[CMP932:%.*]] = icmp eq i32 [[CONV929]], [[CONV931]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP932]], label [[COND_TRUE934:%.*]], label [[COND_FALSE937:%.*]]
// SIMD-ONLY0:       cond.true934:
// SIMD-ONLY0-NEXT:    [[TMP327:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV935:%.*]] = bytecast b8 [[TMP327]] to i8
// SIMD-ONLY0-NEXT:    [[CONV936:%.*]] = sext i8 [[CONV935]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END940:%.*]]
// SIMD-ONLY0:       cond.false937:
// SIMD-ONLY0-NEXT:    [[TMP328:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV938:%.*]] = bytecast b8 [[TMP328]] to i8
// SIMD-ONLY0-NEXT:    [[CONV939:%.*]] = sext i8 [[CONV938]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END940]]
// SIMD-ONLY0:       cond.end940:
// SIMD-ONLY0-NEXT:    [[COND941:%.*]] = phi i32 [ [[CONV936]], [[COND_TRUE934]] ], [ [[CONV939]], [[COND_FALSE937]] ]
// SIMD-ONLY0-NEXT:    [[CONV942:%.*]] = trunc i32 [[COND941]] to i8
// SIMD-ONLY0-NEXT:    [[TMP329:%.*]] = bitcast i8 [[CONV942]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP329]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP330:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV943:%.*]] = bytecast b8 [[TMP330]] to i8
// SIMD-ONLY0-NEXT:    [[CONV944:%.*]] = sext i8 [[CONV943]] to i32
// SIMD-ONLY0-NEXT:    [[TMP331:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV945:%.*]] = bytecast b8 [[TMP331]] to i8
// SIMD-ONLY0-NEXT:    [[CONV946:%.*]] = sext i8 [[CONV945]] to i32
// SIMD-ONLY0-NEXT:    [[CMP947:%.*]] = icmp eq i32 [[CONV944]], [[CONV946]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP947]], label [[IF_THEN949:%.*]], label [[IF_END950:%.*]]
// SIMD-ONLY0:       if.then949:
// SIMD-ONLY0-NEXT:    [[TMP332:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP332]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END950]]
// SIMD-ONLY0:       if.end950:
// SIMD-ONLY0-NEXT:    [[TMP333:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV951:%.*]] = bytecast b8 [[TMP333]] to i8
// SIMD-ONLY0-NEXT:    [[CONV952:%.*]] = sext i8 [[CONV951]] to i32
// SIMD-ONLY0-NEXT:    [[TMP334:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV953:%.*]] = bytecast b8 [[TMP334]] to i8
// SIMD-ONLY0-NEXT:    [[CONV954:%.*]] = sext i8 [[CONV953]] to i32
// SIMD-ONLY0-NEXT:    [[CMP955:%.*]] = icmp eq i32 [[CONV952]], [[CONV954]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP955]], label [[IF_THEN957:%.*]], label [[IF_END958:%.*]]
// SIMD-ONLY0:       if.then957:
// SIMD-ONLY0-NEXT:    [[TMP335:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP335]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END958]]
// SIMD-ONLY0:       if.end958:
// SIMD-ONLY0-NEXT:    [[TMP336:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV959:%.*]] = bytecast b8 [[TMP336]] to i8
// SIMD-ONLY0-NEXT:    [[CONV960:%.*]] = zext i8 [[CONV959]] to i32
// SIMD-ONLY0-NEXT:    [[TMP337:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV961:%.*]] = bytecast b8 [[TMP337]] to i8
// SIMD-ONLY0-NEXT:    [[CONV962:%.*]] = zext i8 [[CONV961]] to i32
// SIMD-ONLY0-NEXT:    [[CMP963:%.*]] = icmp sgt i32 [[CONV960]], [[CONV962]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP963]], label [[COND_TRUE965:%.*]], label [[COND_FALSE968:%.*]]
// SIMD-ONLY0:       cond.true965:
// SIMD-ONLY0-NEXT:    [[TMP338:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV966:%.*]] = bytecast b8 [[TMP338]] to i8
// SIMD-ONLY0-NEXT:    [[CONV967:%.*]] = zext i8 [[CONV966]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END971:%.*]]
// SIMD-ONLY0:       cond.false968:
// SIMD-ONLY0-NEXT:    [[TMP339:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV969:%.*]] = bytecast b8 [[TMP339]] to i8
// SIMD-ONLY0-NEXT:    [[CONV970:%.*]] = zext i8 [[CONV969]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END971]]
// SIMD-ONLY0:       cond.end971:
// SIMD-ONLY0-NEXT:    [[COND972:%.*]] = phi i32 [ [[CONV967]], [[COND_TRUE965]] ], [ [[CONV970]], [[COND_FALSE968]] ]
// SIMD-ONLY0-NEXT:    [[CONV973:%.*]] = trunc i32 [[COND972]] to i8
// SIMD-ONLY0-NEXT:    [[TMP340:%.*]] = bitcast i8 [[CONV973]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP340]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP341:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV974:%.*]] = bytecast b8 [[TMP341]] to i8
// SIMD-ONLY0-NEXT:    [[CONV975:%.*]] = zext i8 [[CONV974]] to i32
// SIMD-ONLY0-NEXT:    [[TMP342:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV976:%.*]] = bytecast b8 [[TMP342]] to i8
// SIMD-ONLY0-NEXT:    [[CONV977:%.*]] = zext i8 [[CONV976]] to i32
// SIMD-ONLY0-NEXT:    [[CMP978:%.*]] = icmp slt i32 [[CONV975]], [[CONV977]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP978]], label [[COND_TRUE980:%.*]], label [[COND_FALSE983:%.*]]
// SIMD-ONLY0:       cond.true980:
// SIMD-ONLY0-NEXT:    [[TMP343:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV981:%.*]] = bytecast b8 [[TMP343]] to i8
// SIMD-ONLY0-NEXT:    [[CONV982:%.*]] = zext i8 [[CONV981]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END986:%.*]]
// SIMD-ONLY0:       cond.false983:
// SIMD-ONLY0-NEXT:    [[TMP344:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV984:%.*]] = bytecast b8 [[TMP344]] to i8
// SIMD-ONLY0-NEXT:    [[CONV985:%.*]] = zext i8 [[CONV984]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END986]]
// SIMD-ONLY0:       cond.end986:
// SIMD-ONLY0-NEXT:    [[COND987:%.*]] = phi i32 [ [[CONV982]], [[COND_TRUE980]] ], [ [[CONV985]], [[COND_FALSE983]] ]
// SIMD-ONLY0-NEXT:    [[CONV988:%.*]] = trunc i32 [[COND987]] to i8
// SIMD-ONLY0-NEXT:    [[TMP345:%.*]] = bitcast i8 [[CONV988]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP345]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP346:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV989:%.*]] = bytecast b8 [[TMP346]] to i8
// SIMD-ONLY0-NEXT:    [[CONV990:%.*]] = zext i8 [[CONV989]] to i32
// SIMD-ONLY0-NEXT:    [[TMP347:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV991:%.*]] = bytecast b8 [[TMP347]] to i8
// SIMD-ONLY0-NEXT:    [[CONV992:%.*]] = zext i8 [[CONV991]] to i32
// SIMD-ONLY0-NEXT:    [[CMP993:%.*]] = icmp sgt i32 [[CONV990]], [[CONV992]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP993]], label [[COND_TRUE995:%.*]], label [[COND_FALSE998:%.*]]
// SIMD-ONLY0:       cond.true995:
// SIMD-ONLY0-NEXT:    [[TMP348:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV996:%.*]] = bytecast b8 [[TMP348]] to i8
// SIMD-ONLY0-NEXT:    [[CONV997:%.*]] = zext i8 [[CONV996]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1001:%.*]]
// SIMD-ONLY0:       cond.false998:
// SIMD-ONLY0-NEXT:    [[TMP349:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV999:%.*]] = bytecast b8 [[TMP349]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1000:%.*]] = zext i8 [[CONV999]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1001]]
// SIMD-ONLY0:       cond.end1001:
// SIMD-ONLY0-NEXT:    [[COND1002:%.*]] = phi i32 [ [[CONV997]], [[COND_TRUE995]] ], [ [[CONV1000]], [[COND_FALSE998]] ]
// SIMD-ONLY0-NEXT:    [[CONV1003:%.*]] = trunc i32 [[COND1002]] to i8
// SIMD-ONLY0-NEXT:    [[TMP350:%.*]] = bitcast i8 [[CONV1003]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP350]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP351:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1004:%.*]] = bytecast b8 [[TMP351]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1005:%.*]] = zext i8 [[CONV1004]] to i32
// SIMD-ONLY0-NEXT:    [[TMP352:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1006:%.*]] = bytecast b8 [[TMP352]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1007:%.*]] = zext i8 [[CONV1006]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1008:%.*]] = icmp slt i32 [[CONV1005]], [[CONV1007]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1008]], label [[COND_TRUE1010:%.*]], label [[COND_FALSE1013:%.*]]
// SIMD-ONLY0:       cond.true1010:
// SIMD-ONLY0-NEXT:    [[TMP353:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1011:%.*]] = bytecast b8 [[TMP353]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1012:%.*]] = zext i8 [[CONV1011]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1016:%.*]]
// SIMD-ONLY0:       cond.false1013:
// SIMD-ONLY0-NEXT:    [[TMP354:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1014:%.*]] = bytecast b8 [[TMP354]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1015:%.*]] = zext i8 [[CONV1014]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1016]]
// SIMD-ONLY0:       cond.end1016:
// SIMD-ONLY0-NEXT:    [[COND1017:%.*]] = phi i32 [ [[CONV1012]], [[COND_TRUE1010]] ], [ [[CONV1015]], [[COND_FALSE1013]] ]
// SIMD-ONLY0-NEXT:    [[CONV1018:%.*]] = trunc i32 [[COND1017]] to i8
// SIMD-ONLY0-NEXT:    [[TMP355:%.*]] = bitcast i8 [[CONV1018]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP355]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP356:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1019:%.*]] = bytecast b8 [[TMP356]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1020:%.*]] = zext i8 [[CONV1019]] to i32
// SIMD-ONLY0-NEXT:    [[TMP357:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1021:%.*]] = bytecast b8 [[TMP357]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1022:%.*]] = zext i8 [[CONV1021]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1023:%.*]] = icmp sgt i32 [[CONV1020]], [[CONV1022]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1023]], label [[IF_THEN1025:%.*]], label [[IF_END1026:%.*]]
// SIMD-ONLY0:       if.then1025:
// SIMD-ONLY0-NEXT:    [[TMP358:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP358]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1026]]
// SIMD-ONLY0:       if.end1026:
// SIMD-ONLY0-NEXT:    [[TMP359:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1027:%.*]] = bytecast b8 [[TMP359]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1028:%.*]] = zext i8 [[CONV1027]] to i32
// SIMD-ONLY0-NEXT:    [[TMP360:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1029:%.*]] = bytecast b8 [[TMP360]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1030:%.*]] = zext i8 [[CONV1029]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1031:%.*]] = icmp slt i32 [[CONV1028]], [[CONV1030]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1031]], label [[IF_THEN1033:%.*]], label [[IF_END1034:%.*]]
// SIMD-ONLY0:       if.then1033:
// SIMD-ONLY0-NEXT:    [[TMP361:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP361]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1034]]
// SIMD-ONLY0:       if.end1034:
// SIMD-ONLY0-NEXT:    [[TMP362:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1035:%.*]] = bytecast b8 [[TMP362]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1036:%.*]] = zext i8 [[CONV1035]] to i32
// SIMD-ONLY0-NEXT:    [[TMP363:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1037:%.*]] = bytecast b8 [[TMP363]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1038:%.*]] = zext i8 [[CONV1037]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1039:%.*]] = icmp sgt i32 [[CONV1036]], [[CONV1038]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1039]], label [[IF_THEN1041:%.*]], label [[IF_END1042:%.*]]
// SIMD-ONLY0:       if.then1041:
// SIMD-ONLY0-NEXT:    [[TMP364:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP364]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1042]]
// SIMD-ONLY0:       if.end1042:
// SIMD-ONLY0-NEXT:    [[TMP365:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1043:%.*]] = bytecast b8 [[TMP365]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1044:%.*]] = zext i8 [[CONV1043]] to i32
// SIMD-ONLY0-NEXT:    [[TMP366:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1045:%.*]] = bytecast b8 [[TMP366]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1046:%.*]] = zext i8 [[CONV1045]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1047:%.*]] = icmp slt i32 [[CONV1044]], [[CONV1046]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1047]], label [[IF_THEN1049:%.*]], label [[IF_END1050:%.*]]
// SIMD-ONLY0:       if.then1049:
// SIMD-ONLY0-NEXT:    [[TMP367:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP367]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1050]]
// SIMD-ONLY0:       if.end1050:
// SIMD-ONLY0-NEXT:    [[TMP368:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1051:%.*]] = bytecast b8 [[TMP368]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1052:%.*]] = zext i8 [[CONV1051]] to i32
// SIMD-ONLY0-NEXT:    [[TMP369:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1053:%.*]] = bytecast b8 [[TMP369]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1054:%.*]] = zext i8 [[CONV1053]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1055:%.*]] = icmp eq i32 [[CONV1052]], [[CONV1054]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1055]], label [[COND_TRUE1057:%.*]], label [[COND_FALSE1060:%.*]]
// SIMD-ONLY0:       cond.true1057:
// SIMD-ONLY0-NEXT:    [[TMP370:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1058:%.*]] = bytecast b8 [[TMP370]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1059:%.*]] = zext i8 [[CONV1058]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1063:%.*]]
// SIMD-ONLY0:       cond.false1060:
// SIMD-ONLY0-NEXT:    [[TMP371:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1061:%.*]] = bytecast b8 [[TMP371]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1062:%.*]] = zext i8 [[CONV1061]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1063]]
// SIMD-ONLY0:       cond.end1063:
// SIMD-ONLY0-NEXT:    [[COND1064:%.*]] = phi i32 [ [[CONV1059]], [[COND_TRUE1057]] ], [ [[CONV1062]], [[COND_FALSE1060]] ]
// SIMD-ONLY0-NEXT:    [[CONV1065:%.*]] = trunc i32 [[COND1064]] to i8
// SIMD-ONLY0-NEXT:    [[TMP372:%.*]] = bitcast i8 [[CONV1065]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP372]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP373:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1066:%.*]] = bytecast b8 [[TMP373]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1067:%.*]] = zext i8 [[CONV1066]] to i32
// SIMD-ONLY0-NEXT:    [[TMP374:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1068:%.*]] = bytecast b8 [[TMP374]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1069:%.*]] = zext i8 [[CONV1068]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1070:%.*]] = icmp eq i32 [[CONV1067]], [[CONV1069]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1070]], label [[COND_TRUE1072:%.*]], label [[COND_FALSE1075:%.*]]
// SIMD-ONLY0:       cond.true1072:
// SIMD-ONLY0-NEXT:    [[TMP375:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1073:%.*]] = bytecast b8 [[TMP375]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1074:%.*]] = zext i8 [[CONV1073]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1078:%.*]]
// SIMD-ONLY0:       cond.false1075:
// SIMD-ONLY0-NEXT:    [[TMP376:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1076:%.*]] = bytecast b8 [[TMP376]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1077:%.*]] = zext i8 [[CONV1076]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1078]]
// SIMD-ONLY0:       cond.end1078:
// SIMD-ONLY0-NEXT:    [[COND1079:%.*]] = phi i32 [ [[CONV1074]], [[COND_TRUE1072]] ], [ [[CONV1077]], [[COND_FALSE1075]] ]
// SIMD-ONLY0-NEXT:    [[CONV1080:%.*]] = trunc i32 [[COND1079]] to i8
// SIMD-ONLY0-NEXT:    [[TMP377:%.*]] = bitcast i8 [[CONV1080]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP377]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP378:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1081:%.*]] = bytecast b8 [[TMP378]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1082:%.*]] = zext i8 [[CONV1081]] to i32
// SIMD-ONLY0-NEXT:    [[TMP379:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1083:%.*]] = bytecast b8 [[TMP379]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1084:%.*]] = zext i8 [[CONV1083]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1085:%.*]] = icmp eq i32 [[CONV1082]], [[CONV1084]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1085]], label [[IF_THEN1087:%.*]], label [[IF_END1088:%.*]]
// SIMD-ONLY0:       if.then1087:
// SIMD-ONLY0-NEXT:    [[TMP380:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP380]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1088]]
// SIMD-ONLY0:       if.end1088:
// SIMD-ONLY0-NEXT:    [[TMP381:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1089:%.*]] = bytecast b8 [[TMP381]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1090:%.*]] = zext i8 [[CONV1089]] to i32
// SIMD-ONLY0-NEXT:    [[TMP382:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1091:%.*]] = bytecast b8 [[TMP382]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1092:%.*]] = zext i8 [[CONV1091]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1093:%.*]] = icmp eq i32 [[CONV1090]], [[CONV1092]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1093]], label [[IF_THEN1095:%.*]], label [[IF_END1096:%.*]]
// SIMD-ONLY0:       if.then1095:
// SIMD-ONLY0-NEXT:    [[TMP383:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP383]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1096]]
// SIMD-ONLY0:       if.end1096:
// SIMD-ONLY0-NEXT:    [[TMP384:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1097:%.*]] = bytecast b8 [[TMP384]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1098:%.*]] = sext i8 [[CONV1097]] to i32
// SIMD-ONLY0-NEXT:    [[TMP385:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1099:%.*]] = bytecast b8 [[TMP385]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1100:%.*]] = sext i8 [[CONV1099]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1101:%.*]] = icmp sgt i32 [[CONV1098]], [[CONV1100]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1101]], label [[COND_TRUE1103:%.*]], label [[COND_FALSE1106:%.*]]
// SIMD-ONLY0:       cond.true1103:
// SIMD-ONLY0-NEXT:    [[TMP386:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1104:%.*]] = bytecast b8 [[TMP386]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1105:%.*]] = sext i8 [[CONV1104]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1109:%.*]]
// SIMD-ONLY0:       cond.false1106:
// SIMD-ONLY0-NEXT:    [[TMP387:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1107:%.*]] = bytecast b8 [[TMP387]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1108:%.*]] = sext i8 [[CONV1107]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1109]]
// SIMD-ONLY0:       cond.end1109:
// SIMD-ONLY0-NEXT:    [[COND1110:%.*]] = phi i32 [ [[CONV1105]], [[COND_TRUE1103]] ], [ [[CONV1108]], [[COND_FALSE1106]] ]
// SIMD-ONLY0-NEXT:    [[CONV1111:%.*]] = trunc i32 [[COND1110]] to i8
// SIMD-ONLY0-NEXT:    [[TMP388:%.*]] = bitcast i8 [[CONV1111]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP388]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP389:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1112:%.*]] = bytecast b8 [[TMP389]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1113:%.*]] = sext i8 [[CONV1112]] to i32
// SIMD-ONLY0-NEXT:    [[TMP390:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1114:%.*]] = bytecast b8 [[TMP390]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1115:%.*]] = sext i8 [[CONV1114]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1116:%.*]] = icmp slt i32 [[CONV1113]], [[CONV1115]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1116]], label [[COND_TRUE1118:%.*]], label [[COND_FALSE1121:%.*]]
// SIMD-ONLY0:       cond.true1118:
// SIMD-ONLY0-NEXT:    [[TMP391:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1119:%.*]] = bytecast b8 [[TMP391]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1120:%.*]] = sext i8 [[CONV1119]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1124:%.*]]
// SIMD-ONLY0:       cond.false1121:
// SIMD-ONLY0-NEXT:    [[TMP392:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1122:%.*]] = bytecast b8 [[TMP392]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1123:%.*]] = sext i8 [[CONV1122]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1124]]
// SIMD-ONLY0:       cond.end1124:
// SIMD-ONLY0-NEXT:    [[COND1125:%.*]] = phi i32 [ [[CONV1120]], [[COND_TRUE1118]] ], [ [[CONV1123]], [[COND_FALSE1121]] ]
// SIMD-ONLY0-NEXT:    [[CONV1126:%.*]] = trunc i32 [[COND1125]] to i8
// SIMD-ONLY0-NEXT:    [[TMP393:%.*]] = bitcast i8 [[CONV1126]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP393]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP394:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1127:%.*]] = bytecast b8 [[TMP394]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1128:%.*]] = sext i8 [[CONV1127]] to i32
// SIMD-ONLY0-NEXT:    [[TMP395:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1129:%.*]] = bytecast b8 [[TMP395]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1130:%.*]] = sext i8 [[CONV1129]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1131:%.*]] = icmp sgt i32 [[CONV1128]], [[CONV1130]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1131]], label [[COND_TRUE1133:%.*]], label [[COND_FALSE1136:%.*]]
// SIMD-ONLY0:       cond.true1133:
// SIMD-ONLY0-NEXT:    [[TMP396:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1134:%.*]] = bytecast b8 [[TMP396]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1135:%.*]] = sext i8 [[CONV1134]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1139:%.*]]
// SIMD-ONLY0:       cond.false1136:
// SIMD-ONLY0-NEXT:    [[TMP397:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1137:%.*]] = bytecast b8 [[TMP397]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1138:%.*]] = sext i8 [[CONV1137]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1139]]
// SIMD-ONLY0:       cond.end1139:
// SIMD-ONLY0-NEXT:    [[COND1140:%.*]] = phi i32 [ [[CONV1135]], [[COND_TRUE1133]] ], [ [[CONV1138]], [[COND_FALSE1136]] ]
// SIMD-ONLY0-NEXT:    [[CONV1141:%.*]] = trunc i32 [[COND1140]] to i8
// SIMD-ONLY0-NEXT:    [[TMP398:%.*]] = bitcast i8 [[CONV1141]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP398]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP399:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1142:%.*]] = bytecast b8 [[TMP399]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1143:%.*]] = sext i8 [[CONV1142]] to i32
// SIMD-ONLY0-NEXT:    [[TMP400:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1144:%.*]] = bytecast b8 [[TMP400]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1145:%.*]] = sext i8 [[CONV1144]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1146:%.*]] = icmp slt i32 [[CONV1143]], [[CONV1145]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1146]], label [[COND_TRUE1148:%.*]], label [[COND_FALSE1151:%.*]]
// SIMD-ONLY0:       cond.true1148:
// SIMD-ONLY0-NEXT:    [[TMP401:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1149:%.*]] = bytecast b8 [[TMP401]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1150:%.*]] = sext i8 [[CONV1149]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1154:%.*]]
// SIMD-ONLY0:       cond.false1151:
// SIMD-ONLY0-NEXT:    [[TMP402:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1152:%.*]] = bytecast b8 [[TMP402]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1153:%.*]] = sext i8 [[CONV1152]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1154]]
// SIMD-ONLY0:       cond.end1154:
// SIMD-ONLY0-NEXT:    [[COND1155:%.*]] = phi i32 [ [[CONV1150]], [[COND_TRUE1148]] ], [ [[CONV1153]], [[COND_FALSE1151]] ]
// SIMD-ONLY0-NEXT:    [[CONV1156:%.*]] = trunc i32 [[COND1155]] to i8
// SIMD-ONLY0-NEXT:    [[TMP403:%.*]] = bitcast i8 [[CONV1156]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP403]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP404:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1157:%.*]] = bytecast b8 [[TMP404]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1158:%.*]] = sext i8 [[CONV1157]] to i32
// SIMD-ONLY0-NEXT:    [[TMP405:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1159:%.*]] = bytecast b8 [[TMP405]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1160:%.*]] = sext i8 [[CONV1159]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1161:%.*]] = icmp sgt i32 [[CONV1158]], [[CONV1160]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1161]], label [[IF_THEN1163:%.*]], label [[IF_END1164:%.*]]
// SIMD-ONLY0:       if.then1163:
// SIMD-ONLY0-NEXT:    [[TMP406:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP406]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1164]]
// SIMD-ONLY0:       if.end1164:
// SIMD-ONLY0-NEXT:    [[TMP407:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1165:%.*]] = bytecast b8 [[TMP407]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1166:%.*]] = sext i8 [[CONV1165]] to i32
// SIMD-ONLY0-NEXT:    [[TMP408:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1167:%.*]] = bytecast b8 [[TMP408]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1168:%.*]] = sext i8 [[CONV1167]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1169:%.*]] = icmp slt i32 [[CONV1166]], [[CONV1168]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1169]], label [[IF_THEN1171:%.*]], label [[IF_END1172:%.*]]
// SIMD-ONLY0:       if.then1171:
// SIMD-ONLY0-NEXT:    [[TMP409:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP409]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1172]]
// SIMD-ONLY0:       if.end1172:
// SIMD-ONLY0-NEXT:    [[TMP410:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1173:%.*]] = bytecast b8 [[TMP410]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1174:%.*]] = sext i8 [[CONV1173]] to i32
// SIMD-ONLY0-NEXT:    [[TMP411:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1175:%.*]] = bytecast b8 [[TMP411]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1176:%.*]] = sext i8 [[CONV1175]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1177:%.*]] = icmp sgt i32 [[CONV1174]], [[CONV1176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1177]], label [[IF_THEN1179:%.*]], label [[IF_END1180:%.*]]
// SIMD-ONLY0:       if.then1179:
// SIMD-ONLY0-NEXT:    [[TMP412:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP412]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1180]]
// SIMD-ONLY0:       if.end1180:
// SIMD-ONLY0-NEXT:    [[TMP413:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1181:%.*]] = bytecast b8 [[TMP413]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1182:%.*]] = sext i8 [[CONV1181]] to i32
// SIMD-ONLY0-NEXT:    [[TMP414:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1183:%.*]] = bytecast b8 [[TMP414]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1184:%.*]] = sext i8 [[CONV1183]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1185:%.*]] = icmp slt i32 [[CONV1182]], [[CONV1184]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1185]], label [[IF_THEN1187:%.*]], label [[IF_END1188:%.*]]
// SIMD-ONLY0:       if.then1187:
// SIMD-ONLY0-NEXT:    [[TMP415:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP415]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1188]]
// SIMD-ONLY0:       if.end1188:
// SIMD-ONLY0-NEXT:    [[TMP416:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1189:%.*]] = bytecast b8 [[TMP416]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1190:%.*]] = sext i8 [[CONV1189]] to i32
// SIMD-ONLY0-NEXT:    [[TMP417:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1191:%.*]] = bytecast b8 [[TMP417]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1192:%.*]] = sext i8 [[CONV1191]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1193:%.*]] = icmp eq i32 [[CONV1190]], [[CONV1192]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1193]], label [[COND_TRUE1195:%.*]], label [[COND_FALSE1198:%.*]]
// SIMD-ONLY0:       cond.true1195:
// SIMD-ONLY0-NEXT:    [[TMP418:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1196:%.*]] = bytecast b8 [[TMP418]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1197:%.*]] = sext i8 [[CONV1196]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1201:%.*]]
// SIMD-ONLY0:       cond.false1198:
// SIMD-ONLY0-NEXT:    [[TMP419:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1199:%.*]] = bytecast b8 [[TMP419]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1200:%.*]] = sext i8 [[CONV1199]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1201]]
// SIMD-ONLY0:       cond.end1201:
// SIMD-ONLY0-NEXT:    [[COND1202:%.*]] = phi i32 [ [[CONV1197]], [[COND_TRUE1195]] ], [ [[CONV1200]], [[COND_FALSE1198]] ]
// SIMD-ONLY0-NEXT:    [[CONV1203:%.*]] = trunc i32 [[COND1202]] to i8
// SIMD-ONLY0-NEXT:    [[TMP420:%.*]] = bitcast i8 [[CONV1203]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP420]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP421:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1204:%.*]] = bytecast b8 [[TMP421]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1205:%.*]] = sext i8 [[CONV1204]] to i32
// SIMD-ONLY0-NEXT:    [[TMP422:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1206:%.*]] = bytecast b8 [[TMP422]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1207:%.*]] = sext i8 [[CONV1206]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1208:%.*]] = icmp eq i32 [[CONV1205]], [[CONV1207]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1208]], label [[COND_TRUE1210:%.*]], label [[COND_FALSE1213:%.*]]
// SIMD-ONLY0:       cond.true1210:
// SIMD-ONLY0-NEXT:    [[TMP423:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1211:%.*]] = bytecast b8 [[TMP423]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1212:%.*]] = sext i8 [[CONV1211]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1216:%.*]]
// SIMD-ONLY0:       cond.false1213:
// SIMD-ONLY0-NEXT:    [[TMP424:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1214:%.*]] = bytecast b8 [[TMP424]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1215:%.*]] = sext i8 [[CONV1214]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1216]]
// SIMD-ONLY0:       cond.end1216:
// SIMD-ONLY0-NEXT:    [[COND1217:%.*]] = phi i32 [ [[CONV1212]], [[COND_TRUE1210]] ], [ [[CONV1215]], [[COND_FALSE1213]] ]
// SIMD-ONLY0-NEXT:    [[CONV1218:%.*]] = trunc i32 [[COND1217]] to i8
// SIMD-ONLY0-NEXT:    [[TMP425:%.*]] = bitcast i8 [[CONV1218]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP425]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP426:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1219:%.*]] = bytecast b8 [[TMP426]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1220:%.*]] = sext i8 [[CONV1219]] to i32
// SIMD-ONLY0-NEXT:    [[TMP427:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1221:%.*]] = bytecast b8 [[TMP427]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1222:%.*]] = sext i8 [[CONV1221]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1223:%.*]] = icmp eq i32 [[CONV1220]], [[CONV1222]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1223]], label [[IF_THEN1225:%.*]], label [[IF_END1226:%.*]]
// SIMD-ONLY0:       if.then1225:
// SIMD-ONLY0-NEXT:    [[TMP428:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP428]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1226]]
// SIMD-ONLY0:       if.end1226:
// SIMD-ONLY0-NEXT:    [[TMP429:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1227:%.*]] = bytecast b8 [[TMP429]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1228:%.*]] = sext i8 [[CONV1227]] to i32
// SIMD-ONLY0-NEXT:    [[TMP430:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1229:%.*]] = bytecast b8 [[TMP430]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1230:%.*]] = sext i8 [[CONV1229]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1231:%.*]] = icmp eq i32 [[CONV1228]], [[CONV1230]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1231]], label [[IF_THEN1233:%.*]], label [[IF_END1234:%.*]]
// SIMD-ONLY0:       if.then1233:
// SIMD-ONLY0-NEXT:    [[TMP431:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP431]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1234]]
// SIMD-ONLY0:       if.end1234:
// SIMD-ONLY0-NEXT:    [[TMP432:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1235:%.*]] = bytecast b8 [[TMP432]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1236:%.*]] = zext i8 [[CONV1235]] to i32
// SIMD-ONLY0-NEXT:    [[TMP433:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1237:%.*]] = bytecast b8 [[TMP433]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1238:%.*]] = zext i8 [[CONV1237]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1239:%.*]] = icmp sgt i32 [[CONV1236]], [[CONV1238]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1239]], label [[COND_TRUE1241:%.*]], label [[COND_FALSE1244:%.*]]
// SIMD-ONLY0:       cond.true1241:
// SIMD-ONLY0-NEXT:    [[TMP434:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1242:%.*]] = bytecast b8 [[TMP434]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1243:%.*]] = zext i8 [[CONV1242]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1247:%.*]]
// SIMD-ONLY0:       cond.false1244:
// SIMD-ONLY0-NEXT:    [[TMP435:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1245:%.*]] = bytecast b8 [[TMP435]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1246:%.*]] = zext i8 [[CONV1245]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1247]]
// SIMD-ONLY0:       cond.end1247:
// SIMD-ONLY0-NEXT:    [[COND1248:%.*]] = phi i32 [ [[CONV1243]], [[COND_TRUE1241]] ], [ [[CONV1246]], [[COND_FALSE1244]] ]
// SIMD-ONLY0-NEXT:    [[CONV1249:%.*]] = trunc i32 [[COND1248]] to i8
// SIMD-ONLY0-NEXT:    [[TMP436:%.*]] = bitcast i8 [[CONV1249]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP436]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP437:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1250:%.*]] = bytecast b8 [[TMP437]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1251:%.*]] = zext i8 [[CONV1250]] to i32
// SIMD-ONLY0-NEXT:    [[TMP438:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1252:%.*]] = bytecast b8 [[TMP438]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1253:%.*]] = zext i8 [[CONV1252]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1254:%.*]] = icmp slt i32 [[CONV1251]], [[CONV1253]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1254]], label [[COND_TRUE1256:%.*]], label [[COND_FALSE1259:%.*]]
// SIMD-ONLY0:       cond.true1256:
// SIMD-ONLY0-NEXT:    [[TMP439:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1257:%.*]] = bytecast b8 [[TMP439]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1258:%.*]] = zext i8 [[CONV1257]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1262:%.*]]
// SIMD-ONLY0:       cond.false1259:
// SIMD-ONLY0-NEXT:    [[TMP440:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1260:%.*]] = bytecast b8 [[TMP440]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1261:%.*]] = zext i8 [[CONV1260]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1262]]
// SIMD-ONLY0:       cond.end1262:
// SIMD-ONLY0-NEXT:    [[COND1263:%.*]] = phi i32 [ [[CONV1258]], [[COND_TRUE1256]] ], [ [[CONV1261]], [[COND_FALSE1259]] ]
// SIMD-ONLY0-NEXT:    [[CONV1264:%.*]] = trunc i32 [[COND1263]] to i8
// SIMD-ONLY0-NEXT:    [[TMP441:%.*]] = bitcast i8 [[CONV1264]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP441]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP442:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1265:%.*]] = bytecast b8 [[TMP442]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1266:%.*]] = zext i8 [[CONV1265]] to i32
// SIMD-ONLY0-NEXT:    [[TMP443:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1267:%.*]] = bytecast b8 [[TMP443]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1268:%.*]] = zext i8 [[CONV1267]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1269:%.*]] = icmp sgt i32 [[CONV1266]], [[CONV1268]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1269]], label [[COND_TRUE1271:%.*]], label [[COND_FALSE1274:%.*]]
// SIMD-ONLY0:       cond.true1271:
// SIMD-ONLY0-NEXT:    [[TMP444:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1272:%.*]] = bytecast b8 [[TMP444]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1273:%.*]] = zext i8 [[CONV1272]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1277:%.*]]
// SIMD-ONLY0:       cond.false1274:
// SIMD-ONLY0-NEXT:    [[TMP445:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1275:%.*]] = bytecast b8 [[TMP445]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1276:%.*]] = zext i8 [[CONV1275]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1277]]
// SIMD-ONLY0:       cond.end1277:
// SIMD-ONLY0-NEXT:    [[COND1278:%.*]] = phi i32 [ [[CONV1273]], [[COND_TRUE1271]] ], [ [[CONV1276]], [[COND_FALSE1274]] ]
// SIMD-ONLY0-NEXT:    [[CONV1279:%.*]] = trunc i32 [[COND1278]] to i8
// SIMD-ONLY0-NEXT:    [[TMP446:%.*]] = bitcast i8 [[CONV1279]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP446]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP447:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1280:%.*]] = bytecast b8 [[TMP447]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1281:%.*]] = zext i8 [[CONV1280]] to i32
// SIMD-ONLY0-NEXT:    [[TMP448:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1282:%.*]] = bytecast b8 [[TMP448]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1283:%.*]] = zext i8 [[CONV1282]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1284:%.*]] = icmp slt i32 [[CONV1281]], [[CONV1283]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1284]], label [[COND_TRUE1286:%.*]], label [[COND_FALSE1289:%.*]]
// SIMD-ONLY0:       cond.true1286:
// SIMD-ONLY0-NEXT:    [[TMP449:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1287:%.*]] = bytecast b8 [[TMP449]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1288:%.*]] = zext i8 [[CONV1287]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1292:%.*]]
// SIMD-ONLY0:       cond.false1289:
// SIMD-ONLY0-NEXT:    [[TMP450:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1290:%.*]] = bytecast b8 [[TMP450]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1291:%.*]] = zext i8 [[CONV1290]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1292]]
// SIMD-ONLY0:       cond.end1292:
// SIMD-ONLY0-NEXT:    [[COND1293:%.*]] = phi i32 [ [[CONV1288]], [[COND_TRUE1286]] ], [ [[CONV1291]], [[COND_FALSE1289]] ]
// SIMD-ONLY0-NEXT:    [[CONV1294:%.*]] = trunc i32 [[COND1293]] to i8
// SIMD-ONLY0-NEXT:    [[TMP451:%.*]] = bitcast i8 [[CONV1294]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP451]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP452:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1295:%.*]] = bytecast b8 [[TMP452]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1296:%.*]] = zext i8 [[CONV1295]] to i32
// SIMD-ONLY0-NEXT:    [[TMP453:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1297:%.*]] = bytecast b8 [[TMP453]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1298:%.*]] = zext i8 [[CONV1297]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1299:%.*]] = icmp sgt i32 [[CONV1296]], [[CONV1298]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1299]], label [[IF_THEN1301:%.*]], label [[IF_END1302:%.*]]
// SIMD-ONLY0:       if.then1301:
// SIMD-ONLY0-NEXT:    [[TMP454:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP454]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1302]]
// SIMD-ONLY0:       if.end1302:
// SIMD-ONLY0-NEXT:    [[TMP455:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1303:%.*]] = bytecast b8 [[TMP455]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1304:%.*]] = zext i8 [[CONV1303]] to i32
// SIMD-ONLY0-NEXT:    [[TMP456:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1305:%.*]] = bytecast b8 [[TMP456]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1306:%.*]] = zext i8 [[CONV1305]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1307:%.*]] = icmp slt i32 [[CONV1304]], [[CONV1306]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1307]], label [[IF_THEN1309:%.*]], label [[IF_END1310:%.*]]
// SIMD-ONLY0:       if.then1309:
// SIMD-ONLY0-NEXT:    [[TMP457:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP457]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1310]]
// SIMD-ONLY0:       if.end1310:
// SIMD-ONLY0-NEXT:    [[TMP458:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1311:%.*]] = bytecast b8 [[TMP458]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1312:%.*]] = zext i8 [[CONV1311]] to i32
// SIMD-ONLY0-NEXT:    [[TMP459:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1313:%.*]] = bytecast b8 [[TMP459]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1314:%.*]] = zext i8 [[CONV1313]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1315:%.*]] = icmp sgt i32 [[CONV1312]], [[CONV1314]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1315]], label [[IF_THEN1317:%.*]], label [[IF_END1318:%.*]]
// SIMD-ONLY0:       if.then1317:
// SIMD-ONLY0-NEXT:    [[TMP460:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP460]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1318]]
// SIMD-ONLY0:       if.end1318:
// SIMD-ONLY0-NEXT:    [[TMP461:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1319:%.*]] = bytecast b8 [[TMP461]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1320:%.*]] = zext i8 [[CONV1319]] to i32
// SIMD-ONLY0-NEXT:    [[TMP462:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1321:%.*]] = bytecast b8 [[TMP462]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1322:%.*]] = zext i8 [[CONV1321]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1323:%.*]] = icmp slt i32 [[CONV1320]], [[CONV1322]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1323]], label [[IF_THEN1325:%.*]], label [[IF_END1326:%.*]]
// SIMD-ONLY0:       if.then1325:
// SIMD-ONLY0-NEXT:    [[TMP463:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP463]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1326]]
// SIMD-ONLY0:       if.end1326:
// SIMD-ONLY0-NEXT:    [[TMP464:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1327:%.*]] = bytecast b8 [[TMP464]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1328:%.*]] = zext i8 [[CONV1327]] to i32
// SIMD-ONLY0-NEXT:    [[TMP465:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1329:%.*]] = bytecast b8 [[TMP465]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1330:%.*]] = zext i8 [[CONV1329]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1331:%.*]] = icmp eq i32 [[CONV1328]], [[CONV1330]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1331]], label [[COND_TRUE1333:%.*]], label [[COND_FALSE1336:%.*]]
// SIMD-ONLY0:       cond.true1333:
// SIMD-ONLY0-NEXT:    [[TMP466:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1334:%.*]] = bytecast b8 [[TMP466]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1335:%.*]] = zext i8 [[CONV1334]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1339:%.*]]
// SIMD-ONLY0:       cond.false1336:
// SIMD-ONLY0-NEXT:    [[TMP467:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1337:%.*]] = bytecast b8 [[TMP467]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1338:%.*]] = zext i8 [[CONV1337]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1339]]
// SIMD-ONLY0:       cond.end1339:
// SIMD-ONLY0-NEXT:    [[COND1340:%.*]] = phi i32 [ [[CONV1335]], [[COND_TRUE1333]] ], [ [[CONV1338]], [[COND_FALSE1336]] ]
// SIMD-ONLY0-NEXT:    [[CONV1341:%.*]] = trunc i32 [[COND1340]] to i8
// SIMD-ONLY0-NEXT:    [[TMP468:%.*]] = bitcast i8 [[CONV1341]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP468]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP469:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1342:%.*]] = bytecast b8 [[TMP469]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1343:%.*]] = zext i8 [[CONV1342]] to i32
// SIMD-ONLY0-NEXT:    [[TMP470:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1344:%.*]] = bytecast b8 [[TMP470]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1345:%.*]] = zext i8 [[CONV1344]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1346:%.*]] = icmp eq i32 [[CONV1343]], [[CONV1345]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1346]], label [[COND_TRUE1348:%.*]], label [[COND_FALSE1351:%.*]]
// SIMD-ONLY0:       cond.true1348:
// SIMD-ONLY0-NEXT:    [[TMP471:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1349:%.*]] = bytecast b8 [[TMP471]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1350:%.*]] = zext i8 [[CONV1349]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1354:%.*]]
// SIMD-ONLY0:       cond.false1351:
// SIMD-ONLY0-NEXT:    [[TMP472:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1352:%.*]] = bytecast b8 [[TMP472]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1353:%.*]] = zext i8 [[CONV1352]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1354]]
// SIMD-ONLY0:       cond.end1354:
// SIMD-ONLY0-NEXT:    [[COND1355:%.*]] = phi i32 [ [[CONV1350]], [[COND_TRUE1348]] ], [ [[CONV1353]], [[COND_FALSE1351]] ]
// SIMD-ONLY0-NEXT:    [[CONV1356:%.*]] = trunc i32 [[COND1355]] to i8
// SIMD-ONLY0-NEXT:    [[TMP473:%.*]] = bitcast i8 [[CONV1356]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP473]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP474:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1357:%.*]] = bytecast b8 [[TMP474]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1358:%.*]] = zext i8 [[CONV1357]] to i32
// SIMD-ONLY0-NEXT:    [[TMP475:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1359:%.*]] = bytecast b8 [[TMP475]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1360:%.*]] = zext i8 [[CONV1359]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1361:%.*]] = icmp eq i32 [[CONV1358]], [[CONV1360]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1361]], label [[IF_THEN1363:%.*]], label [[IF_END1364:%.*]]
// SIMD-ONLY0:       if.then1363:
// SIMD-ONLY0-NEXT:    [[TMP476:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP476]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1364]]
// SIMD-ONLY0:       if.end1364:
// SIMD-ONLY0-NEXT:    [[TMP477:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1365:%.*]] = bytecast b8 [[TMP477]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1366:%.*]] = zext i8 [[CONV1365]] to i32
// SIMD-ONLY0-NEXT:    [[TMP478:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1367:%.*]] = bytecast b8 [[TMP478]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1368:%.*]] = zext i8 [[CONV1367]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1369:%.*]] = icmp eq i32 [[CONV1366]], [[CONV1368]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1369]], label [[IF_THEN1371:%.*]], label [[IF_END1372:%.*]]
// SIMD-ONLY0:       if.then1371:
// SIMD-ONLY0-NEXT:    [[TMP479:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP479]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1372]]
// SIMD-ONLY0:       if.end1372:
// SIMD-ONLY0-NEXT:    [[TMP480:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1373:%.*]] = bytecast b8 [[TMP480]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1374:%.*]] = sext i8 [[CONV1373]] to i32
// SIMD-ONLY0-NEXT:    [[TMP481:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1375:%.*]] = bytecast b8 [[TMP481]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1376:%.*]] = sext i8 [[CONV1375]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1377:%.*]] = icmp sgt i32 [[CONV1374]], [[CONV1376]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1377]], label [[COND_TRUE1379:%.*]], label [[COND_FALSE1382:%.*]]
// SIMD-ONLY0:       cond.true1379:
// SIMD-ONLY0-NEXT:    [[TMP482:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1380:%.*]] = bytecast b8 [[TMP482]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1381:%.*]] = sext i8 [[CONV1380]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1385:%.*]]
// SIMD-ONLY0:       cond.false1382:
// SIMD-ONLY0-NEXT:    [[TMP483:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1383:%.*]] = bytecast b8 [[TMP483]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1384:%.*]] = sext i8 [[CONV1383]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1385]]
// SIMD-ONLY0:       cond.end1385:
// SIMD-ONLY0-NEXT:    [[COND1386:%.*]] = phi i32 [ [[CONV1381]], [[COND_TRUE1379]] ], [ [[CONV1384]], [[COND_FALSE1382]] ]
// SIMD-ONLY0-NEXT:    [[CONV1387:%.*]] = trunc i32 [[COND1386]] to i8
// SIMD-ONLY0-NEXT:    [[TMP484:%.*]] = bitcast i8 [[CONV1387]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP484]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP485:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1388:%.*]] = bytecast b8 [[TMP485]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1389:%.*]] = sext i8 [[CONV1388]] to i32
// SIMD-ONLY0-NEXT:    [[TMP486:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1390:%.*]] = bytecast b8 [[TMP486]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1391:%.*]] = sext i8 [[CONV1390]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1392:%.*]] = icmp slt i32 [[CONV1389]], [[CONV1391]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1392]], label [[COND_TRUE1394:%.*]], label [[COND_FALSE1397:%.*]]
// SIMD-ONLY0:       cond.true1394:
// SIMD-ONLY0-NEXT:    [[TMP487:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1395:%.*]] = bytecast b8 [[TMP487]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1396:%.*]] = sext i8 [[CONV1395]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1400:%.*]]
// SIMD-ONLY0:       cond.false1397:
// SIMD-ONLY0-NEXT:    [[TMP488:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1398:%.*]] = bytecast b8 [[TMP488]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1399:%.*]] = sext i8 [[CONV1398]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1400]]
// SIMD-ONLY0:       cond.end1400:
// SIMD-ONLY0-NEXT:    [[COND1401:%.*]] = phi i32 [ [[CONV1396]], [[COND_TRUE1394]] ], [ [[CONV1399]], [[COND_FALSE1397]] ]
// SIMD-ONLY0-NEXT:    [[CONV1402:%.*]] = trunc i32 [[COND1401]] to i8
// SIMD-ONLY0-NEXT:    [[TMP489:%.*]] = bitcast i8 [[CONV1402]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP489]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP490:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1403:%.*]] = bytecast b8 [[TMP490]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1404:%.*]] = sext i8 [[CONV1403]] to i32
// SIMD-ONLY0-NEXT:    [[TMP491:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1405:%.*]] = bytecast b8 [[TMP491]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1406:%.*]] = sext i8 [[CONV1405]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1407:%.*]] = icmp sgt i32 [[CONV1404]], [[CONV1406]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1407]], label [[COND_TRUE1409:%.*]], label [[COND_FALSE1412:%.*]]
// SIMD-ONLY0:       cond.true1409:
// SIMD-ONLY0-NEXT:    [[TMP492:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1410:%.*]] = bytecast b8 [[TMP492]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1411:%.*]] = sext i8 [[CONV1410]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1415:%.*]]
// SIMD-ONLY0:       cond.false1412:
// SIMD-ONLY0-NEXT:    [[TMP493:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1413:%.*]] = bytecast b8 [[TMP493]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1414:%.*]] = sext i8 [[CONV1413]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1415]]
// SIMD-ONLY0:       cond.end1415:
// SIMD-ONLY0-NEXT:    [[COND1416:%.*]] = phi i32 [ [[CONV1411]], [[COND_TRUE1409]] ], [ [[CONV1414]], [[COND_FALSE1412]] ]
// SIMD-ONLY0-NEXT:    [[CONV1417:%.*]] = trunc i32 [[COND1416]] to i8
// SIMD-ONLY0-NEXT:    [[TMP494:%.*]] = bitcast i8 [[CONV1417]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP494]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP495:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1418:%.*]] = bytecast b8 [[TMP495]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1419:%.*]] = sext i8 [[CONV1418]] to i32
// SIMD-ONLY0-NEXT:    [[TMP496:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1420:%.*]] = bytecast b8 [[TMP496]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1421:%.*]] = sext i8 [[CONV1420]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1422:%.*]] = icmp slt i32 [[CONV1419]], [[CONV1421]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1422]], label [[COND_TRUE1424:%.*]], label [[COND_FALSE1427:%.*]]
// SIMD-ONLY0:       cond.true1424:
// SIMD-ONLY0-NEXT:    [[TMP497:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1425:%.*]] = bytecast b8 [[TMP497]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1426:%.*]] = sext i8 [[CONV1425]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1430:%.*]]
// SIMD-ONLY0:       cond.false1427:
// SIMD-ONLY0-NEXT:    [[TMP498:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1428:%.*]] = bytecast b8 [[TMP498]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1429:%.*]] = sext i8 [[CONV1428]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1430]]
// SIMD-ONLY0:       cond.end1430:
// SIMD-ONLY0-NEXT:    [[COND1431:%.*]] = phi i32 [ [[CONV1426]], [[COND_TRUE1424]] ], [ [[CONV1429]], [[COND_FALSE1427]] ]
// SIMD-ONLY0-NEXT:    [[CONV1432:%.*]] = trunc i32 [[COND1431]] to i8
// SIMD-ONLY0-NEXT:    [[TMP499:%.*]] = bitcast i8 [[CONV1432]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP499]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP500:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1433:%.*]] = bytecast b8 [[TMP500]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1434:%.*]] = sext i8 [[CONV1433]] to i32
// SIMD-ONLY0-NEXT:    [[TMP501:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1435:%.*]] = bytecast b8 [[TMP501]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1436:%.*]] = sext i8 [[CONV1435]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1437:%.*]] = icmp sgt i32 [[CONV1434]], [[CONV1436]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1437]], label [[IF_THEN1439:%.*]], label [[IF_END1440:%.*]]
// SIMD-ONLY0:       if.then1439:
// SIMD-ONLY0-NEXT:    [[TMP502:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP502]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1440]]
// SIMD-ONLY0:       if.end1440:
// SIMD-ONLY0-NEXT:    [[TMP503:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1441:%.*]] = bytecast b8 [[TMP503]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1442:%.*]] = sext i8 [[CONV1441]] to i32
// SIMD-ONLY0-NEXT:    [[TMP504:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1443:%.*]] = bytecast b8 [[TMP504]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1444:%.*]] = sext i8 [[CONV1443]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1445:%.*]] = icmp slt i32 [[CONV1442]], [[CONV1444]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1445]], label [[IF_THEN1447:%.*]], label [[IF_END1448:%.*]]
// SIMD-ONLY0:       if.then1447:
// SIMD-ONLY0-NEXT:    [[TMP505:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP505]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1448]]
// SIMD-ONLY0:       if.end1448:
// SIMD-ONLY0-NEXT:    [[TMP506:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1449:%.*]] = bytecast b8 [[TMP506]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1450:%.*]] = sext i8 [[CONV1449]] to i32
// SIMD-ONLY0-NEXT:    [[TMP507:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1451:%.*]] = bytecast b8 [[TMP507]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1452:%.*]] = sext i8 [[CONV1451]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1453:%.*]] = icmp sgt i32 [[CONV1450]], [[CONV1452]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1453]], label [[IF_THEN1455:%.*]], label [[IF_END1456:%.*]]
// SIMD-ONLY0:       if.then1455:
// SIMD-ONLY0-NEXT:    [[TMP508:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP508]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1456]]
// SIMD-ONLY0:       if.end1456:
// SIMD-ONLY0-NEXT:    [[TMP509:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1457:%.*]] = bytecast b8 [[TMP509]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1458:%.*]] = sext i8 [[CONV1457]] to i32
// SIMD-ONLY0-NEXT:    [[TMP510:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1459:%.*]] = bytecast b8 [[TMP510]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1460:%.*]] = sext i8 [[CONV1459]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1461:%.*]] = icmp slt i32 [[CONV1458]], [[CONV1460]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1461]], label [[IF_THEN1463:%.*]], label [[IF_END1464:%.*]]
// SIMD-ONLY0:       if.then1463:
// SIMD-ONLY0-NEXT:    [[TMP511:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP511]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1464]]
// SIMD-ONLY0:       if.end1464:
// SIMD-ONLY0-NEXT:    [[TMP512:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1465:%.*]] = bytecast b8 [[TMP512]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1466:%.*]] = sext i8 [[CONV1465]] to i32
// SIMD-ONLY0-NEXT:    [[TMP513:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1467:%.*]] = bytecast b8 [[TMP513]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1468:%.*]] = sext i8 [[CONV1467]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1469:%.*]] = icmp eq i32 [[CONV1466]], [[CONV1468]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1469]], label [[COND_TRUE1471:%.*]], label [[COND_FALSE1474:%.*]]
// SIMD-ONLY0:       cond.true1471:
// SIMD-ONLY0-NEXT:    [[TMP514:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1472:%.*]] = bytecast b8 [[TMP514]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1473:%.*]] = sext i8 [[CONV1472]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1477:%.*]]
// SIMD-ONLY0:       cond.false1474:
// SIMD-ONLY0-NEXT:    [[TMP515:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1475:%.*]] = bytecast b8 [[TMP515]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1476:%.*]] = sext i8 [[CONV1475]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1477]]
// SIMD-ONLY0:       cond.end1477:
// SIMD-ONLY0-NEXT:    [[COND1478:%.*]] = phi i32 [ [[CONV1473]], [[COND_TRUE1471]] ], [ [[CONV1476]], [[COND_FALSE1474]] ]
// SIMD-ONLY0-NEXT:    [[CONV1479:%.*]] = trunc i32 [[COND1478]] to i8
// SIMD-ONLY0-NEXT:    [[TMP516:%.*]] = bitcast i8 [[CONV1479]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP516]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP517:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1480:%.*]] = bytecast b8 [[TMP517]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1481:%.*]] = sext i8 [[CONV1480]] to i32
// SIMD-ONLY0-NEXT:    [[TMP518:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1482:%.*]] = bytecast b8 [[TMP518]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1483:%.*]] = sext i8 [[CONV1482]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1484:%.*]] = icmp eq i32 [[CONV1481]], [[CONV1483]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1484]], label [[COND_TRUE1486:%.*]], label [[COND_FALSE1489:%.*]]
// SIMD-ONLY0:       cond.true1486:
// SIMD-ONLY0-NEXT:    [[TMP519:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1487:%.*]] = bytecast b8 [[TMP519]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1488:%.*]] = sext i8 [[CONV1487]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1492:%.*]]
// SIMD-ONLY0:       cond.false1489:
// SIMD-ONLY0-NEXT:    [[TMP520:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1490:%.*]] = bytecast b8 [[TMP520]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1491:%.*]] = sext i8 [[CONV1490]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1492]]
// SIMD-ONLY0:       cond.end1492:
// SIMD-ONLY0-NEXT:    [[COND1493:%.*]] = phi i32 [ [[CONV1488]], [[COND_TRUE1486]] ], [ [[CONV1491]], [[COND_FALSE1489]] ]
// SIMD-ONLY0-NEXT:    [[CONV1494:%.*]] = trunc i32 [[COND1493]] to i8
// SIMD-ONLY0-NEXT:    [[TMP521:%.*]] = bitcast i8 [[CONV1494]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP521]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP522:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1495:%.*]] = bytecast b8 [[TMP522]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1496:%.*]] = sext i8 [[CONV1495]] to i32
// SIMD-ONLY0-NEXT:    [[TMP523:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1497:%.*]] = bytecast b8 [[TMP523]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1498:%.*]] = sext i8 [[CONV1497]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1499:%.*]] = icmp eq i32 [[CONV1496]], [[CONV1498]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1499]], label [[IF_THEN1501:%.*]], label [[IF_END1502:%.*]]
// SIMD-ONLY0:       if.then1501:
// SIMD-ONLY0-NEXT:    [[TMP524:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP524]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1502]]
// SIMD-ONLY0:       if.end1502:
// SIMD-ONLY0-NEXT:    [[TMP525:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1503:%.*]] = bytecast b8 [[TMP525]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1504:%.*]] = sext i8 [[CONV1503]] to i32
// SIMD-ONLY0-NEXT:    [[TMP526:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1505:%.*]] = bytecast b8 [[TMP526]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1506:%.*]] = sext i8 [[CONV1505]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1507:%.*]] = icmp eq i32 [[CONV1504]], [[CONV1506]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1507]], label [[IF_THEN1509:%.*]], label [[IF_END1510:%.*]]
// SIMD-ONLY0:       if.then1509:
// SIMD-ONLY0-NEXT:    [[TMP527:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP527]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1510]]
// SIMD-ONLY0:       if.end1510:
// SIMD-ONLY0-NEXT:    [[TMP528:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1511:%.*]] = bytecast b8 [[TMP528]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1512:%.*]] = zext i8 [[CONV1511]] to i32
// SIMD-ONLY0-NEXT:    [[TMP529:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1513:%.*]] = bytecast b8 [[TMP529]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1514:%.*]] = zext i8 [[CONV1513]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1515:%.*]] = icmp sgt i32 [[CONV1512]], [[CONV1514]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1515]], label [[COND_TRUE1517:%.*]], label [[COND_FALSE1520:%.*]]
// SIMD-ONLY0:       cond.true1517:
// SIMD-ONLY0-NEXT:    [[TMP530:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1518:%.*]] = bytecast b8 [[TMP530]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1519:%.*]] = zext i8 [[CONV1518]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1523:%.*]]
// SIMD-ONLY0:       cond.false1520:
// SIMD-ONLY0-NEXT:    [[TMP531:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1521:%.*]] = bytecast b8 [[TMP531]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1522:%.*]] = zext i8 [[CONV1521]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1523]]
// SIMD-ONLY0:       cond.end1523:
// SIMD-ONLY0-NEXT:    [[COND1524:%.*]] = phi i32 [ [[CONV1519]], [[COND_TRUE1517]] ], [ [[CONV1522]], [[COND_FALSE1520]] ]
// SIMD-ONLY0-NEXT:    [[CONV1525:%.*]] = trunc i32 [[COND1524]] to i8
// SIMD-ONLY0-NEXT:    [[TMP532:%.*]] = bitcast i8 [[CONV1525]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP532]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP533:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1526:%.*]] = bytecast b8 [[TMP533]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1527:%.*]] = zext i8 [[CONV1526]] to i32
// SIMD-ONLY0-NEXT:    [[TMP534:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1528:%.*]] = bytecast b8 [[TMP534]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1529:%.*]] = zext i8 [[CONV1528]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1530:%.*]] = icmp slt i32 [[CONV1527]], [[CONV1529]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1530]], label [[COND_TRUE1532:%.*]], label [[COND_FALSE1535:%.*]]
// SIMD-ONLY0:       cond.true1532:
// SIMD-ONLY0-NEXT:    [[TMP535:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1533:%.*]] = bytecast b8 [[TMP535]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1534:%.*]] = zext i8 [[CONV1533]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1538:%.*]]
// SIMD-ONLY0:       cond.false1535:
// SIMD-ONLY0-NEXT:    [[TMP536:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1536:%.*]] = bytecast b8 [[TMP536]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1537:%.*]] = zext i8 [[CONV1536]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1538]]
// SIMD-ONLY0:       cond.end1538:
// SIMD-ONLY0-NEXT:    [[COND1539:%.*]] = phi i32 [ [[CONV1534]], [[COND_TRUE1532]] ], [ [[CONV1537]], [[COND_FALSE1535]] ]
// SIMD-ONLY0-NEXT:    [[CONV1540:%.*]] = trunc i32 [[COND1539]] to i8
// SIMD-ONLY0-NEXT:    [[TMP537:%.*]] = bitcast i8 [[CONV1540]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP537]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP538:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1541:%.*]] = bytecast b8 [[TMP538]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1542:%.*]] = zext i8 [[CONV1541]] to i32
// SIMD-ONLY0-NEXT:    [[TMP539:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1543:%.*]] = bytecast b8 [[TMP539]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1544:%.*]] = zext i8 [[CONV1543]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1545:%.*]] = icmp sgt i32 [[CONV1542]], [[CONV1544]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1545]], label [[COND_TRUE1547:%.*]], label [[COND_FALSE1550:%.*]]
// SIMD-ONLY0:       cond.true1547:
// SIMD-ONLY0-NEXT:    [[TMP540:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1548:%.*]] = bytecast b8 [[TMP540]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1549:%.*]] = zext i8 [[CONV1548]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1553:%.*]]
// SIMD-ONLY0:       cond.false1550:
// SIMD-ONLY0-NEXT:    [[TMP541:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1551:%.*]] = bytecast b8 [[TMP541]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1552:%.*]] = zext i8 [[CONV1551]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1553]]
// SIMD-ONLY0:       cond.end1553:
// SIMD-ONLY0-NEXT:    [[COND1554:%.*]] = phi i32 [ [[CONV1549]], [[COND_TRUE1547]] ], [ [[CONV1552]], [[COND_FALSE1550]] ]
// SIMD-ONLY0-NEXT:    [[CONV1555:%.*]] = trunc i32 [[COND1554]] to i8
// SIMD-ONLY0-NEXT:    [[TMP542:%.*]] = bitcast i8 [[CONV1555]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP542]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP543:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1556:%.*]] = bytecast b8 [[TMP543]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1557:%.*]] = zext i8 [[CONV1556]] to i32
// SIMD-ONLY0-NEXT:    [[TMP544:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1558:%.*]] = bytecast b8 [[TMP544]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1559:%.*]] = zext i8 [[CONV1558]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1560:%.*]] = icmp slt i32 [[CONV1557]], [[CONV1559]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1560]], label [[COND_TRUE1562:%.*]], label [[COND_FALSE1565:%.*]]
// SIMD-ONLY0:       cond.true1562:
// SIMD-ONLY0-NEXT:    [[TMP545:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1563:%.*]] = bytecast b8 [[TMP545]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1564:%.*]] = zext i8 [[CONV1563]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1568:%.*]]
// SIMD-ONLY0:       cond.false1565:
// SIMD-ONLY0-NEXT:    [[TMP546:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1566:%.*]] = bytecast b8 [[TMP546]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1567:%.*]] = zext i8 [[CONV1566]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1568]]
// SIMD-ONLY0:       cond.end1568:
// SIMD-ONLY0-NEXT:    [[COND1569:%.*]] = phi i32 [ [[CONV1564]], [[COND_TRUE1562]] ], [ [[CONV1567]], [[COND_FALSE1565]] ]
// SIMD-ONLY0-NEXT:    [[CONV1570:%.*]] = trunc i32 [[COND1569]] to i8
// SIMD-ONLY0-NEXT:    [[TMP547:%.*]] = bitcast i8 [[CONV1570]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP547]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP548:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1571:%.*]] = bytecast b8 [[TMP548]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1572:%.*]] = zext i8 [[CONV1571]] to i32
// SIMD-ONLY0-NEXT:    [[TMP549:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1573:%.*]] = bytecast b8 [[TMP549]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1574:%.*]] = zext i8 [[CONV1573]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1575:%.*]] = icmp sgt i32 [[CONV1572]], [[CONV1574]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1575]], label [[IF_THEN1577:%.*]], label [[IF_END1578:%.*]]
// SIMD-ONLY0:       if.then1577:
// SIMD-ONLY0-NEXT:    [[TMP550:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP550]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1578]]
// SIMD-ONLY0:       if.end1578:
// SIMD-ONLY0-NEXT:    [[TMP551:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1579:%.*]] = bytecast b8 [[TMP551]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1580:%.*]] = zext i8 [[CONV1579]] to i32
// SIMD-ONLY0-NEXT:    [[TMP552:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1581:%.*]] = bytecast b8 [[TMP552]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1582:%.*]] = zext i8 [[CONV1581]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1583:%.*]] = icmp slt i32 [[CONV1580]], [[CONV1582]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1583]], label [[IF_THEN1585:%.*]], label [[IF_END1586:%.*]]
// SIMD-ONLY0:       if.then1585:
// SIMD-ONLY0-NEXT:    [[TMP553:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP553]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1586]]
// SIMD-ONLY0:       if.end1586:
// SIMD-ONLY0-NEXT:    [[TMP554:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1587:%.*]] = bytecast b8 [[TMP554]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1588:%.*]] = zext i8 [[CONV1587]] to i32
// SIMD-ONLY0-NEXT:    [[TMP555:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1589:%.*]] = bytecast b8 [[TMP555]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1590:%.*]] = zext i8 [[CONV1589]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1591:%.*]] = icmp sgt i32 [[CONV1588]], [[CONV1590]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1591]], label [[IF_THEN1593:%.*]], label [[IF_END1594:%.*]]
// SIMD-ONLY0:       if.then1593:
// SIMD-ONLY0-NEXT:    [[TMP556:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP556]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1594]]
// SIMD-ONLY0:       if.end1594:
// SIMD-ONLY0-NEXT:    [[TMP557:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1595:%.*]] = bytecast b8 [[TMP557]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1596:%.*]] = zext i8 [[CONV1595]] to i32
// SIMD-ONLY0-NEXT:    [[TMP558:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1597:%.*]] = bytecast b8 [[TMP558]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1598:%.*]] = zext i8 [[CONV1597]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1599:%.*]] = icmp slt i32 [[CONV1596]], [[CONV1598]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1599]], label [[IF_THEN1601:%.*]], label [[IF_END1602:%.*]]
// SIMD-ONLY0:       if.then1601:
// SIMD-ONLY0-NEXT:    [[TMP559:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP559]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1602]]
// SIMD-ONLY0:       if.end1602:
// SIMD-ONLY0-NEXT:    [[TMP560:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1603:%.*]] = bytecast b8 [[TMP560]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1604:%.*]] = zext i8 [[CONV1603]] to i32
// SIMD-ONLY0-NEXT:    [[TMP561:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1605:%.*]] = bytecast b8 [[TMP561]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1606:%.*]] = zext i8 [[CONV1605]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1607:%.*]] = icmp eq i32 [[CONV1604]], [[CONV1606]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1607]], label [[COND_TRUE1609:%.*]], label [[COND_FALSE1612:%.*]]
// SIMD-ONLY0:       cond.true1609:
// SIMD-ONLY0-NEXT:    [[TMP562:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1610:%.*]] = bytecast b8 [[TMP562]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1611:%.*]] = zext i8 [[CONV1610]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1615:%.*]]
// SIMD-ONLY0:       cond.false1612:
// SIMD-ONLY0-NEXT:    [[TMP563:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1613:%.*]] = bytecast b8 [[TMP563]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1614:%.*]] = zext i8 [[CONV1613]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1615]]
// SIMD-ONLY0:       cond.end1615:
// SIMD-ONLY0-NEXT:    [[COND1616:%.*]] = phi i32 [ [[CONV1611]], [[COND_TRUE1609]] ], [ [[CONV1614]], [[COND_FALSE1612]] ]
// SIMD-ONLY0-NEXT:    [[CONV1617:%.*]] = trunc i32 [[COND1616]] to i8
// SIMD-ONLY0-NEXT:    [[TMP564:%.*]] = bitcast i8 [[CONV1617]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP564]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP565:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1618:%.*]] = bytecast b8 [[TMP565]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1619:%.*]] = zext i8 [[CONV1618]] to i32
// SIMD-ONLY0-NEXT:    [[TMP566:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1620:%.*]] = bytecast b8 [[TMP566]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1621:%.*]] = zext i8 [[CONV1620]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1622:%.*]] = icmp eq i32 [[CONV1619]], [[CONV1621]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1622]], label [[COND_TRUE1624:%.*]], label [[COND_FALSE1627:%.*]]
// SIMD-ONLY0:       cond.true1624:
// SIMD-ONLY0-NEXT:    [[TMP567:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1625:%.*]] = bytecast b8 [[TMP567]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1626:%.*]] = zext i8 [[CONV1625]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1630:%.*]]
// SIMD-ONLY0:       cond.false1627:
// SIMD-ONLY0-NEXT:    [[TMP568:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1628:%.*]] = bytecast b8 [[TMP568]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1629:%.*]] = zext i8 [[CONV1628]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1630]]
// SIMD-ONLY0:       cond.end1630:
// SIMD-ONLY0-NEXT:    [[COND1631:%.*]] = phi i32 [ [[CONV1626]], [[COND_TRUE1624]] ], [ [[CONV1629]], [[COND_FALSE1627]] ]
// SIMD-ONLY0-NEXT:    [[CONV1632:%.*]] = trunc i32 [[COND1631]] to i8
// SIMD-ONLY0-NEXT:    [[TMP569:%.*]] = bitcast i8 [[CONV1632]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP569]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP570:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1633:%.*]] = bytecast b8 [[TMP570]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1634:%.*]] = zext i8 [[CONV1633]] to i32
// SIMD-ONLY0-NEXT:    [[TMP571:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1635:%.*]] = bytecast b8 [[TMP571]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1636:%.*]] = zext i8 [[CONV1635]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1637:%.*]] = icmp eq i32 [[CONV1634]], [[CONV1636]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1637]], label [[IF_THEN1639:%.*]], label [[IF_END1640:%.*]]
// SIMD-ONLY0:       if.then1639:
// SIMD-ONLY0-NEXT:    [[TMP572:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP572]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1640]]
// SIMD-ONLY0:       if.end1640:
// SIMD-ONLY0-NEXT:    [[TMP573:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1641:%.*]] = bytecast b8 [[TMP573]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1642:%.*]] = zext i8 [[CONV1641]] to i32
// SIMD-ONLY0-NEXT:    [[TMP574:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1643:%.*]] = bytecast b8 [[TMP574]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1644:%.*]] = zext i8 [[CONV1643]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1645:%.*]] = icmp eq i32 [[CONV1642]], [[CONV1644]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1645]], label [[IF_THEN1647:%.*]], label [[IF_END1648:%.*]]
// SIMD-ONLY0:       if.then1647:
// SIMD-ONLY0-NEXT:    [[TMP575:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP575]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1648]]
// SIMD-ONLY0:       if.end1648:
// SIMD-ONLY0-NEXT:    [[TMP576:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1649:%.*]] = sext i16 [[TMP576]] to i32
// SIMD-ONLY0-NEXT:    [[TMP577:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1650:%.*]] = sext i16 [[TMP577]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1651:%.*]] = icmp sgt i32 [[CONV1649]], [[CONV1650]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1651]], label [[COND_TRUE1653:%.*]], label [[COND_FALSE1655:%.*]]
// SIMD-ONLY0:       cond.true1653:
// SIMD-ONLY0-NEXT:    [[TMP578:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1654:%.*]] = sext i16 [[TMP578]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1657:%.*]]
// SIMD-ONLY0:       cond.false1655:
// SIMD-ONLY0-NEXT:    [[TMP579:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1656:%.*]] = sext i16 [[TMP579]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1657]]
// SIMD-ONLY0:       cond.end1657:
// SIMD-ONLY0-NEXT:    [[COND1658:%.*]] = phi i32 [ [[CONV1654]], [[COND_TRUE1653]] ], [ [[CONV1656]], [[COND_FALSE1655]] ]
// SIMD-ONLY0-NEXT:    [[CONV1659:%.*]] = trunc i32 [[COND1658]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1659]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP580:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1660:%.*]] = sext i16 [[TMP580]] to i32
// SIMD-ONLY0-NEXT:    [[TMP581:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1661:%.*]] = sext i16 [[TMP581]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1662:%.*]] = icmp slt i32 [[CONV1660]], [[CONV1661]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1662]], label [[COND_TRUE1664:%.*]], label [[COND_FALSE1666:%.*]]
// SIMD-ONLY0:       cond.true1664:
// SIMD-ONLY0-NEXT:    [[TMP582:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1665:%.*]] = sext i16 [[TMP582]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1668:%.*]]
// SIMD-ONLY0:       cond.false1666:
// SIMD-ONLY0-NEXT:    [[TMP583:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1667:%.*]] = sext i16 [[TMP583]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1668]]
// SIMD-ONLY0:       cond.end1668:
// SIMD-ONLY0-NEXT:    [[COND1669:%.*]] = phi i32 [ [[CONV1665]], [[COND_TRUE1664]] ], [ [[CONV1667]], [[COND_FALSE1666]] ]
// SIMD-ONLY0-NEXT:    [[CONV1670:%.*]] = trunc i32 [[COND1669]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1670]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP584:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1671:%.*]] = sext i16 [[TMP584]] to i32
// SIMD-ONLY0-NEXT:    [[TMP585:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1672:%.*]] = sext i16 [[TMP585]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1673:%.*]] = icmp sgt i32 [[CONV1671]], [[CONV1672]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1673]], label [[COND_TRUE1675:%.*]], label [[COND_FALSE1677:%.*]]
// SIMD-ONLY0:       cond.true1675:
// SIMD-ONLY0-NEXT:    [[TMP586:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1676:%.*]] = sext i16 [[TMP586]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1679:%.*]]
// SIMD-ONLY0:       cond.false1677:
// SIMD-ONLY0-NEXT:    [[TMP587:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1678:%.*]] = sext i16 [[TMP587]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1679]]
// SIMD-ONLY0:       cond.end1679:
// SIMD-ONLY0-NEXT:    [[COND1680:%.*]] = phi i32 [ [[CONV1676]], [[COND_TRUE1675]] ], [ [[CONV1678]], [[COND_FALSE1677]] ]
// SIMD-ONLY0-NEXT:    [[CONV1681:%.*]] = trunc i32 [[COND1680]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1681]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP588:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1682:%.*]] = sext i16 [[TMP588]] to i32
// SIMD-ONLY0-NEXT:    [[TMP589:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1683:%.*]] = sext i16 [[TMP589]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1684:%.*]] = icmp slt i32 [[CONV1682]], [[CONV1683]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1684]], label [[COND_TRUE1686:%.*]], label [[COND_FALSE1688:%.*]]
// SIMD-ONLY0:       cond.true1686:
// SIMD-ONLY0-NEXT:    [[TMP590:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1687:%.*]] = sext i16 [[TMP590]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1690:%.*]]
// SIMD-ONLY0:       cond.false1688:
// SIMD-ONLY0-NEXT:    [[TMP591:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1689:%.*]] = sext i16 [[TMP591]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1690]]
// SIMD-ONLY0:       cond.end1690:
// SIMD-ONLY0-NEXT:    [[COND1691:%.*]] = phi i32 [ [[CONV1687]], [[COND_TRUE1686]] ], [ [[CONV1689]], [[COND_FALSE1688]] ]
// SIMD-ONLY0-NEXT:    [[CONV1692:%.*]] = trunc i32 [[COND1691]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1692]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP592:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1693:%.*]] = sext i16 [[TMP592]] to i32
// SIMD-ONLY0-NEXT:    [[TMP593:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1694:%.*]] = sext i16 [[TMP593]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1695:%.*]] = icmp sgt i32 [[CONV1693]], [[CONV1694]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1695]], label [[IF_THEN1697:%.*]], label [[IF_END1698:%.*]]
// SIMD-ONLY0:       if.then1697:
// SIMD-ONLY0-NEXT:    [[TMP594:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP594]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1698]]
// SIMD-ONLY0:       if.end1698:
// SIMD-ONLY0-NEXT:    [[TMP595:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1699:%.*]] = sext i16 [[TMP595]] to i32
// SIMD-ONLY0-NEXT:    [[TMP596:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1700:%.*]] = sext i16 [[TMP596]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1701:%.*]] = icmp slt i32 [[CONV1699]], [[CONV1700]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1701]], label [[IF_THEN1703:%.*]], label [[IF_END1704:%.*]]
// SIMD-ONLY0:       if.then1703:
// SIMD-ONLY0-NEXT:    [[TMP597:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP597]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1704]]
// SIMD-ONLY0:       if.end1704:
// SIMD-ONLY0-NEXT:    [[TMP598:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1705:%.*]] = sext i16 [[TMP598]] to i32
// SIMD-ONLY0-NEXT:    [[TMP599:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1706:%.*]] = sext i16 [[TMP599]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1707:%.*]] = icmp sgt i32 [[CONV1705]], [[CONV1706]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1707]], label [[IF_THEN1709:%.*]], label [[IF_END1710:%.*]]
// SIMD-ONLY0:       if.then1709:
// SIMD-ONLY0-NEXT:    [[TMP600:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP600]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1710]]
// SIMD-ONLY0:       if.end1710:
// SIMD-ONLY0-NEXT:    [[TMP601:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1711:%.*]] = sext i16 [[TMP601]] to i32
// SIMD-ONLY0-NEXT:    [[TMP602:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1712:%.*]] = sext i16 [[TMP602]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1713:%.*]] = icmp slt i32 [[CONV1711]], [[CONV1712]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1713]], label [[IF_THEN1715:%.*]], label [[IF_END1716:%.*]]
// SIMD-ONLY0:       if.then1715:
// SIMD-ONLY0-NEXT:    [[TMP603:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP603]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1716]]
// SIMD-ONLY0:       if.end1716:
// SIMD-ONLY0-NEXT:    [[TMP604:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1717:%.*]] = sext i16 [[TMP604]] to i32
// SIMD-ONLY0-NEXT:    [[TMP605:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1718:%.*]] = sext i16 [[TMP605]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1719:%.*]] = icmp eq i32 [[CONV1717]], [[CONV1718]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1719]], label [[COND_TRUE1721:%.*]], label [[COND_FALSE1723:%.*]]
// SIMD-ONLY0:       cond.true1721:
// SIMD-ONLY0-NEXT:    [[TMP606:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1722:%.*]] = sext i16 [[TMP606]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1725:%.*]]
// SIMD-ONLY0:       cond.false1723:
// SIMD-ONLY0-NEXT:    [[TMP607:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1724:%.*]] = sext i16 [[TMP607]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1725]]
// SIMD-ONLY0:       cond.end1725:
// SIMD-ONLY0-NEXT:    [[COND1726:%.*]] = phi i32 [ [[CONV1722]], [[COND_TRUE1721]] ], [ [[CONV1724]], [[COND_FALSE1723]] ]
// SIMD-ONLY0-NEXT:    [[CONV1727:%.*]] = trunc i32 [[COND1726]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1727]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP608:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1728:%.*]] = sext i16 [[TMP608]] to i32
// SIMD-ONLY0-NEXT:    [[TMP609:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1729:%.*]] = sext i16 [[TMP609]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1730:%.*]] = icmp eq i32 [[CONV1728]], [[CONV1729]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1730]], label [[COND_TRUE1732:%.*]], label [[COND_FALSE1734:%.*]]
// SIMD-ONLY0:       cond.true1732:
// SIMD-ONLY0-NEXT:    [[TMP610:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1733:%.*]] = sext i16 [[TMP610]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1736:%.*]]
// SIMD-ONLY0:       cond.false1734:
// SIMD-ONLY0-NEXT:    [[TMP611:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1735:%.*]] = sext i16 [[TMP611]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1736]]
// SIMD-ONLY0:       cond.end1736:
// SIMD-ONLY0-NEXT:    [[COND1737:%.*]] = phi i32 [ [[CONV1733]], [[COND_TRUE1732]] ], [ [[CONV1735]], [[COND_FALSE1734]] ]
// SIMD-ONLY0-NEXT:    [[CONV1738:%.*]] = trunc i32 [[COND1737]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1738]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP612:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1739:%.*]] = sext i16 [[TMP612]] to i32
// SIMD-ONLY0-NEXT:    [[TMP613:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1740:%.*]] = sext i16 [[TMP613]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1741:%.*]] = icmp eq i32 [[CONV1739]], [[CONV1740]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1741]], label [[IF_THEN1743:%.*]], label [[IF_END1744:%.*]]
// SIMD-ONLY0:       if.then1743:
// SIMD-ONLY0-NEXT:    [[TMP614:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP614]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1744]]
// SIMD-ONLY0:       if.end1744:
// SIMD-ONLY0-NEXT:    [[TMP615:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1745:%.*]] = sext i16 [[TMP615]] to i32
// SIMD-ONLY0-NEXT:    [[TMP616:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1746:%.*]] = sext i16 [[TMP616]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1747:%.*]] = icmp eq i32 [[CONV1745]], [[CONV1746]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1747]], label [[IF_THEN1749:%.*]], label [[IF_END1750:%.*]]
// SIMD-ONLY0:       if.then1749:
// SIMD-ONLY0-NEXT:    [[TMP617:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP617]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1750]]
// SIMD-ONLY0:       if.end1750:
// SIMD-ONLY0-NEXT:    [[TMP618:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1751:%.*]] = zext i16 [[TMP618]] to i32
// SIMD-ONLY0-NEXT:    [[TMP619:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1752:%.*]] = zext i16 [[TMP619]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1753:%.*]] = icmp sgt i32 [[CONV1751]], [[CONV1752]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1753]], label [[COND_TRUE1755:%.*]], label [[COND_FALSE1757:%.*]]
// SIMD-ONLY0:       cond.true1755:
// SIMD-ONLY0-NEXT:    [[TMP620:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1756:%.*]] = zext i16 [[TMP620]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1759:%.*]]
// SIMD-ONLY0:       cond.false1757:
// SIMD-ONLY0-NEXT:    [[TMP621:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1758:%.*]] = zext i16 [[TMP621]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1759]]
// SIMD-ONLY0:       cond.end1759:
// SIMD-ONLY0-NEXT:    [[COND1760:%.*]] = phi i32 [ [[CONV1756]], [[COND_TRUE1755]] ], [ [[CONV1758]], [[COND_FALSE1757]] ]
// SIMD-ONLY0-NEXT:    [[CONV1761:%.*]] = trunc i32 [[COND1760]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1761]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP622:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1762:%.*]] = zext i16 [[TMP622]] to i32
// SIMD-ONLY0-NEXT:    [[TMP623:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1763:%.*]] = zext i16 [[TMP623]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1764:%.*]] = icmp slt i32 [[CONV1762]], [[CONV1763]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1764]], label [[COND_TRUE1766:%.*]], label [[COND_FALSE1768:%.*]]
// SIMD-ONLY0:       cond.true1766:
// SIMD-ONLY0-NEXT:    [[TMP624:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1767:%.*]] = zext i16 [[TMP624]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1770:%.*]]
// SIMD-ONLY0:       cond.false1768:
// SIMD-ONLY0-NEXT:    [[TMP625:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1769:%.*]] = zext i16 [[TMP625]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1770]]
// SIMD-ONLY0:       cond.end1770:
// SIMD-ONLY0-NEXT:    [[COND1771:%.*]] = phi i32 [ [[CONV1767]], [[COND_TRUE1766]] ], [ [[CONV1769]], [[COND_FALSE1768]] ]
// SIMD-ONLY0-NEXT:    [[CONV1772:%.*]] = trunc i32 [[COND1771]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1772]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP626:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1773:%.*]] = zext i16 [[TMP626]] to i32
// SIMD-ONLY0-NEXT:    [[TMP627:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1774:%.*]] = zext i16 [[TMP627]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1775:%.*]] = icmp sgt i32 [[CONV1773]], [[CONV1774]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1775]], label [[COND_TRUE1777:%.*]], label [[COND_FALSE1779:%.*]]
// SIMD-ONLY0:       cond.true1777:
// SIMD-ONLY0-NEXT:    [[TMP628:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1778:%.*]] = zext i16 [[TMP628]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1781:%.*]]
// SIMD-ONLY0:       cond.false1779:
// SIMD-ONLY0-NEXT:    [[TMP629:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1780:%.*]] = zext i16 [[TMP629]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1781]]
// SIMD-ONLY0:       cond.end1781:
// SIMD-ONLY0-NEXT:    [[COND1782:%.*]] = phi i32 [ [[CONV1778]], [[COND_TRUE1777]] ], [ [[CONV1780]], [[COND_FALSE1779]] ]
// SIMD-ONLY0-NEXT:    [[CONV1783:%.*]] = trunc i32 [[COND1782]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1783]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP630:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1784:%.*]] = zext i16 [[TMP630]] to i32
// SIMD-ONLY0-NEXT:    [[TMP631:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1785:%.*]] = zext i16 [[TMP631]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1786:%.*]] = icmp slt i32 [[CONV1784]], [[CONV1785]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1786]], label [[COND_TRUE1788:%.*]], label [[COND_FALSE1790:%.*]]
// SIMD-ONLY0:       cond.true1788:
// SIMD-ONLY0-NEXT:    [[TMP632:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1789:%.*]] = zext i16 [[TMP632]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1792:%.*]]
// SIMD-ONLY0:       cond.false1790:
// SIMD-ONLY0-NEXT:    [[TMP633:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1791:%.*]] = zext i16 [[TMP633]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1792]]
// SIMD-ONLY0:       cond.end1792:
// SIMD-ONLY0-NEXT:    [[COND1793:%.*]] = phi i32 [ [[CONV1789]], [[COND_TRUE1788]] ], [ [[CONV1791]], [[COND_FALSE1790]] ]
// SIMD-ONLY0-NEXT:    [[CONV1794:%.*]] = trunc i32 [[COND1793]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1794]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP634:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1795:%.*]] = zext i16 [[TMP634]] to i32
// SIMD-ONLY0-NEXT:    [[TMP635:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1796:%.*]] = zext i16 [[TMP635]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1797:%.*]] = icmp sgt i32 [[CONV1795]], [[CONV1796]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1797]], label [[IF_THEN1799:%.*]], label [[IF_END1800:%.*]]
// SIMD-ONLY0:       if.then1799:
// SIMD-ONLY0-NEXT:    [[TMP636:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP636]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1800]]
// SIMD-ONLY0:       if.end1800:
// SIMD-ONLY0-NEXT:    [[TMP637:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1801:%.*]] = zext i16 [[TMP637]] to i32
// SIMD-ONLY0-NEXT:    [[TMP638:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1802:%.*]] = zext i16 [[TMP638]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1803:%.*]] = icmp slt i32 [[CONV1801]], [[CONV1802]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1803]], label [[IF_THEN1805:%.*]], label [[IF_END1806:%.*]]
// SIMD-ONLY0:       if.then1805:
// SIMD-ONLY0-NEXT:    [[TMP639:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP639]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1806]]
// SIMD-ONLY0:       if.end1806:
// SIMD-ONLY0-NEXT:    [[TMP640:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1807:%.*]] = zext i16 [[TMP640]] to i32
// SIMD-ONLY0-NEXT:    [[TMP641:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1808:%.*]] = zext i16 [[TMP641]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1809:%.*]] = icmp sgt i32 [[CONV1807]], [[CONV1808]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1809]], label [[IF_THEN1811:%.*]], label [[IF_END1812:%.*]]
// SIMD-ONLY0:       if.then1811:
// SIMD-ONLY0-NEXT:    [[TMP642:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP642]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1812]]
// SIMD-ONLY0:       if.end1812:
// SIMD-ONLY0-NEXT:    [[TMP643:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1813:%.*]] = zext i16 [[TMP643]] to i32
// SIMD-ONLY0-NEXT:    [[TMP644:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1814:%.*]] = zext i16 [[TMP644]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1815:%.*]] = icmp slt i32 [[CONV1813]], [[CONV1814]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1815]], label [[IF_THEN1817:%.*]], label [[IF_END1818:%.*]]
// SIMD-ONLY0:       if.then1817:
// SIMD-ONLY0-NEXT:    [[TMP645:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP645]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1818]]
// SIMD-ONLY0:       if.end1818:
// SIMD-ONLY0-NEXT:    [[TMP646:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1819:%.*]] = zext i16 [[TMP646]] to i32
// SIMD-ONLY0-NEXT:    [[TMP647:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1820:%.*]] = zext i16 [[TMP647]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1821:%.*]] = icmp eq i32 [[CONV1819]], [[CONV1820]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1821]], label [[COND_TRUE1823:%.*]], label [[COND_FALSE1825:%.*]]
// SIMD-ONLY0:       cond.true1823:
// SIMD-ONLY0-NEXT:    [[TMP648:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1824:%.*]] = zext i16 [[TMP648]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1827:%.*]]
// SIMD-ONLY0:       cond.false1825:
// SIMD-ONLY0-NEXT:    [[TMP649:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1826:%.*]] = zext i16 [[TMP649]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1827]]
// SIMD-ONLY0:       cond.end1827:
// SIMD-ONLY0-NEXT:    [[COND1828:%.*]] = phi i32 [ [[CONV1824]], [[COND_TRUE1823]] ], [ [[CONV1826]], [[COND_FALSE1825]] ]
// SIMD-ONLY0-NEXT:    [[CONV1829:%.*]] = trunc i32 [[COND1828]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1829]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP650:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1830:%.*]] = zext i16 [[TMP650]] to i32
// SIMD-ONLY0-NEXT:    [[TMP651:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1831:%.*]] = zext i16 [[TMP651]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1832:%.*]] = icmp eq i32 [[CONV1830]], [[CONV1831]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1832]], label [[COND_TRUE1834:%.*]], label [[COND_FALSE1836:%.*]]
// SIMD-ONLY0:       cond.true1834:
// SIMD-ONLY0-NEXT:    [[TMP652:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1835:%.*]] = zext i16 [[TMP652]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1838:%.*]]
// SIMD-ONLY0:       cond.false1836:
// SIMD-ONLY0-NEXT:    [[TMP653:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1837:%.*]] = zext i16 [[TMP653]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1838]]
// SIMD-ONLY0:       cond.end1838:
// SIMD-ONLY0-NEXT:    [[COND1839:%.*]] = phi i32 [ [[CONV1835]], [[COND_TRUE1834]] ], [ [[CONV1837]], [[COND_FALSE1836]] ]
// SIMD-ONLY0-NEXT:    [[CONV1840:%.*]] = trunc i32 [[COND1839]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1840]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP654:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1841:%.*]] = zext i16 [[TMP654]] to i32
// SIMD-ONLY0-NEXT:    [[TMP655:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1842:%.*]] = zext i16 [[TMP655]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1843:%.*]] = icmp eq i32 [[CONV1841]], [[CONV1842]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1843]], label [[IF_THEN1845:%.*]], label [[IF_END1846:%.*]]
// SIMD-ONLY0:       if.then1845:
// SIMD-ONLY0-NEXT:    [[TMP656:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP656]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1846]]
// SIMD-ONLY0:       if.end1846:
// SIMD-ONLY0-NEXT:    [[TMP657:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1847:%.*]] = zext i16 [[TMP657]] to i32
// SIMD-ONLY0-NEXT:    [[TMP658:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1848:%.*]] = zext i16 [[TMP658]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1849:%.*]] = icmp eq i32 [[CONV1847]], [[CONV1848]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1849]], label [[IF_THEN1851:%.*]], label [[IF_END1852:%.*]]
// SIMD-ONLY0:       if.then1851:
// SIMD-ONLY0-NEXT:    [[TMP659:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP659]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1852]]
// SIMD-ONLY0:       if.end1852:
// SIMD-ONLY0-NEXT:    [[TMP660:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1853:%.*]] = sext i16 [[TMP660]] to i32
// SIMD-ONLY0-NEXT:    [[TMP661:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1854:%.*]] = sext i16 [[TMP661]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1855:%.*]] = icmp sgt i32 [[CONV1853]], [[CONV1854]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1855]], label [[COND_TRUE1857:%.*]], label [[COND_FALSE1859:%.*]]
// SIMD-ONLY0:       cond.true1857:
// SIMD-ONLY0-NEXT:    [[TMP662:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1858:%.*]] = sext i16 [[TMP662]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1861:%.*]]
// SIMD-ONLY0:       cond.false1859:
// SIMD-ONLY0-NEXT:    [[TMP663:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1860:%.*]] = sext i16 [[TMP663]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1861]]
// SIMD-ONLY0:       cond.end1861:
// SIMD-ONLY0-NEXT:    [[COND1862:%.*]] = phi i32 [ [[CONV1858]], [[COND_TRUE1857]] ], [ [[CONV1860]], [[COND_FALSE1859]] ]
// SIMD-ONLY0-NEXT:    [[CONV1863:%.*]] = trunc i32 [[COND1862]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1863]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP664:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1864:%.*]] = sext i16 [[TMP664]] to i32
// SIMD-ONLY0-NEXT:    [[TMP665:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1865:%.*]] = sext i16 [[TMP665]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1866:%.*]] = icmp slt i32 [[CONV1864]], [[CONV1865]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1866]], label [[COND_TRUE1868:%.*]], label [[COND_FALSE1870:%.*]]
// SIMD-ONLY0:       cond.true1868:
// SIMD-ONLY0-NEXT:    [[TMP666:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1869:%.*]] = sext i16 [[TMP666]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1872:%.*]]
// SIMD-ONLY0:       cond.false1870:
// SIMD-ONLY0-NEXT:    [[TMP667:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1871:%.*]] = sext i16 [[TMP667]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1872]]
// SIMD-ONLY0:       cond.end1872:
// SIMD-ONLY0-NEXT:    [[COND1873:%.*]] = phi i32 [ [[CONV1869]], [[COND_TRUE1868]] ], [ [[CONV1871]], [[COND_FALSE1870]] ]
// SIMD-ONLY0-NEXT:    [[CONV1874:%.*]] = trunc i32 [[COND1873]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1874]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP668:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1875:%.*]] = sext i16 [[TMP668]] to i32
// SIMD-ONLY0-NEXT:    [[TMP669:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1876:%.*]] = sext i16 [[TMP669]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1877:%.*]] = icmp sgt i32 [[CONV1875]], [[CONV1876]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1877]], label [[COND_TRUE1879:%.*]], label [[COND_FALSE1881:%.*]]
// SIMD-ONLY0:       cond.true1879:
// SIMD-ONLY0-NEXT:    [[TMP670:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1880:%.*]] = sext i16 [[TMP670]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1883:%.*]]
// SIMD-ONLY0:       cond.false1881:
// SIMD-ONLY0-NEXT:    [[TMP671:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1882:%.*]] = sext i16 [[TMP671]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1883]]
// SIMD-ONLY0:       cond.end1883:
// SIMD-ONLY0-NEXT:    [[COND1884:%.*]] = phi i32 [ [[CONV1880]], [[COND_TRUE1879]] ], [ [[CONV1882]], [[COND_FALSE1881]] ]
// SIMD-ONLY0-NEXT:    [[CONV1885:%.*]] = trunc i32 [[COND1884]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1885]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP672:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1886:%.*]] = sext i16 [[TMP672]] to i32
// SIMD-ONLY0-NEXT:    [[TMP673:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1887:%.*]] = sext i16 [[TMP673]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1888:%.*]] = icmp slt i32 [[CONV1886]], [[CONV1887]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1888]], label [[COND_TRUE1890:%.*]], label [[COND_FALSE1892:%.*]]
// SIMD-ONLY0:       cond.true1890:
// SIMD-ONLY0-NEXT:    [[TMP674:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1891:%.*]] = sext i16 [[TMP674]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1894:%.*]]
// SIMD-ONLY0:       cond.false1892:
// SIMD-ONLY0-NEXT:    [[TMP675:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1893:%.*]] = sext i16 [[TMP675]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1894]]
// SIMD-ONLY0:       cond.end1894:
// SIMD-ONLY0-NEXT:    [[COND1895:%.*]] = phi i32 [ [[CONV1891]], [[COND_TRUE1890]] ], [ [[CONV1893]], [[COND_FALSE1892]] ]
// SIMD-ONLY0-NEXT:    [[CONV1896:%.*]] = trunc i32 [[COND1895]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1896]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP676:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1897:%.*]] = sext i16 [[TMP676]] to i32
// SIMD-ONLY0-NEXT:    [[TMP677:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1898:%.*]] = sext i16 [[TMP677]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1899:%.*]] = icmp sgt i32 [[CONV1897]], [[CONV1898]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1899]], label [[IF_THEN1901:%.*]], label [[IF_END1902:%.*]]
// SIMD-ONLY0:       if.then1901:
// SIMD-ONLY0-NEXT:    [[TMP678:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP678]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1902]]
// SIMD-ONLY0:       if.end1902:
// SIMD-ONLY0-NEXT:    [[TMP679:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1903:%.*]] = sext i16 [[TMP679]] to i32
// SIMD-ONLY0-NEXT:    [[TMP680:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1904:%.*]] = sext i16 [[TMP680]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1905:%.*]] = icmp slt i32 [[CONV1903]], [[CONV1904]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1905]], label [[IF_THEN1907:%.*]], label [[IF_END1908:%.*]]
// SIMD-ONLY0:       if.then1907:
// SIMD-ONLY0-NEXT:    [[TMP681:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP681]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1908]]
// SIMD-ONLY0:       if.end1908:
// SIMD-ONLY0-NEXT:    [[TMP682:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1909:%.*]] = sext i16 [[TMP682]] to i32
// SIMD-ONLY0-NEXT:    [[TMP683:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1910:%.*]] = sext i16 [[TMP683]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1911:%.*]] = icmp sgt i32 [[CONV1909]], [[CONV1910]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1911]], label [[IF_THEN1913:%.*]], label [[IF_END1914:%.*]]
// SIMD-ONLY0:       if.then1913:
// SIMD-ONLY0-NEXT:    [[TMP684:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP684]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1914]]
// SIMD-ONLY0:       if.end1914:
// SIMD-ONLY0-NEXT:    [[TMP685:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1915:%.*]] = sext i16 [[TMP685]] to i32
// SIMD-ONLY0-NEXT:    [[TMP686:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1916:%.*]] = sext i16 [[TMP686]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1917:%.*]] = icmp slt i32 [[CONV1915]], [[CONV1916]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1917]], label [[IF_THEN1919:%.*]], label [[IF_END1920:%.*]]
// SIMD-ONLY0:       if.then1919:
// SIMD-ONLY0-NEXT:    [[TMP687:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP687]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1920]]
// SIMD-ONLY0:       if.end1920:
// SIMD-ONLY0-NEXT:    [[TMP688:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1921:%.*]] = sext i16 [[TMP688]] to i32
// SIMD-ONLY0-NEXT:    [[TMP689:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1922:%.*]] = sext i16 [[TMP689]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1923:%.*]] = icmp eq i32 [[CONV1921]], [[CONV1922]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1923]], label [[COND_TRUE1925:%.*]], label [[COND_FALSE1927:%.*]]
// SIMD-ONLY0:       cond.true1925:
// SIMD-ONLY0-NEXT:    [[TMP690:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1926:%.*]] = sext i16 [[TMP690]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1929:%.*]]
// SIMD-ONLY0:       cond.false1927:
// SIMD-ONLY0-NEXT:    [[TMP691:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1928:%.*]] = sext i16 [[TMP691]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1929]]
// SIMD-ONLY0:       cond.end1929:
// SIMD-ONLY0-NEXT:    [[COND1930:%.*]] = phi i32 [ [[CONV1926]], [[COND_TRUE1925]] ], [ [[CONV1928]], [[COND_FALSE1927]] ]
// SIMD-ONLY0-NEXT:    [[CONV1931:%.*]] = trunc i32 [[COND1930]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1931]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP692:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1932:%.*]] = sext i16 [[TMP692]] to i32
// SIMD-ONLY0-NEXT:    [[TMP693:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1933:%.*]] = sext i16 [[TMP693]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1934:%.*]] = icmp eq i32 [[CONV1932]], [[CONV1933]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1934]], label [[COND_TRUE1936:%.*]], label [[COND_FALSE1938:%.*]]
// SIMD-ONLY0:       cond.true1936:
// SIMD-ONLY0-NEXT:    [[TMP694:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1937:%.*]] = sext i16 [[TMP694]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1940:%.*]]
// SIMD-ONLY0:       cond.false1938:
// SIMD-ONLY0-NEXT:    [[TMP695:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1939:%.*]] = sext i16 [[TMP695]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1940]]
// SIMD-ONLY0:       cond.end1940:
// SIMD-ONLY0-NEXT:    [[COND1941:%.*]] = phi i32 [ [[CONV1937]], [[COND_TRUE1936]] ], [ [[CONV1939]], [[COND_FALSE1938]] ]
// SIMD-ONLY0-NEXT:    [[CONV1942:%.*]] = trunc i32 [[COND1941]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1942]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP696:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1943:%.*]] = sext i16 [[TMP696]] to i32
// SIMD-ONLY0-NEXT:    [[TMP697:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1944:%.*]] = sext i16 [[TMP697]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1945:%.*]] = icmp eq i32 [[CONV1943]], [[CONV1944]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1945]], label [[IF_THEN1947:%.*]], label [[IF_END1948:%.*]]
// SIMD-ONLY0:       if.then1947:
// SIMD-ONLY0-NEXT:    [[TMP698:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP698]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1948]]
// SIMD-ONLY0:       if.end1948:
// SIMD-ONLY0-NEXT:    [[TMP699:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1949:%.*]] = sext i16 [[TMP699]] to i32
// SIMD-ONLY0-NEXT:    [[TMP700:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1950:%.*]] = sext i16 [[TMP700]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1951:%.*]] = icmp eq i32 [[CONV1949]], [[CONV1950]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1951]], label [[IF_THEN1953:%.*]], label [[IF_END1954:%.*]]
// SIMD-ONLY0:       if.then1953:
// SIMD-ONLY0-NEXT:    [[TMP701:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP701]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1954]]
// SIMD-ONLY0:       if.end1954:
// SIMD-ONLY0-NEXT:    [[TMP702:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1955:%.*]] = zext i16 [[TMP702]] to i32
// SIMD-ONLY0-NEXT:    [[TMP703:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1956:%.*]] = zext i16 [[TMP703]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1957:%.*]] = icmp sgt i32 [[CONV1955]], [[CONV1956]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1957]], label [[COND_TRUE1959:%.*]], label [[COND_FALSE1961:%.*]]
// SIMD-ONLY0:       cond.true1959:
// SIMD-ONLY0-NEXT:    [[TMP704:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1960:%.*]] = zext i16 [[TMP704]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1963:%.*]]
// SIMD-ONLY0:       cond.false1961:
// SIMD-ONLY0-NEXT:    [[TMP705:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1962:%.*]] = zext i16 [[TMP705]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1963]]
// SIMD-ONLY0:       cond.end1963:
// SIMD-ONLY0-NEXT:    [[COND1964:%.*]] = phi i32 [ [[CONV1960]], [[COND_TRUE1959]] ], [ [[CONV1962]], [[COND_FALSE1961]] ]
// SIMD-ONLY0-NEXT:    [[CONV1965:%.*]] = trunc i32 [[COND1964]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1965]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP706:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1966:%.*]] = zext i16 [[TMP706]] to i32
// SIMD-ONLY0-NEXT:    [[TMP707:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1967:%.*]] = zext i16 [[TMP707]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1968:%.*]] = icmp slt i32 [[CONV1966]], [[CONV1967]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1968]], label [[COND_TRUE1970:%.*]], label [[COND_FALSE1972:%.*]]
// SIMD-ONLY0:       cond.true1970:
// SIMD-ONLY0-NEXT:    [[TMP708:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1971:%.*]] = zext i16 [[TMP708]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1974:%.*]]
// SIMD-ONLY0:       cond.false1972:
// SIMD-ONLY0-NEXT:    [[TMP709:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1973:%.*]] = zext i16 [[TMP709]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1974]]
// SIMD-ONLY0:       cond.end1974:
// SIMD-ONLY0-NEXT:    [[COND1975:%.*]] = phi i32 [ [[CONV1971]], [[COND_TRUE1970]] ], [ [[CONV1973]], [[COND_FALSE1972]] ]
// SIMD-ONLY0-NEXT:    [[CONV1976:%.*]] = trunc i32 [[COND1975]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1976]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP710:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1977:%.*]] = zext i16 [[TMP710]] to i32
// SIMD-ONLY0-NEXT:    [[TMP711:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1978:%.*]] = zext i16 [[TMP711]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1979:%.*]] = icmp sgt i32 [[CONV1977]], [[CONV1978]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1979]], label [[COND_TRUE1981:%.*]], label [[COND_FALSE1983:%.*]]
// SIMD-ONLY0:       cond.true1981:
// SIMD-ONLY0-NEXT:    [[TMP712:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1982:%.*]] = zext i16 [[TMP712]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1985:%.*]]
// SIMD-ONLY0:       cond.false1983:
// SIMD-ONLY0-NEXT:    [[TMP713:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1984:%.*]] = zext i16 [[TMP713]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1985]]
// SIMD-ONLY0:       cond.end1985:
// SIMD-ONLY0-NEXT:    [[COND1986:%.*]] = phi i32 [ [[CONV1982]], [[COND_TRUE1981]] ], [ [[CONV1984]], [[COND_FALSE1983]] ]
// SIMD-ONLY0-NEXT:    [[CONV1987:%.*]] = trunc i32 [[COND1986]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1987]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP714:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1988:%.*]] = zext i16 [[TMP714]] to i32
// SIMD-ONLY0-NEXT:    [[TMP715:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1989:%.*]] = zext i16 [[TMP715]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1990:%.*]] = icmp slt i32 [[CONV1988]], [[CONV1989]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1990]], label [[COND_TRUE1992:%.*]], label [[COND_FALSE1994:%.*]]
// SIMD-ONLY0:       cond.true1992:
// SIMD-ONLY0-NEXT:    [[TMP716:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1993:%.*]] = zext i16 [[TMP716]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1996:%.*]]
// SIMD-ONLY0:       cond.false1994:
// SIMD-ONLY0-NEXT:    [[TMP717:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1995:%.*]] = zext i16 [[TMP717]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END1996]]
// SIMD-ONLY0:       cond.end1996:
// SIMD-ONLY0-NEXT:    [[COND1997:%.*]] = phi i32 [ [[CONV1993]], [[COND_TRUE1992]] ], [ [[CONV1995]], [[COND_FALSE1994]] ]
// SIMD-ONLY0-NEXT:    [[CONV1998:%.*]] = trunc i32 [[COND1997]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV1998]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP718:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1999:%.*]] = zext i16 [[TMP718]] to i32
// SIMD-ONLY0-NEXT:    [[TMP719:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2000:%.*]] = zext i16 [[TMP719]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2001:%.*]] = icmp sgt i32 [[CONV1999]], [[CONV2000]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2001]], label [[IF_THEN2003:%.*]], label [[IF_END2004:%.*]]
// SIMD-ONLY0:       if.then2003:
// SIMD-ONLY0-NEXT:    [[TMP720:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP720]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2004]]
// SIMD-ONLY0:       if.end2004:
// SIMD-ONLY0-NEXT:    [[TMP721:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2005:%.*]] = zext i16 [[TMP721]] to i32
// SIMD-ONLY0-NEXT:    [[TMP722:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2006:%.*]] = zext i16 [[TMP722]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2007:%.*]] = icmp slt i32 [[CONV2005]], [[CONV2006]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2007]], label [[IF_THEN2009:%.*]], label [[IF_END2010:%.*]]
// SIMD-ONLY0:       if.then2009:
// SIMD-ONLY0-NEXT:    [[TMP723:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP723]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2010]]
// SIMD-ONLY0:       if.end2010:
// SIMD-ONLY0-NEXT:    [[TMP724:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2011:%.*]] = zext i16 [[TMP724]] to i32
// SIMD-ONLY0-NEXT:    [[TMP725:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2012:%.*]] = zext i16 [[TMP725]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2013:%.*]] = icmp sgt i32 [[CONV2011]], [[CONV2012]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2013]], label [[IF_THEN2015:%.*]], label [[IF_END2016:%.*]]
// SIMD-ONLY0:       if.then2015:
// SIMD-ONLY0-NEXT:    [[TMP726:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP726]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2016]]
// SIMD-ONLY0:       if.end2016:
// SIMD-ONLY0-NEXT:    [[TMP727:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2017:%.*]] = zext i16 [[TMP727]] to i32
// SIMD-ONLY0-NEXT:    [[TMP728:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2018:%.*]] = zext i16 [[TMP728]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2019:%.*]] = icmp slt i32 [[CONV2017]], [[CONV2018]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2019]], label [[IF_THEN2021:%.*]], label [[IF_END2022:%.*]]
// SIMD-ONLY0:       if.then2021:
// SIMD-ONLY0-NEXT:    [[TMP729:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP729]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2022]]
// SIMD-ONLY0:       if.end2022:
// SIMD-ONLY0-NEXT:    [[TMP730:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2023:%.*]] = zext i16 [[TMP730]] to i32
// SIMD-ONLY0-NEXT:    [[TMP731:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2024:%.*]] = zext i16 [[TMP731]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2025:%.*]] = icmp eq i32 [[CONV2023]], [[CONV2024]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2025]], label [[COND_TRUE2027:%.*]], label [[COND_FALSE2029:%.*]]
// SIMD-ONLY0:       cond.true2027:
// SIMD-ONLY0-NEXT:    [[TMP732:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2028:%.*]] = zext i16 [[TMP732]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2031:%.*]]
// SIMD-ONLY0:       cond.false2029:
// SIMD-ONLY0-NEXT:    [[TMP733:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2030:%.*]] = zext i16 [[TMP733]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2031]]
// SIMD-ONLY0:       cond.end2031:
// SIMD-ONLY0-NEXT:    [[COND2032:%.*]] = phi i32 [ [[CONV2028]], [[COND_TRUE2027]] ], [ [[CONV2030]], [[COND_FALSE2029]] ]
// SIMD-ONLY0-NEXT:    [[CONV2033:%.*]] = trunc i32 [[COND2032]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2033]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP734:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2034:%.*]] = zext i16 [[TMP734]] to i32
// SIMD-ONLY0-NEXT:    [[TMP735:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2035:%.*]] = zext i16 [[TMP735]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2036:%.*]] = icmp eq i32 [[CONV2034]], [[CONV2035]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2036]], label [[COND_TRUE2038:%.*]], label [[COND_FALSE2040:%.*]]
// SIMD-ONLY0:       cond.true2038:
// SIMD-ONLY0-NEXT:    [[TMP736:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2039:%.*]] = zext i16 [[TMP736]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2042:%.*]]
// SIMD-ONLY0:       cond.false2040:
// SIMD-ONLY0-NEXT:    [[TMP737:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2041:%.*]] = zext i16 [[TMP737]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2042]]
// SIMD-ONLY0:       cond.end2042:
// SIMD-ONLY0-NEXT:    [[COND2043:%.*]] = phi i32 [ [[CONV2039]], [[COND_TRUE2038]] ], [ [[CONV2041]], [[COND_FALSE2040]] ]
// SIMD-ONLY0-NEXT:    [[CONV2044:%.*]] = trunc i32 [[COND2043]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2044]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP738:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2045:%.*]] = zext i16 [[TMP738]] to i32
// SIMD-ONLY0-NEXT:    [[TMP739:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2046:%.*]] = zext i16 [[TMP739]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2047:%.*]] = icmp eq i32 [[CONV2045]], [[CONV2046]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2047]], label [[IF_THEN2049:%.*]], label [[IF_END2050:%.*]]
// SIMD-ONLY0:       if.then2049:
// SIMD-ONLY0-NEXT:    [[TMP740:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP740]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2050]]
// SIMD-ONLY0:       if.end2050:
// SIMD-ONLY0-NEXT:    [[TMP741:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2051:%.*]] = zext i16 [[TMP741]] to i32
// SIMD-ONLY0-NEXT:    [[TMP742:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2052:%.*]] = zext i16 [[TMP742]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2053:%.*]] = icmp eq i32 [[CONV2051]], [[CONV2052]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2053]], label [[IF_THEN2055:%.*]], label [[IF_END2056:%.*]]
// SIMD-ONLY0:       if.then2055:
// SIMD-ONLY0-NEXT:    [[TMP743:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP743]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2056]]
// SIMD-ONLY0:       if.end2056:
// SIMD-ONLY0-NEXT:    [[TMP744:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2057:%.*]] = sext i16 [[TMP744]] to i32
// SIMD-ONLY0-NEXT:    [[TMP745:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2058:%.*]] = sext i16 [[TMP745]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2059:%.*]] = icmp sgt i32 [[CONV2057]], [[CONV2058]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2059]], label [[COND_TRUE2061:%.*]], label [[COND_FALSE2063:%.*]]
// SIMD-ONLY0:       cond.true2061:
// SIMD-ONLY0-NEXT:    [[TMP746:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2062:%.*]] = sext i16 [[TMP746]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2065:%.*]]
// SIMD-ONLY0:       cond.false2063:
// SIMD-ONLY0-NEXT:    [[TMP747:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2064:%.*]] = sext i16 [[TMP747]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2065]]
// SIMD-ONLY0:       cond.end2065:
// SIMD-ONLY0-NEXT:    [[COND2066:%.*]] = phi i32 [ [[CONV2062]], [[COND_TRUE2061]] ], [ [[CONV2064]], [[COND_FALSE2063]] ]
// SIMD-ONLY0-NEXT:    [[CONV2067:%.*]] = trunc i32 [[COND2066]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2067]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP748:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2068:%.*]] = sext i16 [[TMP748]] to i32
// SIMD-ONLY0-NEXT:    [[TMP749:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2069:%.*]] = sext i16 [[TMP749]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2070:%.*]] = icmp slt i32 [[CONV2068]], [[CONV2069]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2070]], label [[COND_TRUE2072:%.*]], label [[COND_FALSE2074:%.*]]
// SIMD-ONLY0:       cond.true2072:
// SIMD-ONLY0-NEXT:    [[TMP750:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2073:%.*]] = sext i16 [[TMP750]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2076:%.*]]
// SIMD-ONLY0:       cond.false2074:
// SIMD-ONLY0-NEXT:    [[TMP751:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2075:%.*]] = sext i16 [[TMP751]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2076]]
// SIMD-ONLY0:       cond.end2076:
// SIMD-ONLY0-NEXT:    [[COND2077:%.*]] = phi i32 [ [[CONV2073]], [[COND_TRUE2072]] ], [ [[CONV2075]], [[COND_FALSE2074]] ]
// SIMD-ONLY0-NEXT:    [[CONV2078:%.*]] = trunc i32 [[COND2077]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2078]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP752:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2079:%.*]] = sext i16 [[TMP752]] to i32
// SIMD-ONLY0-NEXT:    [[TMP753:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2080:%.*]] = sext i16 [[TMP753]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2081:%.*]] = icmp sgt i32 [[CONV2079]], [[CONV2080]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2081]], label [[COND_TRUE2083:%.*]], label [[COND_FALSE2085:%.*]]
// SIMD-ONLY0:       cond.true2083:
// SIMD-ONLY0-NEXT:    [[TMP754:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2084:%.*]] = sext i16 [[TMP754]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2087:%.*]]
// SIMD-ONLY0:       cond.false2085:
// SIMD-ONLY0-NEXT:    [[TMP755:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2086:%.*]] = sext i16 [[TMP755]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2087]]
// SIMD-ONLY0:       cond.end2087:
// SIMD-ONLY0-NEXT:    [[COND2088:%.*]] = phi i32 [ [[CONV2084]], [[COND_TRUE2083]] ], [ [[CONV2086]], [[COND_FALSE2085]] ]
// SIMD-ONLY0-NEXT:    [[CONV2089:%.*]] = trunc i32 [[COND2088]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2089]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP756:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2090:%.*]] = sext i16 [[TMP756]] to i32
// SIMD-ONLY0-NEXT:    [[TMP757:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2091:%.*]] = sext i16 [[TMP757]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2092:%.*]] = icmp slt i32 [[CONV2090]], [[CONV2091]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2092]], label [[COND_TRUE2094:%.*]], label [[COND_FALSE2096:%.*]]
// SIMD-ONLY0:       cond.true2094:
// SIMD-ONLY0-NEXT:    [[TMP758:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2095:%.*]] = sext i16 [[TMP758]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2098:%.*]]
// SIMD-ONLY0:       cond.false2096:
// SIMD-ONLY0-NEXT:    [[TMP759:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2097:%.*]] = sext i16 [[TMP759]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2098]]
// SIMD-ONLY0:       cond.end2098:
// SIMD-ONLY0-NEXT:    [[COND2099:%.*]] = phi i32 [ [[CONV2095]], [[COND_TRUE2094]] ], [ [[CONV2097]], [[COND_FALSE2096]] ]
// SIMD-ONLY0-NEXT:    [[CONV2100:%.*]] = trunc i32 [[COND2099]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2100]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP760:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2101:%.*]] = sext i16 [[TMP760]] to i32
// SIMD-ONLY0-NEXT:    [[TMP761:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2102:%.*]] = sext i16 [[TMP761]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2103:%.*]] = icmp sgt i32 [[CONV2101]], [[CONV2102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2103]], label [[IF_THEN2105:%.*]], label [[IF_END2106:%.*]]
// SIMD-ONLY0:       if.then2105:
// SIMD-ONLY0-NEXT:    [[TMP762:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP762]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2106]]
// SIMD-ONLY0:       if.end2106:
// SIMD-ONLY0-NEXT:    [[TMP763:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2107:%.*]] = sext i16 [[TMP763]] to i32
// SIMD-ONLY0-NEXT:    [[TMP764:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2108:%.*]] = sext i16 [[TMP764]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2109:%.*]] = icmp slt i32 [[CONV2107]], [[CONV2108]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2109]], label [[IF_THEN2111:%.*]], label [[IF_END2112:%.*]]
// SIMD-ONLY0:       if.then2111:
// SIMD-ONLY0-NEXT:    [[TMP765:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP765]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2112]]
// SIMD-ONLY0:       if.end2112:
// SIMD-ONLY0-NEXT:    [[TMP766:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2113:%.*]] = sext i16 [[TMP766]] to i32
// SIMD-ONLY0-NEXT:    [[TMP767:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2114:%.*]] = sext i16 [[TMP767]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2115:%.*]] = icmp sgt i32 [[CONV2113]], [[CONV2114]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2115]], label [[IF_THEN2117:%.*]], label [[IF_END2118:%.*]]
// SIMD-ONLY0:       if.then2117:
// SIMD-ONLY0-NEXT:    [[TMP768:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP768]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2118]]
// SIMD-ONLY0:       if.end2118:
// SIMD-ONLY0-NEXT:    [[TMP769:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2119:%.*]] = sext i16 [[TMP769]] to i32
// SIMD-ONLY0-NEXT:    [[TMP770:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2120:%.*]] = sext i16 [[TMP770]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2121:%.*]] = icmp slt i32 [[CONV2119]], [[CONV2120]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2121]], label [[IF_THEN2123:%.*]], label [[IF_END2124:%.*]]
// SIMD-ONLY0:       if.then2123:
// SIMD-ONLY0-NEXT:    [[TMP771:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP771]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2124]]
// SIMD-ONLY0:       if.end2124:
// SIMD-ONLY0-NEXT:    [[TMP772:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2125:%.*]] = sext i16 [[TMP772]] to i32
// SIMD-ONLY0-NEXT:    [[TMP773:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2126:%.*]] = sext i16 [[TMP773]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2127:%.*]] = icmp eq i32 [[CONV2125]], [[CONV2126]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2127]], label [[COND_TRUE2129:%.*]], label [[COND_FALSE2131:%.*]]
// SIMD-ONLY0:       cond.true2129:
// SIMD-ONLY0-NEXT:    [[TMP774:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2130:%.*]] = sext i16 [[TMP774]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2133:%.*]]
// SIMD-ONLY0:       cond.false2131:
// SIMD-ONLY0-NEXT:    [[TMP775:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2132:%.*]] = sext i16 [[TMP775]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2133]]
// SIMD-ONLY0:       cond.end2133:
// SIMD-ONLY0-NEXT:    [[COND2134:%.*]] = phi i32 [ [[CONV2130]], [[COND_TRUE2129]] ], [ [[CONV2132]], [[COND_FALSE2131]] ]
// SIMD-ONLY0-NEXT:    [[CONV2135:%.*]] = trunc i32 [[COND2134]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2135]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP776:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2136:%.*]] = sext i16 [[TMP776]] to i32
// SIMD-ONLY0-NEXT:    [[TMP777:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2137:%.*]] = sext i16 [[TMP777]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2138:%.*]] = icmp eq i32 [[CONV2136]], [[CONV2137]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2138]], label [[COND_TRUE2140:%.*]], label [[COND_FALSE2142:%.*]]
// SIMD-ONLY0:       cond.true2140:
// SIMD-ONLY0-NEXT:    [[TMP778:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2141:%.*]] = sext i16 [[TMP778]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2144:%.*]]
// SIMD-ONLY0:       cond.false2142:
// SIMD-ONLY0-NEXT:    [[TMP779:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2143:%.*]] = sext i16 [[TMP779]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2144]]
// SIMD-ONLY0:       cond.end2144:
// SIMD-ONLY0-NEXT:    [[COND2145:%.*]] = phi i32 [ [[CONV2141]], [[COND_TRUE2140]] ], [ [[CONV2143]], [[COND_FALSE2142]] ]
// SIMD-ONLY0-NEXT:    [[CONV2146:%.*]] = trunc i32 [[COND2145]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2146]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP780:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2147:%.*]] = sext i16 [[TMP780]] to i32
// SIMD-ONLY0-NEXT:    [[TMP781:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2148:%.*]] = sext i16 [[TMP781]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2149:%.*]] = icmp eq i32 [[CONV2147]], [[CONV2148]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2149]], label [[IF_THEN2151:%.*]], label [[IF_END2152:%.*]]
// SIMD-ONLY0:       if.then2151:
// SIMD-ONLY0-NEXT:    [[TMP782:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP782]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2152]]
// SIMD-ONLY0:       if.end2152:
// SIMD-ONLY0-NEXT:    [[TMP783:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2153:%.*]] = sext i16 [[TMP783]] to i32
// SIMD-ONLY0-NEXT:    [[TMP784:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2154:%.*]] = sext i16 [[TMP784]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2155:%.*]] = icmp eq i32 [[CONV2153]], [[CONV2154]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2155]], label [[IF_THEN2157:%.*]], label [[IF_END2158:%.*]]
// SIMD-ONLY0:       if.then2157:
// SIMD-ONLY0-NEXT:    [[TMP785:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP785]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2158]]
// SIMD-ONLY0:       if.end2158:
// SIMD-ONLY0-NEXT:    [[TMP786:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2159:%.*]] = zext i16 [[TMP786]] to i32
// SIMD-ONLY0-NEXT:    [[TMP787:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2160:%.*]] = zext i16 [[TMP787]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2161:%.*]] = icmp sgt i32 [[CONV2159]], [[CONV2160]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2161]], label [[COND_TRUE2163:%.*]], label [[COND_FALSE2165:%.*]]
// SIMD-ONLY0:       cond.true2163:
// SIMD-ONLY0-NEXT:    [[TMP788:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2164:%.*]] = zext i16 [[TMP788]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2167:%.*]]
// SIMD-ONLY0:       cond.false2165:
// SIMD-ONLY0-NEXT:    [[TMP789:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2166:%.*]] = zext i16 [[TMP789]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2167]]
// SIMD-ONLY0:       cond.end2167:
// SIMD-ONLY0-NEXT:    [[COND2168:%.*]] = phi i32 [ [[CONV2164]], [[COND_TRUE2163]] ], [ [[CONV2166]], [[COND_FALSE2165]] ]
// SIMD-ONLY0-NEXT:    [[CONV2169:%.*]] = trunc i32 [[COND2168]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2169]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP790:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2170:%.*]] = zext i16 [[TMP790]] to i32
// SIMD-ONLY0-NEXT:    [[TMP791:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2171:%.*]] = zext i16 [[TMP791]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2172:%.*]] = icmp slt i32 [[CONV2170]], [[CONV2171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2172]], label [[COND_TRUE2174:%.*]], label [[COND_FALSE2176:%.*]]
// SIMD-ONLY0:       cond.true2174:
// SIMD-ONLY0-NEXT:    [[TMP792:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2175:%.*]] = zext i16 [[TMP792]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2178:%.*]]
// SIMD-ONLY0:       cond.false2176:
// SIMD-ONLY0-NEXT:    [[TMP793:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2177:%.*]] = zext i16 [[TMP793]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2178]]
// SIMD-ONLY0:       cond.end2178:
// SIMD-ONLY0-NEXT:    [[COND2179:%.*]] = phi i32 [ [[CONV2175]], [[COND_TRUE2174]] ], [ [[CONV2177]], [[COND_FALSE2176]] ]
// SIMD-ONLY0-NEXT:    [[CONV2180:%.*]] = trunc i32 [[COND2179]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2180]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP794:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2181:%.*]] = zext i16 [[TMP794]] to i32
// SIMD-ONLY0-NEXT:    [[TMP795:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2182:%.*]] = zext i16 [[TMP795]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2183:%.*]] = icmp sgt i32 [[CONV2181]], [[CONV2182]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2183]], label [[COND_TRUE2185:%.*]], label [[COND_FALSE2187:%.*]]
// SIMD-ONLY0:       cond.true2185:
// SIMD-ONLY0-NEXT:    [[TMP796:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2186:%.*]] = zext i16 [[TMP796]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2189:%.*]]
// SIMD-ONLY0:       cond.false2187:
// SIMD-ONLY0-NEXT:    [[TMP797:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2188:%.*]] = zext i16 [[TMP797]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2189]]
// SIMD-ONLY0:       cond.end2189:
// SIMD-ONLY0-NEXT:    [[COND2190:%.*]] = phi i32 [ [[CONV2186]], [[COND_TRUE2185]] ], [ [[CONV2188]], [[COND_FALSE2187]] ]
// SIMD-ONLY0-NEXT:    [[CONV2191:%.*]] = trunc i32 [[COND2190]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2191]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP798:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2192:%.*]] = zext i16 [[TMP798]] to i32
// SIMD-ONLY0-NEXT:    [[TMP799:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2193:%.*]] = zext i16 [[TMP799]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2194:%.*]] = icmp slt i32 [[CONV2192]], [[CONV2193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2194]], label [[COND_TRUE2196:%.*]], label [[COND_FALSE2198:%.*]]
// SIMD-ONLY0:       cond.true2196:
// SIMD-ONLY0-NEXT:    [[TMP800:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2197:%.*]] = zext i16 [[TMP800]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2200:%.*]]
// SIMD-ONLY0:       cond.false2198:
// SIMD-ONLY0-NEXT:    [[TMP801:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2199:%.*]] = zext i16 [[TMP801]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2200]]
// SIMD-ONLY0:       cond.end2200:
// SIMD-ONLY0-NEXT:    [[COND2201:%.*]] = phi i32 [ [[CONV2197]], [[COND_TRUE2196]] ], [ [[CONV2199]], [[COND_FALSE2198]] ]
// SIMD-ONLY0-NEXT:    [[CONV2202:%.*]] = trunc i32 [[COND2201]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2202]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP802:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2203:%.*]] = zext i16 [[TMP802]] to i32
// SIMD-ONLY0-NEXT:    [[TMP803:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2204:%.*]] = zext i16 [[TMP803]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2205:%.*]] = icmp sgt i32 [[CONV2203]], [[CONV2204]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2205]], label [[IF_THEN2207:%.*]], label [[IF_END2208:%.*]]
// SIMD-ONLY0:       if.then2207:
// SIMD-ONLY0-NEXT:    [[TMP804:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP804]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2208]]
// SIMD-ONLY0:       if.end2208:
// SIMD-ONLY0-NEXT:    [[TMP805:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2209:%.*]] = zext i16 [[TMP805]] to i32
// SIMD-ONLY0-NEXT:    [[TMP806:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2210:%.*]] = zext i16 [[TMP806]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2211:%.*]] = icmp slt i32 [[CONV2209]], [[CONV2210]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2211]], label [[IF_THEN2213:%.*]], label [[IF_END2214:%.*]]
// SIMD-ONLY0:       if.then2213:
// SIMD-ONLY0-NEXT:    [[TMP807:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP807]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2214]]
// SIMD-ONLY0:       if.end2214:
// SIMD-ONLY0-NEXT:    [[TMP808:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2215:%.*]] = zext i16 [[TMP808]] to i32
// SIMD-ONLY0-NEXT:    [[TMP809:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2216:%.*]] = zext i16 [[TMP809]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2217:%.*]] = icmp sgt i32 [[CONV2215]], [[CONV2216]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2217]], label [[IF_THEN2219:%.*]], label [[IF_END2220:%.*]]
// SIMD-ONLY0:       if.then2219:
// SIMD-ONLY0-NEXT:    [[TMP810:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP810]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2220]]
// SIMD-ONLY0:       if.end2220:
// SIMD-ONLY0-NEXT:    [[TMP811:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2221:%.*]] = zext i16 [[TMP811]] to i32
// SIMD-ONLY0-NEXT:    [[TMP812:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2222:%.*]] = zext i16 [[TMP812]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2223:%.*]] = icmp slt i32 [[CONV2221]], [[CONV2222]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2223]], label [[IF_THEN2225:%.*]], label [[IF_END2226:%.*]]
// SIMD-ONLY0:       if.then2225:
// SIMD-ONLY0-NEXT:    [[TMP813:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP813]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2226]]
// SIMD-ONLY0:       if.end2226:
// SIMD-ONLY0-NEXT:    [[TMP814:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2227:%.*]] = zext i16 [[TMP814]] to i32
// SIMD-ONLY0-NEXT:    [[TMP815:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2228:%.*]] = zext i16 [[TMP815]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2229:%.*]] = icmp eq i32 [[CONV2227]], [[CONV2228]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2229]], label [[COND_TRUE2231:%.*]], label [[COND_FALSE2233:%.*]]
// SIMD-ONLY0:       cond.true2231:
// SIMD-ONLY0-NEXT:    [[TMP816:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2232:%.*]] = zext i16 [[TMP816]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2235:%.*]]
// SIMD-ONLY0:       cond.false2233:
// SIMD-ONLY0-NEXT:    [[TMP817:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2234:%.*]] = zext i16 [[TMP817]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2235]]
// SIMD-ONLY0:       cond.end2235:
// SIMD-ONLY0-NEXT:    [[COND2236:%.*]] = phi i32 [ [[CONV2232]], [[COND_TRUE2231]] ], [ [[CONV2234]], [[COND_FALSE2233]] ]
// SIMD-ONLY0-NEXT:    [[CONV2237:%.*]] = trunc i32 [[COND2236]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2237]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP818:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2238:%.*]] = zext i16 [[TMP818]] to i32
// SIMD-ONLY0-NEXT:    [[TMP819:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2239:%.*]] = zext i16 [[TMP819]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2240:%.*]] = icmp eq i32 [[CONV2238]], [[CONV2239]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2240]], label [[COND_TRUE2242:%.*]], label [[COND_FALSE2244:%.*]]
// SIMD-ONLY0:       cond.true2242:
// SIMD-ONLY0-NEXT:    [[TMP820:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2243:%.*]] = zext i16 [[TMP820]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2246:%.*]]
// SIMD-ONLY0:       cond.false2244:
// SIMD-ONLY0-NEXT:    [[TMP821:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2245:%.*]] = zext i16 [[TMP821]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2246]]
// SIMD-ONLY0:       cond.end2246:
// SIMD-ONLY0-NEXT:    [[COND2247:%.*]] = phi i32 [ [[CONV2243]], [[COND_TRUE2242]] ], [ [[CONV2245]], [[COND_FALSE2244]] ]
// SIMD-ONLY0-NEXT:    [[CONV2248:%.*]] = trunc i32 [[COND2247]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2248]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP822:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2249:%.*]] = zext i16 [[TMP822]] to i32
// SIMD-ONLY0-NEXT:    [[TMP823:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2250:%.*]] = zext i16 [[TMP823]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2251:%.*]] = icmp eq i32 [[CONV2249]], [[CONV2250]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2251]], label [[IF_THEN2253:%.*]], label [[IF_END2254:%.*]]
// SIMD-ONLY0:       if.then2253:
// SIMD-ONLY0-NEXT:    [[TMP824:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP824]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2254]]
// SIMD-ONLY0:       if.end2254:
// SIMD-ONLY0-NEXT:    [[TMP825:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2255:%.*]] = zext i16 [[TMP825]] to i32
// SIMD-ONLY0-NEXT:    [[TMP826:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2256:%.*]] = zext i16 [[TMP826]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2257:%.*]] = icmp eq i32 [[CONV2255]], [[CONV2256]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2257]], label [[IF_THEN2259:%.*]], label [[IF_END2260:%.*]]
// SIMD-ONLY0:       if.then2259:
// SIMD-ONLY0-NEXT:    [[TMP827:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP827]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2260]]
// SIMD-ONLY0:       if.end2260:
// SIMD-ONLY0-NEXT:    [[TMP828:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2261:%.*]] = sext i16 [[TMP828]] to i32
// SIMD-ONLY0-NEXT:    [[TMP829:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2262:%.*]] = sext i16 [[TMP829]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2263:%.*]] = icmp sgt i32 [[CONV2261]], [[CONV2262]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2263]], label [[COND_TRUE2265:%.*]], label [[COND_FALSE2267:%.*]]
// SIMD-ONLY0:       cond.true2265:
// SIMD-ONLY0-NEXT:    [[TMP830:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2266:%.*]] = sext i16 [[TMP830]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2269:%.*]]
// SIMD-ONLY0:       cond.false2267:
// SIMD-ONLY0-NEXT:    [[TMP831:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2268:%.*]] = sext i16 [[TMP831]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2269]]
// SIMD-ONLY0:       cond.end2269:
// SIMD-ONLY0-NEXT:    [[COND2270:%.*]] = phi i32 [ [[CONV2266]], [[COND_TRUE2265]] ], [ [[CONV2268]], [[COND_FALSE2267]] ]
// SIMD-ONLY0-NEXT:    [[CONV2271:%.*]] = trunc i32 [[COND2270]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2271]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP832:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2272:%.*]] = sext i16 [[TMP832]] to i32
// SIMD-ONLY0-NEXT:    [[TMP833:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2273:%.*]] = sext i16 [[TMP833]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2274:%.*]] = icmp slt i32 [[CONV2272]], [[CONV2273]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2274]], label [[COND_TRUE2276:%.*]], label [[COND_FALSE2278:%.*]]
// SIMD-ONLY0:       cond.true2276:
// SIMD-ONLY0-NEXT:    [[TMP834:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2277:%.*]] = sext i16 [[TMP834]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2280:%.*]]
// SIMD-ONLY0:       cond.false2278:
// SIMD-ONLY0-NEXT:    [[TMP835:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2279:%.*]] = sext i16 [[TMP835]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2280]]
// SIMD-ONLY0:       cond.end2280:
// SIMD-ONLY0-NEXT:    [[COND2281:%.*]] = phi i32 [ [[CONV2277]], [[COND_TRUE2276]] ], [ [[CONV2279]], [[COND_FALSE2278]] ]
// SIMD-ONLY0-NEXT:    [[CONV2282:%.*]] = trunc i32 [[COND2281]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2282]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP836:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2283:%.*]] = sext i16 [[TMP836]] to i32
// SIMD-ONLY0-NEXT:    [[TMP837:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2284:%.*]] = sext i16 [[TMP837]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2285:%.*]] = icmp sgt i32 [[CONV2283]], [[CONV2284]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2285]], label [[COND_TRUE2287:%.*]], label [[COND_FALSE2289:%.*]]
// SIMD-ONLY0:       cond.true2287:
// SIMD-ONLY0-NEXT:    [[TMP838:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2288:%.*]] = sext i16 [[TMP838]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2291:%.*]]
// SIMD-ONLY0:       cond.false2289:
// SIMD-ONLY0-NEXT:    [[TMP839:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2290:%.*]] = sext i16 [[TMP839]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2291]]
// SIMD-ONLY0:       cond.end2291:
// SIMD-ONLY0-NEXT:    [[COND2292:%.*]] = phi i32 [ [[CONV2288]], [[COND_TRUE2287]] ], [ [[CONV2290]], [[COND_FALSE2289]] ]
// SIMD-ONLY0-NEXT:    [[CONV2293:%.*]] = trunc i32 [[COND2292]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2293]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP840:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2294:%.*]] = sext i16 [[TMP840]] to i32
// SIMD-ONLY0-NEXT:    [[TMP841:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2295:%.*]] = sext i16 [[TMP841]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2296:%.*]] = icmp slt i32 [[CONV2294]], [[CONV2295]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2296]], label [[COND_TRUE2298:%.*]], label [[COND_FALSE2300:%.*]]
// SIMD-ONLY0:       cond.true2298:
// SIMD-ONLY0-NEXT:    [[TMP842:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2299:%.*]] = sext i16 [[TMP842]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2302:%.*]]
// SIMD-ONLY0:       cond.false2300:
// SIMD-ONLY0-NEXT:    [[TMP843:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2301:%.*]] = sext i16 [[TMP843]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2302]]
// SIMD-ONLY0:       cond.end2302:
// SIMD-ONLY0-NEXT:    [[COND2303:%.*]] = phi i32 [ [[CONV2299]], [[COND_TRUE2298]] ], [ [[CONV2301]], [[COND_FALSE2300]] ]
// SIMD-ONLY0-NEXT:    [[CONV2304:%.*]] = trunc i32 [[COND2303]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2304]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP844:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2305:%.*]] = sext i16 [[TMP844]] to i32
// SIMD-ONLY0-NEXT:    [[TMP845:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2306:%.*]] = sext i16 [[TMP845]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2307:%.*]] = icmp sgt i32 [[CONV2305]], [[CONV2306]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2307]], label [[IF_THEN2309:%.*]], label [[IF_END2310:%.*]]
// SIMD-ONLY0:       if.then2309:
// SIMD-ONLY0-NEXT:    [[TMP846:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP846]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2310]]
// SIMD-ONLY0:       if.end2310:
// SIMD-ONLY0-NEXT:    [[TMP847:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2311:%.*]] = sext i16 [[TMP847]] to i32
// SIMD-ONLY0-NEXT:    [[TMP848:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2312:%.*]] = sext i16 [[TMP848]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2313:%.*]] = icmp slt i32 [[CONV2311]], [[CONV2312]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2313]], label [[IF_THEN2315:%.*]], label [[IF_END2316:%.*]]
// SIMD-ONLY0:       if.then2315:
// SIMD-ONLY0-NEXT:    [[TMP849:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP849]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2316]]
// SIMD-ONLY0:       if.end2316:
// SIMD-ONLY0-NEXT:    [[TMP850:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2317:%.*]] = sext i16 [[TMP850]] to i32
// SIMD-ONLY0-NEXT:    [[TMP851:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2318:%.*]] = sext i16 [[TMP851]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2319:%.*]] = icmp sgt i32 [[CONV2317]], [[CONV2318]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2319]], label [[IF_THEN2321:%.*]], label [[IF_END2322:%.*]]
// SIMD-ONLY0:       if.then2321:
// SIMD-ONLY0-NEXT:    [[TMP852:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP852]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2322]]
// SIMD-ONLY0:       if.end2322:
// SIMD-ONLY0-NEXT:    [[TMP853:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2323:%.*]] = sext i16 [[TMP853]] to i32
// SIMD-ONLY0-NEXT:    [[TMP854:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2324:%.*]] = sext i16 [[TMP854]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2325:%.*]] = icmp slt i32 [[CONV2323]], [[CONV2324]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2325]], label [[IF_THEN2327:%.*]], label [[IF_END2328:%.*]]
// SIMD-ONLY0:       if.then2327:
// SIMD-ONLY0-NEXT:    [[TMP855:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP855]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2328]]
// SIMD-ONLY0:       if.end2328:
// SIMD-ONLY0-NEXT:    [[TMP856:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2329:%.*]] = sext i16 [[TMP856]] to i32
// SIMD-ONLY0-NEXT:    [[TMP857:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2330:%.*]] = sext i16 [[TMP857]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2331:%.*]] = icmp eq i32 [[CONV2329]], [[CONV2330]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2331]], label [[COND_TRUE2333:%.*]], label [[COND_FALSE2335:%.*]]
// SIMD-ONLY0:       cond.true2333:
// SIMD-ONLY0-NEXT:    [[TMP858:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2334:%.*]] = sext i16 [[TMP858]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2337:%.*]]
// SIMD-ONLY0:       cond.false2335:
// SIMD-ONLY0-NEXT:    [[TMP859:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2336:%.*]] = sext i16 [[TMP859]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2337]]
// SIMD-ONLY0:       cond.end2337:
// SIMD-ONLY0-NEXT:    [[COND2338:%.*]] = phi i32 [ [[CONV2334]], [[COND_TRUE2333]] ], [ [[CONV2336]], [[COND_FALSE2335]] ]
// SIMD-ONLY0-NEXT:    [[CONV2339:%.*]] = trunc i32 [[COND2338]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2339]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP860:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2340:%.*]] = sext i16 [[TMP860]] to i32
// SIMD-ONLY0-NEXT:    [[TMP861:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2341:%.*]] = sext i16 [[TMP861]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2342:%.*]] = icmp eq i32 [[CONV2340]], [[CONV2341]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2342]], label [[COND_TRUE2344:%.*]], label [[COND_FALSE2346:%.*]]
// SIMD-ONLY0:       cond.true2344:
// SIMD-ONLY0-NEXT:    [[TMP862:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2345:%.*]] = sext i16 [[TMP862]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2348:%.*]]
// SIMD-ONLY0:       cond.false2346:
// SIMD-ONLY0-NEXT:    [[TMP863:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2347:%.*]] = sext i16 [[TMP863]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2348]]
// SIMD-ONLY0:       cond.end2348:
// SIMD-ONLY0-NEXT:    [[COND2349:%.*]] = phi i32 [ [[CONV2345]], [[COND_TRUE2344]] ], [ [[CONV2347]], [[COND_FALSE2346]] ]
// SIMD-ONLY0-NEXT:    [[CONV2350:%.*]] = trunc i32 [[COND2349]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2350]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP864:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2351:%.*]] = sext i16 [[TMP864]] to i32
// SIMD-ONLY0-NEXT:    [[TMP865:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2352:%.*]] = sext i16 [[TMP865]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2353:%.*]] = icmp eq i32 [[CONV2351]], [[CONV2352]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2353]], label [[IF_THEN2355:%.*]], label [[IF_END2356:%.*]]
// SIMD-ONLY0:       if.then2355:
// SIMD-ONLY0-NEXT:    [[TMP866:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP866]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2356]]
// SIMD-ONLY0:       if.end2356:
// SIMD-ONLY0-NEXT:    [[TMP867:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2357:%.*]] = sext i16 [[TMP867]] to i32
// SIMD-ONLY0-NEXT:    [[TMP868:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2358:%.*]] = sext i16 [[TMP868]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2359:%.*]] = icmp eq i32 [[CONV2357]], [[CONV2358]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2359]], label [[IF_THEN2361:%.*]], label [[IF_END2362:%.*]]
// SIMD-ONLY0:       if.then2361:
// SIMD-ONLY0-NEXT:    [[TMP869:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP869]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2362]]
// SIMD-ONLY0:       if.end2362:
// SIMD-ONLY0-NEXT:    [[TMP870:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2363:%.*]] = zext i16 [[TMP870]] to i32
// SIMD-ONLY0-NEXT:    [[TMP871:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2364:%.*]] = zext i16 [[TMP871]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2365:%.*]] = icmp sgt i32 [[CONV2363]], [[CONV2364]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2365]], label [[COND_TRUE2367:%.*]], label [[COND_FALSE2369:%.*]]
// SIMD-ONLY0:       cond.true2367:
// SIMD-ONLY0-NEXT:    [[TMP872:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2368:%.*]] = zext i16 [[TMP872]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2371:%.*]]
// SIMD-ONLY0:       cond.false2369:
// SIMD-ONLY0-NEXT:    [[TMP873:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2370:%.*]] = zext i16 [[TMP873]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2371]]
// SIMD-ONLY0:       cond.end2371:
// SIMD-ONLY0-NEXT:    [[COND2372:%.*]] = phi i32 [ [[CONV2368]], [[COND_TRUE2367]] ], [ [[CONV2370]], [[COND_FALSE2369]] ]
// SIMD-ONLY0-NEXT:    [[CONV2373:%.*]] = trunc i32 [[COND2372]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2373]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP874:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2374:%.*]] = zext i16 [[TMP874]] to i32
// SIMD-ONLY0-NEXT:    [[TMP875:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2375:%.*]] = zext i16 [[TMP875]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2376:%.*]] = icmp slt i32 [[CONV2374]], [[CONV2375]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2376]], label [[COND_TRUE2378:%.*]], label [[COND_FALSE2380:%.*]]
// SIMD-ONLY0:       cond.true2378:
// SIMD-ONLY0-NEXT:    [[TMP876:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2379:%.*]] = zext i16 [[TMP876]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2382:%.*]]
// SIMD-ONLY0:       cond.false2380:
// SIMD-ONLY0-NEXT:    [[TMP877:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2381:%.*]] = zext i16 [[TMP877]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2382]]
// SIMD-ONLY0:       cond.end2382:
// SIMD-ONLY0-NEXT:    [[COND2383:%.*]] = phi i32 [ [[CONV2379]], [[COND_TRUE2378]] ], [ [[CONV2381]], [[COND_FALSE2380]] ]
// SIMD-ONLY0-NEXT:    [[CONV2384:%.*]] = trunc i32 [[COND2383]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2384]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP878:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2385:%.*]] = zext i16 [[TMP878]] to i32
// SIMD-ONLY0-NEXT:    [[TMP879:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2386:%.*]] = zext i16 [[TMP879]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2387:%.*]] = icmp sgt i32 [[CONV2385]], [[CONV2386]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2387]], label [[COND_TRUE2389:%.*]], label [[COND_FALSE2391:%.*]]
// SIMD-ONLY0:       cond.true2389:
// SIMD-ONLY0-NEXT:    [[TMP880:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2390:%.*]] = zext i16 [[TMP880]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2393:%.*]]
// SIMD-ONLY0:       cond.false2391:
// SIMD-ONLY0-NEXT:    [[TMP881:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2392:%.*]] = zext i16 [[TMP881]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2393]]
// SIMD-ONLY0:       cond.end2393:
// SIMD-ONLY0-NEXT:    [[COND2394:%.*]] = phi i32 [ [[CONV2390]], [[COND_TRUE2389]] ], [ [[CONV2392]], [[COND_FALSE2391]] ]
// SIMD-ONLY0-NEXT:    [[CONV2395:%.*]] = trunc i32 [[COND2394]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2395]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP882:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2396:%.*]] = zext i16 [[TMP882]] to i32
// SIMD-ONLY0-NEXT:    [[TMP883:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2397:%.*]] = zext i16 [[TMP883]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2398:%.*]] = icmp slt i32 [[CONV2396]], [[CONV2397]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2398]], label [[COND_TRUE2400:%.*]], label [[COND_FALSE2402:%.*]]
// SIMD-ONLY0:       cond.true2400:
// SIMD-ONLY0-NEXT:    [[TMP884:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2401:%.*]] = zext i16 [[TMP884]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2404:%.*]]
// SIMD-ONLY0:       cond.false2402:
// SIMD-ONLY0-NEXT:    [[TMP885:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2403:%.*]] = zext i16 [[TMP885]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2404]]
// SIMD-ONLY0:       cond.end2404:
// SIMD-ONLY0-NEXT:    [[COND2405:%.*]] = phi i32 [ [[CONV2401]], [[COND_TRUE2400]] ], [ [[CONV2403]], [[COND_FALSE2402]] ]
// SIMD-ONLY0-NEXT:    [[CONV2406:%.*]] = trunc i32 [[COND2405]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2406]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP886:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2407:%.*]] = zext i16 [[TMP886]] to i32
// SIMD-ONLY0-NEXT:    [[TMP887:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2408:%.*]] = zext i16 [[TMP887]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2409:%.*]] = icmp sgt i32 [[CONV2407]], [[CONV2408]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2409]], label [[IF_THEN2411:%.*]], label [[IF_END2412:%.*]]
// SIMD-ONLY0:       if.then2411:
// SIMD-ONLY0-NEXT:    [[TMP888:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP888]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2412]]
// SIMD-ONLY0:       if.end2412:
// SIMD-ONLY0-NEXT:    [[TMP889:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2413:%.*]] = zext i16 [[TMP889]] to i32
// SIMD-ONLY0-NEXT:    [[TMP890:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2414:%.*]] = zext i16 [[TMP890]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2415:%.*]] = icmp slt i32 [[CONV2413]], [[CONV2414]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2415]], label [[IF_THEN2417:%.*]], label [[IF_END2418:%.*]]
// SIMD-ONLY0:       if.then2417:
// SIMD-ONLY0-NEXT:    [[TMP891:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP891]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2418]]
// SIMD-ONLY0:       if.end2418:
// SIMD-ONLY0-NEXT:    [[TMP892:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2419:%.*]] = zext i16 [[TMP892]] to i32
// SIMD-ONLY0-NEXT:    [[TMP893:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2420:%.*]] = zext i16 [[TMP893]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2421:%.*]] = icmp sgt i32 [[CONV2419]], [[CONV2420]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2421]], label [[IF_THEN2423:%.*]], label [[IF_END2424:%.*]]
// SIMD-ONLY0:       if.then2423:
// SIMD-ONLY0-NEXT:    [[TMP894:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP894]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2424]]
// SIMD-ONLY0:       if.end2424:
// SIMD-ONLY0-NEXT:    [[TMP895:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2425:%.*]] = zext i16 [[TMP895]] to i32
// SIMD-ONLY0-NEXT:    [[TMP896:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2426:%.*]] = zext i16 [[TMP896]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2427:%.*]] = icmp slt i32 [[CONV2425]], [[CONV2426]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2427]], label [[IF_THEN2429:%.*]], label [[IF_END2430:%.*]]
// SIMD-ONLY0:       if.then2429:
// SIMD-ONLY0-NEXT:    [[TMP897:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP897]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2430]]
// SIMD-ONLY0:       if.end2430:
// SIMD-ONLY0-NEXT:    [[TMP898:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2431:%.*]] = zext i16 [[TMP898]] to i32
// SIMD-ONLY0-NEXT:    [[TMP899:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2432:%.*]] = zext i16 [[TMP899]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2433:%.*]] = icmp eq i32 [[CONV2431]], [[CONV2432]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2433]], label [[COND_TRUE2435:%.*]], label [[COND_FALSE2437:%.*]]
// SIMD-ONLY0:       cond.true2435:
// SIMD-ONLY0-NEXT:    [[TMP900:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2436:%.*]] = zext i16 [[TMP900]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2439:%.*]]
// SIMD-ONLY0:       cond.false2437:
// SIMD-ONLY0-NEXT:    [[TMP901:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2438:%.*]] = zext i16 [[TMP901]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2439]]
// SIMD-ONLY0:       cond.end2439:
// SIMD-ONLY0-NEXT:    [[COND2440:%.*]] = phi i32 [ [[CONV2436]], [[COND_TRUE2435]] ], [ [[CONV2438]], [[COND_FALSE2437]] ]
// SIMD-ONLY0-NEXT:    [[CONV2441:%.*]] = trunc i32 [[COND2440]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2441]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP902:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2442:%.*]] = zext i16 [[TMP902]] to i32
// SIMD-ONLY0-NEXT:    [[TMP903:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2443:%.*]] = zext i16 [[TMP903]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2444:%.*]] = icmp eq i32 [[CONV2442]], [[CONV2443]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2444]], label [[COND_TRUE2446:%.*]], label [[COND_FALSE2448:%.*]]
// SIMD-ONLY0:       cond.true2446:
// SIMD-ONLY0-NEXT:    [[TMP904:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2447:%.*]] = zext i16 [[TMP904]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2450:%.*]]
// SIMD-ONLY0:       cond.false2448:
// SIMD-ONLY0-NEXT:    [[TMP905:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2449:%.*]] = zext i16 [[TMP905]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2450]]
// SIMD-ONLY0:       cond.end2450:
// SIMD-ONLY0-NEXT:    [[COND2451:%.*]] = phi i32 [ [[CONV2447]], [[COND_TRUE2446]] ], [ [[CONV2449]], [[COND_FALSE2448]] ]
// SIMD-ONLY0-NEXT:    [[CONV2452:%.*]] = trunc i32 [[COND2451]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2452]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP906:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2453:%.*]] = zext i16 [[TMP906]] to i32
// SIMD-ONLY0-NEXT:    [[TMP907:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2454:%.*]] = zext i16 [[TMP907]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2455:%.*]] = icmp eq i32 [[CONV2453]], [[CONV2454]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2455]], label [[IF_THEN2457:%.*]], label [[IF_END2458:%.*]]
// SIMD-ONLY0:       if.then2457:
// SIMD-ONLY0-NEXT:    [[TMP908:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP908]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2458]]
// SIMD-ONLY0:       if.end2458:
// SIMD-ONLY0-NEXT:    [[TMP909:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2459:%.*]] = zext i16 [[TMP909]] to i32
// SIMD-ONLY0-NEXT:    [[TMP910:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2460:%.*]] = zext i16 [[TMP910]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2461:%.*]] = icmp eq i32 [[CONV2459]], [[CONV2460]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2461]], label [[IF_THEN2463:%.*]], label [[IF_END2464:%.*]]
// SIMD-ONLY0:       if.then2463:
// SIMD-ONLY0-NEXT:    [[TMP911:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP911]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2464]]
// SIMD-ONLY0:       if.end2464:
// SIMD-ONLY0-NEXT:    [[TMP912:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2465:%.*]] = sext i16 [[TMP912]] to i32
// SIMD-ONLY0-NEXT:    [[TMP913:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2466:%.*]] = sext i16 [[TMP913]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2467:%.*]] = icmp sgt i32 [[CONV2465]], [[CONV2466]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2467]], label [[COND_TRUE2469:%.*]], label [[COND_FALSE2471:%.*]]
// SIMD-ONLY0:       cond.true2469:
// SIMD-ONLY0-NEXT:    [[TMP914:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2470:%.*]] = sext i16 [[TMP914]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2473:%.*]]
// SIMD-ONLY0:       cond.false2471:
// SIMD-ONLY0-NEXT:    [[TMP915:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2472:%.*]] = sext i16 [[TMP915]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2473]]
// SIMD-ONLY0:       cond.end2473:
// SIMD-ONLY0-NEXT:    [[COND2474:%.*]] = phi i32 [ [[CONV2470]], [[COND_TRUE2469]] ], [ [[CONV2472]], [[COND_FALSE2471]] ]
// SIMD-ONLY0-NEXT:    [[CONV2475:%.*]] = trunc i32 [[COND2474]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2475]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP916:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2476:%.*]] = sext i16 [[TMP916]] to i32
// SIMD-ONLY0-NEXT:    [[TMP917:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2477:%.*]] = sext i16 [[TMP917]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2478:%.*]] = icmp slt i32 [[CONV2476]], [[CONV2477]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2478]], label [[COND_TRUE2480:%.*]], label [[COND_FALSE2482:%.*]]
// SIMD-ONLY0:       cond.true2480:
// SIMD-ONLY0-NEXT:    [[TMP918:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2481:%.*]] = sext i16 [[TMP918]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2484:%.*]]
// SIMD-ONLY0:       cond.false2482:
// SIMD-ONLY0-NEXT:    [[TMP919:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2483:%.*]] = sext i16 [[TMP919]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2484]]
// SIMD-ONLY0:       cond.end2484:
// SIMD-ONLY0-NEXT:    [[COND2485:%.*]] = phi i32 [ [[CONV2481]], [[COND_TRUE2480]] ], [ [[CONV2483]], [[COND_FALSE2482]] ]
// SIMD-ONLY0-NEXT:    [[CONV2486:%.*]] = trunc i32 [[COND2485]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2486]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP920:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2487:%.*]] = sext i16 [[TMP920]] to i32
// SIMD-ONLY0-NEXT:    [[TMP921:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2488:%.*]] = sext i16 [[TMP921]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2489:%.*]] = icmp sgt i32 [[CONV2487]], [[CONV2488]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2489]], label [[COND_TRUE2491:%.*]], label [[COND_FALSE2493:%.*]]
// SIMD-ONLY0:       cond.true2491:
// SIMD-ONLY0-NEXT:    [[TMP922:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2492:%.*]] = sext i16 [[TMP922]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2495:%.*]]
// SIMD-ONLY0:       cond.false2493:
// SIMD-ONLY0-NEXT:    [[TMP923:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2494:%.*]] = sext i16 [[TMP923]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2495]]
// SIMD-ONLY0:       cond.end2495:
// SIMD-ONLY0-NEXT:    [[COND2496:%.*]] = phi i32 [ [[CONV2492]], [[COND_TRUE2491]] ], [ [[CONV2494]], [[COND_FALSE2493]] ]
// SIMD-ONLY0-NEXT:    [[CONV2497:%.*]] = trunc i32 [[COND2496]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2497]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP924:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2498:%.*]] = sext i16 [[TMP924]] to i32
// SIMD-ONLY0-NEXT:    [[TMP925:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2499:%.*]] = sext i16 [[TMP925]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2500:%.*]] = icmp slt i32 [[CONV2498]], [[CONV2499]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2500]], label [[COND_TRUE2502:%.*]], label [[COND_FALSE2504:%.*]]
// SIMD-ONLY0:       cond.true2502:
// SIMD-ONLY0-NEXT:    [[TMP926:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2503:%.*]] = sext i16 [[TMP926]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2506:%.*]]
// SIMD-ONLY0:       cond.false2504:
// SIMD-ONLY0-NEXT:    [[TMP927:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2505:%.*]] = sext i16 [[TMP927]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2506]]
// SIMD-ONLY0:       cond.end2506:
// SIMD-ONLY0-NEXT:    [[COND2507:%.*]] = phi i32 [ [[CONV2503]], [[COND_TRUE2502]] ], [ [[CONV2505]], [[COND_FALSE2504]] ]
// SIMD-ONLY0-NEXT:    [[CONV2508:%.*]] = trunc i32 [[COND2507]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2508]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP928:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2509:%.*]] = sext i16 [[TMP928]] to i32
// SIMD-ONLY0-NEXT:    [[TMP929:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2510:%.*]] = sext i16 [[TMP929]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2511:%.*]] = icmp sgt i32 [[CONV2509]], [[CONV2510]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2511]], label [[IF_THEN2513:%.*]], label [[IF_END2514:%.*]]
// SIMD-ONLY0:       if.then2513:
// SIMD-ONLY0-NEXT:    [[TMP930:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP930]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2514]]
// SIMD-ONLY0:       if.end2514:
// SIMD-ONLY0-NEXT:    [[TMP931:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2515:%.*]] = sext i16 [[TMP931]] to i32
// SIMD-ONLY0-NEXT:    [[TMP932:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2516:%.*]] = sext i16 [[TMP932]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2517:%.*]] = icmp slt i32 [[CONV2515]], [[CONV2516]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2517]], label [[IF_THEN2519:%.*]], label [[IF_END2520:%.*]]
// SIMD-ONLY0:       if.then2519:
// SIMD-ONLY0-NEXT:    [[TMP933:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP933]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2520]]
// SIMD-ONLY0:       if.end2520:
// SIMD-ONLY0-NEXT:    [[TMP934:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2521:%.*]] = sext i16 [[TMP934]] to i32
// SIMD-ONLY0-NEXT:    [[TMP935:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2522:%.*]] = sext i16 [[TMP935]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2523:%.*]] = icmp sgt i32 [[CONV2521]], [[CONV2522]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2523]], label [[IF_THEN2525:%.*]], label [[IF_END2526:%.*]]
// SIMD-ONLY0:       if.then2525:
// SIMD-ONLY0-NEXT:    [[TMP936:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP936]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2526]]
// SIMD-ONLY0:       if.end2526:
// SIMD-ONLY0-NEXT:    [[TMP937:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2527:%.*]] = sext i16 [[TMP937]] to i32
// SIMD-ONLY0-NEXT:    [[TMP938:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2528:%.*]] = sext i16 [[TMP938]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2529:%.*]] = icmp slt i32 [[CONV2527]], [[CONV2528]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2529]], label [[IF_THEN2531:%.*]], label [[IF_END2532:%.*]]
// SIMD-ONLY0:       if.then2531:
// SIMD-ONLY0-NEXT:    [[TMP939:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP939]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2532]]
// SIMD-ONLY0:       if.end2532:
// SIMD-ONLY0-NEXT:    [[TMP940:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2533:%.*]] = sext i16 [[TMP940]] to i32
// SIMD-ONLY0-NEXT:    [[TMP941:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2534:%.*]] = sext i16 [[TMP941]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2535:%.*]] = icmp eq i32 [[CONV2533]], [[CONV2534]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2535]], label [[COND_TRUE2537:%.*]], label [[COND_FALSE2539:%.*]]
// SIMD-ONLY0:       cond.true2537:
// SIMD-ONLY0-NEXT:    [[TMP942:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2538:%.*]] = sext i16 [[TMP942]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2541:%.*]]
// SIMD-ONLY0:       cond.false2539:
// SIMD-ONLY0-NEXT:    [[TMP943:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2540:%.*]] = sext i16 [[TMP943]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2541]]
// SIMD-ONLY0:       cond.end2541:
// SIMD-ONLY0-NEXT:    [[COND2542:%.*]] = phi i32 [ [[CONV2538]], [[COND_TRUE2537]] ], [ [[CONV2540]], [[COND_FALSE2539]] ]
// SIMD-ONLY0-NEXT:    [[CONV2543:%.*]] = trunc i32 [[COND2542]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2543]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP944:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2544:%.*]] = sext i16 [[TMP944]] to i32
// SIMD-ONLY0-NEXT:    [[TMP945:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2545:%.*]] = sext i16 [[TMP945]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2546:%.*]] = icmp eq i32 [[CONV2544]], [[CONV2545]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2546]], label [[COND_TRUE2548:%.*]], label [[COND_FALSE2550:%.*]]
// SIMD-ONLY0:       cond.true2548:
// SIMD-ONLY0-NEXT:    [[TMP946:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2549:%.*]] = sext i16 [[TMP946]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2552:%.*]]
// SIMD-ONLY0:       cond.false2550:
// SIMD-ONLY0-NEXT:    [[TMP947:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2551:%.*]] = sext i16 [[TMP947]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2552]]
// SIMD-ONLY0:       cond.end2552:
// SIMD-ONLY0-NEXT:    [[COND2553:%.*]] = phi i32 [ [[CONV2549]], [[COND_TRUE2548]] ], [ [[CONV2551]], [[COND_FALSE2550]] ]
// SIMD-ONLY0-NEXT:    [[CONV2554:%.*]] = trunc i32 [[COND2553]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2554]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP948:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2555:%.*]] = sext i16 [[TMP948]] to i32
// SIMD-ONLY0-NEXT:    [[TMP949:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2556:%.*]] = sext i16 [[TMP949]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2557:%.*]] = icmp eq i32 [[CONV2555]], [[CONV2556]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2557]], label [[IF_THEN2559:%.*]], label [[IF_END2560:%.*]]
// SIMD-ONLY0:       if.then2559:
// SIMD-ONLY0-NEXT:    [[TMP950:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP950]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2560]]
// SIMD-ONLY0:       if.end2560:
// SIMD-ONLY0-NEXT:    [[TMP951:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2561:%.*]] = sext i16 [[TMP951]] to i32
// SIMD-ONLY0-NEXT:    [[TMP952:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2562:%.*]] = sext i16 [[TMP952]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2563:%.*]] = icmp eq i32 [[CONV2561]], [[CONV2562]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2563]], label [[IF_THEN2565:%.*]], label [[IF_END2566:%.*]]
// SIMD-ONLY0:       if.then2565:
// SIMD-ONLY0-NEXT:    [[TMP953:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP953]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2566]]
// SIMD-ONLY0:       if.end2566:
// SIMD-ONLY0-NEXT:    [[TMP954:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2567:%.*]] = zext i16 [[TMP954]] to i32
// SIMD-ONLY0-NEXT:    [[TMP955:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2568:%.*]] = zext i16 [[TMP955]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2569:%.*]] = icmp sgt i32 [[CONV2567]], [[CONV2568]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2569]], label [[COND_TRUE2571:%.*]], label [[COND_FALSE2573:%.*]]
// SIMD-ONLY0:       cond.true2571:
// SIMD-ONLY0-NEXT:    [[TMP956:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2572:%.*]] = zext i16 [[TMP956]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2575:%.*]]
// SIMD-ONLY0:       cond.false2573:
// SIMD-ONLY0-NEXT:    [[TMP957:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2574:%.*]] = zext i16 [[TMP957]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2575]]
// SIMD-ONLY0:       cond.end2575:
// SIMD-ONLY0-NEXT:    [[COND2576:%.*]] = phi i32 [ [[CONV2572]], [[COND_TRUE2571]] ], [ [[CONV2574]], [[COND_FALSE2573]] ]
// SIMD-ONLY0-NEXT:    [[CONV2577:%.*]] = trunc i32 [[COND2576]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2577]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP958:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2578:%.*]] = zext i16 [[TMP958]] to i32
// SIMD-ONLY0-NEXT:    [[TMP959:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2579:%.*]] = zext i16 [[TMP959]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2580:%.*]] = icmp slt i32 [[CONV2578]], [[CONV2579]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2580]], label [[COND_TRUE2582:%.*]], label [[COND_FALSE2584:%.*]]
// SIMD-ONLY0:       cond.true2582:
// SIMD-ONLY0-NEXT:    [[TMP960:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2583:%.*]] = zext i16 [[TMP960]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2586:%.*]]
// SIMD-ONLY0:       cond.false2584:
// SIMD-ONLY0-NEXT:    [[TMP961:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2585:%.*]] = zext i16 [[TMP961]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2586]]
// SIMD-ONLY0:       cond.end2586:
// SIMD-ONLY0-NEXT:    [[COND2587:%.*]] = phi i32 [ [[CONV2583]], [[COND_TRUE2582]] ], [ [[CONV2585]], [[COND_FALSE2584]] ]
// SIMD-ONLY0-NEXT:    [[CONV2588:%.*]] = trunc i32 [[COND2587]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2588]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP962:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2589:%.*]] = zext i16 [[TMP962]] to i32
// SIMD-ONLY0-NEXT:    [[TMP963:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2590:%.*]] = zext i16 [[TMP963]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2591:%.*]] = icmp sgt i32 [[CONV2589]], [[CONV2590]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2591]], label [[COND_TRUE2593:%.*]], label [[COND_FALSE2595:%.*]]
// SIMD-ONLY0:       cond.true2593:
// SIMD-ONLY0-NEXT:    [[TMP964:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2594:%.*]] = zext i16 [[TMP964]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2597:%.*]]
// SIMD-ONLY0:       cond.false2595:
// SIMD-ONLY0-NEXT:    [[TMP965:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2596:%.*]] = zext i16 [[TMP965]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2597]]
// SIMD-ONLY0:       cond.end2597:
// SIMD-ONLY0-NEXT:    [[COND2598:%.*]] = phi i32 [ [[CONV2594]], [[COND_TRUE2593]] ], [ [[CONV2596]], [[COND_FALSE2595]] ]
// SIMD-ONLY0-NEXT:    [[CONV2599:%.*]] = trunc i32 [[COND2598]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2599]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP966:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2600:%.*]] = zext i16 [[TMP966]] to i32
// SIMD-ONLY0-NEXT:    [[TMP967:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2601:%.*]] = zext i16 [[TMP967]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2602:%.*]] = icmp slt i32 [[CONV2600]], [[CONV2601]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2602]], label [[COND_TRUE2604:%.*]], label [[COND_FALSE2606:%.*]]
// SIMD-ONLY0:       cond.true2604:
// SIMD-ONLY0-NEXT:    [[TMP968:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2605:%.*]] = zext i16 [[TMP968]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2608:%.*]]
// SIMD-ONLY0:       cond.false2606:
// SIMD-ONLY0-NEXT:    [[TMP969:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2607:%.*]] = zext i16 [[TMP969]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2608]]
// SIMD-ONLY0:       cond.end2608:
// SIMD-ONLY0-NEXT:    [[COND2609:%.*]] = phi i32 [ [[CONV2605]], [[COND_TRUE2604]] ], [ [[CONV2607]], [[COND_FALSE2606]] ]
// SIMD-ONLY0-NEXT:    [[CONV2610:%.*]] = trunc i32 [[COND2609]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2610]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP970:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2611:%.*]] = zext i16 [[TMP970]] to i32
// SIMD-ONLY0-NEXT:    [[TMP971:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2612:%.*]] = zext i16 [[TMP971]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2613:%.*]] = icmp sgt i32 [[CONV2611]], [[CONV2612]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2613]], label [[IF_THEN2615:%.*]], label [[IF_END2616:%.*]]
// SIMD-ONLY0:       if.then2615:
// SIMD-ONLY0-NEXT:    [[TMP972:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP972]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2616]]
// SIMD-ONLY0:       if.end2616:
// SIMD-ONLY0-NEXT:    [[TMP973:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2617:%.*]] = zext i16 [[TMP973]] to i32
// SIMD-ONLY0-NEXT:    [[TMP974:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2618:%.*]] = zext i16 [[TMP974]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2619:%.*]] = icmp slt i32 [[CONV2617]], [[CONV2618]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2619]], label [[IF_THEN2621:%.*]], label [[IF_END2622:%.*]]
// SIMD-ONLY0:       if.then2621:
// SIMD-ONLY0-NEXT:    [[TMP975:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP975]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2622]]
// SIMD-ONLY0:       if.end2622:
// SIMD-ONLY0-NEXT:    [[TMP976:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2623:%.*]] = zext i16 [[TMP976]] to i32
// SIMD-ONLY0-NEXT:    [[TMP977:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2624:%.*]] = zext i16 [[TMP977]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2625:%.*]] = icmp sgt i32 [[CONV2623]], [[CONV2624]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2625]], label [[IF_THEN2627:%.*]], label [[IF_END2628:%.*]]
// SIMD-ONLY0:       if.then2627:
// SIMD-ONLY0-NEXT:    [[TMP978:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP978]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2628]]
// SIMD-ONLY0:       if.end2628:
// SIMD-ONLY0-NEXT:    [[TMP979:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2629:%.*]] = zext i16 [[TMP979]] to i32
// SIMD-ONLY0-NEXT:    [[TMP980:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2630:%.*]] = zext i16 [[TMP980]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2631:%.*]] = icmp slt i32 [[CONV2629]], [[CONV2630]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2631]], label [[IF_THEN2633:%.*]], label [[IF_END2634:%.*]]
// SIMD-ONLY0:       if.then2633:
// SIMD-ONLY0-NEXT:    [[TMP981:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP981]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2634]]
// SIMD-ONLY0:       if.end2634:
// SIMD-ONLY0-NEXT:    [[TMP982:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2635:%.*]] = zext i16 [[TMP982]] to i32
// SIMD-ONLY0-NEXT:    [[TMP983:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2636:%.*]] = zext i16 [[TMP983]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2637:%.*]] = icmp eq i32 [[CONV2635]], [[CONV2636]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2637]], label [[COND_TRUE2639:%.*]], label [[COND_FALSE2641:%.*]]
// SIMD-ONLY0:       cond.true2639:
// SIMD-ONLY0-NEXT:    [[TMP984:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2640:%.*]] = zext i16 [[TMP984]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2643:%.*]]
// SIMD-ONLY0:       cond.false2641:
// SIMD-ONLY0-NEXT:    [[TMP985:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2642:%.*]] = zext i16 [[TMP985]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2643]]
// SIMD-ONLY0:       cond.end2643:
// SIMD-ONLY0-NEXT:    [[COND2644:%.*]] = phi i32 [ [[CONV2640]], [[COND_TRUE2639]] ], [ [[CONV2642]], [[COND_FALSE2641]] ]
// SIMD-ONLY0-NEXT:    [[CONV2645:%.*]] = trunc i32 [[COND2644]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2645]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP986:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2646:%.*]] = zext i16 [[TMP986]] to i32
// SIMD-ONLY0-NEXT:    [[TMP987:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2647:%.*]] = zext i16 [[TMP987]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2648:%.*]] = icmp eq i32 [[CONV2646]], [[CONV2647]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2648]], label [[COND_TRUE2650:%.*]], label [[COND_FALSE2652:%.*]]
// SIMD-ONLY0:       cond.true2650:
// SIMD-ONLY0-NEXT:    [[TMP988:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2651:%.*]] = zext i16 [[TMP988]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2654:%.*]]
// SIMD-ONLY0:       cond.false2652:
// SIMD-ONLY0-NEXT:    [[TMP989:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2653:%.*]] = zext i16 [[TMP989]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2654]]
// SIMD-ONLY0:       cond.end2654:
// SIMD-ONLY0-NEXT:    [[COND2655:%.*]] = phi i32 [ [[CONV2651]], [[COND_TRUE2650]] ], [ [[CONV2653]], [[COND_FALSE2652]] ]
// SIMD-ONLY0-NEXT:    [[CONV2656:%.*]] = trunc i32 [[COND2655]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2656]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP990:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2657:%.*]] = zext i16 [[TMP990]] to i32
// SIMD-ONLY0-NEXT:    [[TMP991:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2658:%.*]] = zext i16 [[TMP991]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2659:%.*]] = icmp eq i32 [[CONV2657]], [[CONV2658]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2659]], label [[IF_THEN2661:%.*]], label [[IF_END2662:%.*]]
// SIMD-ONLY0:       if.then2661:
// SIMD-ONLY0-NEXT:    [[TMP992:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP992]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2662]]
// SIMD-ONLY0:       if.end2662:
// SIMD-ONLY0-NEXT:    [[TMP993:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2663:%.*]] = zext i16 [[TMP993]] to i32
// SIMD-ONLY0-NEXT:    [[TMP994:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2664:%.*]] = zext i16 [[TMP994]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2665:%.*]] = icmp eq i32 [[CONV2663]], [[CONV2664]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2665]], label [[IF_THEN2667:%.*]], label [[IF_END2668:%.*]]
// SIMD-ONLY0:       if.then2667:
// SIMD-ONLY0-NEXT:    [[TMP995:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP995]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2668]]
// SIMD-ONLY0:       if.end2668:
// SIMD-ONLY0-NEXT:    [[TMP996:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2669:%.*]] = sext i16 [[TMP996]] to i32
// SIMD-ONLY0-NEXT:    [[TMP997:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2670:%.*]] = sext i16 [[TMP997]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2671:%.*]] = icmp sgt i32 [[CONV2669]], [[CONV2670]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2671]], label [[COND_TRUE2673:%.*]], label [[COND_FALSE2675:%.*]]
// SIMD-ONLY0:       cond.true2673:
// SIMD-ONLY0-NEXT:    [[TMP998:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2674:%.*]] = sext i16 [[TMP998]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2677:%.*]]
// SIMD-ONLY0:       cond.false2675:
// SIMD-ONLY0-NEXT:    [[TMP999:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2676:%.*]] = sext i16 [[TMP999]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2677]]
// SIMD-ONLY0:       cond.end2677:
// SIMD-ONLY0-NEXT:    [[COND2678:%.*]] = phi i32 [ [[CONV2674]], [[COND_TRUE2673]] ], [ [[CONV2676]], [[COND_FALSE2675]] ]
// SIMD-ONLY0-NEXT:    [[CONV2679:%.*]] = trunc i32 [[COND2678]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2679]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1000:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2680:%.*]] = sext i16 [[TMP1000]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1001:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2681:%.*]] = sext i16 [[TMP1001]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2682:%.*]] = icmp slt i32 [[CONV2680]], [[CONV2681]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2682]], label [[COND_TRUE2684:%.*]], label [[COND_FALSE2686:%.*]]
// SIMD-ONLY0:       cond.true2684:
// SIMD-ONLY0-NEXT:    [[TMP1002:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2685:%.*]] = sext i16 [[TMP1002]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2688:%.*]]
// SIMD-ONLY0:       cond.false2686:
// SIMD-ONLY0-NEXT:    [[TMP1003:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2687:%.*]] = sext i16 [[TMP1003]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2688]]
// SIMD-ONLY0:       cond.end2688:
// SIMD-ONLY0-NEXT:    [[COND2689:%.*]] = phi i32 [ [[CONV2685]], [[COND_TRUE2684]] ], [ [[CONV2687]], [[COND_FALSE2686]] ]
// SIMD-ONLY0-NEXT:    [[CONV2690:%.*]] = trunc i32 [[COND2689]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2690]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1004:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2691:%.*]] = sext i16 [[TMP1004]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1005:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2692:%.*]] = sext i16 [[TMP1005]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2693:%.*]] = icmp sgt i32 [[CONV2691]], [[CONV2692]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2693]], label [[COND_TRUE2695:%.*]], label [[COND_FALSE2697:%.*]]
// SIMD-ONLY0:       cond.true2695:
// SIMD-ONLY0-NEXT:    [[TMP1006:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2696:%.*]] = sext i16 [[TMP1006]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2699:%.*]]
// SIMD-ONLY0:       cond.false2697:
// SIMD-ONLY0-NEXT:    [[TMP1007:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2698:%.*]] = sext i16 [[TMP1007]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2699]]
// SIMD-ONLY0:       cond.end2699:
// SIMD-ONLY0-NEXT:    [[COND2700:%.*]] = phi i32 [ [[CONV2696]], [[COND_TRUE2695]] ], [ [[CONV2698]], [[COND_FALSE2697]] ]
// SIMD-ONLY0-NEXT:    [[CONV2701:%.*]] = trunc i32 [[COND2700]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2701]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1008:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2702:%.*]] = sext i16 [[TMP1008]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1009:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2703:%.*]] = sext i16 [[TMP1009]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2704:%.*]] = icmp slt i32 [[CONV2702]], [[CONV2703]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2704]], label [[COND_TRUE2706:%.*]], label [[COND_FALSE2708:%.*]]
// SIMD-ONLY0:       cond.true2706:
// SIMD-ONLY0-NEXT:    [[TMP1010:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2707:%.*]] = sext i16 [[TMP1010]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2710:%.*]]
// SIMD-ONLY0:       cond.false2708:
// SIMD-ONLY0-NEXT:    [[TMP1011:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2709:%.*]] = sext i16 [[TMP1011]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2710]]
// SIMD-ONLY0:       cond.end2710:
// SIMD-ONLY0-NEXT:    [[COND2711:%.*]] = phi i32 [ [[CONV2707]], [[COND_TRUE2706]] ], [ [[CONV2709]], [[COND_FALSE2708]] ]
// SIMD-ONLY0-NEXT:    [[CONV2712:%.*]] = trunc i32 [[COND2711]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2712]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1012:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2713:%.*]] = sext i16 [[TMP1012]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1013:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2714:%.*]] = sext i16 [[TMP1013]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2715:%.*]] = icmp sgt i32 [[CONV2713]], [[CONV2714]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2715]], label [[IF_THEN2717:%.*]], label [[IF_END2718:%.*]]
// SIMD-ONLY0:       if.then2717:
// SIMD-ONLY0-NEXT:    [[TMP1014:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1014]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2718]]
// SIMD-ONLY0:       if.end2718:
// SIMD-ONLY0-NEXT:    [[TMP1015:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2719:%.*]] = sext i16 [[TMP1015]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1016:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2720:%.*]] = sext i16 [[TMP1016]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2721:%.*]] = icmp slt i32 [[CONV2719]], [[CONV2720]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2721]], label [[IF_THEN2723:%.*]], label [[IF_END2724:%.*]]
// SIMD-ONLY0:       if.then2723:
// SIMD-ONLY0-NEXT:    [[TMP1017:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1017]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2724]]
// SIMD-ONLY0:       if.end2724:
// SIMD-ONLY0-NEXT:    [[TMP1018:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2725:%.*]] = sext i16 [[TMP1018]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1019:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2726:%.*]] = sext i16 [[TMP1019]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2727:%.*]] = icmp sgt i32 [[CONV2725]], [[CONV2726]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2727]], label [[IF_THEN2729:%.*]], label [[IF_END2730:%.*]]
// SIMD-ONLY0:       if.then2729:
// SIMD-ONLY0-NEXT:    [[TMP1020:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1020]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2730]]
// SIMD-ONLY0:       if.end2730:
// SIMD-ONLY0-NEXT:    [[TMP1021:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2731:%.*]] = sext i16 [[TMP1021]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1022:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2732:%.*]] = sext i16 [[TMP1022]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2733:%.*]] = icmp slt i32 [[CONV2731]], [[CONV2732]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2733]], label [[IF_THEN2735:%.*]], label [[IF_END2736:%.*]]
// SIMD-ONLY0:       if.then2735:
// SIMD-ONLY0-NEXT:    [[TMP1023:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1023]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2736]]
// SIMD-ONLY0:       if.end2736:
// SIMD-ONLY0-NEXT:    [[TMP1024:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2737:%.*]] = sext i16 [[TMP1024]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1025:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2738:%.*]] = sext i16 [[TMP1025]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2739:%.*]] = icmp eq i32 [[CONV2737]], [[CONV2738]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2739]], label [[COND_TRUE2741:%.*]], label [[COND_FALSE2743:%.*]]
// SIMD-ONLY0:       cond.true2741:
// SIMD-ONLY0-NEXT:    [[TMP1026:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2742:%.*]] = sext i16 [[TMP1026]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2745:%.*]]
// SIMD-ONLY0:       cond.false2743:
// SIMD-ONLY0-NEXT:    [[TMP1027:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2744:%.*]] = sext i16 [[TMP1027]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2745]]
// SIMD-ONLY0:       cond.end2745:
// SIMD-ONLY0-NEXT:    [[COND2746:%.*]] = phi i32 [ [[CONV2742]], [[COND_TRUE2741]] ], [ [[CONV2744]], [[COND_FALSE2743]] ]
// SIMD-ONLY0-NEXT:    [[CONV2747:%.*]] = trunc i32 [[COND2746]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2747]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1028:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2748:%.*]] = sext i16 [[TMP1028]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1029:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2749:%.*]] = sext i16 [[TMP1029]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2750:%.*]] = icmp eq i32 [[CONV2748]], [[CONV2749]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2750]], label [[COND_TRUE2752:%.*]], label [[COND_FALSE2754:%.*]]
// SIMD-ONLY0:       cond.true2752:
// SIMD-ONLY0-NEXT:    [[TMP1030:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2753:%.*]] = sext i16 [[TMP1030]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2756:%.*]]
// SIMD-ONLY0:       cond.false2754:
// SIMD-ONLY0-NEXT:    [[TMP1031:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2755:%.*]] = sext i16 [[TMP1031]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2756]]
// SIMD-ONLY0:       cond.end2756:
// SIMD-ONLY0-NEXT:    [[COND2757:%.*]] = phi i32 [ [[CONV2753]], [[COND_TRUE2752]] ], [ [[CONV2755]], [[COND_FALSE2754]] ]
// SIMD-ONLY0-NEXT:    [[CONV2758:%.*]] = trunc i32 [[COND2757]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2758]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1032:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2759:%.*]] = sext i16 [[TMP1032]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1033:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2760:%.*]] = sext i16 [[TMP1033]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2761:%.*]] = icmp eq i32 [[CONV2759]], [[CONV2760]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2761]], label [[IF_THEN2763:%.*]], label [[IF_END2764:%.*]]
// SIMD-ONLY0:       if.then2763:
// SIMD-ONLY0-NEXT:    [[TMP1034:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1034]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2764]]
// SIMD-ONLY0:       if.end2764:
// SIMD-ONLY0-NEXT:    [[TMP1035:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2765:%.*]] = sext i16 [[TMP1035]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1036:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2766:%.*]] = sext i16 [[TMP1036]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2767:%.*]] = icmp eq i32 [[CONV2765]], [[CONV2766]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2767]], label [[IF_THEN2769:%.*]], label [[IF_END2770:%.*]]
// SIMD-ONLY0:       if.then2769:
// SIMD-ONLY0-NEXT:    [[TMP1037:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1037]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2770]]
// SIMD-ONLY0:       if.end2770:
// SIMD-ONLY0-NEXT:    [[TMP1038:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2771:%.*]] = zext i16 [[TMP1038]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1039:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2772:%.*]] = zext i16 [[TMP1039]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2773:%.*]] = icmp sgt i32 [[CONV2771]], [[CONV2772]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2773]], label [[COND_TRUE2775:%.*]], label [[COND_FALSE2777:%.*]]
// SIMD-ONLY0:       cond.true2775:
// SIMD-ONLY0-NEXT:    [[TMP1040:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2776:%.*]] = zext i16 [[TMP1040]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2779:%.*]]
// SIMD-ONLY0:       cond.false2777:
// SIMD-ONLY0-NEXT:    [[TMP1041:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2778:%.*]] = zext i16 [[TMP1041]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2779]]
// SIMD-ONLY0:       cond.end2779:
// SIMD-ONLY0-NEXT:    [[COND2780:%.*]] = phi i32 [ [[CONV2776]], [[COND_TRUE2775]] ], [ [[CONV2778]], [[COND_FALSE2777]] ]
// SIMD-ONLY0-NEXT:    [[CONV2781:%.*]] = trunc i32 [[COND2780]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2781]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1042:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2782:%.*]] = zext i16 [[TMP1042]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1043:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2783:%.*]] = zext i16 [[TMP1043]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2784:%.*]] = icmp slt i32 [[CONV2782]], [[CONV2783]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2784]], label [[COND_TRUE2786:%.*]], label [[COND_FALSE2788:%.*]]
// SIMD-ONLY0:       cond.true2786:
// SIMD-ONLY0-NEXT:    [[TMP1044:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2787:%.*]] = zext i16 [[TMP1044]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2790:%.*]]
// SIMD-ONLY0:       cond.false2788:
// SIMD-ONLY0-NEXT:    [[TMP1045:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2789:%.*]] = zext i16 [[TMP1045]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2790]]
// SIMD-ONLY0:       cond.end2790:
// SIMD-ONLY0-NEXT:    [[COND2791:%.*]] = phi i32 [ [[CONV2787]], [[COND_TRUE2786]] ], [ [[CONV2789]], [[COND_FALSE2788]] ]
// SIMD-ONLY0-NEXT:    [[CONV2792:%.*]] = trunc i32 [[COND2791]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2792]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1046:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2793:%.*]] = zext i16 [[TMP1046]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1047:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2794:%.*]] = zext i16 [[TMP1047]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2795:%.*]] = icmp sgt i32 [[CONV2793]], [[CONV2794]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2795]], label [[COND_TRUE2797:%.*]], label [[COND_FALSE2799:%.*]]
// SIMD-ONLY0:       cond.true2797:
// SIMD-ONLY0-NEXT:    [[TMP1048:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2798:%.*]] = zext i16 [[TMP1048]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2801:%.*]]
// SIMD-ONLY0:       cond.false2799:
// SIMD-ONLY0-NEXT:    [[TMP1049:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2800:%.*]] = zext i16 [[TMP1049]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2801]]
// SIMD-ONLY0:       cond.end2801:
// SIMD-ONLY0-NEXT:    [[COND2802:%.*]] = phi i32 [ [[CONV2798]], [[COND_TRUE2797]] ], [ [[CONV2800]], [[COND_FALSE2799]] ]
// SIMD-ONLY0-NEXT:    [[CONV2803:%.*]] = trunc i32 [[COND2802]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2803]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1050:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2804:%.*]] = zext i16 [[TMP1050]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1051:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2805:%.*]] = zext i16 [[TMP1051]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2806:%.*]] = icmp slt i32 [[CONV2804]], [[CONV2805]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2806]], label [[COND_TRUE2808:%.*]], label [[COND_FALSE2810:%.*]]
// SIMD-ONLY0:       cond.true2808:
// SIMD-ONLY0-NEXT:    [[TMP1052:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2809:%.*]] = zext i16 [[TMP1052]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2812:%.*]]
// SIMD-ONLY0:       cond.false2810:
// SIMD-ONLY0-NEXT:    [[TMP1053:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2811:%.*]] = zext i16 [[TMP1053]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2812]]
// SIMD-ONLY0:       cond.end2812:
// SIMD-ONLY0-NEXT:    [[COND2813:%.*]] = phi i32 [ [[CONV2809]], [[COND_TRUE2808]] ], [ [[CONV2811]], [[COND_FALSE2810]] ]
// SIMD-ONLY0-NEXT:    [[CONV2814:%.*]] = trunc i32 [[COND2813]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2814]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1054:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2815:%.*]] = zext i16 [[TMP1054]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1055:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2816:%.*]] = zext i16 [[TMP1055]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2817:%.*]] = icmp sgt i32 [[CONV2815]], [[CONV2816]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2817]], label [[IF_THEN2819:%.*]], label [[IF_END2820:%.*]]
// SIMD-ONLY0:       if.then2819:
// SIMD-ONLY0-NEXT:    [[TMP1056:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1056]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2820]]
// SIMD-ONLY0:       if.end2820:
// SIMD-ONLY0-NEXT:    [[TMP1057:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2821:%.*]] = zext i16 [[TMP1057]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1058:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2822:%.*]] = zext i16 [[TMP1058]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2823:%.*]] = icmp slt i32 [[CONV2821]], [[CONV2822]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2823]], label [[IF_THEN2825:%.*]], label [[IF_END2826:%.*]]
// SIMD-ONLY0:       if.then2825:
// SIMD-ONLY0-NEXT:    [[TMP1059:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1059]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2826]]
// SIMD-ONLY0:       if.end2826:
// SIMD-ONLY0-NEXT:    [[TMP1060:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2827:%.*]] = zext i16 [[TMP1060]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1061:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2828:%.*]] = zext i16 [[TMP1061]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2829:%.*]] = icmp sgt i32 [[CONV2827]], [[CONV2828]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2829]], label [[IF_THEN2831:%.*]], label [[IF_END2832:%.*]]
// SIMD-ONLY0:       if.then2831:
// SIMD-ONLY0-NEXT:    [[TMP1062:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1062]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2832]]
// SIMD-ONLY0:       if.end2832:
// SIMD-ONLY0-NEXT:    [[TMP1063:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2833:%.*]] = zext i16 [[TMP1063]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1064:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2834:%.*]] = zext i16 [[TMP1064]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2835:%.*]] = icmp slt i32 [[CONV2833]], [[CONV2834]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2835]], label [[IF_THEN2837:%.*]], label [[IF_END2838:%.*]]
// SIMD-ONLY0:       if.then2837:
// SIMD-ONLY0-NEXT:    [[TMP1065:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1065]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2838]]
// SIMD-ONLY0:       if.end2838:
// SIMD-ONLY0-NEXT:    [[TMP1066:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2839:%.*]] = zext i16 [[TMP1066]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1067:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2840:%.*]] = zext i16 [[TMP1067]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2841:%.*]] = icmp eq i32 [[CONV2839]], [[CONV2840]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2841]], label [[COND_TRUE2843:%.*]], label [[COND_FALSE2845:%.*]]
// SIMD-ONLY0:       cond.true2843:
// SIMD-ONLY0-NEXT:    [[TMP1068:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2844:%.*]] = zext i16 [[TMP1068]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2847:%.*]]
// SIMD-ONLY0:       cond.false2845:
// SIMD-ONLY0-NEXT:    [[TMP1069:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2846:%.*]] = zext i16 [[TMP1069]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2847]]
// SIMD-ONLY0:       cond.end2847:
// SIMD-ONLY0-NEXT:    [[COND2848:%.*]] = phi i32 [ [[CONV2844]], [[COND_TRUE2843]] ], [ [[CONV2846]], [[COND_FALSE2845]] ]
// SIMD-ONLY0-NEXT:    [[CONV2849:%.*]] = trunc i32 [[COND2848]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2849]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1070:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2850:%.*]] = zext i16 [[TMP1070]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1071:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2851:%.*]] = zext i16 [[TMP1071]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2852:%.*]] = icmp eq i32 [[CONV2850]], [[CONV2851]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2852]], label [[COND_TRUE2854:%.*]], label [[COND_FALSE2856:%.*]]
// SIMD-ONLY0:       cond.true2854:
// SIMD-ONLY0-NEXT:    [[TMP1072:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2855:%.*]] = zext i16 [[TMP1072]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2858:%.*]]
// SIMD-ONLY0:       cond.false2856:
// SIMD-ONLY0-NEXT:    [[TMP1073:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2857:%.*]] = zext i16 [[TMP1073]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END2858]]
// SIMD-ONLY0:       cond.end2858:
// SIMD-ONLY0-NEXT:    [[COND2859:%.*]] = phi i32 [ [[CONV2855]], [[COND_TRUE2854]] ], [ [[CONV2857]], [[COND_FALSE2856]] ]
// SIMD-ONLY0-NEXT:    [[CONV2860:%.*]] = trunc i32 [[COND2859]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2860]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1074:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2861:%.*]] = zext i16 [[TMP1074]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1075:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2862:%.*]] = zext i16 [[TMP1075]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2863:%.*]] = icmp eq i32 [[CONV2861]], [[CONV2862]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2863]], label [[IF_THEN2865:%.*]], label [[IF_END2866:%.*]]
// SIMD-ONLY0:       if.then2865:
// SIMD-ONLY0-NEXT:    [[TMP1076:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1076]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2866]]
// SIMD-ONLY0:       if.end2866:
// SIMD-ONLY0-NEXT:    [[TMP1077:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2867:%.*]] = zext i16 [[TMP1077]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1078:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2868:%.*]] = zext i16 [[TMP1078]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2869:%.*]] = icmp eq i32 [[CONV2867]], [[CONV2868]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2869]], label [[IF_THEN2871:%.*]], label [[IF_END2872:%.*]]
// SIMD-ONLY0:       if.then2871:
// SIMD-ONLY0-NEXT:    [[TMP1079:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1079]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2872]]
// SIMD-ONLY0:       if.end2872:
// SIMD-ONLY0-NEXT:    [[TMP1080:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1081:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2873:%.*]] = icmp sgt i32 [[TMP1080]], [[TMP1081]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2873]], label [[COND_TRUE2875:%.*]], label [[COND_FALSE2876:%.*]]
// SIMD-ONLY0:       cond.true2875:
// SIMD-ONLY0-NEXT:    [[TMP1082:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2877:%.*]]
// SIMD-ONLY0:       cond.false2876:
// SIMD-ONLY0-NEXT:    [[TMP1083:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2877]]
// SIMD-ONLY0:       cond.end2877:
// SIMD-ONLY0-NEXT:    [[COND2878:%.*]] = phi i32 [ [[TMP1082]], [[COND_TRUE2875]] ], [ [[TMP1083]], [[COND_FALSE2876]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2878]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1084:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1085:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2879:%.*]] = icmp slt i32 [[TMP1084]], [[TMP1085]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2879]], label [[COND_TRUE2881:%.*]], label [[COND_FALSE2882:%.*]]
// SIMD-ONLY0:       cond.true2881:
// SIMD-ONLY0-NEXT:    [[TMP1086:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2883:%.*]]
// SIMD-ONLY0:       cond.false2882:
// SIMD-ONLY0-NEXT:    [[TMP1087:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2883]]
// SIMD-ONLY0:       cond.end2883:
// SIMD-ONLY0-NEXT:    [[COND2884:%.*]] = phi i32 [ [[TMP1086]], [[COND_TRUE2881]] ], [ [[TMP1087]], [[COND_FALSE2882]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2884]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1088:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1089:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2885:%.*]] = icmp sgt i32 [[TMP1088]], [[TMP1089]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2885]], label [[COND_TRUE2887:%.*]], label [[COND_FALSE2888:%.*]]
// SIMD-ONLY0:       cond.true2887:
// SIMD-ONLY0-NEXT:    [[TMP1090:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2889:%.*]]
// SIMD-ONLY0:       cond.false2888:
// SIMD-ONLY0-NEXT:    [[TMP1091:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2889]]
// SIMD-ONLY0:       cond.end2889:
// SIMD-ONLY0-NEXT:    [[COND2890:%.*]] = phi i32 [ [[TMP1090]], [[COND_TRUE2887]] ], [ [[TMP1091]], [[COND_FALSE2888]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2890]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1092:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1093:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2891:%.*]] = icmp slt i32 [[TMP1092]], [[TMP1093]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2891]], label [[COND_TRUE2893:%.*]], label [[COND_FALSE2894:%.*]]
// SIMD-ONLY0:       cond.true2893:
// SIMD-ONLY0-NEXT:    [[TMP1094:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2895:%.*]]
// SIMD-ONLY0:       cond.false2894:
// SIMD-ONLY0-NEXT:    [[TMP1095:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2895]]
// SIMD-ONLY0:       cond.end2895:
// SIMD-ONLY0-NEXT:    [[COND2896:%.*]] = phi i32 [ [[TMP1094]], [[COND_TRUE2893]] ], [ [[TMP1095]], [[COND_FALSE2894]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2896]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1096:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1097:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2897:%.*]] = icmp sgt i32 [[TMP1096]], [[TMP1097]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2897]], label [[IF_THEN2899:%.*]], label [[IF_END2900:%.*]]
// SIMD-ONLY0:       if.then2899:
// SIMD-ONLY0-NEXT:    [[TMP1098:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1098]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2900]]
// SIMD-ONLY0:       if.end2900:
// SIMD-ONLY0-NEXT:    [[TMP1099:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1100:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2901:%.*]] = icmp slt i32 [[TMP1099]], [[TMP1100]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2901]], label [[IF_THEN2903:%.*]], label [[IF_END2904:%.*]]
// SIMD-ONLY0:       if.then2903:
// SIMD-ONLY0-NEXT:    [[TMP1101:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1101]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2904]]
// SIMD-ONLY0:       if.end2904:
// SIMD-ONLY0-NEXT:    [[TMP1102:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1103:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2905:%.*]] = icmp sgt i32 [[TMP1102]], [[TMP1103]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2905]], label [[IF_THEN2907:%.*]], label [[IF_END2908:%.*]]
// SIMD-ONLY0:       if.then2907:
// SIMD-ONLY0-NEXT:    [[TMP1104:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1104]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2908]]
// SIMD-ONLY0:       if.end2908:
// SIMD-ONLY0-NEXT:    [[TMP1105:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1106:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2909:%.*]] = icmp slt i32 [[TMP1105]], [[TMP1106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2909]], label [[IF_THEN2911:%.*]], label [[IF_END2912:%.*]]
// SIMD-ONLY0:       if.then2911:
// SIMD-ONLY0-NEXT:    [[TMP1107:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1107]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2912]]
// SIMD-ONLY0:       if.end2912:
// SIMD-ONLY0-NEXT:    [[TMP1108:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1109:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2913:%.*]] = icmp eq i32 [[TMP1108]], [[TMP1109]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2913]], label [[COND_TRUE2915:%.*]], label [[COND_FALSE2916:%.*]]
// SIMD-ONLY0:       cond.true2915:
// SIMD-ONLY0-NEXT:    [[TMP1110:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2917:%.*]]
// SIMD-ONLY0:       cond.false2916:
// SIMD-ONLY0-NEXT:    [[TMP1111:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2917]]
// SIMD-ONLY0:       cond.end2917:
// SIMD-ONLY0-NEXT:    [[COND2918:%.*]] = phi i32 [ [[TMP1110]], [[COND_TRUE2915]] ], [ [[TMP1111]], [[COND_FALSE2916]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2918]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1112:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1113:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2919:%.*]] = icmp eq i32 [[TMP1112]], [[TMP1113]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2919]], label [[COND_TRUE2921:%.*]], label [[COND_FALSE2922:%.*]]
// SIMD-ONLY0:       cond.true2921:
// SIMD-ONLY0-NEXT:    [[TMP1114:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2923:%.*]]
// SIMD-ONLY0:       cond.false2922:
// SIMD-ONLY0-NEXT:    [[TMP1115:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2923]]
// SIMD-ONLY0:       cond.end2923:
// SIMD-ONLY0-NEXT:    [[COND2924:%.*]] = phi i32 [ [[TMP1114]], [[COND_TRUE2921]] ], [ [[TMP1115]], [[COND_FALSE2922]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2924]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1116:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1117:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2925:%.*]] = icmp eq i32 [[TMP1116]], [[TMP1117]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2925]], label [[IF_THEN2927:%.*]], label [[IF_END2928:%.*]]
// SIMD-ONLY0:       if.then2927:
// SIMD-ONLY0-NEXT:    [[TMP1118:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1118]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2928]]
// SIMD-ONLY0:       if.end2928:
// SIMD-ONLY0-NEXT:    [[TMP1119:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1120:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2929:%.*]] = icmp eq i32 [[TMP1119]], [[TMP1120]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2929]], label [[IF_THEN2931:%.*]], label [[IF_END2932:%.*]]
// SIMD-ONLY0:       if.then2931:
// SIMD-ONLY0-NEXT:    [[TMP1121:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1121]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2932]]
// SIMD-ONLY0:       if.end2932:
// SIMD-ONLY0-NEXT:    [[TMP1122:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1123:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2933:%.*]] = icmp ugt i32 [[TMP1122]], [[TMP1123]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2933]], label [[COND_TRUE2935:%.*]], label [[COND_FALSE2936:%.*]]
// SIMD-ONLY0:       cond.true2935:
// SIMD-ONLY0-NEXT:    [[TMP1124:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2937:%.*]]
// SIMD-ONLY0:       cond.false2936:
// SIMD-ONLY0-NEXT:    [[TMP1125:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2937]]
// SIMD-ONLY0:       cond.end2937:
// SIMD-ONLY0-NEXT:    [[COND2938:%.*]] = phi i32 [ [[TMP1124]], [[COND_TRUE2935]] ], [ [[TMP1125]], [[COND_FALSE2936]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2938]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1126:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1127:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2939:%.*]] = icmp ult i32 [[TMP1126]], [[TMP1127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2939]], label [[COND_TRUE2941:%.*]], label [[COND_FALSE2942:%.*]]
// SIMD-ONLY0:       cond.true2941:
// SIMD-ONLY0-NEXT:    [[TMP1128:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2943:%.*]]
// SIMD-ONLY0:       cond.false2942:
// SIMD-ONLY0-NEXT:    [[TMP1129:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2943]]
// SIMD-ONLY0:       cond.end2943:
// SIMD-ONLY0-NEXT:    [[COND2944:%.*]] = phi i32 [ [[TMP1128]], [[COND_TRUE2941]] ], [ [[TMP1129]], [[COND_FALSE2942]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2944]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1130:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1131:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2945:%.*]] = icmp ugt i32 [[TMP1130]], [[TMP1131]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2945]], label [[COND_TRUE2947:%.*]], label [[COND_FALSE2948:%.*]]
// SIMD-ONLY0:       cond.true2947:
// SIMD-ONLY0-NEXT:    [[TMP1132:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2949:%.*]]
// SIMD-ONLY0:       cond.false2948:
// SIMD-ONLY0-NEXT:    [[TMP1133:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2949]]
// SIMD-ONLY0:       cond.end2949:
// SIMD-ONLY0-NEXT:    [[COND2950:%.*]] = phi i32 [ [[TMP1132]], [[COND_TRUE2947]] ], [ [[TMP1133]], [[COND_FALSE2948]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2950]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1134:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1135:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2951:%.*]] = icmp ult i32 [[TMP1134]], [[TMP1135]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2951]], label [[COND_TRUE2953:%.*]], label [[COND_FALSE2954:%.*]]
// SIMD-ONLY0:       cond.true2953:
// SIMD-ONLY0-NEXT:    [[TMP1136:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2955:%.*]]
// SIMD-ONLY0:       cond.false2954:
// SIMD-ONLY0-NEXT:    [[TMP1137:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2955]]
// SIMD-ONLY0:       cond.end2955:
// SIMD-ONLY0-NEXT:    [[COND2956:%.*]] = phi i32 [ [[TMP1136]], [[COND_TRUE2953]] ], [ [[TMP1137]], [[COND_FALSE2954]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2956]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1138:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1139:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2957:%.*]] = icmp ugt i32 [[TMP1138]], [[TMP1139]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2957]], label [[IF_THEN2959:%.*]], label [[IF_END2960:%.*]]
// SIMD-ONLY0:       if.then2959:
// SIMD-ONLY0-NEXT:    [[TMP1140:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1140]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2960]]
// SIMD-ONLY0:       if.end2960:
// SIMD-ONLY0-NEXT:    [[TMP1141:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1142:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2961:%.*]] = icmp ult i32 [[TMP1141]], [[TMP1142]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2961]], label [[IF_THEN2963:%.*]], label [[IF_END2964:%.*]]
// SIMD-ONLY0:       if.then2963:
// SIMD-ONLY0-NEXT:    [[TMP1143:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1143]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2964]]
// SIMD-ONLY0:       if.end2964:
// SIMD-ONLY0-NEXT:    [[TMP1144:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1145:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2965:%.*]] = icmp ugt i32 [[TMP1144]], [[TMP1145]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2965]], label [[IF_THEN2967:%.*]], label [[IF_END2968:%.*]]
// SIMD-ONLY0:       if.then2967:
// SIMD-ONLY0-NEXT:    [[TMP1146:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1146]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2968]]
// SIMD-ONLY0:       if.end2968:
// SIMD-ONLY0-NEXT:    [[TMP1147:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1148:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2969:%.*]] = icmp ult i32 [[TMP1147]], [[TMP1148]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2969]], label [[IF_THEN2971:%.*]], label [[IF_END2972:%.*]]
// SIMD-ONLY0:       if.then2971:
// SIMD-ONLY0-NEXT:    [[TMP1149:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1149]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2972]]
// SIMD-ONLY0:       if.end2972:
// SIMD-ONLY0-NEXT:    [[TMP1150:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1151:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2973:%.*]] = icmp eq i32 [[TMP1150]], [[TMP1151]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2973]], label [[COND_TRUE2975:%.*]], label [[COND_FALSE2976:%.*]]
// SIMD-ONLY0:       cond.true2975:
// SIMD-ONLY0-NEXT:    [[TMP1152:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2977:%.*]]
// SIMD-ONLY0:       cond.false2976:
// SIMD-ONLY0-NEXT:    [[TMP1153:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2977]]
// SIMD-ONLY0:       cond.end2977:
// SIMD-ONLY0-NEXT:    [[COND2978:%.*]] = phi i32 [ [[TMP1152]], [[COND_TRUE2975]] ], [ [[TMP1153]], [[COND_FALSE2976]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2978]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1154:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1155:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2979:%.*]] = icmp eq i32 [[TMP1154]], [[TMP1155]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2979]], label [[COND_TRUE2981:%.*]], label [[COND_FALSE2982:%.*]]
// SIMD-ONLY0:       cond.true2981:
// SIMD-ONLY0-NEXT:    [[TMP1156:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2983:%.*]]
// SIMD-ONLY0:       cond.false2982:
// SIMD-ONLY0-NEXT:    [[TMP1157:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2983]]
// SIMD-ONLY0:       cond.end2983:
// SIMD-ONLY0-NEXT:    [[COND2984:%.*]] = phi i32 [ [[TMP1156]], [[COND_TRUE2981]] ], [ [[TMP1157]], [[COND_FALSE2982]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2984]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1158:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1159:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2985:%.*]] = icmp eq i32 [[TMP1158]], [[TMP1159]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2985]], label [[IF_THEN2987:%.*]], label [[IF_END2988:%.*]]
// SIMD-ONLY0:       if.then2987:
// SIMD-ONLY0-NEXT:    [[TMP1160:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1160]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2988]]
// SIMD-ONLY0:       if.end2988:
// SIMD-ONLY0-NEXT:    [[TMP1161:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1162:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2989:%.*]] = icmp eq i32 [[TMP1161]], [[TMP1162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2989]], label [[IF_THEN2991:%.*]], label [[IF_END2992:%.*]]
// SIMD-ONLY0:       if.then2991:
// SIMD-ONLY0-NEXT:    [[TMP1163:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1163]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END2992]]
// SIMD-ONLY0:       if.end2992:
// SIMD-ONLY0-NEXT:    [[TMP1164:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1165:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2993:%.*]] = icmp sgt i32 [[TMP1164]], [[TMP1165]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2993]], label [[COND_TRUE2995:%.*]], label [[COND_FALSE2996:%.*]]
// SIMD-ONLY0:       cond.true2995:
// SIMD-ONLY0-NEXT:    [[TMP1166:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2997:%.*]]
// SIMD-ONLY0:       cond.false2996:
// SIMD-ONLY0-NEXT:    [[TMP1167:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END2997]]
// SIMD-ONLY0:       cond.end2997:
// SIMD-ONLY0-NEXT:    [[COND2998:%.*]] = phi i32 [ [[TMP1166]], [[COND_TRUE2995]] ], [ [[TMP1167]], [[COND_FALSE2996]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND2998]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1168:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1169:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP2999:%.*]] = icmp slt i32 [[TMP1168]], [[TMP1169]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2999]], label [[COND_TRUE3001:%.*]], label [[COND_FALSE3002:%.*]]
// SIMD-ONLY0:       cond.true3001:
// SIMD-ONLY0-NEXT:    [[TMP1170:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3003:%.*]]
// SIMD-ONLY0:       cond.false3002:
// SIMD-ONLY0-NEXT:    [[TMP1171:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3003]]
// SIMD-ONLY0:       cond.end3003:
// SIMD-ONLY0-NEXT:    [[COND3004:%.*]] = phi i32 [ [[TMP1170]], [[COND_TRUE3001]] ], [ [[TMP1171]], [[COND_FALSE3002]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3004]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1172:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1173:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3005:%.*]] = icmp sgt i32 [[TMP1172]], [[TMP1173]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3005]], label [[COND_TRUE3007:%.*]], label [[COND_FALSE3008:%.*]]
// SIMD-ONLY0:       cond.true3007:
// SIMD-ONLY0-NEXT:    [[TMP1174:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3009:%.*]]
// SIMD-ONLY0:       cond.false3008:
// SIMD-ONLY0-NEXT:    [[TMP1175:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3009]]
// SIMD-ONLY0:       cond.end3009:
// SIMD-ONLY0-NEXT:    [[COND3010:%.*]] = phi i32 [ [[TMP1174]], [[COND_TRUE3007]] ], [ [[TMP1175]], [[COND_FALSE3008]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3010]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1176:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1177:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3011:%.*]] = icmp slt i32 [[TMP1176]], [[TMP1177]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3011]], label [[COND_TRUE3013:%.*]], label [[COND_FALSE3014:%.*]]
// SIMD-ONLY0:       cond.true3013:
// SIMD-ONLY0-NEXT:    [[TMP1178:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3015:%.*]]
// SIMD-ONLY0:       cond.false3014:
// SIMD-ONLY0-NEXT:    [[TMP1179:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3015]]
// SIMD-ONLY0:       cond.end3015:
// SIMD-ONLY0-NEXT:    [[COND3016:%.*]] = phi i32 [ [[TMP1178]], [[COND_TRUE3013]] ], [ [[TMP1179]], [[COND_FALSE3014]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3016]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1180:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1181:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3017:%.*]] = icmp sgt i32 [[TMP1180]], [[TMP1181]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3017]], label [[IF_THEN3019:%.*]], label [[IF_END3020:%.*]]
// SIMD-ONLY0:       if.then3019:
// SIMD-ONLY0-NEXT:    [[TMP1182:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1182]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3020]]
// SIMD-ONLY0:       if.end3020:
// SIMD-ONLY0-NEXT:    [[TMP1183:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1184:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3021:%.*]] = icmp slt i32 [[TMP1183]], [[TMP1184]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3021]], label [[IF_THEN3023:%.*]], label [[IF_END3024:%.*]]
// SIMD-ONLY0:       if.then3023:
// SIMD-ONLY0-NEXT:    [[TMP1185:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1185]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3024]]
// SIMD-ONLY0:       if.end3024:
// SIMD-ONLY0-NEXT:    [[TMP1186:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1187:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3025:%.*]] = icmp sgt i32 [[TMP1186]], [[TMP1187]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3025]], label [[IF_THEN3027:%.*]], label [[IF_END3028:%.*]]
// SIMD-ONLY0:       if.then3027:
// SIMD-ONLY0-NEXT:    [[TMP1188:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1188]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3028]]
// SIMD-ONLY0:       if.end3028:
// SIMD-ONLY0-NEXT:    [[TMP1189:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1190:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3029:%.*]] = icmp slt i32 [[TMP1189]], [[TMP1190]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3029]], label [[IF_THEN3031:%.*]], label [[IF_END3032:%.*]]
// SIMD-ONLY0:       if.then3031:
// SIMD-ONLY0-NEXT:    [[TMP1191:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1191]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3032]]
// SIMD-ONLY0:       if.end3032:
// SIMD-ONLY0-NEXT:    [[TMP1192:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1193:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3033:%.*]] = icmp eq i32 [[TMP1192]], [[TMP1193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3033]], label [[COND_TRUE3035:%.*]], label [[COND_FALSE3036:%.*]]
// SIMD-ONLY0:       cond.true3035:
// SIMD-ONLY0-NEXT:    [[TMP1194:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3037:%.*]]
// SIMD-ONLY0:       cond.false3036:
// SIMD-ONLY0-NEXT:    [[TMP1195:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3037]]
// SIMD-ONLY0:       cond.end3037:
// SIMD-ONLY0-NEXT:    [[COND3038:%.*]] = phi i32 [ [[TMP1194]], [[COND_TRUE3035]] ], [ [[TMP1195]], [[COND_FALSE3036]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3038]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1196:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1197:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3039:%.*]] = icmp eq i32 [[TMP1196]], [[TMP1197]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3039]], label [[COND_TRUE3041:%.*]], label [[COND_FALSE3042:%.*]]
// SIMD-ONLY0:       cond.true3041:
// SIMD-ONLY0-NEXT:    [[TMP1198:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3043:%.*]]
// SIMD-ONLY0:       cond.false3042:
// SIMD-ONLY0-NEXT:    [[TMP1199:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3043]]
// SIMD-ONLY0:       cond.end3043:
// SIMD-ONLY0-NEXT:    [[COND3044:%.*]] = phi i32 [ [[TMP1198]], [[COND_TRUE3041]] ], [ [[TMP1199]], [[COND_FALSE3042]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3044]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1200:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1201:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3045:%.*]] = icmp eq i32 [[TMP1200]], [[TMP1201]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3045]], label [[IF_THEN3047:%.*]], label [[IF_END3048:%.*]]
// SIMD-ONLY0:       if.then3047:
// SIMD-ONLY0-NEXT:    [[TMP1202:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1202]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3048]]
// SIMD-ONLY0:       if.end3048:
// SIMD-ONLY0-NEXT:    [[TMP1203:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1204:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3049:%.*]] = icmp eq i32 [[TMP1203]], [[TMP1204]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3049]], label [[IF_THEN3051:%.*]], label [[IF_END3052:%.*]]
// SIMD-ONLY0:       if.then3051:
// SIMD-ONLY0-NEXT:    [[TMP1205:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1205]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3052]]
// SIMD-ONLY0:       if.end3052:
// SIMD-ONLY0-NEXT:    [[TMP1206:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1207:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3053:%.*]] = icmp ugt i32 [[TMP1206]], [[TMP1207]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3053]], label [[COND_TRUE3055:%.*]], label [[COND_FALSE3056:%.*]]
// SIMD-ONLY0:       cond.true3055:
// SIMD-ONLY0-NEXT:    [[TMP1208:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3057:%.*]]
// SIMD-ONLY0:       cond.false3056:
// SIMD-ONLY0-NEXT:    [[TMP1209:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3057]]
// SIMD-ONLY0:       cond.end3057:
// SIMD-ONLY0-NEXT:    [[COND3058:%.*]] = phi i32 [ [[TMP1208]], [[COND_TRUE3055]] ], [ [[TMP1209]], [[COND_FALSE3056]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3058]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1210:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1211:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3059:%.*]] = icmp ult i32 [[TMP1210]], [[TMP1211]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3059]], label [[COND_TRUE3061:%.*]], label [[COND_FALSE3062:%.*]]
// SIMD-ONLY0:       cond.true3061:
// SIMD-ONLY0-NEXT:    [[TMP1212:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3063:%.*]]
// SIMD-ONLY0:       cond.false3062:
// SIMD-ONLY0-NEXT:    [[TMP1213:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3063]]
// SIMD-ONLY0:       cond.end3063:
// SIMD-ONLY0-NEXT:    [[COND3064:%.*]] = phi i32 [ [[TMP1212]], [[COND_TRUE3061]] ], [ [[TMP1213]], [[COND_FALSE3062]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3064]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1214:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1215:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3065:%.*]] = icmp ugt i32 [[TMP1214]], [[TMP1215]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3065]], label [[COND_TRUE3067:%.*]], label [[COND_FALSE3068:%.*]]
// SIMD-ONLY0:       cond.true3067:
// SIMD-ONLY0-NEXT:    [[TMP1216:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3069:%.*]]
// SIMD-ONLY0:       cond.false3068:
// SIMD-ONLY0-NEXT:    [[TMP1217:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3069]]
// SIMD-ONLY0:       cond.end3069:
// SIMD-ONLY0-NEXT:    [[COND3070:%.*]] = phi i32 [ [[TMP1216]], [[COND_TRUE3067]] ], [ [[TMP1217]], [[COND_FALSE3068]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3070]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1218:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1219:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3071:%.*]] = icmp ult i32 [[TMP1218]], [[TMP1219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3071]], label [[COND_TRUE3073:%.*]], label [[COND_FALSE3074:%.*]]
// SIMD-ONLY0:       cond.true3073:
// SIMD-ONLY0-NEXT:    [[TMP1220:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3075:%.*]]
// SIMD-ONLY0:       cond.false3074:
// SIMD-ONLY0-NEXT:    [[TMP1221:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3075]]
// SIMD-ONLY0:       cond.end3075:
// SIMD-ONLY0-NEXT:    [[COND3076:%.*]] = phi i32 [ [[TMP1220]], [[COND_TRUE3073]] ], [ [[TMP1221]], [[COND_FALSE3074]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3076]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1222:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1223:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3077:%.*]] = icmp ugt i32 [[TMP1222]], [[TMP1223]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3077]], label [[IF_THEN3079:%.*]], label [[IF_END3080:%.*]]
// SIMD-ONLY0:       if.then3079:
// SIMD-ONLY0-NEXT:    [[TMP1224:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1224]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3080]]
// SIMD-ONLY0:       if.end3080:
// SIMD-ONLY0-NEXT:    [[TMP1225:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1226:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3081:%.*]] = icmp ult i32 [[TMP1225]], [[TMP1226]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3081]], label [[IF_THEN3083:%.*]], label [[IF_END3084:%.*]]
// SIMD-ONLY0:       if.then3083:
// SIMD-ONLY0-NEXT:    [[TMP1227:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1227]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3084]]
// SIMD-ONLY0:       if.end3084:
// SIMD-ONLY0-NEXT:    [[TMP1228:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1229:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3085:%.*]] = icmp ugt i32 [[TMP1228]], [[TMP1229]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3085]], label [[IF_THEN3087:%.*]], label [[IF_END3088:%.*]]
// SIMD-ONLY0:       if.then3087:
// SIMD-ONLY0-NEXT:    [[TMP1230:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1230]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3088]]
// SIMD-ONLY0:       if.end3088:
// SIMD-ONLY0-NEXT:    [[TMP1231:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1232:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3089:%.*]] = icmp ult i32 [[TMP1231]], [[TMP1232]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3089]], label [[IF_THEN3091:%.*]], label [[IF_END3092:%.*]]
// SIMD-ONLY0:       if.then3091:
// SIMD-ONLY0-NEXT:    [[TMP1233:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1233]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3092]]
// SIMD-ONLY0:       if.end3092:
// SIMD-ONLY0-NEXT:    [[TMP1234:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1235:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3093:%.*]] = icmp eq i32 [[TMP1234]], [[TMP1235]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3093]], label [[COND_TRUE3095:%.*]], label [[COND_FALSE3096:%.*]]
// SIMD-ONLY0:       cond.true3095:
// SIMD-ONLY0-NEXT:    [[TMP1236:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3097:%.*]]
// SIMD-ONLY0:       cond.false3096:
// SIMD-ONLY0-NEXT:    [[TMP1237:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3097]]
// SIMD-ONLY0:       cond.end3097:
// SIMD-ONLY0-NEXT:    [[COND3098:%.*]] = phi i32 [ [[TMP1236]], [[COND_TRUE3095]] ], [ [[TMP1237]], [[COND_FALSE3096]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3098]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1238:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1239:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3099:%.*]] = icmp eq i32 [[TMP1238]], [[TMP1239]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3099]], label [[COND_TRUE3101:%.*]], label [[COND_FALSE3102:%.*]]
// SIMD-ONLY0:       cond.true3101:
// SIMD-ONLY0-NEXT:    [[TMP1240:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3103:%.*]]
// SIMD-ONLY0:       cond.false3102:
// SIMD-ONLY0-NEXT:    [[TMP1241:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3103]]
// SIMD-ONLY0:       cond.end3103:
// SIMD-ONLY0-NEXT:    [[COND3104:%.*]] = phi i32 [ [[TMP1240]], [[COND_TRUE3101]] ], [ [[TMP1241]], [[COND_FALSE3102]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3104]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1242:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1243:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3105:%.*]] = icmp eq i32 [[TMP1242]], [[TMP1243]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3105]], label [[IF_THEN3107:%.*]], label [[IF_END3108:%.*]]
// SIMD-ONLY0:       if.then3107:
// SIMD-ONLY0-NEXT:    [[TMP1244:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1244]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3108]]
// SIMD-ONLY0:       if.end3108:
// SIMD-ONLY0-NEXT:    [[TMP1245:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1246:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3109:%.*]] = icmp eq i32 [[TMP1245]], [[TMP1246]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3109]], label [[IF_THEN3111:%.*]], label [[IF_END3112:%.*]]
// SIMD-ONLY0:       if.then3111:
// SIMD-ONLY0-NEXT:    [[TMP1247:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1247]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3112]]
// SIMD-ONLY0:       if.end3112:
// SIMD-ONLY0-NEXT:    [[TMP1248:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1249:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3113:%.*]] = icmp sgt i32 [[TMP1248]], [[TMP1249]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3113]], label [[COND_TRUE3115:%.*]], label [[COND_FALSE3116:%.*]]
// SIMD-ONLY0:       cond.true3115:
// SIMD-ONLY0-NEXT:    [[TMP1250:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3117:%.*]]
// SIMD-ONLY0:       cond.false3116:
// SIMD-ONLY0-NEXT:    [[TMP1251:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3117]]
// SIMD-ONLY0:       cond.end3117:
// SIMD-ONLY0-NEXT:    [[COND3118:%.*]] = phi i32 [ [[TMP1250]], [[COND_TRUE3115]] ], [ [[TMP1251]], [[COND_FALSE3116]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3118]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1252:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1253:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3119:%.*]] = icmp slt i32 [[TMP1252]], [[TMP1253]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3119]], label [[COND_TRUE3121:%.*]], label [[COND_FALSE3122:%.*]]
// SIMD-ONLY0:       cond.true3121:
// SIMD-ONLY0-NEXT:    [[TMP1254:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3123:%.*]]
// SIMD-ONLY0:       cond.false3122:
// SIMD-ONLY0-NEXT:    [[TMP1255:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3123]]
// SIMD-ONLY0:       cond.end3123:
// SIMD-ONLY0-NEXT:    [[COND3124:%.*]] = phi i32 [ [[TMP1254]], [[COND_TRUE3121]] ], [ [[TMP1255]], [[COND_FALSE3122]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3124]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1256:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1257:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3125:%.*]] = icmp sgt i32 [[TMP1256]], [[TMP1257]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3125]], label [[COND_TRUE3127:%.*]], label [[COND_FALSE3128:%.*]]
// SIMD-ONLY0:       cond.true3127:
// SIMD-ONLY0-NEXT:    [[TMP1258:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3129:%.*]]
// SIMD-ONLY0:       cond.false3128:
// SIMD-ONLY0-NEXT:    [[TMP1259:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3129]]
// SIMD-ONLY0:       cond.end3129:
// SIMD-ONLY0-NEXT:    [[COND3130:%.*]] = phi i32 [ [[TMP1258]], [[COND_TRUE3127]] ], [ [[TMP1259]], [[COND_FALSE3128]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3130]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1260:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1261:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3131:%.*]] = icmp slt i32 [[TMP1260]], [[TMP1261]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3131]], label [[COND_TRUE3133:%.*]], label [[COND_FALSE3134:%.*]]
// SIMD-ONLY0:       cond.true3133:
// SIMD-ONLY0-NEXT:    [[TMP1262:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3135:%.*]]
// SIMD-ONLY0:       cond.false3134:
// SIMD-ONLY0-NEXT:    [[TMP1263:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3135]]
// SIMD-ONLY0:       cond.end3135:
// SIMD-ONLY0-NEXT:    [[COND3136:%.*]] = phi i32 [ [[TMP1262]], [[COND_TRUE3133]] ], [ [[TMP1263]], [[COND_FALSE3134]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3136]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1264:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1265:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3137:%.*]] = icmp sgt i32 [[TMP1264]], [[TMP1265]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3137]], label [[IF_THEN3139:%.*]], label [[IF_END3140:%.*]]
// SIMD-ONLY0:       if.then3139:
// SIMD-ONLY0-NEXT:    [[TMP1266:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1266]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3140]]
// SIMD-ONLY0:       if.end3140:
// SIMD-ONLY0-NEXT:    [[TMP1267:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1268:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3141:%.*]] = icmp slt i32 [[TMP1267]], [[TMP1268]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3141]], label [[IF_THEN3143:%.*]], label [[IF_END3144:%.*]]
// SIMD-ONLY0:       if.then3143:
// SIMD-ONLY0-NEXT:    [[TMP1269:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1269]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3144]]
// SIMD-ONLY0:       if.end3144:
// SIMD-ONLY0-NEXT:    [[TMP1270:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1271:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3145:%.*]] = icmp sgt i32 [[TMP1270]], [[TMP1271]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3145]], label [[IF_THEN3147:%.*]], label [[IF_END3148:%.*]]
// SIMD-ONLY0:       if.then3147:
// SIMD-ONLY0-NEXT:    [[TMP1272:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1272]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3148]]
// SIMD-ONLY0:       if.end3148:
// SIMD-ONLY0-NEXT:    [[TMP1273:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1274:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3149:%.*]] = icmp slt i32 [[TMP1273]], [[TMP1274]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3149]], label [[IF_THEN3151:%.*]], label [[IF_END3152:%.*]]
// SIMD-ONLY0:       if.then3151:
// SIMD-ONLY0-NEXT:    [[TMP1275:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1275]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3152]]
// SIMD-ONLY0:       if.end3152:
// SIMD-ONLY0-NEXT:    [[TMP1276:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1277:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3153:%.*]] = icmp eq i32 [[TMP1276]], [[TMP1277]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3153]], label [[COND_TRUE3155:%.*]], label [[COND_FALSE3156:%.*]]
// SIMD-ONLY0:       cond.true3155:
// SIMD-ONLY0-NEXT:    [[TMP1278:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3157:%.*]]
// SIMD-ONLY0:       cond.false3156:
// SIMD-ONLY0-NEXT:    [[TMP1279:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3157]]
// SIMD-ONLY0:       cond.end3157:
// SIMD-ONLY0-NEXT:    [[COND3158:%.*]] = phi i32 [ [[TMP1278]], [[COND_TRUE3155]] ], [ [[TMP1279]], [[COND_FALSE3156]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3158]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1280:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1281:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3159:%.*]] = icmp eq i32 [[TMP1280]], [[TMP1281]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3159]], label [[COND_TRUE3161:%.*]], label [[COND_FALSE3162:%.*]]
// SIMD-ONLY0:       cond.true3161:
// SIMD-ONLY0-NEXT:    [[TMP1282:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3163:%.*]]
// SIMD-ONLY0:       cond.false3162:
// SIMD-ONLY0-NEXT:    [[TMP1283:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3163]]
// SIMD-ONLY0:       cond.end3163:
// SIMD-ONLY0-NEXT:    [[COND3164:%.*]] = phi i32 [ [[TMP1282]], [[COND_TRUE3161]] ], [ [[TMP1283]], [[COND_FALSE3162]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3164]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1284:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1285:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3165:%.*]] = icmp eq i32 [[TMP1284]], [[TMP1285]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3165]], label [[IF_THEN3167:%.*]], label [[IF_END3168:%.*]]
// SIMD-ONLY0:       if.then3167:
// SIMD-ONLY0-NEXT:    [[TMP1286:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1286]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3168]]
// SIMD-ONLY0:       if.end3168:
// SIMD-ONLY0-NEXT:    [[TMP1287:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1288:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3169:%.*]] = icmp eq i32 [[TMP1287]], [[TMP1288]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3169]], label [[IF_THEN3171:%.*]], label [[IF_END3172:%.*]]
// SIMD-ONLY0:       if.then3171:
// SIMD-ONLY0-NEXT:    [[TMP1289:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1289]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3172]]
// SIMD-ONLY0:       if.end3172:
// SIMD-ONLY0-NEXT:    [[TMP1290:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1291:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3173:%.*]] = icmp ugt i32 [[TMP1290]], [[TMP1291]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3173]], label [[COND_TRUE3175:%.*]], label [[COND_FALSE3176:%.*]]
// SIMD-ONLY0:       cond.true3175:
// SIMD-ONLY0-NEXT:    [[TMP1292:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3177:%.*]]
// SIMD-ONLY0:       cond.false3176:
// SIMD-ONLY0-NEXT:    [[TMP1293:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3177]]
// SIMD-ONLY0:       cond.end3177:
// SIMD-ONLY0-NEXT:    [[COND3178:%.*]] = phi i32 [ [[TMP1292]], [[COND_TRUE3175]] ], [ [[TMP1293]], [[COND_FALSE3176]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3178]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1294:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1295:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3179:%.*]] = icmp ult i32 [[TMP1294]], [[TMP1295]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3179]], label [[COND_TRUE3181:%.*]], label [[COND_FALSE3182:%.*]]
// SIMD-ONLY0:       cond.true3181:
// SIMD-ONLY0-NEXT:    [[TMP1296:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3183:%.*]]
// SIMD-ONLY0:       cond.false3182:
// SIMD-ONLY0-NEXT:    [[TMP1297:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3183]]
// SIMD-ONLY0:       cond.end3183:
// SIMD-ONLY0-NEXT:    [[COND3184:%.*]] = phi i32 [ [[TMP1296]], [[COND_TRUE3181]] ], [ [[TMP1297]], [[COND_FALSE3182]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3184]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1298:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1299:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3185:%.*]] = icmp ugt i32 [[TMP1298]], [[TMP1299]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3185]], label [[COND_TRUE3187:%.*]], label [[COND_FALSE3188:%.*]]
// SIMD-ONLY0:       cond.true3187:
// SIMD-ONLY0-NEXT:    [[TMP1300:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3189:%.*]]
// SIMD-ONLY0:       cond.false3188:
// SIMD-ONLY0-NEXT:    [[TMP1301:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3189]]
// SIMD-ONLY0:       cond.end3189:
// SIMD-ONLY0-NEXT:    [[COND3190:%.*]] = phi i32 [ [[TMP1300]], [[COND_TRUE3187]] ], [ [[TMP1301]], [[COND_FALSE3188]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3190]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1302:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1303:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3191:%.*]] = icmp ult i32 [[TMP1302]], [[TMP1303]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3191]], label [[COND_TRUE3193:%.*]], label [[COND_FALSE3194:%.*]]
// SIMD-ONLY0:       cond.true3193:
// SIMD-ONLY0-NEXT:    [[TMP1304:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3195:%.*]]
// SIMD-ONLY0:       cond.false3194:
// SIMD-ONLY0-NEXT:    [[TMP1305:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3195]]
// SIMD-ONLY0:       cond.end3195:
// SIMD-ONLY0-NEXT:    [[COND3196:%.*]] = phi i32 [ [[TMP1304]], [[COND_TRUE3193]] ], [ [[TMP1305]], [[COND_FALSE3194]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3196]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1306:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1307:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3197:%.*]] = icmp ugt i32 [[TMP1306]], [[TMP1307]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3197]], label [[IF_THEN3199:%.*]], label [[IF_END3200:%.*]]
// SIMD-ONLY0:       if.then3199:
// SIMD-ONLY0-NEXT:    [[TMP1308:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1308]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3200]]
// SIMD-ONLY0:       if.end3200:
// SIMD-ONLY0-NEXT:    [[TMP1309:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1310:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3201:%.*]] = icmp ult i32 [[TMP1309]], [[TMP1310]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3201]], label [[IF_THEN3203:%.*]], label [[IF_END3204:%.*]]
// SIMD-ONLY0:       if.then3203:
// SIMD-ONLY0-NEXT:    [[TMP1311:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1311]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3204]]
// SIMD-ONLY0:       if.end3204:
// SIMD-ONLY0-NEXT:    [[TMP1312:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1313:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3205:%.*]] = icmp ugt i32 [[TMP1312]], [[TMP1313]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3205]], label [[IF_THEN3207:%.*]], label [[IF_END3208:%.*]]
// SIMD-ONLY0:       if.then3207:
// SIMD-ONLY0-NEXT:    [[TMP1314:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1314]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3208]]
// SIMD-ONLY0:       if.end3208:
// SIMD-ONLY0-NEXT:    [[TMP1315:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1316:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3209:%.*]] = icmp ult i32 [[TMP1315]], [[TMP1316]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3209]], label [[IF_THEN3211:%.*]], label [[IF_END3212:%.*]]
// SIMD-ONLY0:       if.then3211:
// SIMD-ONLY0-NEXT:    [[TMP1317:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1317]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3212]]
// SIMD-ONLY0:       if.end3212:
// SIMD-ONLY0-NEXT:    [[TMP1318:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1319:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3213:%.*]] = icmp eq i32 [[TMP1318]], [[TMP1319]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3213]], label [[COND_TRUE3215:%.*]], label [[COND_FALSE3216:%.*]]
// SIMD-ONLY0:       cond.true3215:
// SIMD-ONLY0-NEXT:    [[TMP1320:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3217:%.*]]
// SIMD-ONLY0:       cond.false3216:
// SIMD-ONLY0-NEXT:    [[TMP1321:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3217]]
// SIMD-ONLY0:       cond.end3217:
// SIMD-ONLY0-NEXT:    [[COND3218:%.*]] = phi i32 [ [[TMP1320]], [[COND_TRUE3215]] ], [ [[TMP1321]], [[COND_FALSE3216]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3218]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1322:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1323:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3219:%.*]] = icmp eq i32 [[TMP1322]], [[TMP1323]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3219]], label [[COND_TRUE3221:%.*]], label [[COND_FALSE3222:%.*]]
// SIMD-ONLY0:       cond.true3221:
// SIMD-ONLY0-NEXT:    [[TMP1324:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3223:%.*]]
// SIMD-ONLY0:       cond.false3222:
// SIMD-ONLY0-NEXT:    [[TMP1325:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3223]]
// SIMD-ONLY0:       cond.end3223:
// SIMD-ONLY0-NEXT:    [[COND3224:%.*]] = phi i32 [ [[TMP1324]], [[COND_TRUE3221]] ], [ [[TMP1325]], [[COND_FALSE3222]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3224]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1326:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1327:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3225:%.*]] = icmp eq i32 [[TMP1326]], [[TMP1327]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3225]], label [[IF_THEN3227:%.*]], label [[IF_END3228:%.*]]
// SIMD-ONLY0:       if.then3227:
// SIMD-ONLY0-NEXT:    [[TMP1328:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1328]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3228]]
// SIMD-ONLY0:       if.end3228:
// SIMD-ONLY0-NEXT:    [[TMP1329:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1330:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3229:%.*]] = icmp eq i32 [[TMP1329]], [[TMP1330]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3229]], label [[IF_THEN3231:%.*]], label [[IF_END3232:%.*]]
// SIMD-ONLY0:       if.then3231:
// SIMD-ONLY0-NEXT:    [[TMP1331:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1331]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3232]]
// SIMD-ONLY0:       if.end3232:
// SIMD-ONLY0-NEXT:    [[TMP1332:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1333:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3233:%.*]] = icmp sgt i32 [[TMP1332]], [[TMP1333]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3233]], label [[COND_TRUE3235:%.*]], label [[COND_FALSE3236:%.*]]
// SIMD-ONLY0:       cond.true3235:
// SIMD-ONLY0-NEXT:    [[TMP1334:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3237:%.*]]
// SIMD-ONLY0:       cond.false3236:
// SIMD-ONLY0-NEXT:    [[TMP1335:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3237]]
// SIMD-ONLY0:       cond.end3237:
// SIMD-ONLY0-NEXT:    [[COND3238:%.*]] = phi i32 [ [[TMP1334]], [[COND_TRUE3235]] ], [ [[TMP1335]], [[COND_FALSE3236]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3238]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1336:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1337:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3239:%.*]] = icmp slt i32 [[TMP1336]], [[TMP1337]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3239]], label [[COND_TRUE3241:%.*]], label [[COND_FALSE3242:%.*]]
// SIMD-ONLY0:       cond.true3241:
// SIMD-ONLY0-NEXT:    [[TMP1338:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3243:%.*]]
// SIMD-ONLY0:       cond.false3242:
// SIMD-ONLY0-NEXT:    [[TMP1339:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3243]]
// SIMD-ONLY0:       cond.end3243:
// SIMD-ONLY0-NEXT:    [[COND3244:%.*]] = phi i32 [ [[TMP1338]], [[COND_TRUE3241]] ], [ [[TMP1339]], [[COND_FALSE3242]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3244]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1340:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1341:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3245:%.*]] = icmp sgt i32 [[TMP1340]], [[TMP1341]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3245]], label [[COND_TRUE3247:%.*]], label [[COND_FALSE3248:%.*]]
// SIMD-ONLY0:       cond.true3247:
// SIMD-ONLY0-NEXT:    [[TMP1342:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3249:%.*]]
// SIMD-ONLY0:       cond.false3248:
// SIMD-ONLY0-NEXT:    [[TMP1343:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3249]]
// SIMD-ONLY0:       cond.end3249:
// SIMD-ONLY0-NEXT:    [[COND3250:%.*]] = phi i32 [ [[TMP1342]], [[COND_TRUE3247]] ], [ [[TMP1343]], [[COND_FALSE3248]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3250]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1344:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1345:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3251:%.*]] = icmp slt i32 [[TMP1344]], [[TMP1345]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3251]], label [[COND_TRUE3253:%.*]], label [[COND_FALSE3254:%.*]]
// SIMD-ONLY0:       cond.true3253:
// SIMD-ONLY0-NEXT:    [[TMP1346:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3255:%.*]]
// SIMD-ONLY0:       cond.false3254:
// SIMD-ONLY0-NEXT:    [[TMP1347:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3255]]
// SIMD-ONLY0:       cond.end3255:
// SIMD-ONLY0-NEXT:    [[COND3256:%.*]] = phi i32 [ [[TMP1346]], [[COND_TRUE3253]] ], [ [[TMP1347]], [[COND_FALSE3254]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3256]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1348:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1349:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3257:%.*]] = icmp sgt i32 [[TMP1348]], [[TMP1349]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3257]], label [[IF_THEN3259:%.*]], label [[IF_END3260:%.*]]
// SIMD-ONLY0:       if.then3259:
// SIMD-ONLY0-NEXT:    [[TMP1350:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1350]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3260]]
// SIMD-ONLY0:       if.end3260:
// SIMD-ONLY0-NEXT:    [[TMP1351:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1352:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3261:%.*]] = icmp slt i32 [[TMP1351]], [[TMP1352]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3261]], label [[IF_THEN3263:%.*]], label [[IF_END3264:%.*]]
// SIMD-ONLY0:       if.then3263:
// SIMD-ONLY0-NEXT:    [[TMP1353:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1353]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3264]]
// SIMD-ONLY0:       if.end3264:
// SIMD-ONLY0-NEXT:    [[TMP1354:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1355:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3265:%.*]] = icmp sgt i32 [[TMP1354]], [[TMP1355]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3265]], label [[IF_THEN3267:%.*]], label [[IF_END3268:%.*]]
// SIMD-ONLY0:       if.then3267:
// SIMD-ONLY0-NEXT:    [[TMP1356:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1356]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3268]]
// SIMD-ONLY0:       if.end3268:
// SIMD-ONLY0-NEXT:    [[TMP1357:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1358:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3269:%.*]] = icmp slt i32 [[TMP1357]], [[TMP1358]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3269]], label [[IF_THEN3271:%.*]], label [[IF_END3272:%.*]]
// SIMD-ONLY0:       if.then3271:
// SIMD-ONLY0-NEXT:    [[TMP1359:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1359]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3272]]
// SIMD-ONLY0:       if.end3272:
// SIMD-ONLY0-NEXT:    [[TMP1360:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1361:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3273:%.*]] = icmp eq i32 [[TMP1360]], [[TMP1361]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3273]], label [[COND_TRUE3275:%.*]], label [[COND_FALSE3276:%.*]]
// SIMD-ONLY0:       cond.true3275:
// SIMD-ONLY0-NEXT:    [[TMP1362:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3277:%.*]]
// SIMD-ONLY0:       cond.false3276:
// SIMD-ONLY0-NEXT:    [[TMP1363:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3277]]
// SIMD-ONLY0:       cond.end3277:
// SIMD-ONLY0-NEXT:    [[COND3278:%.*]] = phi i32 [ [[TMP1362]], [[COND_TRUE3275]] ], [ [[TMP1363]], [[COND_FALSE3276]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3278]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1364:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1365:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3279:%.*]] = icmp eq i32 [[TMP1364]], [[TMP1365]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3279]], label [[COND_TRUE3281:%.*]], label [[COND_FALSE3282:%.*]]
// SIMD-ONLY0:       cond.true3281:
// SIMD-ONLY0-NEXT:    [[TMP1366:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3283:%.*]]
// SIMD-ONLY0:       cond.false3282:
// SIMD-ONLY0-NEXT:    [[TMP1367:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3283]]
// SIMD-ONLY0:       cond.end3283:
// SIMD-ONLY0-NEXT:    [[COND3284:%.*]] = phi i32 [ [[TMP1366]], [[COND_TRUE3281]] ], [ [[TMP1367]], [[COND_FALSE3282]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3284]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1368:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1369:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3285:%.*]] = icmp eq i32 [[TMP1368]], [[TMP1369]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3285]], label [[IF_THEN3287:%.*]], label [[IF_END3288:%.*]]
// SIMD-ONLY0:       if.then3287:
// SIMD-ONLY0-NEXT:    [[TMP1370:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1370]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3288]]
// SIMD-ONLY0:       if.end3288:
// SIMD-ONLY0-NEXT:    [[TMP1371:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1372:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3289:%.*]] = icmp eq i32 [[TMP1371]], [[TMP1372]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3289]], label [[IF_THEN3291:%.*]], label [[IF_END3292:%.*]]
// SIMD-ONLY0:       if.then3291:
// SIMD-ONLY0-NEXT:    [[TMP1373:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1373]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3292]]
// SIMD-ONLY0:       if.end3292:
// SIMD-ONLY0-NEXT:    [[TMP1374:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1375:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3293:%.*]] = icmp ugt i32 [[TMP1374]], [[TMP1375]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3293]], label [[COND_TRUE3295:%.*]], label [[COND_FALSE3296:%.*]]
// SIMD-ONLY0:       cond.true3295:
// SIMD-ONLY0-NEXT:    [[TMP1376:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3297:%.*]]
// SIMD-ONLY0:       cond.false3296:
// SIMD-ONLY0-NEXT:    [[TMP1377:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3297]]
// SIMD-ONLY0:       cond.end3297:
// SIMD-ONLY0-NEXT:    [[COND3298:%.*]] = phi i32 [ [[TMP1376]], [[COND_TRUE3295]] ], [ [[TMP1377]], [[COND_FALSE3296]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3298]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1378:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1379:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3299:%.*]] = icmp ult i32 [[TMP1378]], [[TMP1379]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3299]], label [[COND_TRUE3301:%.*]], label [[COND_FALSE3302:%.*]]
// SIMD-ONLY0:       cond.true3301:
// SIMD-ONLY0-NEXT:    [[TMP1380:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3303:%.*]]
// SIMD-ONLY0:       cond.false3302:
// SIMD-ONLY0-NEXT:    [[TMP1381:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3303]]
// SIMD-ONLY0:       cond.end3303:
// SIMD-ONLY0-NEXT:    [[COND3304:%.*]] = phi i32 [ [[TMP1380]], [[COND_TRUE3301]] ], [ [[TMP1381]], [[COND_FALSE3302]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3304]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1382:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1383:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3305:%.*]] = icmp ugt i32 [[TMP1382]], [[TMP1383]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3305]], label [[COND_TRUE3307:%.*]], label [[COND_FALSE3308:%.*]]
// SIMD-ONLY0:       cond.true3307:
// SIMD-ONLY0-NEXT:    [[TMP1384:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3309:%.*]]
// SIMD-ONLY0:       cond.false3308:
// SIMD-ONLY0-NEXT:    [[TMP1385:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3309]]
// SIMD-ONLY0:       cond.end3309:
// SIMD-ONLY0-NEXT:    [[COND3310:%.*]] = phi i32 [ [[TMP1384]], [[COND_TRUE3307]] ], [ [[TMP1385]], [[COND_FALSE3308]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3310]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1386:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1387:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3311:%.*]] = icmp ult i32 [[TMP1386]], [[TMP1387]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3311]], label [[COND_TRUE3313:%.*]], label [[COND_FALSE3314:%.*]]
// SIMD-ONLY0:       cond.true3313:
// SIMD-ONLY0-NEXT:    [[TMP1388:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3315:%.*]]
// SIMD-ONLY0:       cond.false3314:
// SIMD-ONLY0-NEXT:    [[TMP1389:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3315]]
// SIMD-ONLY0:       cond.end3315:
// SIMD-ONLY0-NEXT:    [[COND3316:%.*]] = phi i32 [ [[TMP1388]], [[COND_TRUE3313]] ], [ [[TMP1389]], [[COND_FALSE3314]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3316]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1390:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1391:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3317:%.*]] = icmp ugt i32 [[TMP1390]], [[TMP1391]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3317]], label [[IF_THEN3319:%.*]], label [[IF_END3320:%.*]]
// SIMD-ONLY0:       if.then3319:
// SIMD-ONLY0-NEXT:    [[TMP1392:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1392]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3320]]
// SIMD-ONLY0:       if.end3320:
// SIMD-ONLY0-NEXT:    [[TMP1393:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1394:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3321:%.*]] = icmp ult i32 [[TMP1393]], [[TMP1394]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3321]], label [[IF_THEN3323:%.*]], label [[IF_END3324:%.*]]
// SIMD-ONLY0:       if.then3323:
// SIMD-ONLY0-NEXT:    [[TMP1395:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1395]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3324]]
// SIMD-ONLY0:       if.end3324:
// SIMD-ONLY0-NEXT:    [[TMP1396:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1397:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3325:%.*]] = icmp ugt i32 [[TMP1396]], [[TMP1397]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3325]], label [[IF_THEN3327:%.*]], label [[IF_END3328:%.*]]
// SIMD-ONLY0:       if.then3327:
// SIMD-ONLY0-NEXT:    [[TMP1398:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1398]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3328]]
// SIMD-ONLY0:       if.end3328:
// SIMD-ONLY0-NEXT:    [[TMP1399:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1400:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3329:%.*]] = icmp ult i32 [[TMP1399]], [[TMP1400]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3329]], label [[IF_THEN3331:%.*]], label [[IF_END3332:%.*]]
// SIMD-ONLY0:       if.then3331:
// SIMD-ONLY0-NEXT:    [[TMP1401:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1401]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3332]]
// SIMD-ONLY0:       if.end3332:
// SIMD-ONLY0-NEXT:    [[TMP1402:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1403:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3333:%.*]] = icmp eq i32 [[TMP1402]], [[TMP1403]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3333]], label [[COND_TRUE3335:%.*]], label [[COND_FALSE3336:%.*]]
// SIMD-ONLY0:       cond.true3335:
// SIMD-ONLY0-NEXT:    [[TMP1404:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3337:%.*]]
// SIMD-ONLY0:       cond.false3336:
// SIMD-ONLY0-NEXT:    [[TMP1405:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3337]]
// SIMD-ONLY0:       cond.end3337:
// SIMD-ONLY0-NEXT:    [[COND3338:%.*]] = phi i32 [ [[TMP1404]], [[COND_TRUE3335]] ], [ [[TMP1405]], [[COND_FALSE3336]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3338]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1406:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1407:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3339:%.*]] = icmp eq i32 [[TMP1406]], [[TMP1407]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3339]], label [[COND_TRUE3341:%.*]], label [[COND_FALSE3342:%.*]]
// SIMD-ONLY0:       cond.true3341:
// SIMD-ONLY0-NEXT:    [[TMP1408:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3343:%.*]]
// SIMD-ONLY0:       cond.false3342:
// SIMD-ONLY0-NEXT:    [[TMP1409:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3343]]
// SIMD-ONLY0:       cond.end3343:
// SIMD-ONLY0-NEXT:    [[COND3344:%.*]] = phi i32 [ [[TMP1408]], [[COND_TRUE3341]] ], [ [[TMP1409]], [[COND_FALSE3342]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3344]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1410:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1411:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3345:%.*]] = icmp eq i32 [[TMP1410]], [[TMP1411]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3345]], label [[IF_THEN3347:%.*]], label [[IF_END3348:%.*]]
// SIMD-ONLY0:       if.then3347:
// SIMD-ONLY0-NEXT:    [[TMP1412:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1412]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3348]]
// SIMD-ONLY0:       if.end3348:
// SIMD-ONLY0-NEXT:    [[TMP1413:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1414:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3349:%.*]] = icmp eq i32 [[TMP1413]], [[TMP1414]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3349]], label [[IF_THEN3351:%.*]], label [[IF_END3352:%.*]]
// SIMD-ONLY0:       if.then3351:
// SIMD-ONLY0-NEXT:    [[TMP1415:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1415]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3352]]
// SIMD-ONLY0:       if.end3352:
// SIMD-ONLY0-NEXT:    [[TMP1416:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1417:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3353:%.*]] = icmp sgt i32 [[TMP1416]], [[TMP1417]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3353]], label [[COND_TRUE3355:%.*]], label [[COND_FALSE3356:%.*]]
// SIMD-ONLY0:       cond.true3355:
// SIMD-ONLY0-NEXT:    [[TMP1418:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3357:%.*]]
// SIMD-ONLY0:       cond.false3356:
// SIMD-ONLY0-NEXT:    [[TMP1419:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3357]]
// SIMD-ONLY0:       cond.end3357:
// SIMD-ONLY0-NEXT:    [[COND3358:%.*]] = phi i32 [ [[TMP1418]], [[COND_TRUE3355]] ], [ [[TMP1419]], [[COND_FALSE3356]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3358]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1420:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1421:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3359:%.*]] = icmp slt i32 [[TMP1420]], [[TMP1421]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3359]], label [[COND_TRUE3361:%.*]], label [[COND_FALSE3362:%.*]]
// SIMD-ONLY0:       cond.true3361:
// SIMD-ONLY0-NEXT:    [[TMP1422:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3363:%.*]]
// SIMD-ONLY0:       cond.false3362:
// SIMD-ONLY0-NEXT:    [[TMP1423:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3363]]
// SIMD-ONLY0:       cond.end3363:
// SIMD-ONLY0-NEXT:    [[COND3364:%.*]] = phi i32 [ [[TMP1422]], [[COND_TRUE3361]] ], [ [[TMP1423]], [[COND_FALSE3362]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3364]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1424:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1425:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3365:%.*]] = icmp sgt i32 [[TMP1424]], [[TMP1425]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3365]], label [[COND_TRUE3367:%.*]], label [[COND_FALSE3368:%.*]]
// SIMD-ONLY0:       cond.true3367:
// SIMD-ONLY0-NEXT:    [[TMP1426:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3369:%.*]]
// SIMD-ONLY0:       cond.false3368:
// SIMD-ONLY0-NEXT:    [[TMP1427:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3369]]
// SIMD-ONLY0:       cond.end3369:
// SIMD-ONLY0-NEXT:    [[COND3370:%.*]] = phi i32 [ [[TMP1426]], [[COND_TRUE3367]] ], [ [[TMP1427]], [[COND_FALSE3368]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3370]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1428:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1429:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3371:%.*]] = icmp slt i32 [[TMP1428]], [[TMP1429]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3371]], label [[COND_TRUE3373:%.*]], label [[COND_FALSE3374:%.*]]
// SIMD-ONLY0:       cond.true3373:
// SIMD-ONLY0-NEXT:    [[TMP1430:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3375:%.*]]
// SIMD-ONLY0:       cond.false3374:
// SIMD-ONLY0-NEXT:    [[TMP1431:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3375]]
// SIMD-ONLY0:       cond.end3375:
// SIMD-ONLY0-NEXT:    [[COND3376:%.*]] = phi i32 [ [[TMP1430]], [[COND_TRUE3373]] ], [ [[TMP1431]], [[COND_FALSE3374]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3376]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1432:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1433:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3377:%.*]] = icmp sgt i32 [[TMP1432]], [[TMP1433]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3377]], label [[IF_THEN3379:%.*]], label [[IF_END3380:%.*]]
// SIMD-ONLY0:       if.then3379:
// SIMD-ONLY0-NEXT:    [[TMP1434:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1434]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3380]]
// SIMD-ONLY0:       if.end3380:
// SIMD-ONLY0-NEXT:    [[TMP1435:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1436:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3381:%.*]] = icmp slt i32 [[TMP1435]], [[TMP1436]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3381]], label [[IF_THEN3383:%.*]], label [[IF_END3384:%.*]]
// SIMD-ONLY0:       if.then3383:
// SIMD-ONLY0-NEXT:    [[TMP1437:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1437]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3384]]
// SIMD-ONLY0:       if.end3384:
// SIMD-ONLY0-NEXT:    [[TMP1438:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1439:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3385:%.*]] = icmp sgt i32 [[TMP1438]], [[TMP1439]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3385]], label [[IF_THEN3387:%.*]], label [[IF_END3388:%.*]]
// SIMD-ONLY0:       if.then3387:
// SIMD-ONLY0-NEXT:    [[TMP1440:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1440]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3388]]
// SIMD-ONLY0:       if.end3388:
// SIMD-ONLY0-NEXT:    [[TMP1441:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1442:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3389:%.*]] = icmp slt i32 [[TMP1441]], [[TMP1442]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3389]], label [[IF_THEN3391:%.*]], label [[IF_END3392:%.*]]
// SIMD-ONLY0:       if.then3391:
// SIMD-ONLY0-NEXT:    [[TMP1443:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1443]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3392]]
// SIMD-ONLY0:       if.end3392:
// SIMD-ONLY0-NEXT:    [[TMP1444:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1445:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3393:%.*]] = icmp eq i32 [[TMP1444]], [[TMP1445]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3393]], label [[COND_TRUE3395:%.*]], label [[COND_FALSE3396:%.*]]
// SIMD-ONLY0:       cond.true3395:
// SIMD-ONLY0-NEXT:    [[TMP1446:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3397:%.*]]
// SIMD-ONLY0:       cond.false3396:
// SIMD-ONLY0-NEXT:    [[TMP1447:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3397]]
// SIMD-ONLY0:       cond.end3397:
// SIMD-ONLY0-NEXT:    [[COND3398:%.*]] = phi i32 [ [[TMP1446]], [[COND_TRUE3395]] ], [ [[TMP1447]], [[COND_FALSE3396]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3398]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1448:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1449:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3399:%.*]] = icmp eq i32 [[TMP1448]], [[TMP1449]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3399]], label [[COND_TRUE3401:%.*]], label [[COND_FALSE3402:%.*]]
// SIMD-ONLY0:       cond.true3401:
// SIMD-ONLY0-NEXT:    [[TMP1450:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3403:%.*]]
// SIMD-ONLY0:       cond.false3402:
// SIMD-ONLY0-NEXT:    [[TMP1451:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3403]]
// SIMD-ONLY0:       cond.end3403:
// SIMD-ONLY0-NEXT:    [[COND3404:%.*]] = phi i32 [ [[TMP1450]], [[COND_TRUE3401]] ], [ [[TMP1451]], [[COND_FALSE3402]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3404]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1452:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1453:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3405:%.*]] = icmp eq i32 [[TMP1452]], [[TMP1453]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3405]], label [[IF_THEN3407:%.*]], label [[IF_END3408:%.*]]
// SIMD-ONLY0:       if.then3407:
// SIMD-ONLY0-NEXT:    [[TMP1454:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1454]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3408]]
// SIMD-ONLY0:       if.end3408:
// SIMD-ONLY0-NEXT:    [[TMP1455:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1456:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3409:%.*]] = icmp eq i32 [[TMP1455]], [[TMP1456]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3409]], label [[IF_THEN3411:%.*]], label [[IF_END3412:%.*]]
// SIMD-ONLY0:       if.then3411:
// SIMD-ONLY0-NEXT:    [[TMP1457:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1457]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3412]]
// SIMD-ONLY0:       if.end3412:
// SIMD-ONLY0-NEXT:    [[TMP1458:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1459:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3413:%.*]] = icmp ugt i32 [[TMP1458]], [[TMP1459]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3413]], label [[COND_TRUE3415:%.*]], label [[COND_FALSE3416:%.*]]
// SIMD-ONLY0:       cond.true3415:
// SIMD-ONLY0-NEXT:    [[TMP1460:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3417:%.*]]
// SIMD-ONLY0:       cond.false3416:
// SIMD-ONLY0-NEXT:    [[TMP1461:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3417]]
// SIMD-ONLY0:       cond.end3417:
// SIMD-ONLY0-NEXT:    [[COND3418:%.*]] = phi i32 [ [[TMP1460]], [[COND_TRUE3415]] ], [ [[TMP1461]], [[COND_FALSE3416]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3418]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1462:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1463:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3419:%.*]] = icmp ult i32 [[TMP1462]], [[TMP1463]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3419]], label [[COND_TRUE3421:%.*]], label [[COND_FALSE3422:%.*]]
// SIMD-ONLY0:       cond.true3421:
// SIMD-ONLY0-NEXT:    [[TMP1464:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3423:%.*]]
// SIMD-ONLY0:       cond.false3422:
// SIMD-ONLY0-NEXT:    [[TMP1465:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3423]]
// SIMD-ONLY0:       cond.end3423:
// SIMD-ONLY0-NEXT:    [[COND3424:%.*]] = phi i32 [ [[TMP1464]], [[COND_TRUE3421]] ], [ [[TMP1465]], [[COND_FALSE3422]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3424]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1466:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1467:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3425:%.*]] = icmp ugt i32 [[TMP1466]], [[TMP1467]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3425]], label [[COND_TRUE3427:%.*]], label [[COND_FALSE3428:%.*]]
// SIMD-ONLY0:       cond.true3427:
// SIMD-ONLY0-NEXT:    [[TMP1468:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3429:%.*]]
// SIMD-ONLY0:       cond.false3428:
// SIMD-ONLY0-NEXT:    [[TMP1469:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3429]]
// SIMD-ONLY0:       cond.end3429:
// SIMD-ONLY0-NEXT:    [[COND3430:%.*]] = phi i32 [ [[TMP1468]], [[COND_TRUE3427]] ], [ [[TMP1469]], [[COND_FALSE3428]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3430]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1470:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1471:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3431:%.*]] = icmp ult i32 [[TMP1470]], [[TMP1471]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3431]], label [[COND_TRUE3433:%.*]], label [[COND_FALSE3434:%.*]]
// SIMD-ONLY0:       cond.true3433:
// SIMD-ONLY0-NEXT:    [[TMP1472:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3435:%.*]]
// SIMD-ONLY0:       cond.false3434:
// SIMD-ONLY0-NEXT:    [[TMP1473:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3435]]
// SIMD-ONLY0:       cond.end3435:
// SIMD-ONLY0-NEXT:    [[COND3436:%.*]] = phi i32 [ [[TMP1472]], [[COND_TRUE3433]] ], [ [[TMP1473]], [[COND_FALSE3434]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3436]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1474:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1475:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3437:%.*]] = icmp ugt i32 [[TMP1474]], [[TMP1475]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3437]], label [[IF_THEN3439:%.*]], label [[IF_END3440:%.*]]
// SIMD-ONLY0:       if.then3439:
// SIMD-ONLY0-NEXT:    [[TMP1476:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1476]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3440]]
// SIMD-ONLY0:       if.end3440:
// SIMD-ONLY0-NEXT:    [[TMP1477:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1478:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3441:%.*]] = icmp ult i32 [[TMP1477]], [[TMP1478]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3441]], label [[IF_THEN3443:%.*]], label [[IF_END3444:%.*]]
// SIMD-ONLY0:       if.then3443:
// SIMD-ONLY0-NEXT:    [[TMP1479:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1479]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3444]]
// SIMD-ONLY0:       if.end3444:
// SIMD-ONLY0-NEXT:    [[TMP1480:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1481:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3445:%.*]] = icmp ugt i32 [[TMP1480]], [[TMP1481]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3445]], label [[IF_THEN3447:%.*]], label [[IF_END3448:%.*]]
// SIMD-ONLY0:       if.then3447:
// SIMD-ONLY0-NEXT:    [[TMP1482:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1482]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3448]]
// SIMD-ONLY0:       if.end3448:
// SIMD-ONLY0-NEXT:    [[TMP1483:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1484:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3449:%.*]] = icmp ult i32 [[TMP1483]], [[TMP1484]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3449]], label [[IF_THEN3451:%.*]], label [[IF_END3452:%.*]]
// SIMD-ONLY0:       if.then3451:
// SIMD-ONLY0-NEXT:    [[TMP1485:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1485]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3452]]
// SIMD-ONLY0:       if.end3452:
// SIMD-ONLY0-NEXT:    [[TMP1486:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1487:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3453:%.*]] = icmp eq i32 [[TMP1486]], [[TMP1487]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3453]], label [[COND_TRUE3455:%.*]], label [[COND_FALSE3456:%.*]]
// SIMD-ONLY0:       cond.true3455:
// SIMD-ONLY0-NEXT:    [[TMP1488:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3457:%.*]]
// SIMD-ONLY0:       cond.false3456:
// SIMD-ONLY0-NEXT:    [[TMP1489:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3457]]
// SIMD-ONLY0:       cond.end3457:
// SIMD-ONLY0-NEXT:    [[COND3458:%.*]] = phi i32 [ [[TMP1488]], [[COND_TRUE3455]] ], [ [[TMP1489]], [[COND_FALSE3456]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3458]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1490:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1491:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3459:%.*]] = icmp eq i32 [[TMP1490]], [[TMP1491]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3459]], label [[COND_TRUE3461:%.*]], label [[COND_FALSE3462:%.*]]
// SIMD-ONLY0:       cond.true3461:
// SIMD-ONLY0-NEXT:    [[TMP1492:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3463:%.*]]
// SIMD-ONLY0:       cond.false3462:
// SIMD-ONLY0-NEXT:    [[TMP1493:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3463]]
// SIMD-ONLY0:       cond.end3463:
// SIMD-ONLY0-NEXT:    [[COND3464:%.*]] = phi i32 [ [[TMP1492]], [[COND_TRUE3461]] ], [ [[TMP1493]], [[COND_FALSE3462]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3464]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1494:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1495:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3465:%.*]] = icmp eq i32 [[TMP1494]], [[TMP1495]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3465]], label [[IF_THEN3467:%.*]], label [[IF_END3468:%.*]]
// SIMD-ONLY0:       if.then3467:
// SIMD-ONLY0-NEXT:    [[TMP1496:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1496]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3468]]
// SIMD-ONLY0:       if.end3468:
// SIMD-ONLY0-NEXT:    [[TMP1497:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1498:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3469:%.*]] = icmp eq i32 [[TMP1497]], [[TMP1498]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3469]], label [[IF_THEN3471:%.*]], label [[IF_END3472:%.*]]
// SIMD-ONLY0:       if.then3471:
// SIMD-ONLY0-NEXT:    [[TMP1499:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1499]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3472]]
// SIMD-ONLY0:       if.end3472:
// SIMD-ONLY0-NEXT:    [[TMP1500:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1501:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3473:%.*]] = icmp sgt i32 [[TMP1500]], [[TMP1501]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3473]], label [[COND_TRUE3475:%.*]], label [[COND_FALSE3476:%.*]]
// SIMD-ONLY0:       cond.true3475:
// SIMD-ONLY0-NEXT:    [[TMP1502:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3477:%.*]]
// SIMD-ONLY0:       cond.false3476:
// SIMD-ONLY0-NEXT:    [[TMP1503:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3477]]
// SIMD-ONLY0:       cond.end3477:
// SIMD-ONLY0-NEXT:    [[COND3478:%.*]] = phi i32 [ [[TMP1502]], [[COND_TRUE3475]] ], [ [[TMP1503]], [[COND_FALSE3476]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3478]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1504:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1505:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3479:%.*]] = icmp slt i32 [[TMP1504]], [[TMP1505]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3479]], label [[COND_TRUE3481:%.*]], label [[COND_FALSE3482:%.*]]
// SIMD-ONLY0:       cond.true3481:
// SIMD-ONLY0-NEXT:    [[TMP1506:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3483:%.*]]
// SIMD-ONLY0:       cond.false3482:
// SIMD-ONLY0-NEXT:    [[TMP1507:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3483]]
// SIMD-ONLY0:       cond.end3483:
// SIMD-ONLY0-NEXT:    [[COND3484:%.*]] = phi i32 [ [[TMP1506]], [[COND_TRUE3481]] ], [ [[TMP1507]], [[COND_FALSE3482]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3484]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1508:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1509:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3485:%.*]] = icmp sgt i32 [[TMP1508]], [[TMP1509]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3485]], label [[COND_TRUE3487:%.*]], label [[COND_FALSE3488:%.*]]
// SIMD-ONLY0:       cond.true3487:
// SIMD-ONLY0-NEXT:    [[TMP1510:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3489:%.*]]
// SIMD-ONLY0:       cond.false3488:
// SIMD-ONLY0-NEXT:    [[TMP1511:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3489]]
// SIMD-ONLY0:       cond.end3489:
// SIMD-ONLY0-NEXT:    [[COND3490:%.*]] = phi i32 [ [[TMP1510]], [[COND_TRUE3487]] ], [ [[TMP1511]], [[COND_FALSE3488]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3490]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1512:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1513:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3491:%.*]] = icmp slt i32 [[TMP1512]], [[TMP1513]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3491]], label [[COND_TRUE3493:%.*]], label [[COND_FALSE3494:%.*]]
// SIMD-ONLY0:       cond.true3493:
// SIMD-ONLY0-NEXT:    [[TMP1514:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3495:%.*]]
// SIMD-ONLY0:       cond.false3494:
// SIMD-ONLY0-NEXT:    [[TMP1515:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3495]]
// SIMD-ONLY0:       cond.end3495:
// SIMD-ONLY0-NEXT:    [[COND3496:%.*]] = phi i32 [ [[TMP1514]], [[COND_TRUE3493]] ], [ [[TMP1515]], [[COND_FALSE3494]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3496]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1516:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1517:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3497:%.*]] = icmp sgt i32 [[TMP1516]], [[TMP1517]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3497]], label [[IF_THEN3499:%.*]], label [[IF_END3500:%.*]]
// SIMD-ONLY0:       if.then3499:
// SIMD-ONLY0-NEXT:    [[TMP1518:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1518]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3500]]
// SIMD-ONLY0:       if.end3500:
// SIMD-ONLY0-NEXT:    [[TMP1519:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1520:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3501:%.*]] = icmp slt i32 [[TMP1519]], [[TMP1520]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3501]], label [[IF_THEN3503:%.*]], label [[IF_END3504:%.*]]
// SIMD-ONLY0:       if.then3503:
// SIMD-ONLY0-NEXT:    [[TMP1521:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1521]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3504]]
// SIMD-ONLY0:       if.end3504:
// SIMD-ONLY0-NEXT:    [[TMP1522:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1523:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3505:%.*]] = icmp sgt i32 [[TMP1522]], [[TMP1523]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3505]], label [[IF_THEN3507:%.*]], label [[IF_END3508:%.*]]
// SIMD-ONLY0:       if.then3507:
// SIMD-ONLY0-NEXT:    [[TMP1524:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1524]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3508]]
// SIMD-ONLY0:       if.end3508:
// SIMD-ONLY0-NEXT:    [[TMP1525:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1526:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3509:%.*]] = icmp slt i32 [[TMP1525]], [[TMP1526]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3509]], label [[IF_THEN3511:%.*]], label [[IF_END3512:%.*]]
// SIMD-ONLY0:       if.then3511:
// SIMD-ONLY0-NEXT:    [[TMP1527:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1527]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3512]]
// SIMD-ONLY0:       if.end3512:
// SIMD-ONLY0-NEXT:    [[TMP1528:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1529:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3513:%.*]] = icmp eq i32 [[TMP1528]], [[TMP1529]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3513]], label [[COND_TRUE3515:%.*]], label [[COND_FALSE3516:%.*]]
// SIMD-ONLY0:       cond.true3515:
// SIMD-ONLY0-NEXT:    [[TMP1530:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3517:%.*]]
// SIMD-ONLY0:       cond.false3516:
// SIMD-ONLY0-NEXT:    [[TMP1531:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3517]]
// SIMD-ONLY0:       cond.end3517:
// SIMD-ONLY0-NEXT:    [[COND3518:%.*]] = phi i32 [ [[TMP1530]], [[COND_TRUE3515]] ], [ [[TMP1531]], [[COND_FALSE3516]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3518]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1532:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1533:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3519:%.*]] = icmp eq i32 [[TMP1532]], [[TMP1533]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3519]], label [[COND_TRUE3521:%.*]], label [[COND_FALSE3522:%.*]]
// SIMD-ONLY0:       cond.true3521:
// SIMD-ONLY0-NEXT:    [[TMP1534:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3523:%.*]]
// SIMD-ONLY0:       cond.false3522:
// SIMD-ONLY0-NEXT:    [[TMP1535:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3523]]
// SIMD-ONLY0:       cond.end3523:
// SIMD-ONLY0-NEXT:    [[COND3524:%.*]] = phi i32 [ [[TMP1534]], [[COND_TRUE3521]] ], [ [[TMP1535]], [[COND_FALSE3522]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3524]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1536:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1537:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3525:%.*]] = icmp eq i32 [[TMP1536]], [[TMP1537]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3525]], label [[IF_THEN3527:%.*]], label [[IF_END3528:%.*]]
// SIMD-ONLY0:       if.then3527:
// SIMD-ONLY0-NEXT:    [[TMP1538:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1538]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3528]]
// SIMD-ONLY0:       if.end3528:
// SIMD-ONLY0-NEXT:    [[TMP1539:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1540:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3529:%.*]] = icmp eq i32 [[TMP1539]], [[TMP1540]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3529]], label [[IF_THEN3531:%.*]], label [[IF_END3532:%.*]]
// SIMD-ONLY0:       if.then3531:
// SIMD-ONLY0-NEXT:    [[TMP1541:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1541]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3532]]
// SIMD-ONLY0:       if.end3532:
// SIMD-ONLY0-NEXT:    [[TMP1542:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1543:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3533:%.*]] = icmp ugt i32 [[TMP1542]], [[TMP1543]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3533]], label [[COND_TRUE3535:%.*]], label [[COND_FALSE3536:%.*]]
// SIMD-ONLY0:       cond.true3535:
// SIMD-ONLY0-NEXT:    [[TMP1544:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3537:%.*]]
// SIMD-ONLY0:       cond.false3536:
// SIMD-ONLY0-NEXT:    [[TMP1545:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3537]]
// SIMD-ONLY0:       cond.end3537:
// SIMD-ONLY0-NEXT:    [[COND3538:%.*]] = phi i32 [ [[TMP1544]], [[COND_TRUE3535]] ], [ [[TMP1545]], [[COND_FALSE3536]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3538]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1546:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1547:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3539:%.*]] = icmp ult i32 [[TMP1546]], [[TMP1547]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3539]], label [[COND_TRUE3541:%.*]], label [[COND_FALSE3542:%.*]]
// SIMD-ONLY0:       cond.true3541:
// SIMD-ONLY0-NEXT:    [[TMP1548:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3543:%.*]]
// SIMD-ONLY0:       cond.false3542:
// SIMD-ONLY0-NEXT:    [[TMP1549:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3543]]
// SIMD-ONLY0:       cond.end3543:
// SIMD-ONLY0-NEXT:    [[COND3544:%.*]] = phi i32 [ [[TMP1548]], [[COND_TRUE3541]] ], [ [[TMP1549]], [[COND_FALSE3542]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3544]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1550:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1551:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3545:%.*]] = icmp ugt i32 [[TMP1550]], [[TMP1551]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3545]], label [[COND_TRUE3547:%.*]], label [[COND_FALSE3548:%.*]]
// SIMD-ONLY0:       cond.true3547:
// SIMD-ONLY0-NEXT:    [[TMP1552:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3549:%.*]]
// SIMD-ONLY0:       cond.false3548:
// SIMD-ONLY0-NEXT:    [[TMP1553:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3549]]
// SIMD-ONLY0:       cond.end3549:
// SIMD-ONLY0-NEXT:    [[COND3550:%.*]] = phi i32 [ [[TMP1552]], [[COND_TRUE3547]] ], [ [[TMP1553]], [[COND_FALSE3548]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3550]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1554:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1555:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3551:%.*]] = icmp ult i32 [[TMP1554]], [[TMP1555]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3551]], label [[COND_TRUE3553:%.*]], label [[COND_FALSE3554:%.*]]
// SIMD-ONLY0:       cond.true3553:
// SIMD-ONLY0-NEXT:    [[TMP1556:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3555:%.*]]
// SIMD-ONLY0:       cond.false3554:
// SIMD-ONLY0-NEXT:    [[TMP1557:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3555]]
// SIMD-ONLY0:       cond.end3555:
// SIMD-ONLY0-NEXT:    [[COND3556:%.*]] = phi i32 [ [[TMP1556]], [[COND_TRUE3553]] ], [ [[TMP1557]], [[COND_FALSE3554]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3556]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1558:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1559:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3557:%.*]] = icmp ugt i32 [[TMP1558]], [[TMP1559]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3557]], label [[IF_THEN3559:%.*]], label [[IF_END3560:%.*]]
// SIMD-ONLY0:       if.then3559:
// SIMD-ONLY0-NEXT:    [[TMP1560:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1560]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3560]]
// SIMD-ONLY0:       if.end3560:
// SIMD-ONLY0-NEXT:    [[TMP1561:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1562:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3561:%.*]] = icmp ult i32 [[TMP1561]], [[TMP1562]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3561]], label [[IF_THEN3563:%.*]], label [[IF_END3564:%.*]]
// SIMD-ONLY0:       if.then3563:
// SIMD-ONLY0-NEXT:    [[TMP1563:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1563]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3564]]
// SIMD-ONLY0:       if.end3564:
// SIMD-ONLY0-NEXT:    [[TMP1564:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1565:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3565:%.*]] = icmp ugt i32 [[TMP1564]], [[TMP1565]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3565]], label [[IF_THEN3567:%.*]], label [[IF_END3568:%.*]]
// SIMD-ONLY0:       if.then3567:
// SIMD-ONLY0-NEXT:    [[TMP1566:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1566]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3568]]
// SIMD-ONLY0:       if.end3568:
// SIMD-ONLY0-NEXT:    [[TMP1567:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1568:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3569:%.*]] = icmp ult i32 [[TMP1567]], [[TMP1568]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3569]], label [[IF_THEN3571:%.*]], label [[IF_END3572:%.*]]
// SIMD-ONLY0:       if.then3571:
// SIMD-ONLY0-NEXT:    [[TMP1569:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1569]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3572]]
// SIMD-ONLY0:       if.end3572:
// SIMD-ONLY0-NEXT:    [[TMP1570:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1571:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3573:%.*]] = icmp eq i32 [[TMP1570]], [[TMP1571]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3573]], label [[COND_TRUE3575:%.*]], label [[COND_FALSE3576:%.*]]
// SIMD-ONLY0:       cond.true3575:
// SIMD-ONLY0-NEXT:    [[TMP1572:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3577:%.*]]
// SIMD-ONLY0:       cond.false3576:
// SIMD-ONLY0-NEXT:    [[TMP1573:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3577]]
// SIMD-ONLY0:       cond.end3577:
// SIMD-ONLY0-NEXT:    [[COND3578:%.*]] = phi i32 [ [[TMP1572]], [[COND_TRUE3575]] ], [ [[TMP1573]], [[COND_FALSE3576]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3578]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1574:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1575:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3579:%.*]] = icmp eq i32 [[TMP1574]], [[TMP1575]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3579]], label [[COND_TRUE3581:%.*]], label [[COND_FALSE3582:%.*]]
// SIMD-ONLY0:       cond.true3581:
// SIMD-ONLY0-NEXT:    [[TMP1576:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3583:%.*]]
// SIMD-ONLY0:       cond.false3582:
// SIMD-ONLY0-NEXT:    [[TMP1577:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END3583]]
// SIMD-ONLY0:       cond.end3583:
// SIMD-ONLY0-NEXT:    [[COND3584:%.*]] = phi i32 [ [[TMP1576]], [[COND_TRUE3581]] ], [ [[TMP1577]], [[COND_FALSE3582]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND3584]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1578:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1579:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3585:%.*]] = icmp eq i32 [[TMP1578]], [[TMP1579]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3585]], label [[IF_THEN3587:%.*]], label [[IF_END3588:%.*]]
// SIMD-ONLY0:       if.then3587:
// SIMD-ONLY0-NEXT:    [[TMP1580:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1580]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3588]]
// SIMD-ONLY0:       if.end3588:
// SIMD-ONLY0-NEXT:    [[TMP1581:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1582:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3589:%.*]] = icmp eq i32 [[TMP1581]], [[TMP1582]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3589]], label [[IF_THEN3591:%.*]], label [[IF_END3592:%.*]]
// SIMD-ONLY0:       if.then3591:
// SIMD-ONLY0-NEXT:    [[TMP1583:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1583]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3592]]
// SIMD-ONLY0:       if.end3592:
// SIMD-ONLY0-NEXT:    [[TMP1584:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1585:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3593:%.*]] = icmp sgt i64 [[TMP1584]], [[TMP1585]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3593]], label [[COND_TRUE3595:%.*]], label [[COND_FALSE3596:%.*]]
// SIMD-ONLY0:       cond.true3595:
// SIMD-ONLY0-NEXT:    [[TMP1586:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3597:%.*]]
// SIMD-ONLY0:       cond.false3596:
// SIMD-ONLY0-NEXT:    [[TMP1587:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3597]]
// SIMD-ONLY0:       cond.end3597:
// SIMD-ONLY0-NEXT:    [[COND3598:%.*]] = phi i64 [ [[TMP1586]], [[COND_TRUE3595]] ], [ [[TMP1587]], [[COND_FALSE3596]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3598]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1588:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1589:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3599:%.*]] = icmp slt i64 [[TMP1588]], [[TMP1589]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3599]], label [[COND_TRUE3601:%.*]], label [[COND_FALSE3602:%.*]]
// SIMD-ONLY0:       cond.true3601:
// SIMD-ONLY0-NEXT:    [[TMP1590:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3603:%.*]]
// SIMD-ONLY0:       cond.false3602:
// SIMD-ONLY0-NEXT:    [[TMP1591:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3603]]
// SIMD-ONLY0:       cond.end3603:
// SIMD-ONLY0-NEXT:    [[COND3604:%.*]] = phi i64 [ [[TMP1590]], [[COND_TRUE3601]] ], [ [[TMP1591]], [[COND_FALSE3602]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3604]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1592:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1593:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3605:%.*]] = icmp sgt i64 [[TMP1592]], [[TMP1593]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3605]], label [[COND_TRUE3607:%.*]], label [[COND_FALSE3608:%.*]]
// SIMD-ONLY0:       cond.true3607:
// SIMD-ONLY0-NEXT:    [[TMP1594:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3609:%.*]]
// SIMD-ONLY0:       cond.false3608:
// SIMD-ONLY0-NEXT:    [[TMP1595:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3609]]
// SIMD-ONLY0:       cond.end3609:
// SIMD-ONLY0-NEXT:    [[COND3610:%.*]] = phi i64 [ [[TMP1594]], [[COND_TRUE3607]] ], [ [[TMP1595]], [[COND_FALSE3608]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3610]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1596:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1597:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3611:%.*]] = icmp slt i64 [[TMP1596]], [[TMP1597]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3611]], label [[COND_TRUE3613:%.*]], label [[COND_FALSE3614:%.*]]
// SIMD-ONLY0:       cond.true3613:
// SIMD-ONLY0-NEXT:    [[TMP1598:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3615:%.*]]
// SIMD-ONLY0:       cond.false3614:
// SIMD-ONLY0-NEXT:    [[TMP1599:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3615]]
// SIMD-ONLY0:       cond.end3615:
// SIMD-ONLY0-NEXT:    [[COND3616:%.*]] = phi i64 [ [[TMP1598]], [[COND_TRUE3613]] ], [ [[TMP1599]], [[COND_FALSE3614]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3616]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1600:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1601:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3617:%.*]] = icmp sgt i64 [[TMP1600]], [[TMP1601]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3617]], label [[IF_THEN3619:%.*]], label [[IF_END3620:%.*]]
// SIMD-ONLY0:       if.then3619:
// SIMD-ONLY0-NEXT:    [[TMP1602:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1602]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3620]]
// SIMD-ONLY0:       if.end3620:
// SIMD-ONLY0-NEXT:    [[TMP1603:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1604:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3621:%.*]] = icmp slt i64 [[TMP1603]], [[TMP1604]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3621]], label [[IF_THEN3623:%.*]], label [[IF_END3624:%.*]]
// SIMD-ONLY0:       if.then3623:
// SIMD-ONLY0-NEXT:    [[TMP1605:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1605]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3624]]
// SIMD-ONLY0:       if.end3624:
// SIMD-ONLY0-NEXT:    [[TMP1606:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1607:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3625:%.*]] = icmp sgt i64 [[TMP1606]], [[TMP1607]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3625]], label [[IF_THEN3627:%.*]], label [[IF_END3628:%.*]]
// SIMD-ONLY0:       if.then3627:
// SIMD-ONLY0-NEXT:    [[TMP1608:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1608]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3628]]
// SIMD-ONLY0:       if.end3628:
// SIMD-ONLY0-NEXT:    [[TMP1609:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1610:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3629:%.*]] = icmp slt i64 [[TMP1609]], [[TMP1610]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3629]], label [[IF_THEN3631:%.*]], label [[IF_END3632:%.*]]
// SIMD-ONLY0:       if.then3631:
// SIMD-ONLY0-NEXT:    [[TMP1611:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1611]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3632]]
// SIMD-ONLY0:       if.end3632:
// SIMD-ONLY0-NEXT:    [[TMP1612:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1613:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3633:%.*]] = icmp eq i64 [[TMP1612]], [[TMP1613]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3633]], label [[COND_TRUE3635:%.*]], label [[COND_FALSE3636:%.*]]
// SIMD-ONLY0:       cond.true3635:
// SIMD-ONLY0-NEXT:    [[TMP1614:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3637:%.*]]
// SIMD-ONLY0:       cond.false3636:
// SIMD-ONLY0-NEXT:    [[TMP1615:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3637]]
// SIMD-ONLY0:       cond.end3637:
// SIMD-ONLY0-NEXT:    [[COND3638:%.*]] = phi i64 [ [[TMP1614]], [[COND_TRUE3635]] ], [ [[TMP1615]], [[COND_FALSE3636]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3638]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1616:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1617:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3639:%.*]] = icmp eq i64 [[TMP1616]], [[TMP1617]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3639]], label [[COND_TRUE3641:%.*]], label [[COND_FALSE3642:%.*]]
// SIMD-ONLY0:       cond.true3641:
// SIMD-ONLY0-NEXT:    [[TMP1618:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3643:%.*]]
// SIMD-ONLY0:       cond.false3642:
// SIMD-ONLY0-NEXT:    [[TMP1619:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3643]]
// SIMD-ONLY0:       cond.end3643:
// SIMD-ONLY0-NEXT:    [[COND3644:%.*]] = phi i64 [ [[TMP1618]], [[COND_TRUE3641]] ], [ [[TMP1619]], [[COND_FALSE3642]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3644]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1620:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1621:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3645:%.*]] = icmp eq i64 [[TMP1620]], [[TMP1621]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3645]], label [[IF_THEN3647:%.*]], label [[IF_END3648:%.*]]
// SIMD-ONLY0:       if.then3647:
// SIMD-ONLY0-NEXT:    [[TMP1622:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1622]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3648]]
// SIMD-ONLY0:       if.end3648:
// SIMD-ONLY0-NEXT:    [[TMP1623:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1624:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3649:%.*]] = icmp eq i64 [[TMP1623]], [[TMP1624]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3649]], label [[IF_THEN3651:%.*]], label [[IF_END3652:%.*]]
// SIMD-ONLY0:       if.then3651:
// SIMD-ONLY0-NEXT:    [[TMP1625:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1625]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3652]]
// SIMD-ONLY0:       if.end3652:
// SIMD-ONLY0-NEXT:    [[TMP1626:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1627:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3653:%.*]] = icmp ugt i64 [[TMP1626]], [[TMP1627]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3653]], label [[COND_TRUE3655:%.*]], label [[COND_FALSE3656:%.*]]
// SIMD-ONLY0:       cond.true3655:
// SIMD-ONLY0-NEXT:    [[TMP1628:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3657:%.*]]
// SIMD-ONLY0:       cond.false3656:
// SIMD-ONLY0-NEXT:    [[TMP1629:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3657]]
// SIMD-ONLY0:       cond.end3657:
// SIMD-ONLY0-NEXT:    [[COND3658:%.*]] = phi i64 [ [[TMP1628]], [[COND_TRUE3655]] ], [ [[TMP1629]], [[COND_FALSE3656]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3658]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1630:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1631:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3659:%.*]] = icmp ult i64 [[TMP1630]], [[TMP1631]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3659]], label [[COND_TRUE3661:%.*]], label [[COND_FALSE3662:%.*]]
// SIMD-ONLY0:       cond.true3661:
// SIMD-ONLY0-NEXT:    [[TMP1632:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3663:%.*]]
// SIMD-ONLY0:       cond.false3662:
// SIMD-ONLY0-NEXT:    [[TMP1633:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3663]]
// SIMD-ONLY0:       cond.end3663:
// SIMD-ONLY0-NEXT:    [[COND3664:%.*]] = phi i64 [ [[TMP1632]], [[COND_TRUE3661]] ], [ [[TMP1633]], [[COND_FALSE3662]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3664]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1634:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1635:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3665:%.*]] = icmp ugt i64 [[TMP1634]], [[TMP1635]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3665]], label [[COND_TRUE3667:%.*]], label [[COND_FALSE3668:%.*]]
// SIMD-ONLY0:       cond.true3667:
// SIMD-ONLY0-NEXT:    [[TMP1636:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3669:%.*]]
// SIMD-ONLY0:       cond.false3668:
// SIMD-ONLY0-NEXT:    [[TMP1637:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3669]]
// SIMD-ONLY0:       cond.end3669:
// SIMD-ONLY0-NEXT:    [[COND3670:%.*]] = phi i64 [ [[TMP1636]], [[COND_TRUE3667]] ], [ [[TMP1637]], [[COND_FALSE3668]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3670]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1638:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1639:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3671:%.*]] = icmp ult i64 [[TMP1638]], [[TMP1639]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3671]], label [[COND_TRUE3673:%.*]], label [[COND_FALSE3674:%.*]]
// SIMD-ONLY0:       cond.true3673:
// SIMD-ONLY0-NEXT:    [[TMP1640:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3675:%.*]]
// SIMD-ONLY0:       cond.false3674:
// SIMD-ONLY0-NEXT:    [[TMP1641:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3675]]
// SIMD-ONLY0:       cond.end3675:
// SIMD-ONLY0-NEXT:    [[COND3676:%.*]] = phi i64 [ [[TMP1640]], [[COND_TRUE3673]] ], [ [[TMP1641]], [[COND_FALSE3674]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3676]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1642:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1643:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3677:%.*]] = icmp ugt i64 [[TMP1642]], [[TMP1643]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3677]], label [[IF_THEN3679:%.*]], label [[IF_END3680:%.*]]
// SIMD-ONLY0:       if.then3679:
// SIMD-ONLY0-NEXT:    [[TMP1644:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1644]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3680]]
// SIMD-ONLY0:       if.end3680:
// SIMD-ONLY0-NEXT:    [[TMP1645:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1646:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3681:%.*]] = icmp ult i64 [[TMP1645]], [[TMP1646]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3681]], label [[IF_THEN3683:%.*]], label [[IF_END3684:%.*]]
// SIMD-ONLY0:       if.then3683:
// SIMD-ONLY0-NEXT:    [[TMP1647:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1647]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3684]]
// SIMD-ONLY0:       if.end3684:
// SIMD-ONLY0-NEXT:    [[TMP1648:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1649:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3685:%.*]] = icmp ugt i64 [[TMP1648]], [[TMP1649]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3685]], label [[IF_THEN3687:%.*]], label [[IF_END3688:%.*]]
// SIMD-ONLY0:       if.then3687:
// SIMD-ONLY0-NEXT:    [[TMP1650:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1650]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3688]]
// SIMD-ONLY0:       if.end3688:
// SIMD-ONLY0-NEXT:    [[TMP1651:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1652:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3689:%.*]] = icmp ult i64 [[TMP1651]], [[TMP1652]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3689]], label [[IF_THEN3691:%.*]], label [[IF_END3692:%.*]]
// SIMD-ONLY0:       if.then3691:
// SIMD-ONLY0-NEXT:    [[TMP1653:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1653]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3692]]
// SIMD-ONLY0:       if.end3692:
// SIMD-ONLY0-NEXT:    [[TMP1654:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1655:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3693:%.*]] = icmp eq i64 [[TMP1654]], [[TMP1655]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3693]], label [[COND_TRUE3695:%.*]], label [[COND_FALSE3696:%.*]]
// SIMD-ONLY0:       cond.true3695:
// SIMD-ONLY0-NEXT:    [[TMP1656:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3697:%.*]]
// SIMD-ONLY0:       cond.false3696:
// SIMD-ONLY0-NEXT:    [[TMP1657:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3697]]
// SIMD-ONLY0:       cond.end3697:
// SIMD-ONLY0-NEXT:    [[COND3698:%.*]] = phi i64 [ [[TMP1656]], [[COND_TRUE3695]] ], [ [[TMP1657]], [[COND_FALSE3696]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3698]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1658:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1659:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3699:%.*]] = icmp eq i64 [[TMP1658]], [[TMP1659]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3699]], label [[COND_TRUE3701:%.*]], label [[COND_FALSE3702:%.*]]
// SIMD-ONLY0:       cond.true3701:
// SIMD-ONLY0-NEXT:    [[TMP1660:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3703:%.*]]
// SIMD-ONLY0:       cond.false3702:
// SIMD-ONLY0-NEXT:    [[TMP1661:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3703]]
// SIMD-ONLY0:       cond.end3703:
// SIMD-ONLY0-NEXT:    [[COND3704:%.*]] = phi i64 [ [[TMP1660]], [[COND_TRUE3701]] ], [ [[TMP1661]], [[COND_FALSE3702]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3704]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1662:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1663:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3705:%.*]] = icmp eq i64 [[TMP1662]], [[TMP1663]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3705]], label [[IF_THEN3707:%.*]], label [[IF_END3708:%.*]]
// SIMD-ONLY0:       if.then3707:
// SIMD-ONLY0-NEXT:    [[TMP1664:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1664]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3708]]
// SIMD-ONLY0:       if.end3708:
// SIMD-ONLY0-NEXT:    [[TMP1665:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1666:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3709:%.*]] = icmp eq i64 [[TMP1665]], [[TMP1666]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3709]], label [[IF_THEN3711:%.*]], label [[IF_END3712:%.*]]
// SIMD-ONLY0:       if.then3711:
// SIMD-ONLY0-NEXT:    [[TMP1667:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1667]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3712]]
// SIMD-ONLY0:       if.end3712:
// SIMD-ONLY0-NEXT:    [[TMP1668:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1669:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3713:%.*]] = icmp sgt i64 [[TMP1668]], [[TMP1669]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3713]], label [[COND_TRUE3715:%.*]], label [[COND_FALSE3716:%.*]]
// SIMD-ONLY0:       cond.true3715:
// SIMD-ONLY0-NEXT:    [[TMP1670:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3717:%.*]]
// SIMD-ONLY0:       cond.false3716:
// SIMD-ONLY0-NEXT:    [[TMP1671:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3717]]
// SIMD-ONLY0:       cond.end3717:
// SIMD-ONLY0-NEXT:    [[COND3718:%.*]] = phi i64 [ [[TMP1670]], [[COND_TRUE3715]] ], [ [[TMP1671]], [[COND_FALSE3716]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3718]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1672:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1673:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3719:%.*]] = icmp slt i64 [[TMP1672]], [[TMP1673]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3719]], label [[COND_TRUE3721:%.*]], label [[COND_FALSE3722:%.*]]
// SIMD-ONLY0:       cond.true3721:
// SIMD-ONLY0-NEXT:    [[TMP1674:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3723:%.*]]
// SIMD-ONLY0:       cond.false3722:
// SIMD-ONLY0-NEXT:    [[TMP1675:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3723]]
// SIMD-ONLY0:       cond.end3723:
// SIMD-ONLY0-NEXT:    [[COND3724:%.*]] = phi i64 [ [[TMP1674]], [[COND_TRUE3721]] ], [ [[TMP1675]], [[COND_FALSE3722]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3724]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1676:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1677:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3725:%.*]] = icmp sgt i64 [[TMP1676]], [[TMP1677]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3725]], label [[COND_TRUE3727:%.*]], label [[COND_FALSE3728:%.*]]
// SIMD-ONLY0:       cond.true3727:
// SIMD-ONLY0-NEXT:    [[TMP1678:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3729:%.*]]
// SIMD-ONLY0:       cond.false3728:
// SIMD-ONLY0-NEXT:    [[TMP1679:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3729]]
// SIMD-ONLY0:       cond.end3729:
// SIMD-ONLY0-NEXT:    [[COND3730:%.*]] = phi i64 [ [[TMP1678]], [[COND_TRUE3727]] ], [ [[TMP1679]], [[COND_FALSE3728]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3730]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1680:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1681:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3731:%.*]] = icmp slt i64 [[TMP1680]], [[TMP1681]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3731]], label [[COND_TRUE3733:%.*]], label [[COND_FALSE3734:%.*]]
// SIMD-ONLY0:       cond.true3733:
// SIMD-ONLY0-NEXT:    [[TMP1682:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3735:%.*]]
// SIMD-ONLY0:       cond.false3734:
// SIMD-ONLY0-NEXT:    [[TMP1683:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3735]]
// SIMD-ONLY0:       cond.end3735:
// SIMD-ONLY0-NEXT:    [[COND3736:%.*]] = phi i64 [ [[TMP1682]], [[COND_TRUE3733]] ], [ [[TMP1683]], [[COND_FALSE3734]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3736]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1684:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1685:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3737:%.*]] = icmp sgt i64 [[TMP1684]], [[TMP1685]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3737]], label [[IF_THEN3739:%.*]], label [[IF_END3740:%.*]]
// SIMD-ONLY0:       if.then3739:
// SIMD-ONLY0-NEXT:    [[TMP1686:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1686]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3740]]
// SIMD-ONLY0:       if.end3740:
// SIMD-ONLY0-NEXT:    [[TMP1687:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1688:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3741:%.*]] = icmp slt i64 [[TMP1687]], [[TMP1688]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3741]], label [[IF_THEN3743:%.*]], label [[IF_END3744:%.*]]
// SIMD-ONLY0:       if.then3743:
// SIMD-ONLY0-NEXT:    [[TMP1689:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1689]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3744]]
// SIMD-ONLY0:       if.end3744:
// SIMD-ONLY0-NEXT:    [[TMP1690:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1691:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3745:%.*]] = icmp sgt i64 [[TMP1690]], [[TMP1691]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3745]], label [[IF_THEN3747:%.*]], label [[IF_END3748:%.*]]
// SIMD-ONLY0:       if.then3747:
// SIMD-ONLY0-NEXT:    [[TMP1692:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1692]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3748]]
// SIMD-ONLY0:       if.end3748:
// SIMD-ONLY0-NEXT:    [[TMP1693:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1694:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3749:%.*]] = icmp slt i64 [[TMP1693]], [[TMP1694]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3749]], label [[IF_THEN3751:%.*]], label [[IF_END3752:%.*]]
// SIMD-ONLY0:       if.then3751:
// SIMD-ONLY0-NEXT:    [[TMP1695:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1695]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3752]]
// SIMD-ONLY0:       if.end3752:
// SIMD-ONLY0-NEXT:    [[TMP1696:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1697:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3753:%.*]] = icmp eq i64 [[TMP1696]], [[TMP1697]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3753]], label [[COND_TRUE3755:%.*]], label [[COND_FALSE3756:%.*]]
// SIMD-ONLY0:       cond.true3755:
// SIMD-ONLY0-NEXT:    [[TMP1698:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3757:%.*]]
// SIMD-ONLY0:       cond.false3756:
// SIMD-ONLY0-NEXT:    [[TMP1699:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3757]]
// SIMD-ONLY0:       cond.end3757:
// SIMD-ONLY0-NEXT:    [[COND3758:%.*]] = phi i64 [ [[TMP1698]], [[COND_TRUE3755]] ], [ [[TMP1699]], [[COND_FALSE3756]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3758]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1700:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1701:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3759:%.*]] = icmp eq i64 [[TMP1700]], [[TMP1701]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3759]], label [[COND_TRUE3761:%.*]], label [[COND_FALSE3762:%.*]]
// SIMD-ONLY0:       cond.true3761:
// SIMD-ONLY0-NEXT:    [[TMP1702:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3763:%.*]]
// SIMD-ONLY0:       cond.false3762:
// SIMD-ONLY0-NEXT:    [[TMP1703:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3763]]
// SIMD-ONLY0:       cond.end3763:
// SIMD-ONLY0-NEXT:    [[COND3764:%.*]] = phi i64 [ [[TMP1702]], [[COND_TRUE3761]] ], [ [[TMP1703]], [[COND_FALSE3762]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3764]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1704:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1705:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3765:%.*]] = icmp eq i64 [[TMP1704]], [[TMP1705]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3765]], label [[IF_THEN3767:%.*]], label [[IF_END3768:%.*]]
// SIMD-ONLY0:       if.then3767:
// SIMD-ONLY0-NEXT:    [[TMP1706:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1706]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3768]]
// SIMD-ONLY0:       if.end3768:
// SIMD-ONLY0-NEXT:    [[TMP1707:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1708:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3769:%.*]] = icmp eq i64 [[TMP1707]], [[TMP1708]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3769]], label [[IF_THEN3771:%.*]], label [[IF_END3772:%.*]]
// SIMD-ONLY0:       if.then3771:
// SIMD-ONLY0-NEXT:    [[TMP1709:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1709]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3772]]
// SIMD-ONLY0:       if.end3772:
// SIMD-ONLY0-NEXT:    [[TMP1710:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1711:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3773:%.*]] = icmp ugt i64 [[TMP1710]], [[TMP1711]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3773]], label [[COND_TRUE3775:%.*]], label [[COND_FALSE3776:%.*]]
// SIMD-ONLY0:       cond.true3775:
// SIMD-ONLY0-NEXT:    [[TMP1712:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3777:%.*]]
// SIMD-ONLY0:       cond.false3776:
// SIMD-ONLY0-NEXT:    [[TMP1713:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3777]]
// SIMD-ONLY0:       cond.end3777:
// SIMD-ONLY0-NEXT:    [[COND3778:%.*]] = phi i64 [ [[TMP1712]], [[COND_TRUE3775]] ], [ [[TMP1713]], [[COND_FALSE3776]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3778]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1714:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1715:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3779:%.*]] = icmp ult i64 [[TMP1714]], [[TMP1715]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3779]], label [[COND_TRUE3781:%.*]], label [[COND_FALSE3782:%.*]]
// SIMD-ONLY0:       cond.true3781:
// SIMD-ONLY0-NEXT:    [[TMP1716:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3783:%.*]]
// SIMD-ONLY0:       cond.false3782:
// SIMD-ONLY0-NEXT:    [[TMP1717:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3783]]
// SIMD-ONLY0:       cond.end3783:
// SIMD-ONLY0-NEXT:    [[COND3784:%.*]] = phi i64 [ [[TMP1716]], [[COND_TRUE3781]] ], [ [[TMP1717]], [[COND_FALSE3782]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3784]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1718:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1719:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3785:%.*]] = icmp ugt i64 [[TMP1718]], [[TMP1719]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3785]], label [[COND_TRUE3787:%.*]], label [[COND_FALSE3788:%.*]]
// SIMD-ONLY0:       cond.true3787:
// SIMD-ONLY0-NEXT:    [[TMP1720:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3789:%.*]]
// SIMD-ONLY0:       cond.false3788:
// SIMD-ONLY0-NEXT:    [[TMP1721:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3789]]
// SIMD-ONLY0:       cond.end3789:
// SIMD-ONLY0-NEXT:    [[COND3790:%.*]] = phi i64 [ [[TMP1720]], [[COND_TRUE3787]] ], [ [[TMP1721]], [[COND_FALSE3788]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3790]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1722:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1723:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3791:%.*]] = icmp ult i64 [[TMP1722]], [[TMP1723]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3791]], label [[COND_TRUE3793:%.*]], label [[COND_FALSE3794:%.*]]
// SIMD-ONLY0:       cond.true3793:
// SIMD-ONLY0-NEXT:    [[TMP1724:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3795:%.*]]
// SIMD-ONLY0:       cond.false3794:
// SIMD-ONLY0-NEXT:    [[TMP1725:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3795]]
// SIMD-ONLY0:       cond.end3795:
// SIMD-ONLY0-NEXT:    [[COND3796:%.*]] = phi i64 [ [[TMP1724]], [[COND_TRUE3793]] ], [ [[TMP1725]], [[COND_FALSE3794]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3796]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1726:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1727:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3797:%.*]] = icmp ugt i64 [[TMP1726]], [[TMP1727]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3797]], label [[IF_THEN3799:%.*]], label [[IF_END3800:%.*]]
// SIMD-ONLY0:       if.then3799:
// SIMD-ONLY0-NEXT:    [[TMP1728:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1728]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3800]]
// SIMD-ONLY0:       if.end3800:
// SIMD-ONLY0-NEXT:    [[TMP1729:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1730:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3801:%.*]] = icmp ult i64 [[TMP1729]], [[TMP1730]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3801]], label [[IF_THEN3803:%.*]], label [[IF_END3804:%.*]]
// SIMD-ONLY0:       if.then3803:
// SIMD-ONLY0-NEXT:    [[TMP1731:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1731]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3804]]
// SIMD-ONLY0:       if.end3804:
// SIMD-ONLY0-NEXT:    [[TMP1732:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1733:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3805:%.*]] = icmp ugt i64 [[TMP1732]], [[TMP1733]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3805]], label [[IF_THEN3807:%.*]], label [[IF_END3808:%.*]]
// SIMD-ONLY0:       if.then3807:
// SIMD-ONLY0-NEXT:    [[TMP1734:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1734]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3808]]
// SIMD-ONLY0:       if.end3808:
// SIMD-ONLY0-NEXT:    [[TMP1735:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1736:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3809:%.*]] = icmp ult i64 [[TMP1735]], [[TMP1736]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3809]], label [[IF_THEN3811:%.*]], label [[IF_END3812:%.*]]
// SIMD-ONLY0:       if.then3811:
// SIMD-ONLY0-NEXT:    [[TMP1737:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1737]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3812]]
// SIMD-ONLY0:       if.end3812:
// SIMD-ONLY0-NEXT:    [[TMP1738:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1739:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3813:%.*]] = icmp eq i64 [[TMP1738]], [[TMP1739]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3813]], label [[COND_TRUE3815:%.*]], label [[COND_FALSE3816:%.*]]
// SIMD-ONLY0:       cond.true3815:
// SIMD-ONLY0-NEXT:    [[TMP1740:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3817:%.*]]
// SIMD-ONLY0:       cond.false3816:
// SIMD-ONLY0-NEXT:    [[TMP1741:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3817]]
// SIMD-ONLY0:       cond.end3817:
// SIMD-ONLY0-NEXT:    [[COND3818:%.*]] = phi i64 [ [[TMP1740]], [[COND_TRUE3815]] ], [ [[TMP1741]], [[COND_FALSE3816]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3818]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1742:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1743:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3819:%.*]] = icmp eq i64 [[TMP1742]], [[TMP1743]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3819]], label [[COND_TRUE3821:%.*]], label [[COND_FALSE3822:%.*]]
// SIMD-ONLY0:       cond.true3821:
// SIMD-ONLY0-NEXT:    [[TMP1744:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3823:%.*]]
// SIMD-ONLY0:       cond.false3822:
// SIMD-ONLY0-NEXT:    [[TMP1745:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3823]]
// SIMD-ONLY0:       cond.end3823:
// SIMD-ONLY0-NEXT:    [[COND3824:%.*]] = phi i64 [ [[TMP1744]], [[COND_TRUE3821]] ], [ [[TMP1745]], [[COND_FALSE3822]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3824]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1746:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1747:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3825:%.*]] = icmp eq i64 [[TMP1746]], [[TMP1747]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3825]], label [[IF_THEN3827:%.*]], label [[IF_END3828:%.*]]
// SIMD-ONLY0:       if.then3827:
// SIMD-ONLY0-NEXT:    [[TMP1748:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1748]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3828]]
// SIMD-ONLY0:       if.end3828:
// SIMD-ONLY0-NEXT:    [[TMP1749:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1750:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3829:%.*]] = icmp eq i64 [[TMP1749]], [[TMP1750]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3829]], label [[IF_THEN3831:%.*]], label [[IF_END3832:%.*]]
// SIMD-ONLY0:       if.then3831:
// SIMD-ONLY0-NEXT:    [[TMP1751:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1751]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3832]]
// SIMD-ONLY0:       if.end3832:
// SIMD-ONLY0-NEXT:    [[TMP1752:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1753:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3833:%.*]] = icmp sgt i64 [[TMP1752]], [[TMP1753]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3833]], label [[COND_TRUE3835:%.*]], label [[COND_FALSE3836:%.*]]
// SIMD-ONLY0:       cond.true3835:
// SIMD-ONLY0-NEXT:    [[TMP1754:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3837:%.*]]
// SIMD-ONLY0:       cond.false3836:
// SIMD-ONLY0-NEXT:    [[TMP1755:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3837]]
// SIMD-ONLY0:       cond.end3837:
// SIMD-ONLY0-NEXT:    [[COND3838:%.*]] = phi i64 [ [[TMP1754]], [[COND_TRUE3835]] ], [ [[TMP1755]], [[COND_FALSE3836]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3838]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1756:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1757:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3839:%.*]] = icmp slt i64 [[TMP1756]], [[TMP1757]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3839]], label [[COND_TRUE3841:%.*]], label [[COND_FALSE3842:%.*]]
// SIMD-ONLY0:       cond.true3841:
// SIMD-ONLY0-NEXT:    [[TMP1758:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3843:%.*]]
// SIMD-ONLY0:       cond.false3842:
// SIMD-ONLY0-NEXT:    [[TMP1759:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3843]]
// SIMD-ONLY0:       cond.end3843:
// SIMD-ONLY0-NEXT:    [[COND3844:%.*]] = phi i64 [ [[TMP1758]], [[COND_TRUE3841]] ], [ [[TMP1759]], [[COND_FALSE3842]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3844]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1760:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1761:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3845:%.*]] = icmp sgt i64 [[TMP1760]], [[TMP1761]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3845]], label [[COND_TRUE3847:%.*]], label [[COND_FALSE3848:%.*]]
// SIMD-ONLY0:       cond.true3847:
// SIMD-ONLY0-NEXT:    [[TMP1762:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3849:%.*]]
// SIMD-ONLY0:       cond.false3848:
// SIMD-ONLY0-NEXT:    [[TMP1763:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3849]]
// SIMD-ONLY0:       cond.end3849:
// SIMD-ONLY0-NEXT:    [[COND3850:%.*]] = phi i64 [ [[TMP1762]], [[COND_TRUE3847]] ], [ [[TMP1763]], [[COND_FALSE3848]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3850]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1764:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1765:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3851:%.*]] = icmp slt i64 [[TMP1764]], [[TMP1765]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3851]], label [[COND_TRUE3853:%.*]], label [[COND_FALSE3854:%.*]]
// SIMD-ONLY0:       cond.true3853:
// SIMD-ONLY0-NEXT:    [[TMP1766:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3855:%.*]]
// SIMD-ONLY0:       cond.false3854:
// SIMD-ONLY0-NEXT:    [[TMP1767:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3855]]
// SIMD-ONLY0:       cond.end3855:
// SIMD-ONLY0-NEXT:    [[COND3856:%.*]] = phi i64 [ [[TMP1766]], [[COND_TRUE3853]] ], [ [[TMP1767]], [[COND_FALSE3854]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3856]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1768:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1769:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3857:%.*]] = icmp sgt i64 [[TMP1768]], [[TMP1769]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3857]], label [[IF_THEN3859:%.*]], label [[IF_END3860:%.*]]
// SIMD-ONLY0:       if.then3859:
// SIMD-ONLY0-NEXT:    [[TMP1770:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1770]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3860]]
// SIMD-ONLY0:       if.end3860:
// SIMD-ONLY0-NEXT:    [[TMP1771:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1772:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3861:%.*]] = icmp slt i64 [[TMP1771]], [[TMP1772]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3861]], label [[IF_THEN3863:%.*]], label [[IF_END3864:%.*]]
// SIMD-ONLY0:       if.then3863:
// SIMD-ONLY0-NEXT:    [[TMP1773:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1773]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3864]]
// SIMD-ONLY0:       if.end3864:
// SIMD-ONLY0-NEXT:    [[TMP1774:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1775:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3865:%.*]] = icmp sgt i64 [[TMP1774]], [[TMP1775]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3865]], label [[IF_THEN3867:%.*]], label [[IF_END3868:%.*]]
// SIMD-ONLY0:       if.then3867:
// SIMD-ONLY0-NEXT:    [[TMP1776:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1776]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3868]]
// SIMD-ONLY0:       if.end3868:
// SIMD-ONLY0-NEXT:    [[TMP1777:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1778:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3869:%.*]] = icmp slt i64 [[TMP1777]], [[TMP1778]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3869]], label [[IF_THEN3871:%.*]], label [[IF_END3872:%.*]]
// SIMD-ONLY0:       if.then3871:
// SIMD-ONLY0-NEXT:    [[TMP1779:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1779]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3872]]
// SIMD-ONLY0:       if.end3872:
// SIMD-ONLY0-NEXT:    [[TMP1780:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1781:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3873:%.*]] = icmp eq i64 [[TMP1780]], [[TMP1781]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3873]], label [[COND_TRUE3875:%.*]], label [[COND_FALSE3876:%.*]]
// SIMD-ONLY0:       cond.true3875:
// SIMD-ONLY0-NEXT:    [[TMP1782:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3877:%.*]]
// SIMD-ONLY0:       cond.false3876:
// SIMD-ONLY0-NEXT:    [[TMP1783:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3877]]
// SIMD-ONLY0:       cond.end3877:
// SIMD-ONLY0-NEXT:    [[COND3878:%.*]] = phi i64 [ [[TMP1782]], [[COND_TRUE3875]] ], [ [[TMP1783]], [[COND_FALSE3876]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3878]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1784:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1785:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3879:%.*]] = icmp eq i64 [[TMP1784]], [[TMP1785]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3879]], label [[COND_TRUE3881:%.*]], label [[COND_FALSE3882:%.*]]
// SIMD-ONLY0:       cond.true3881:
// SIMD-ONLY0-NEXT:    [[TMP1786:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3883:%.*]]
// SIMD-ONLY0:       cond.false3882:
// SIMD-ONLY0-NEXT:    [[TMP1787:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3883]]
// SIMD-ONLY0:       cond.end3883:
// SIMD-ONLY0-NEXT:    [[COND3884:%.*]] = phi i64 [ [[TMP1786]], [[COND_TRUE3881]] ], [ [[TMP1787]], [[COND_FALSE3882]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3884]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1788:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1789:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3885:%.*]] = icmp eq i64 [[TMP1788]], [[TMP1789]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3885]], label [[IF_THEN3887:%.*]], label [[IF_END3888:%.*]]
// SIMD-ONLY0:       if.then3887:
// SIMD-ONLY0-NEXT:    [[TMP1790:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1790]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3888]]
// SIMD-ONLY0:       if.end3888:
// SIMD-ONLY0-NEXT:    [[TMP1791:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1792:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3889:%.*]] = icmp eq i64 [[TMP1791]], [[TMP1792]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3889]], label [[IF_THEN3891:%.*]], label [[IF_END3892:%.*]]
// SIMD-ONLY0:       if.then3891:
// SIMD-ONLY0-NEXT:    [[TMP1793:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1793]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3892]]
// SIMD-ONLY0:       if.end3892:
// SIMD-ONLY0-NEXT:    [[TMP1794:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1795:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3893:%.*]] = icmp ugt i64 [[TMP1794]], [[TMP1795]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3893]], label [[COND_TRUE3895:%.*]], label [[COND_FALSE3896:%.*]]
// SIMD-ONLY0:       cond.true3895:
// SIMD-ONLY0-NEXT:    [[TMP1796:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3897:%.*]]
// SIMD-ONLY0:       cond.false3896:
// SIMD-ONLY0-NEXT:    [[TMP1797:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3897]]
// SIMD-ONLY0:       cond.end3897:
// SIMD-ONLY0-NEXT:    [[COND3898:%.*]] = phi i64 [ [[TMP1796]], [[COND_TRUE3895]] ], [ [[TMP1797]], [[COND_FALSE3896]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3898]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1798:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1799:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3899:%.*]] = icmp ult i64 [[TMP1798]], [[TMP1799]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3899]], label [[COND_TRUE3901:%.*]], label [[COND_FALSE3902:%.*]]
// SIMD-ONLY0:       cond.true3901:
// SIMD-ONLY0-NEXT:    [[TMP1800:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3903:%.*]]
// SIMD-ONLY0:       cond.false3902:
// SIMD-ONLY0-NEXT:    [[TMP1801:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3903]]
// SIMD-ONLY0:       cond.end3903:
// SIMD-ONLY0-NEXT:    [[COND3904:%.*]] = phi i64 [ [[TMP1800]], [[COND_TRUE3901]] ], [ [[TMP1801]], [[COND_FALSE3902]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3904]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1802:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1803:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3905:%.*]] = icmp ugt i64 [[TMP1802]], [[TMP1803]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3905]], label [[COND_TRUE3907:%.*]], label [[COND_FALSE3908:%.*]]
// SIMD-ONLY0:       cond.true3907:
// SIMD-ONLY0-NEXT:    [[TMP1804:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3909:%.*]]
// SIMD-ONLY0:       cond.false3908:
// SIMD-ONLY0-NEXT:    [[TMP1805:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3909]]
// SIMD-ONLY0:       cond.end3909:
// SIMD-ONLY0-NEXT:    [[COND3910:%.*]] = phi i64 [ [[TMP1804]], [[COND_TRUE3907]] ], [ [[TMP1805]], [[COND_FALSE3908]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3910]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1806:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1807:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3911:%.*]] = icmp ult i64 [[TMP1806]], [[TMP1807]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3911]], label [[COND_TRUE3913:%.*]], label [[COND_FALSE3914:%.*]]
// SIMD-ONLY0:       cond.true3913:
// SIMD-ONLY0-NEXT:    [[TMP1808:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3915:%.*]]
// SIMD-ONLY0:       cond.false3914:
// SIMD-ONLY0-NEXT:    [[TMP1809:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3915]]
// SIMD-ONLY0:       cond.end3915:
// SIMD-ONLY0-NEXT:    [[COND3916:%.*]] = phi i64 [ [[TMP1808]], [[COND_TRUE3913]] ], [ [[TMP1809]], [[COND_FALSE3914]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3916]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1810:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1811:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3917:%.*]] = icmp ugt i64 [[TMP1810]], [[TMP1811]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3917]], label [[IF_THEN3919:%.*]], label [[IF_END3920:%.*]]
// SIMD-ONLY0:       if.then3919:
// SIMD-ONLY0-NEXT:    [[TMP1812:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1812]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3920]]
// SIMD-ONLY0:       if.end3920:
// SIMD-ONLY0-NEXT:    [[TMP1813:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1814:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3921:%.*]] = icmp ult i64 [[TMP1813]], [[TMP1814]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3921]], label [[IF_THEN3923:%.*]], label [[IF_END3924:%.*]]
// SIMD-ONLY0:       if.then3923:
// SIMD-ONLY0-NEXT:    [[TMP1815:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1815]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3924]]
// SIMD-ONLY0:       if.end3924:
// SIMD-ONLY0-NEXT:    [[TMP1816:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1817:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3925:%.*]] = icmp ugt i64 [[TMP1816]], [[TMP1817]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3925]], label [[IF_THEN3927:%.*]], label [[IF_END3928:%.*]]
// SIMD-ONLY0:       if.then3927:
// SIMD-ONLY0-NEXT:    [[TMP1818:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1818]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3928]]
// SIMD-ONLY0:       if.end3928:
// SIMD-ONLY0-NEXT:    [[TMP1819:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1820:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3929:%.*]] = icmp ult i64 [[TMP1819]], [[TMP1820]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3929]], label [[IF_THEN3931:%.*]], label [[IF_END3932:%.*]]
// SIMD-ONLY0:       if.then3931:
// SIMD-ONLY0-NEXT:    [[TMP1821:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1821]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3932]]
// SIMD-ONLY0:       if.end3932:
// SIMD-ONLY0-NEXT:    [[TMP1822:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1823:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3933:%.*]] = icmp eq i64 [[TMP1822]], [[TMP1823]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3933]], label [[COND_TRUE3935:%.*]], label [[COND_FALSE3936:%.*]]
// SIMD-ONLY0:       cond.true3935:
// SIMD-ONLY0-NEXT:    [[TMP1824:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3937:%.*]]
// SIMD-ONLY0:       cond.false3936:
// SIMD-ONLY0-NEXT:    [[TMP1825:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3937]]
// SIMD-ONLY0:       cond.end3937:
// SIMD-ONLY0-NEXT:    [[COND3938:%.*]] = phi i64 [ [[TMP1824]], [[COND_TRUE3935]] ], [ [[TMP1825]], [[COND_FALSE3936]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3938]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1826:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1827:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3939:%.*]] = icmp eq i64 [[TMP1826]], [[TMP1827]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3939]], label [[COND_TRUE3941:%.*]], label [[COND_FALSE3942:%.*]]
// SIMD-ONLY0:       cond.true3941:
// SIMD-ONLY0-NEXT:    [[TMP1828:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3943:%.*]]
// SIMD-ONLY0:       cond.false3942:
// SIMD-ONLY0-NEXT:    [[TMP1829:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3943]]
// SIMD-ONLY0:       cond.end3943:
// SIMD-ONLY0-NEXT:    [[COND3944:%.*]] = phi i64 [ [[TMP1828]], [[COND_TRUE3941]] ], [ [[TMP1829]], [[COND_FALSE3942]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3944]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1830:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1831:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3945:%.*]] = icmp eq i64 [[TMP1830]], [[TMP1831]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3945]], label [[IF_THEN3947:%.*]], label [[IF_END3948:%.*]]
// SIMD-ONLY0:       if.then3947:
// SIMD-ONLY0-NEXT:    [[TMP1832:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1832]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3948]]
// SIMD-ONLY0:       if.end3948:
// SIMD-ONLY0-NEXT:    [[TMP1833:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1834:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3949:%.*]] = icmp eq i64 [[TMP1833]], [[TMP1834]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3949]], label [[IF_THEN3951:%.*]], label [[IF_END3952:%.*]]
// SIMD-ONLY0:       if.then3951:
// SIMD-ONLY0-NEXT:    [[TMP1835:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1835]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3952]]
// SIMD-ONLY0:       if.end3952:
// SIMD-ONLY0-NEXT:    [[TMP1836:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1837:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3953:%.*]] = icmp sgt i64 [[TMP1836]], [[TMP1837]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3953]], label [[COND_TRUE3955:%.*]], label [[COND_FALSE3956:%.*]]
// SIMD-ONLY0:       cond.true3955:
// SIMD-ONLY0-NEXT:    [[TMP1838:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3957:%.*]]
// SIMD-ONLY0:       cond.false3956:
// SIMD-ONLY0-NEXT:    [[TMP1839:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3957]]
// SIMD-ONLY0:       cond.end3957:
// SIMD-ONLY0-NEXT:    [[COND3958:%.*]] = phi i64 [ [[TMP1838]], [[COND_TRUE3955]] ], [ [[TMP1839]], [[COND_FALSE3956]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3958]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1840:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1841:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3959:%.*]] = icmp slt i64 [[TMP1840]], [[TMP1841]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3959]], label [[COND_TRUE3961:%.*]], label [[COND_FALSE3962:%.*]]
// SIMD-ONLY0:       cond.true3961:
// SIMD-ONLY0-NEXT:    [[TMP1842:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3963:%.*]]
// SIMD-ONLY0:       cond.false3962:
// SIMD-ONLY0-NEXT:    [[TMP1843:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3963]]
// SIMD-ONLY0:       cond.end3963:
// SIMD-ONLY0-NEXT:    [[COND3964:%.*]] = phi i64 [ [[TMP1842]], [[COND_TRUE3961]] ], [ [[TMP1843]], [[COND_FALSE3962]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3964]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1844:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1845:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3965:%.*]] = icmp sgt i64 [[TMP1844]], [[TMP1845]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3965]], label [[COND_TRUE3967:%.*]], label [[COND_FALSE3968:%.*]]
// SIMD-ONLY0:       cond.true3967:
// SIMD-ONLY0-NEXT:    [[TMP1846:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3969:%.*]]
// SIMD-ONLY0:       cond.false3968:
// SIMD-ONLY0-NEXT:    [[TMP1847:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3969]]
// SIMD-ONLY0:       cond.end3969:
// SIMD-ONLY0-NEXT:    [[COND3970:%.*]] = phi i64 [ [[TMP1846]], [[COND_TRUE3967]] ], [ [[TMP1847]], [[COND_FALSE3968]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3970]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1848:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1849:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3971:%.*]] = icmp slt i64 [[TMP1848]], [[TMP1849]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3971]], label [[COND_TRUE3973:%.*]], label [[COND_FALSE3974:%.*]]
// SIMD-ONLY0:       cond.true3973:
// SIMD-ONLY0-NEXT:    [[TMP1850:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3975:%.*]]
// SIMD-ONLY0:       cond.false3974:
// SIMD-ONLY0-NEXT:    [[TMP1851:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3975]]
// SIMD-ONLY0:       cond.end3975:
// SIMD-ONLY0-NEXT:    [[COND3976:%.*]] = phi i64 [ [[TMP1850]], [[COND_TRUE3973]] ], [ [[TMP1851]], [[COND_FALSE3974]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3976]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1852:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1853:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3977:%.*]] = icmp sgt i64 [[TMP1852]], [[TMP1853]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3977]], label [[IF_THEN3979:%.*]], label [[IF_END3980:%.*]]
// SIMD-ONLY0:       if.then3979:
// SIMD-ONLY0-NEXT:    [[TMP1854:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1854]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3980]]
// SIMD-ONLY0:       if.end3980:
// SIMD-ONLY0-NEXT:    [[TMP1855:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1856:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3981:%.*]] = icmp slt i64 [[TMP1855]], [[TMP1856]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3981]], label [[IF_THEN3983:%.*]], label [[IF_END3984:%.*]]
// SIMD-ONLY0:       if.then3983:
// SIMD-ONLY0-NEXT:    [[TMP1857:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1857]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3984]]
// SIMD-ONLY0:       if.end3984:
// SIMD-ONLY0-NEXT:    [[TMP1858:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1859:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3985:%.*]] = icmp sgt i64 [[TMP1858]], [[TMP1859]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3985]], label [[IF_THEN3987:%.*]], label [[IF_END3988:%.*]]
// SIMD-ONLY0:       if.then3987:
// SIMD-ONLY0-NEXT:    [[TMP1860:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1860]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3988]]
// SIMD-ONLY0:       if.end3988:
// SIMD-ONLY0-NEXT:    [[TMP1861:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1862:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3989:%.*]] = icmp slt i64 [[TMP1861]], [[TMP1862]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3989]], label [[IF_THEN3991:%.*]], label [[IF_END3992:%.*]]
// SIMD-ONLY0:       if.then3991:
// SIMD-ONLY0-NEXT:    [[TMP1863:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1863]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END3992]]
// SIMD-ONLY0:       if.end3992:
// SIMD-ONLY0-NEXT:    [[TMP1864:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1865:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3993:%.*]] = icmp eq i64 [[TMP1864]], [[TMP1865]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3993]], label [[COND_TRUE3995:%.*]], label [[COND_FALSE3996:%.*]]
// SIMD-ONLY0:       cond.true3995:
// SIMD-ONLY0-NEXT:    [[TMP1866:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3997:%.*]]
// SIMD-ONLY0:       cond.false3996:
// SIMD-ONLY0-NEXT:    [[TMP1867:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END3997]]
// SIMD-ONLY0:       cond.end3997:
// SIMD-ONLY0-NEXT:    [[COND3998:%.*]] = phi i64 [ [[TMP1866]], [[COND_TRUE3995]] ], [ [[TMP1867]], [[COND_FALSE3996]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND3998]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1868:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1869:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP3999:%.*]] = icmp eq i64 [[TMP1868]], [[TMP1869]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3999]], label [[COND_TRUE4001:%.*]], label [[COND_FALSE4002:%.*]]
// SIMD-ONLY0:       cond.true4001:
// SIMD-ONLY0-NEXT:    [[TMP1870:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4003:%.*]]
// SIMD-ONLY0:       cond.false4002:
// SIMD-ONLY0-NEXT:    [[TMP1871:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4003]]
// SIMD-ONLY0:       cond.end4003:
// SIMD-ONLY0-NEXT:    [[COND4004:%.*]] = phi i64 [ [[TMP1870]], [[COND_TRUE4001]] ], [ [[TMP1871]], [[COND_FALSE4002]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4004]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1872:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1873:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4005:%.*]] = icmp eq i64 [[TMP1872]], [[TMP1873]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4005]], label [[IF_THEN4007:%.*]], label [[IF_END4008:%.*]]
// SIMD-ONLY0:       if.then4007:
// SIMD-ONLY0-NEXT:    [[TMP1874:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1874]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4008]]
// SIMD-ONLY0:       if.end4008:
// SIMD-ONLY0-NEXT:    [[TMP1875:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1876:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4009:%.*]] = icmp eq i64 [[TMP1875]], [[TMP1876]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4009]], label [[IF_THEN4011:%.*]], label [[IF_END4012:%.*]]
// SIMD-ONLY0:       if.then4011:
// SIMD-ONLY0-NEXT:    [[TMP1877:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1877]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4012]]
// SIMD-ONLY0:       if.end4012:
// SIMD-ONLY0-NEXT:    [[TMP1878:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1879:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4013:%.*]] = icmp ugt i64 [[TMP1878]], [[TMP1879]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4013]], label [[COND_TRUE4015:%.*]], label [[COND_FALSE4016:%.*]]
// SIMD-ONLY0:       cond.true4015:
// SIMD-ONLY0-NEXT:    [[TMP1880:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4017:%.*]]
// SIMD-ONLY0:       cond.false4016:
// SIMD-ONLY0-NEXT:    [[TMP1881:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4017]]
// SIMD-ONLY0:       cond.end4017:
// SIMD-ONLY0-NEXT:    [[COND4018:%.*]] = phi i64 [ [[TMP1880]], [[COND_TRUE4015]] ], [ [[TMP1881]], [[COND_FALSE4016]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4018]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1882:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1883:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4019:%.*]] = icmp ult i64 [[TMP1882]], [[TMP1883]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4019]], label [[COND_TRUE4021:%.*]], label [[COND_FALSE4022:%.*]]
// SIMD-ONLY0:       cond.true4021:
// SIMD-ONLY0-NEXT:    [[TMP1884:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4023:%.*]]
// SIMD-ONLY0:       cond.false4022:
// SIMD-ONLY0-NEXT:    [[TMP1885:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4023]]
// SIMD-ONLY0:       cond.end4023:
// SIMD-ONLY0-NEXT:    [[COND4024:%.*]] = phi i64 [ [[TMP1884]], [[COND_TRUE4021]] ], [ [[TMP1885]], [[COND_FALSE4022]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4024]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1886:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1887:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4025:%.*]] = icmp ugt i64 [[TMP1886]], [[TMP1887]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4025]], label [[COND_TRUE4027:%.*]], label [[COND_FALSE4028:%.*]]
// SIMD-ONLY0:       cond.true4027:
// SIMD-ONLY0-NEXT:    [[TMP1888:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4029:%.*]]
// SIMD-ONLY0:       cond.false4028:
// SIMD-ONLY0-NEXT:    [[TMP1889:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4029]]
// SIMD-ONLY0:       cond.end4029:
// SIMD-ONLY0-NEXT:    [[COND4030:%.*]] = phi i64 [ [[TMP1888]], [[COND_TRUE4027]] ], [ [[TMP1889]], [[COND_FALSE4028]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4030]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1890:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1891:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4031:%.*]] = icmp ult i64 [[TMP1890]], [[TMP1891]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4031]], label [[COND_TRUE4033:%.*]], label [[COND_FALSE4034:%.*]]
// SIMD-ONLY0:       cond.true4033:
// SIMD-ONLY0-NEXT:    [[TMP1892:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4035:%.*]]
// SIMD-ONLY0:       cond.false4034:
// SIMD-ONLY0-NEXT:    [[TMP1893:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4035]]
// SIMD-ONLY0:       cond.end4035:
// SIMD-ONLY0-NEXT:    [[COND4036:%.*]] = phi i64 [ [[TMP1892]], [[COND_TRUE4033]] ], [ [[TMP1893]], [[COND_FALSE4034]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4036]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1894:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1895:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4037:%.*]] = icmp ugt i64 [[TMP1894]], [[TMP1895]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4037]], label [[IF_THEN4039:%.*]], label [[IF_END4040:%.*]]
// SIMD-ONLY0:       if.then4039:
// SIMD-ONLY0-NEXT:    [[TMP1896:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1896]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4040]]
// SIMD-ONLY0:       if.end4040:
// SIMD-ONLY0-NEXT:    [[TMP1897:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1898:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4041:%.*]] = icmp ult i64 [[TMP1897]], [[TMP1898]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4041]], label [[IF_THEN4043:%.*]], label [[IF_END4044:%.*]]
// SIMD-ONLY0:       if.then4043:
// SIMD-ONLY0-NEXT:    [[TMP1899:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1899]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4044]]
// SIMD-ONLY0:       if.end4044:
// SIMD-ONLY0-NEXT:    [[TMP1900:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1901:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4045:%.*]] = icmp ugt i64 [[TMP1900]], [[TMP1901]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4045]], label [[IF_THEN4047:%.*]], label [[IF_END4048:%.*]]
// SIMD-ONLY0:       if.then4047:
// SIMD-ONLY0-NEXT:    [[TMP1902:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1902]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4048]]
// SIMD-ONLY0:       if.end4048:
// SIMD-ONLY0-NEXT:    [[TMP1903:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1904:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4049:%.*]] = icmp ult i64 [[TMP1903]], [[TMP1904]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4049]], label [[IF_THEN4051:%.*]], label [[IF_END4052:%.*]]
// SIMD-ONLY0:       if.then4051:
// SIMD-ONLY0-NEXT:    [[TMP1905:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1905]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4052]]
// SIMD-ONLY0:       if.end4052:
// SIMD-ONLY0-NEXT:    [[TMP1906:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1907:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4053:%.*]] = icmp eq i64 [[TMP1906]], [[TMP1907]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4053]], label [[COND_TRUE4055:%.*]], label [[COND_FALSE4056:%.*]]
// SIMD-ONLY0:       cond.true4055:
// SIMD-ONLY0-NEXT:    [[TMP1908:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4057:%.*]]
// SIMD-ONLY0:       cond.false4056:
// SIMD-ONLY0-NEXT:    [[TMP1909:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4057]]
// SIMD-ONLY0:       cond.end4057:
// SIMD-ONLY0-NEXT:    [[COND4058:%.*]] = phi i64 [ [[TMP1908]], [[COND_TRUE4055]] ], [ [[TMP1909]], [[COND_FALSE4056]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4058]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1910:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1911:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4059:%.*]] = icmp eq i64 [[TMP1910]], [[TMP1911]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4059]], label [[COND_TRUE4061:%.*]], label [[COND_FALSE4062:%.*]]
// SIMD-ONLY0:       cond.true4061:
// SIMD-ONLY0-NEXT:    [[TMP1912:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4063:%.*]]
// SIMD-ONLY0:       cond.false4062:
// SIMD-ONLY0-NEXT:    [[TMP1913:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4063]]
// SIMD-ONLY0:       cond.end4063:
// SIMD-ONLY0-NEXT:    [[COND4064:%.*]] = phi i64 [ [[TMP1912]], [[COND_TRUE4061]] ], [ [[TMP1913]], [[COND_FALSE4062]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4064]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1914:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1915:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4065:%.*]] = icmp eq i64 [[TMP1914]], [[TMP1915]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4065]], label [[IF_THEN4067:%.*]], label [[IF_END4068:%.*]]
// SIMD-ONLY0:       if.then4067:
// SIMD-ONLY0-NEXT:    [[TMP1916:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1916]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4068]]
// SIMD-ONLY0:       if.end4068:
// SIMD-ONLY0-NEXT:    [[TMP1917:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1918:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4069:%.*]] = icmp eq i64 [[TMP1917]], [[TMP1918]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4069]], label [[IF_THEN4071:%.*]], label [[IF_END4072:%.*]]
// SIMD-ONLY0:       if.then4071:
// SIMD-ONLY0-NEXT:    [[TMP1919:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1919]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4072]]
// SIMD-ONLY0:       if.end4072:
// SIMD-ONLY0-NEXT:    [[TMP1920:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1921:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4073:%.*]] = icmp sgt i64 [[TMP1920]], [[TMP1921]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4073]], label [[COND_TRUE4075:%.*]], label [[COND_FALSE4076:%.*]]
// SIMD-ONLY0:       cond.true4075:
// SIMD-ONLY0-NEXT:    [[TMP1922:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4077:%.*]]
// SIMD-ONLY0:       cond.false4076:
// SIMD-ONLY0-NEXT:    [[TMP1923:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4077]]
// SIMD-ONLY0:       cond.end4077:
// SIMD-ONLY0-NEXT:    [[COND4078:%.*]] = phi i64 [ [[TMP1922]], [[COND_TRUE4075]] ], [ [[TMP1923]], [[COND_FALSE4076]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4078]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1924:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1925:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4079:%.*]] = icmp slt i64 [[TMP1924]], [[TMP1925]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4079]], label [[COND_TRUE4081:%.*]], label [[COND_FALSE4082:%.*]]
// SIMD-ONLY0:       cond.true4081:
// SIMD-ONLY0-NEXT:    [[TMP1926:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4083:%.*]]
// SIMD-ONLY0:       cond.false4082:
// SIMD-ONLY0-NEXT:    [[TMP1927:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4083]]
// SIMD-ONLY0:       cond.end4083:
// SIMD-ONLY0-NEXT:    [[COND4084:%.*]] = phi i64 [ [[TMP1926]], [[COND_TRUE4081]] ], [ [[TMP1927]], [[COND_FALSE4082]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4084]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1928:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1929:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4085:%.*]] = icmp sgt i64 [[TMP1928]], [[TMP1929]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4085]], label [[COND_TRUE4087:%.*]], label [[COND_FALSE4088:%.*]]
// SIMD-ONLY0:       cond.true4087:
// SIMD-ONLY0-NEXT:    [[TMP1930:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4089:%.*]]
// SIMD-ONLY0:       cond.false4088:
// SIMD-ONLY0-NEXT:    [[TMP1931:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4089]]
// SIMD-ONLY0:       cond.end4089:
// SIMD-ONLY0-NEXT:    [[COND4090:%.*]] = phi i64 [ [[TMP1930]], [[COND_TRUE4087]] ], [ [[TMP1931]], [[COND_FALSE4088]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4090]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1932:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1933:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4091:%.*]] = icmp slt i64 [[TMP1932]], [[TMP1933]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4091]], label [[COND_TRUE4093:%.*]], label [[COND_FALSE4094:%.*]]
// SIMD-ONLY0:       cond.true4093:
// SIMD-ONLY0-NEXT:    [[TMP1934:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4095:%.*]]
// SIMD-ONLY0:       cond.false4094:
// SIMD-ONLY0-NEXT:    [[TMP1935:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4095]]
// SIMD-ONLY0:       cond.end4095:
// SIMD-ONLY0-NEXT:    [[COND4096:%.*]] = phi i64 [ [[TMP1934]], [[COND_TRUE4093]] ], [ [[TMP1935]], [[COND_FALSE4094]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4096]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1936:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1937:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4097:%.*]] = icmp sgt i64 [[TMP1936]], [[TMP1937]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4097]], label [[IF_THEN4099:%.*]], label [[IF_END4100:%.*]]
// SIMD-ONLY0:       if.then4099:
// SIMD-ONLY0-NEXT:    [[TMP1938:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1938]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4100]]
// SIMD-ONLY0:       if.end4100:
// SIMD-ONLY0-NEXT:    [[TMP1939:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1940:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4101:%.*]] = icmp slt i64 [[TMP1939]], [[TMP1940]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4101]], label [[IF_THEN4103:%.*]], label [[IF_END4104:%.*]]
// SIMD-ONLY0:       if.then4103:
// SIMD-ONLY0-NEXT:    [[TMP1941:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1941]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4104]]
// SIMD-ONLY0:       if.end4104:
// SIMD-ONLY0-NEXT:    [[TMP1942:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1943:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4105:%.*]] = icmp sgt i64 [[TMP1942]], [[TMP1943]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4105]], label [[IF_THEN4107:%.*]], label [[IF_END4108:%.*]]
// SIMD-ONLY0:       if.then4107:
// SIMD-ONLY0-NEXT:    [[TMP1944:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1944]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4108]]
// SIMD-ONLY0:       if.end4108:
// SIMD-ONLY0-NEXT:    [[TMP1945:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1946:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4109:%.*]] = icmp slt i64 [[TMP1945]], [[TMP1946]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4109]], label [[IF_THEN4111:%.*]], label [[IF_END4112:%.*]]
// SIMD-ONLY0:       if.then4111:
// SIMD-ONLY0-NEXT:    [[TMP1947:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1947]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4112]]
// SIMD-ONLY0:       if.end4112:
// SIMD-ONLY0-NEXT:    [[TMP1948:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1949:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4113:%.*]] = icmp eq i64 [[TMP1948]], [[TMP1949]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4113]], label [[COND_TRUE4115:%.*]], label [[COND_FALSE4116:%.*]]
// SIMD-ONLY0:       cond.true4115:
// SIMD-ONLY0-NEXT:    [[TMP1950:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4117:%.*]]
// SIMD-ONLY0:       cond.false4116:
// SIMD-ONLY0-NEXT:    [[TMP1951:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4117]]
// SIMD-ONLY0:       cond.end4117:
// SIMD-ONLY0-NEXT:    [[COND4118:%.*]] = phi i64 [ [[TMP1950]], [[COND_TRUE4115]] ], [ [[TMP1951]], [[COND_FALSE4116]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4118]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1952:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1953:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4119:%.*]] = icmp eq i64 [[TMP1952]], [[TMP1953]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4119]], label [[COND_TRUE4121:%.*]], label [[COND_FALSE4122:%.*]]
// SIMD-ONLY0:       cond.true4121:
// SIMD-ONLY0-NEXT:    [[TMP1954:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4123:%.*]]
// SIMD-ONLY0:       cond.false4122:
// SIMD-ONLY0-NEXT:    [[TMP1955:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4123]]
// SIMD-ONLY0:       cond.end4123:
// SIMD-ONLY0-NEXT:    [[COND4124:%.*]] = phi i64 [ [[TMP1954]], [[COND_TRUE4121]] ], [ [[TMP1955]], [[COND_FALSE4122]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4124]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1956:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1957:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4125:%.*]] = icmp eq i64 [[TMP1956]], [[TMP1957]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4125]], label [[IF_THEN4127:%.*]], label [[IF_END4128:%.*]]
// SIMD-ONLY0:       if.then4127:
// SIMD-ONLY0-NEXT:    [[TMP1958:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1958]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4128]]
// SIMD-ONLY0:       if.end4128:
// SIMD-ONLY0-NEXT:    [[TMP1959:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1960:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4129:%.*]] = icmp eq i64 [[TMP1959]], [[TMP1960]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4129]], label [[IF_THEN4131:%.*]], label [[IF_END4132:%.*]]
// SIMD-ONLY0:       if.then4131:
// SIMD-ONLY0-NEXT:    [[TMP1961:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1961]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4132]]
// SIMD-ONLY0:       if.end4132:
// SIMD-ONLY0-NEXT:    [[TMP1962:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1963:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4133:%.*]] = icmp ugt i64 [[TMP1962]], [[TMP1963]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4133]], label [[COND_TRUE4135:%.*]], label [[COND_FALSE4136:%.*]]
// SIMD-ONLY0:       cond.true4135:
// SIMD-ONLY0-NEXT:    [[TMP1964:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4137:%.*]]
// SIMD-ONLY0:       cond.false4136:
// SIMD-ONLY0-NEXT:    [[TMP1965:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4137]]
// SIMD-ONLY0:       cond.end4137:
// SIMD-ONLY0-NEXT:    [[COND4138:%.*]] = phi i64 [ [[TMP1964]], [[COND_TRUE4135]] ], [ [[TMP1965]], [[COND_FALSE4136]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4138]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1966:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1967:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4139:%.*]] = icmp ult i64 [[TMP1966]], [[TMP1967]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4139]], label [[COND_TRUE4141:%.*]], label [[COND_FALSE4142:%.*]]
// SIMD-ONLY0:       cond.true4141:
// SIMD-ONLY0-NEXT:    [[TMP1968:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4143:%.*]]
// SIMD-ONLY0:       cond.false4142:
// SIMD-ONLY0-NEXT:    [[TMP1969:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4143]]
// SIMD-ONLY0:       cond.end4143:
// SIMD-ONLY0-NEXT:    [[COND4144:%.*]] = phi i64 [ [[TMP1968]], [[COND_TRUE4141]] ], [ [[TMP1969]], [[COND_FALSE4142]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4144]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1970:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1971:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4145:%.*]] = icmp ugt i64 [[TMP1970]], [[TMP1971]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4145]], label [[COND_TRUE4147:%.*]], label [[COND_FALSE4148:%.*]]
// SIMD-ONLY0:       cond.true4147:
// SIMD-ONLY0-NEXT:    [[TMP1972:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4149:%.*]]
// SIMD-ONLY0:       cond.false4148:
// SIMD-ONLY0-NEXT:    [[TMP1973:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4149]]
// SIMD-ONLY0:       cond.end4149:
// SIMD-ONLY0-NEXT:    [[COND4150:%.*]] = phi i64 [ [[TMP1972]], [[COND_TRUE4147]] ], [ [[TMP1973]], [[COND_FALSE4148]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4150]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1974:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1975:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4151:%.*]] = icmp ult i64 [[TMP1974]], [[TMP1975]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4151]], label [[COND_TRUE4153:%.*]], label [[COND_FALSE4154:%.*]]
// SIMD-ONLY0:       cond.true4153:
// SIMD-ONLY0-NEXT:    [[TMP1976:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4155:%.*]]
// SIMD-ONLY0:       cond.false4154:
// SIMD-ONLY0-NEXT:    [[TMP1977:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4155]]
// SIMD-ONLY0:       cond.end4155:
// SIMD-ONLY0-NEXT:    [[COND4156:%.*]] = phi i64 [ [[TMP1976]], [[COND_TRUE4153]] ], [ [[TMP1977]], [[COND_FALSE4154]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4156]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1978:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1979:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4157:%.*]] = icmp ugt i64 [[TMP1978]], [[TMP1979]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4157]], label [[IF_THEN4159:%.*]], label [[IF_END4160:%.*]]
// SIMD-ONLY0:       if.then4159:
// SIMD-ONLY0-NEXT:    [[TMP1980:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1980]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4160]]
// SIMD-ONLY0:       if.end4160:
// SIMD-ONLY0-NEXT:    [[TMP1981:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1982:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4161:%.*]] = icmp ult i64 [[TMP1981]], [[TMP1982]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4161]], label [[IF_THEN4163:%.*]], label [[IF_END4164:%.*]]
// SIMD-ONLY0:       if.then4163:
// SIMD-ONLY0-NEXT:    [[TMP1983:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1983]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4164]]
// SIMD-ONLY0:       if.end4164:
// SIMD-ONLY0-NEXT:    [[TMP1984:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1985:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4165:%.*]] = icmp ugt i64 [[TMP1984]], [[TMP1985]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4165]], label [[IF_THEN4167:%.*]], label [[IF_END4168:%.*]]
// SIMD-ONLY0:       if.then4167:
// SIMD-ONLY0-NEXT:    [[TMP1986:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1986]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4168]]
// SIMD-ONLY0:       if.end4168:
// SIMD-ONLY0-NEXT:    [[TMP1987:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1988:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4169:%.*]] = icmp ult i64 [[TMP1987]], [[TMP1988]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4169]], label [[IF_THEN4171:%.*]], label [[IF_END4172:%.*]]
// SIMD-ONLY0:       if.then4171:
// SIMD-ONLY0-NEXT:    [[TMP1989:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP1989]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4172]]
// SIMD-ONLY0:       if.end4172:
// SIMD-ONLY0-NEXT:    [[TMP1990:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1991:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4173:%.*]] = icmp eq i64 [[TMP1990]], [[TMP1991]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4173]], label [[COND_TRUE4175:%.*]], label [[COND_FALSE4176:%.*]]
// SIMD-ONLY0:       cond.true4175:
// SIMD-ONLY0-NEXT:    [[TMP1992:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4177:%.*]]
// SIMD-ONLY0:       cond.false4176:
// SIMD-ONLY0-NEXT:    [[TMP1993:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4177]]
// SIMD-ONLY0:       cond.end4177:
// SIMD-ONLY0-NEXT:    [[COND4178:%.*]] = phi i64 [ [[TMP1992]], [[COND_TRUE4175]] ], [ [[TMP1993]], [[COND_FALSE4176]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4178]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1994:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1995:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4179:%.*]] = icmp eq i64 [[TMP1994]], [[TMP1995]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4179]], label [[COND_TRUE4181:%.*]], label [[COND_FALSE4182:%.*]]
// SIMD-ONLY0:       cond.true4181:
// SIMD-ONLY0-NEXT:    [[TMP1996:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4183:%.*]]
// SIMD-ONLY0:       cond.false4182:
// SIMD-ONLY0-NEXT:    [[TMP1997:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4183]]
// SIMD-ONLY0:       cond.end4183:
// SIMD-ONLY0-NEXT:    [[COND4184:%.*]] = phi i64 [ [[TMP1996]], [[COND_TRUE4181]] ], [ [[TMP1997]], [[COND_FALSE4182]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4184]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1998:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1999:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4185:%.*]] = icmp eq i64 [[TMP1998]], [[TMP1999]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4185]], label [[IF_THEN4187:%.*]], label [[IF_END4188:%.*]]
// SIMD-ONLY0:       if.then4187:
// SIMD-ONLY0-NEXT:    [[TMP2000:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2000]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4188]]
// SIMD-ONLY0:       if.end4188:
// SIMD-ONLY0-NEXT:    [[TMP2001:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2002:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4189:%.*]] = icmp eq i64 [[TMP2001]], [[TMP2002]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4189]], label [[IF_THEN4191:%.*]], label [[IF_END4192:%.*]]
// SIMD-ONLY0:       if.then4191:
// SIMD-ONLY0-NEXT:    [[TMP2003:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2003]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4192]]
// SIMD-ONLY0:       if.end4192:
// SIMD-ONLY0-NEXT:    [[TMP2004:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2005:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4193:%.*]] = icmp sgt i64 [[TMP2004]], [[TMP2005]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4193]], label [[COND_TRUE4195:%.*]], label [[COND_FALSE4196:%.*]]
// SIMD-ONLY0:       cond.true4195:
// SIMD-ONLY0-NEXT:    [[TMP2006:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4197:%.*]]
// SIMD-ONLY0:       cond.false4196:
// SIMD-ONLY0-NEXT:    [[TMP2007:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4197]]
// SIMD-ONLY0:       cond.end4197:
// SIMD-ONLY0-NEXT:    [[COND4198:%.*]] = phi i64 [ [[TMP2006]], [[COND_TRUE4195]] ], [ [[TMP2007]], [[COND_FALSE4196]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4198]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2008:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2009:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4199:%.*]] = icmp slt i64 [[TMP2008]], [[TMP2009]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4199]], label [[COND_TRUE4201:%.*]], label [[COND_FALSE4202:%.*]]
// SIMD-ONLY0:       cond.true4201:
// SIMD-ONLY0-NEXT:    [[TMP2010:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4203:%.*]]
// SIMD-ONLY0:       cond.false4202:
// SIMD-ONLY0-NEXT:    [[TMP2011:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4203]]
// SIMD-ONLY0:       cond.end4203:
// SIMD-ONLY0-NEXT:    [[COND4204:%.*]] = phi i64 [ [[TMP2010]], [[COND_TRUE4201]] ], [ [[TMP2011]], [[COND_FALSE4202]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4204]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2012:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2013:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4205:%.*]] = icmp sgt i64 [[TMP2012]], [[TMP2013]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4205]], label [[COND_TRUE4207:%.*]], label [[COND_FALSE4208:%.*]]
// SIMD-ONLY0:       cond.true4207:
// SIMD-ONLY0-NEXT:    [[TMP2014:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4209:%.*]]
// SIMD-ONLY0:       cond.false4208:
// SIMD-ONLY0-NEXT:    [[TMP2015:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4209]]
// SIMD-ONLY0:       cond.end4209:
// SIMD-ONLY0-NEXT:    [[COND4210:%.*]] = phi i64 [ [[TMP2014]], [[COND_TRUE4207]] ], [ [[TMP2015]], [[COND_FALSE4208]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4210]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2016:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2017:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4211:%.*]] = icmp slt i64 [[TMP2016]], [[TMP2017]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4211]], label [[COND_TRUE4213:%.*]], label [[COND_FALSE4214:%.*]]
// SIMD-ONLY0:       cond.true4213:
// SIMD-ONLY0-NEXT:    [[TMP2018:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4215:%.*]]
// SIMD-ONLY0:       cond.false4214:
// SIMD-ONLY0-NEXT:    [[TMP2019:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4215]]
// SIMD-ONLY0:       cond.end4215:
// SIMD-ONLY0-NEXT:    [[COND4216:%.*]] = phi i64 [ [[TMP2018]], [[COND_TRUE4213]] ], [ [[TMP2019]], [[COND_FALSE4214]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4216]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2020:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2021:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4217:%.*]] = icmp sgt i64 [[TMP2020]], [[TMP2021]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4217]], label [[IF_THEN4219:%.*]], label [[IF_END4220:%.*]]
// SIMD-ONLY0:       if.then4219:
// SIMD-ONLY0-NEXT:    [[TMP2022:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2022]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4220]]
// SIMD-ONLY0:       if.end4220:
// SIMD-ONLY0-NEXT:    [[TMP2023:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2024:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4221:%.*]] = icmp slt i64 [[TMP2023]], [[TMP2024]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4221]], label [[IF_THEN4223:%.*]], label [[IF_END4224:%.*]]
// SIMD-ONLY0:       if.then4223:
// SIMD-ONLY0-NEXT:    [[TMP2025:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2025]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4224]]
// SIMD-ONLY0:       if.end4224:
// SIMD-ONLY0-NEXT:    [[TMP2026:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2027:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4225:%.*]] = icmp sgt i64 [[TMP2026]], [[TMP2027]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4225]], label [[IF_THEN4227:%.*]], label [[IF_END4228:%.*]]
// SIMD-ONLY0:       if.then4227:
// SIMD-ONLY0-NEXT:    [[TMP2028:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2028]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4228]]
// SIMD-ONLY0:       if.end4228:
// SIMD-ONLY0-NEXT:    [[TMP2029:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2030:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4229:%.*]] = icmp slt i64 [[TMP2029]], [[TMP2030]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4229]], label [[IF_THEN4231:%.*]], label [[IF_END4232:%.*]]
// SIMD-ONLY0:       if.then4231:
// SIMD-ONLY0-NEXT:    [[TMP2031:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2031]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4232]]
// SIMD-ONLY0:       if.end4232:
// SIMD-ONLY0-NEXT:    [[TMP2032:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2033:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4233:%.*]] = icmp eq i64 [[TMP2032]], [[TMP2033]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4233]], label [[COND_TRUE4235:%.*]], label [[COND_FALSE4236:%.*]]
// SIMD-ONLY0:       cond.true4235:
// SIMD-ONLY0-NEXT:    [[TMP2034:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4237:%.*]]
// SIMD-ONLY0:       cond.false4236:
// SIMD-ONLY0-NEXT:    [[TMP2035:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4237]]
// SIMD-ONLY0:       cond.end4237:
// SIMD-ONLY0-NEXT:    [[COND4238:%.*]] = phi i64 [ [[TMP2034]], [[COND_TRUE4235]] ], [ [[TMP2035]], [[COND_FALSE4236]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4238]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2036:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2037:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4239:%.*]] = icmp eq i64 [[TMP2036]], [[TMP2037]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4239]], label [[COND_TRUE4241:%.*]], label [[COND_FALSE4242:%.*]]
// SIMD-ONLY0:       cond.true4241:
// SIMD-ONLY0-NEXT:    [[TMP2038:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4243:%.*]]
// SIMD-ONLY0:       cond.false4242:
// SIMD-ONLY0-NEXT:    [[TMP2039:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4243]]
// SIMD-ONLY0:       cond.end4243:
// SIMD-ONLY0-NEXT:    [[COND4244:%.*]] = phi i64 [ [[TMP2038]], [[COND_TRUE4241]] ], [ [[TMP2039]], [[COND_FALSE4242]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4244]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2040:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2041:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4245:%.*]] = icmp eq i64 [[TMP2040]], [[TMP2041]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4245]], label [[IF_THEN4247:%.*]], label [[IF_END4248:%.*]]
// SIMD-ONLY0:       if.then4247:
// SIMD-ONLY0-NEXT:    [[TMP2042:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2042]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4248]]
// SIMD-ONLY0:       if.end4248:
// SIMD-ONLY0-NEXT:    [[TMP2043:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2044:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4249:%.*]] = icmp eq i64 [[TMP2043]], [[TMP2044]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4249]], label [[IF_THEN4251:%.*]], label [[IF_END4252:%.*]]
// SIMD-ONLY0:       if.then4251:
// SIMD-ONLY0-NEXT:    [[TMP2045:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2045]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4252]]
// SIMD-ONLY0:       if.end4252:
// SIMD-ONLY0-NEXT:    [[TMP2046:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2047:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4253:%.*]] = icmp ugt i64 [[TMP2046]], [[TMP2047]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4253]], label [[COND_TRUE4255:%.*]], label [[COND_FALSE4256:%.*]]
// SIMD-ONLY0:       cond.true4255:
// SIMD-ONLY0-NEXT:    [[TMP2048:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4257:%.*]]
// SIMD-ONLY0:       cond.false4256:
// SIMD-ONLY0-NEXT:    [[TMP2049:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4257]]
// SIMD-ONLY0:       cond.end4257:
// SIMD-ONLY0-NEXT:    [[COND4258:%.*]] = phi i64 [ [[TMP2048]], [[COND_TRUE4255]] ], [ [[TMP2049]], [[COND_FALSE4256]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4258]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2050:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2051:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4259:%.*]] = icmp ult i64 [[TMP2050]], [[TMP2051]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4259]], label [[COND_TRUE4261:%.*]], label [[COND_FALSE4262:%.*]]
// SIMD-ONLY0:       cond.true4261:
// SIMD-ONLY0-NEXT:    [[TMP2052:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4263:%.*]]
// SIMD-ONLY0:       cond.false4262:
// SIMD-ONLY0-NEXT:    [[TMP2053:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4263]]
// SIMD-ONLY0:       cond.end4263:
// SIMD-ONLY0-NEXT:    [[COND4264:%.*]] = phi i64 [ [[TMP2052]], [[COND_TRUE4261]] ], [ [[TMP2053]], [[COND_FALSE4262]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4264]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2054:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2055:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4265:%.*]] = icmp ugt i64 [[TMP2054]], [[TMP2055]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4265]], label [[COND_TRUE4267:%.*]], label [[COND_FALSE4268:%.*]]
// SIMD-ONLY0:       cond.true4267:
// SIMD-ONLY0-NEXT:    [[TMP2056:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4269:%.*]]
// SIMD-ONLY0:       cond.false4268:
// SIMD-ONLY0-NEXT:    [[TMP2057:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4269]]
// SIMD-ONLY0:       cond.end4269:
// SIMD-ONLY0-NEXT:    [[COND4270:%.*]] = phi i64 [ [[TMP2056]], [[COND_TRUE4267]] ], [ [[TMP2057]], [[COND_FALSE4268]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4270]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2058:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2059:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4271:%.*]] = icmp ult i64 [[TMP2058]], [[TMP2059]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4271]], label [[COND_TRUE4273:%.*]], label [[COND_FALSE4274:%.*]]
// SIMD-ONLY0:       cond.true4273:
// SIMD-ONLY0-NEXT:    [[TMP2060:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4275:%.*]]
// SIMD-ONLY0:       cond.false4274:
// SIMD-ONLY0-NEXT:    [[TMP2061:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4275]]
// SIMD-ONLY0:       cond.end4275:
// SIMD-ONLY0-NEXT:    [[COND4276:%.*]] = phi i64 [ [[TMP2060]], [[COND_TRUE4273]] ], [ [[TMP2061]], [[COND_FALSE4274]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4276]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2062:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2063:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4277:%.*]] = icmp ugt i64 [[TMP2062]], [[TMP2063]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4277]], label [[IF_THEN4279:%.*]], label [[IF_END4280:%.*]]
// SIMD-ONLY0:       if.then4279:
// SIMD-ONLY0-NEXT:    [[TMP2064:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2064]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4280]]
// SIMD-ONLY0:       if.end4280:
// SIMD-ONLY0-NEXT:    [[TMP2065:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2066:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4281:%.*]] = icmp ult i64 [[TMP2065]], [[TMP2066]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4281]], label [[IF_THEN4283:%.*]], label [[IF_END4284:%.*]]
// SIMD-ONLY0:       if.then4283:
// SIMD-ONLY0-NEXT:    [[TMP2067:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2067]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4284]]
// SIMD-ONLY0:       if.end4284:
// SIMD-ONLY0-NEXT:    [[TMP2068:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2069:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4285:%.*]] = icmp ugt i64 [[TMP2068]], [[TMP2069]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4285]], label [[IF_THEN4287:%.*]], label [[IF_END4288:%.*]]
// SIMD-ONLY0:       if.then4287:
// SIMD-ONLY0-NEXT:    [[TMP2070:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2070]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4288]]
// SIMD-ONLY0:       if.end4288:
// SIMD-ONLY0-NEXT:    [[TMP2071:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2072:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4289:%.*]] = icmp ult i64 [[TMP2071]], [[TMP2072]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4289]], label [[IF_THEN4291:%.*]], label [[IF_END4292:%.*]]
// SIMD-ONLY0:       if.then4291:
// SIMD-ONLY0-NEXT:    [[TMP2073:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2073]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4292]]
// SIMD-ONLY0:       if.end4292:
// SIMD-ONLY0-NEXT:    [[TMP2074:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2075:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4293:%.*]] = icmp eq i64 [[TMP2074]], [[TMP2075]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4293]], label [[COND_TRUE4295:%.*]], label [[COND_FALSE4296:%.*]]
// SIMD-ONLY0:       cond.true4295:
// SIMD-ONLY0-NEXT:    [[TMP2076:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4297:%.*]]
// SIMD-ONLY0:       cond.false4296:
// SIMD-ONLY0-NEXT:    [[TMP2077:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4297]]
// SIMD-ONLY0:       cond.end4297:
// SIMD-ONLY0-NEXT:    [[COND4298:%.*]] = phi i64 [ [[TMP2076]], [[COND_TRUE4295]] ], [ [[TMP2077]], [[COND_FALSE4296]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4298]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2078:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2079:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4299:%.*]] = icmp eq i64 [[TMP2078]], [[TMP2079]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4299]], label [[COND_TRUE4301:%.*]], label [[COND_FALSE4302:%.*]]
// SIMD-ONLY0:       cond.true4301:
// SIMD-ONLY0-NEXT:    [[TMP2080:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4303:%.*]]
// SIMD-ONLY0:       cond.false4302:
// SIMD-ONLY0-NEXT:    [[TMP2081:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4303]]
// SIMD-ONLY0:       cond.end4303:
// SIMD-ONLY0-NEXT:    [[COND4304:%.*]] = phi i64 [ [[TMP2080]], [[COND_TRUE4301]] ], [ [[TMP2081]], [[COND_FALSE4302]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4304]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2082:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2083:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4305:%.*]] = icmp eq i64 [[TMP2082]], [[TMP2083]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4305]], label [[IF_THEN4307:%.*]], label [[IF_END4308:%.*]]
// SIMD-ONLY0:       if.then4307:
// SIMD-ONLY0-NEXT:    [[TMP2084:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2084]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4308]]
// SIMD-ONLY0:       if.end4308:
// SIMD-ONLY0-NEXT:    [[TMP2085:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2086:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4309:%.*]] = icmp eq i64 [[TMP2085]], [[TMP2086]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4309]], label [[IF_THEN4311:%.*]], label [[IF_END4312:%.*]]
// SIMD-ONLY0:       if.then4311:
// SIMD-ONLY0-NEXT:    [[TMP2087:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2087]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4312]]
// SIMD-ONLY0:       if.end4312:
// SIMD-ONLY0-NEXT:    [[TMP2088:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2089:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4313:%.*]] = icmp sgt i64 [[TMP2088]], [[TMP2089]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4313]], label [[COND_TRUE4315:%.*]], label [[COND_FALSE4316:%.*]]
// SIMD-ONLY0:       cond.true4315:
// SIMD-ONLY0-NEXT:    [[TMP2090:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4317:%.*]]
// SIMD-ONLY0:       cond.false4316:
// SIMD-ONLY0-NEXT:    [[TMP2091:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4317]]
// SIMD-ONLY0:       cond.end4317:
// SIMD-ONLY0-NEXT:    [[COND4318:%.*]] = phi i64 [ [[TMP2090]], [[COND_TRUE4315]] ], [ [[TMP2091]], [[COND_FALSE4316]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4318]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2092:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2093:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4319:%.*]] = icmp slt i64 [[TMP2092]], [[TMP2093]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4319]], label [[COND_TRUE4321:%.*]], label [[COND_FALSE4322:%.*]]
// SIMD-ONLY0:       cond.true4321:
// SIMD-ONLY0-NEXT:    [[TMP2094:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4323:%.*]]
// SIMD-ONLY0:       cond.false4322:
// SIMD-ONLY0-NEXT:    [[TMP2095:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4323]]
// SIMD-ONLY0:       cond.end4323:
// SIMD-ONLY0-NEXT:    [[COND4324:%.*]] = phi i64 [ [[TMP2094]], [[COND_TRUE4321]] ], [ [[TMP2095]], [[COND_FALSE4322]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4324]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2096:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2097:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4325:%.*]] = icmp sgt i64 [[TMP2096]], [[TMP2097]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4325]], label [[COND_TRUE4327:%.*]], label [[COND_FALSE4328:%.*]]
// SIMD-ONLY0:       cond.true4327:
// SIMD-ONLY0-NEXT:    [[TMP2098:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4329:%.*]]
// SIMD-ONLY0:       cond.false4328:
// SIMD-ONLY0-NEXT:    [[TMP2099:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4329]]
// SIMD-ONLY0:       cond.end4329:
// SIMD-ONLY0-NEXT:    [[COND4330:%.*]] = phi i64 [ [[TMP2098]], [[COND_TRUE4327]] ], [ [[TMP2099]], [[COND_FALSE4328]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4330]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2100:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2101:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4331:%.*]] = icmp slt i64 [[TMP2100]], [[TMP2101]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4331]], label [[COND_TRUE4333:%.*]], label [[COND_FALSE4334:%.*]]
// SIMD-ONLY0:       cond.true4333:
// SIMD-ONLY0-NEXT:    [[TMP2102:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4335:%.*]]
// SIMD-ONLY0:       cond.false4334:
// SIMD-ONLY0-NEXT:    [[TMP2103:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4335]]
// SIMD-ONLY0:       cond.end4335:
// SIMD-ONLY0-NEXT:    [[COND4336:%.*]] = phi i64 [ [[TMP2102]], [[COND_TRUE4333]] ], [ [[TMP2103]], [[COND_FALSE4334]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4336]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2104:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2105:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4337:%.*]] = icmp sgt i64 [[TMP2104]], [[TMP2105]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4337]], label [[IF_THEN4339:%.*]], label [[IF_END4340:%.*]]
// SIMD-ONLY0:       if.then4339:
// SIMD-ONLY0-NEXT:    [[TMP2106:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2106]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4340]]
// SIMD-ONLY0:       if.end4340:
// SIMD-ONLY0-NEXT:    [[TMP2107:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2108:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4341:%.*]] = icmp slt i64 [[TMP2107]], [[TMP2108]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4341]], label [[IF_THEN4343:%.*]], label [[IF_END4344:%.*]]
// SIMD-ONLY0:       if.then4343:
// SIMD-ONLY0-NEXT:    [[TMP2109:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2109]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4344]]
// SIMD-ONLY0:       if.end4344:
// SIMD-ONLY0-NEXT:    [[TMP2110:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2111:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4345:%.*]] = icmp sgt i64 [[TMP2110]], [[TMP2111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4345]], label [[IF_THEN4347:%.*]], label [[IF_END4348:%.*]]
// SIMD-ONLY0:       if.then4347:
// SIMD-ONLY0-NEXT:    [[TMP2112:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2112]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4348]]
// SIMD-ONLY0:       if.end4348:
// SIMD-ONLY0-NEXT:    [[TMP2113:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2114:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4349:%.*]] = icmp slt i64 [[TMP2113]], [[TMP2114]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4349]], label [[IF_THEN4351:%.*]], label [[IF_END4352:%.*]]
// SIMD-ONLY0:       if.then4351:
// SIMD-ONLY0-NEXT:    [[TMP2115:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2115]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4352]]
// SIMD-ONLY0:       if.end4352:
// SIMD-ONLY0-NEXT:    [[TMP2116:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2117:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4353:%.*]] = icmp eq i64 [[TMP2116]], [[TMP2117]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4353]], label [[COND_TRUE4355:%.*]], label [[COND_FALSE4356:%.*]]
// SIMD-ONLY0:       cond.true4355:
// SIMD-ONLY0-NEXT:    [[TMP2118:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4357:%.*]]
// SIMD-ONLY0:       cond.false4356:
// SIMD-ONLY0-NEXT:    [[TMP2119:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4357]]
// SIMD-ONLY0:       cond.end4357:
// SIMD-ONLY0-NEXT:    [[COND4358:%.*]] = phi i64 [ [[TMP2118]], [[COND_TRUE4355]] ], [ [[TMP2119]], [[COND_FALSE4356]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4358]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2120:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2121:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4359:%.*]] = icmp eq i64 [[TMP2120]], [[TMP2121]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4359]], label [[COND_TRUE4361:%.*]], label [[COND_FALSE4362:%.*]]
// SIMD-ONLY0:       cond.true4361:
// SIMD-ONLY0-NEXT:    [[TMP2122:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4363:%.*]]
// SIMD-ONLY0:       cond.false4362:
// SIMD-ONLY0-NEXT:    [[TMP2123:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4363]]
// SIMD-ONLY0:       cond.end4363:
// SIMD-ONLY0-NEXT:    [[COND4364:%.*]] = phi i64 [ [[TMP2122]], [[COND_TRUE4361]] ], [ [[TMP2123]], [[COND_FALSE4362]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4364]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2124:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2125:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4365:%.*]] = icmp eq i64 [[TMP2124]], [[TMP2125]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4365]], label [[IF_THEN4367:%.*]], label [[IF_END4368:%.*]]
// SIMD-ONLY0:       if.then4367:
// SIMD-ONLY0-NEXT:    [[TMP2126:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2126]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4368]]
// SIMD-ONLY0:       if.end4368:
// SIMD-ONLY0-NEXT:    [[TMP2127:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2128:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4369:%.*]] = icmp eq i64 [[TMP2127]], [[TMP2128]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4369]], label [[IF_THEN4371:%.*]], label [[IF_END4372:%.*]]
// SIMD-ONLY0:       if.then4371:
// SIMD-ONLY0-NEXT:    [[TMP2129:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2129]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4372]]
// SIMD-ONLY0:       if.end4372:
// SIMD-ONLY0-NEXT:    [[TMP2130:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2131:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4373:%.*]] = icmp ugt i64 [[TMP2130]], [[TMP2131]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4373]], label [[COND_TRUE4375:%.*]], label [[COND_FALSE4376:%.*]]
// SIMD-ONLY0:       cond.true4375:
// SIMD-ONLY0-NEXT:    [[TMP2132:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4377:%.*]]
// SIMD-ONLY0:       cond.false4376:
// SIMD-ONLY0-NEXT:    [[TMP2133:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4377]]
// SIMD-ONLY0:       cond.end4377:
// SIMD-ONLY0-NEXT:    [[COND4378:%.*]] = phi i64 [ [[TMP2132]], [[COND_TRUE4375]] ], [ [[TMP2133]], [[COND_FALSE4376]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4378]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2134:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2135:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4379:%.*]] = icmp ult i64 [[TMP2134]], [[TMP2135]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4379]], label [[COND_TRUE4381:%.*]], label [[COND_FALSE4382:%.*]]
// SIMD-ONLY0:       cond.true4381:
// SIMD-ONLY0-NEXT:    [[TMP2136:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4383:%.*]]
// SIMD-ONLY0:       cond.false4382:
// SIMD-ONLY0-NEXT:    [[TMP2137:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4383]]
// SIMD-ONLY0:       cond.end4383:
// SIMD-ONLY0-NEXT:    [[COND4384:%.*]] = phi i64 [ [[TMP2136]], [[COND_TRUE4381]] ], [ [[TMP2137]], [[COND_FALSE4382]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4384]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2138:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2139:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4385:%.*]] = icmp ugt i64 [[TMP2138]], [[TMP2139]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4385]], label [[COND_TRUE4387:%.*]], label [[COND_FALSE4388:%.*]]
// SIMD-ONLY0:       cond.true4387:
// SIMD-ONLY0-NEXT:    [[TMP2140:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4389:%.*]]
// SIMD-ONLY0:       cond.false4388:
// SIMD-ONLY0-NEXT:    [[TMP2141:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4389]]
// SIMD-ONLY0:       cond.end4389:
// SIMD-ONLY0-NEXT:    [[COND4390:%.*]] = phi i64 [ [[TMP2140]], [[COND_TRUE4387]] ], [ [[TMP2141]], [[COND_FALSE4388]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4390]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2142:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2143:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4391:%.*]] = icmp ult i64 [[TMP2142]], [[TMP2143]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4391]], label [[COND_TRUE4393:%.*]], label [[COND_FALSE4394:%.*]]
// SIMD-ONLY0:       cond.true4393:
// SIMD-ONLY0-NEXT:    [[TMP2144:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4395:%.*]]
// SIMD-ONLY0:       cond.false4394:
// SIMD-ONLY0-NEXT:    [[TMP2145:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4395]]
// SIMD-ONLY0:       cond.end4395:
// SIMD-ONLY0-NEXT:    [[COND4396:%.*]] = phi i64 [ [[TMP2144]], [[COND_TRUE4393]] ], [ [[TMP2145]], [[COND_FALSE4394]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4396]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2146:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2147:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4397:%.*]] = icmp ugt i64 [[TMP2146]], [[TMP2147]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4397]], label [[IF_THEN4399:%.*]], label [[IF_END4400:%.*]]
// SIMD-ONLY0:       if.then4399:
// SIMD-ONLY0-NEXT:    [[TMP2148:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2148]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4400]]
// SIMD-ONLY0:       if.end4400:
// SIMD-ONLY0-NEXT:    [[TMP2149:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2150:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4401:%.*]] = icmp ult i64 [[TMP2149]], [[TMP2150]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4401]], label [[IF_THEN4403:%.*]], label [[IF_END4404:%.*]]
// SIMD-ONLY0:       if.then4403:
// SIMD-ONLY0-NEXT:    [[TMP2151:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2151]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4404]]
// SIMD-ONLY0:       if.end4404:
// SIMD-ONLY0-NEXT:    [[TMP2152:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2153:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4405:%.*]] = icmp ugt i64 [[TMP2152]], [[TMP2153]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4405]], label [[IF_THEN4407:%.*]], label [[IF_END4408:%.*]]
// SIMD-ONLY0:       if.then4407:
// SIMD-ONLY0-NEXT:    [[TMP2154:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2154]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4408]]
// SIMD-ONLY0:       if.end4408:
// SIMD-ONLY0-NEXT:    [[TMP2155:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2156:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4409:%.*]] = icmp ult i64 [[TMP2155]], [[TMP2156]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4409]], label [[IF_THEN4411:%.*]], label [[IF_END4412:%.*]]
// SIMD-ONLY0:       if.then4411:
// SIMD-ONLY0-NEXT:    [[TMP2157:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2157]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4412]]
// SIMD-ONLY0:       if.end4412:
// SIMD-ONLY0-NEXT:    [[TMP2158:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2159:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4413:%.*]] = icmp eq i64 [[TMP2158]], [[TMP2159]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4413]], label [[COND_TRUE4415:%.*]], label [[COND_FALSE4416:%.*]]
// SIMD-ONLY0:       cond.true4415:
// SIMD-ONLY0-NEXT:    [[TMP2160:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4417:%.*]]
// SIMD-ONLY0:       cond.false4416:
// SIMD-ONLY0-NEXT:    [[TMP2161:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4417]]
// SIMD-ONLY0:       cond.end4417:
// SIMD-ONLY0-NEXT:    [[COND4418:%.*]] = phi i64 [ [[TMP2160]], [[COND_TRUE4415]] ], [ [[TMP2161]], [[COND_FALSE4416]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4418]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2162:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2163:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4419:%.*]] = icmp eq i64 [[TMP2162]], [[TMP2163]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4419]], label [[COND_TRUE4421:%.*]], label [[COND_FALSE4422:%.*]]
// SIMD-ONLY0:       cond.true4421:
// SIMD-ONLY0-NEXT:    [[TMP2164:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4423:%.*]]
// SIMD-ONLY0:       cond.false4422:
// SIMD-ONLY0-NEXT:    [[TMP2165:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4423]]
// SIMD-ONLY0:       cond.end4423:
// SIMD-ONLY0-NEXT:    [[COND4424:%.*]] = phi i64 [ [[TMP2164]], [[COND_TRUE4421]] ], [ [[TMP2165]], [[COND_FALSE4422]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4424]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2166:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2167:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4425:%.*]] = icmp eq i64 [[TMP2166]], [[TMP2167]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4425]], label [[IF_THEN4427:%.*]], label [[IF_END4428:%.*]]
// SIMD-ONLY0:       if.then4427:
// SIMD-ONLY0-NEXT:    [[TMP2168:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2168]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4428]]
// SIMD-ONLY0:       if.end4428:
// SIMD-ONLY0-NEXT:    [[TMP2169:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2170:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4429:%.*]] = icmp eq i64 [[TMP2169]], [[TMP2170]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4429]], label [[IF_THEN4431:%.*]], label [[IF_END4432:%.*]]
// SIMD-ONLY0:       if.then4431:
// SIMD-ONLY0-NEXT:    [[TMP2171:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2171]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4432]]
// SIMD-ONLY0:       if.end4432:
// SIMD-ONLY0-NEXT:    [[TMP2172:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2173:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4433:%.*]] = icmp sgt i64 [[TMP2172]], [[TMP2173]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4433]], label [[COND_TRUE4435:%.*]], label [[COND_FALSE4436:%.*]]
// SIMD-ONLY0:       cond.true4435:
// SIMD-ONLY0-NEXT:    [[TMP2174:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4437:%.*]]
// SIMD-ONLY0:       cond.false4436:
// SIMD-ONLY0-NEXT:    [[TMP2175:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4437]]
// SIMD-ONLY0:       cond.end4437:
// SIMD-ONLY0-NEXT:    [[COND4438:%.*]] = phi i64 [ [[TMP2174]], [[COND_TRUE4435]] ], [ [[TMP2175]], [[COND_FALSE4436]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4438]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2176:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2177:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4439:%.*]] = icmp slt i64 [[TMP2176]], [[TMP2177]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4439]], label [[COND_TRUE4441:%.*]], label [[COND_FALSE4442:%.*]]
// SIMD-ONLY0:       cond.true4441:
// SIMD-ONLY0-NEXT:    [[TMP2178:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4443:%.*]]
// SIMD-ONLY0:       cond.false4442:
// SIMD-ONLY0-NEXT:    [[TMP2179:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4443]]
// SIMD-ONLY0:       cond.end4443:
// SIMD-ONLY0-NEXT:    [[COND4444:%.*]] = phi i64 [ [[TMP2178]], [[COND_TRUE4441]] ], [ [[TMP2179]], [[COND_FALSE4442]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4444]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2180:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2181:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4445:%.*]] = icmp sgt i64 [[TMP2180]], [[TMP2181]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4445]], label [[COND_TRUE4447:%.*]], label [[COND_FALSE4448:%.*]]
// SIMD-ONLY0:       cond.true4447:
// SIMD-ONLY0-NEXT:    [[TMP2182:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4449:%.*]]
// SIMD-ONLY0:       cond.false4448:
// SIMD-ONLY0-NEXT:    [[TMP2183:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4449]]
// SIMD-ONLY0:       cond.end4449:
// SIMD-ONLY0-NEXT:    [[COND4450:%.*]] = phi i64 [ [[TMP2182]], [[COND_TRUE4447]] ], [ [[TMP2183]], [[COND_FALSE4448]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4450]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2184:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2185:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4451:%.*]] = icmp slt i64 [[TMP2184]], [[TMP2185]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4451]], label [[COND_TRUE4453:%.*]], label [[COND_FALSE4454:%.*]]
// SIMD-ONLY0:       cond.true4453:
// SIMD-ONLY0-NEXT:    [[TMP2186:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4455:%.*]]
// SIMD-ONLY0:       cond.false4454:
// SIMD-ONLY0-NEXT:    [[TMP2187:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4455]]
// SIMD-ONLY0:       cond.end4455:
// SIMD-ONLY0-NEXT:    [[COND4456:%.*]] = phi i64 [ [[TMP2186]], [[COND_TRUE4453]] ], [ [[TMP2187]], [[COND_FALSE4454]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4456]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2188:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2189:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4457:%.*]] = icmp sgt i64 [[TMP2188]], [[TMP2189]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4457]], label [[IF_THEN4459:%.*]], label [[IF_END4460:%.*]]
// SIMD-ONLY0:       if.then4459:
// SIMD-ONLY0-NEXT:    [[TMP2190:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2190]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4460]]
// SIMD-ONLY0:       if.end4460:
// SIMD-ONLY0-NEXT:    [[TMP2191:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2192:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4461:%.*]] = icmp slt i64 [[TMP2191]], [[TMP2192]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4461]], label [[IF_THEN4463:%.*]], label [[IF_END4464:%.*]]
// SIMD-ONLY0:       if.then4463:
// SIMD-ONLY0-NEXT:    [[TMP2193:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2193]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4464]]
// SIMD-ONLY0:       if.end4464:
// SIMD-ONLY0-NEXT:    [[TMP2194:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2195:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4465:%.*]] = icmp sgt i64 [[TMP2194]], [[TMP2195]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4465]], label [[IF_THEN4467:%.*]], label [[IF_END4468:%.*]]
// SIMD-ONLY0:       if.then4467:
// SIMD-ONLY0-NEXT:    [[TMP2196:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2196]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4468]]
// SIMD-ONLY0:       if.end4468:
// SIMD-ONLY0-NEXT:    [[TMP2197:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2198:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4469:%.*]] = icmp slt i64 [[TMP2197]], [[TMP2198]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4469]], label [[IF_THEN4471:%.*]], label [[IF_END4472:%.*]]
// SIMD-ONLY0:       if.then4471:
// SIMD-ONLY0-NEXT:    [[TMP2199:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2199]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4472]]
// SIMD-ONLY0:       if.end4472:
// SIMD-ONLY0-NEXT:    [[TMP2200:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2201:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4473:%.*]] = icmp eq i64 [[TMP2200]], [[TMP2201]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4473]], label [[COND_TRUE4475:%.*]], label [[COND_FALSE4476:%.*]]
// SIMD-ONLY0:       cond.true4475:
// SIMD-ONLY0-NEXT:    [[TMP2202:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4477:%.*]]
// SIMD-ONLY0:       cond.false4476:
// SIMD-ONLY0-NEXT:    [[TMP2203:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4477]]
// SIMD-ONLY0:       cond.end4477:
// SIMD-ONLY0-NEXT:    [[COND4478:%.*]] = phi i64 [ [[TMP2202]], [[COND_TRUE4475]] ], [ [[TMP2203]], [[COND_FALSE4476]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4478]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2204:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2205:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4479:%.*]] = icmp eq i64 [[TMP2204]], [[TMP2205]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4479]], label [[COND_TRUE4481:%.*]], label [[COND_FALSE4482:%.*]]
// SIMD-ONLY0:       cond.true4481:
// SIMD-ONLY0-NEXT:    [[TMP2206:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4483:%.*]]
// SIMD-ONLY0:       cond.false4482:
// SIMD-ONLY0-NEXT:    [[TMP2207:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4483]]
// SIMD-ONLY0:       cond.end4483:
// SIMD-ONLY0-NEXT:    [[COND4484:%.*]] = phi i64 [ [[TMP2206]], [[COND_TRUE4481]] ], [ [[TMP2207]], [[COND_FALSE4482]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4484]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2208:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2209:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4485:%.*]] = icmp eq i64 [[TMP2208]], [[TMP2209]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4485]], label [[IF_THEN4487:%.*]], label [[IF_END4488:%.*]]
// SIMD-ONLY0:       if.then4487:
// SIMD-ONLY0-NEXT:    [[TMP2210:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2210]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4488]]
// SIMD-ONLY0:       if.end4488:
// SIMD-ONLY0-NEXT:    [[TMP2211:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2212:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4489:%.*]] = icmp eq i64 [[TMP2211]], [[TMP2212]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4489]], label [[IF_THEN4491:%.*]], label [[IF_END4492:%.*]]
// SIMD-ONLY0:       if.then4491:
// SIMD-ONLY0-NEXT:    [[TMP2213:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2213]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4492]]
// SIMD-ONLY0:       if.end4492:
// SIMD-ONLY0-NEXT:    [[TMP2214:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2215:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4493:%.*]] = icmp ugt i64 [[TMP2214]], [[TMP2215]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4493]], label [[COND_TRUE4495:%.*]], label [[COND_FALSE4496:%.*]]
// SIMD-ONLY0:       cond.true4495:
// SIMD-ONLY0-NEXT:    [[TMP2216:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4497:%.*]]
// SIMD-ONLY0:       cond.false4496:
// SIMD-ONLY0-NEXT:    [[TMP2217:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4497]]
// SIMD-ONLY0:       cond.end4497:
// SIMD-ONLY0-NEXT:    [[COND4498:%.*]] = phi i64 [ [[TMP2216]], [[COND_TRUE4495]] ], [ [[TMP2217]], [[COND_FALSE4496]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4498]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2218:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2219:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4499:%.*]] = icmp ult i64 [[TMP2218]], [[TMP2219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4499]], label [[COND_TRUE4501:%.*]], label [[COND_FALSE4502:%.*]]
// SIMD-ONLY0:       cond.true4501:
// SIMD-ONLY0-NEXT:    [[TMP2220:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4503:%.*]]
// SIMD-ONLY0:       cond.false4502:
// SIMD-ONLY0-NEXT:    [[TMP2221:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4503]]
// SIMD-ONLY0:       cond.end4503:
// SIMD-ONLY0-NEXT:    [[COND4504:%.*]] = phi i64 [ [[TMP2220]], [[COND_TRUE4501]] ], [ [[TMP2221]], [[COND_FALSE4502]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4504]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2222:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2223:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4505:%.*]] = icmp ugt i64 [[TMP2222]], [[TMP2223]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4505]], label [[COND_TRUE4507:%.*]], label [[COND_FALSE4508:%.*]]
// SIMD-ONLY0:       cond.true4507:
// SIMD-ONLY0-NEXT:    [[TMP2224:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4509:%.*]]
// SIMD-ONLY0:       cond.false4508:
// SIMD-ONLY0-NEXT:    [[TMP2225:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4509]]
// SIMD-ONLY0:       cond.end4509:
// SIMD-ONLY0-NEXT:    [[COND4510:%.*]] = phi i64 [ [[TMP2224]], [[COND_TRUE4507]] ], [ [[TMP2225]], [[COND_FALSE4508]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4510]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2226:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2227:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4511:%.*]] = icmp ult i64 [[TMP2226]], [[TMP2227]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4511]], label [[COND_TRUE4513:%.*]], label [[COND_FALSE4514:%.*]]
// SIMD-ONLY0:       cond.true4513:
// SIMD-ONLY0-NEXT:    [[TMP2228:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4515:%.*]]
// SIMD-ONLY0:       cond.false4514:
// SIMD-ONLY0-NEXT:    [[TMP2229:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4515]]
// SIMD-ONLY0:       cond.end4515:
// SIMD-ONLY0-NEXT:    [[COND4516:%.*]] = phi i64 [ [[TMP2228]], [[COND_TRUE4513]] ], [ [[TMP2229]], [[COND_FALSE4514]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4516]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2230:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2231:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4517:%.*]] = icmp ugt i64 [[TMP2230]], [[TMP2231]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4517]], label [[IF_THEN4519:%.*]], label [[IF_END4520:%.*]]
// SIMD-ONLY0:       if.then4519:
// SIMD-ONLY0-NEXT:    [[TMP2232:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2232]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4520]]
// SIMD-ONLY0:       if.end4520:
// SIMD-ONLY0-NEXT:    [[TMP2233:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2234:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4521:%.*]] = icmp ult i64 [[TMP2233]], [[TMP2234]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4521]], label [[IF_THEN4523:%.*]], label [[IF_END4524:%.*]]
// SIMD-ONLY0:       if.then4523:
// SIMD-ONLY0-NEXT:    [[TMP2235:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2235]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4524]]
// SIMD-ONLY0:       if.end4524:
// SIMD-ONLY0-NEXT:    [[TMP2236:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2237:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4525:%.*]] = icmp ugt i64 [[TMP2236]], [[TMP2237]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4525]], label [[IF_THEN4527:%.*]], label [[IF_END4528:%.*]]
// SIMD-ONLY0:       if.then4527:
// SIMD-ONLY0-NEXT:    [[TMP2238:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2238]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4528]]
// SIMD-ONLY0:       if.end4528:
// SIMD-ONLY0-NEXT:    [[TMP2239:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2240:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4529:%.*]] = icmp ult i64 [[TMP2239]], [[TMP2240]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4529]], label [[IF_THEN4531:%.*]], label [[IF_END4532:%.*]]
// SIMD-ONLY0:       if.then4531:
// SIMD-ONLY0-NEXT:    [[TMP2241:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2241]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4532]]
// SIMD-ONLY0:       if.end4532:
// SIMD-ONLY0-NEXT:    [[TMP2242:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2243:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4533:%.*]] = icmp eq i64 [[TMP2242]], [[TMP2243]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4533]], label [[COND_TRUE4535:%.*]], label [[COND_FALSE4536:%.*]]
// SIMD-ONLY0:       cond.true4535:
// SIMD-ONLY0-NEXT:    [[TMP2244:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4537:%.*]]
// SIMD-ONLY0:       cond.false4536:
// SIMD-ONLY0-NEXT:    [[TMP2245:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4537]]
// SIMD-ONLY0:       cond.end4537:
// SIMD-ONLY0-NEXT:    [[COND4538:%.*]] = phi i64 [ [[TMP2244]], [[COND_TRUE4535]] ], [ [[TMP2245]], [[COND_FALSE4536]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4538]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2246:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2247:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4539:%.*]] = icmp eq i64 [[TMP2246]], [[TMP2247]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4539]], label [[COND_TRUE4541:%.*]], label [[COND_FALSE4542:%.*]]
// SIMD-ONLY0:       cond.true4541:
// SIMD-ONLY0-NEXT:    [[TMP2248:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4543:%.*]]
// SIMD-ONLY0:       cond.false4542:
// SIMD-ONLY0-NEXT:    [[TMP2249:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4543]]
// SIMD-ONLY0:       cond.end4543:
// SIMD-ONLY0-NEXT:    [[COND4544:%.*]] = phi i64 [ [[TMP2248]], [[COND_TRUE4541]] ], [ [[TMP2249]], [[COND_FALSE4542]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4544]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2250:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2251:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4545:%.*]] = icmp eq i64 [[TMP2250]], [[TMP2251]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4545]], label [[IF_THEN4547:%.*]], label [[IF_END4548:%.*]]
// SIMD-ONLY0:       if.then4547:
// SIMD-ONLY0-NEXT:    [[TMP2252:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2252]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4548]]
// SIMD-ONLY0:       if.end4548:
// SIMD-ONLY0-NEXT:    [[TMP2253:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2254:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4549:%.*]] = icmp eq i64 [[TMP2253]], [[TMP2254]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4549]], label [[IF_THEN4551:%.*]], label [[IF_END4552:%.*]]
// SIMD-ONLY0:       if.then4551:
// SIMD-ONLY0-NEXT:    [[TMP2255:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2255]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4552]]
// SIMD-ONLY0:       if.end4552:
// SIMD-ONLY0-NEXT:    [[TMP2256:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2257:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4553:%.*]] = icmp sgt i64 [[TMP2256]], [[TMP2257]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4553]], label [[COND_TRUE4555:%.*]], label [[COND_FALSE4556:%.*]]
// SIMD-ONLY0:       cond.true4555:
// SIMD-ONLY0-NEXT:    [[TMP2258:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4557:%.*]]
// SIMD-ONLY0:       cond.false4556:
// SIMD-ONLY0-NEXT:    [[TMP2259:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4557]]
// SIMD-ONLY0:       cond.end4557:
// SIMD-ONLY0-NEXT:    [[COND4558:%.*]] = phi i64 [ [[TMP2258]], [[COND_TRUE4555]] ], [ [[TMP2259]], [[COND_FALSE4556]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4558]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2260:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2261:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4559:%.*]] = icmp slt i64 [[TMP2260]], [[TMP2261]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4559]], label [[COND_TRUE4561:%.*]], label [[COND_FALSE4562:%.*]]
// SIMD-ONLY0:       cond.true4561:
// SIMD-ONLY0-NEXT:    [[TMP2262:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4563:%.*]]
// SIMD-ONLY0:       cond.false4562:
// SIMD-ONLY0-NEXT:    [[TMP2263:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4563]]
// SIMD-ONLY0:       cond.end4563:
// SIMD-ONLY0-NEXT:    [[COND4564:%.*]] = phi i64 [ [[TMP2262]], [[COND_TRUE4561]] ], [ [[TMP2263]], [[COND_FALSE4562]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4564]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2264:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2265:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4565:%.*]] = icmp sgt i64 [[TMP2264]], [[TMP2265]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4565]], label [[COND_TRUE4567:%.*]], label [[COND_FALSE4568:%.*]]
// SIMD-ONLY0:       cond.true4567:
// SIMD-ONLY0-NEXT:    [[TMP2266:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4569:%.*]]
// SIMD-ONLY0:       cond.false4568:
// SIMD-ONLY0-NEXT:    [[TMP2267:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4569]]
// SIMD-ONLY0:       cond.end4569:
// SIMD-ONLY0-NEXT:    [[COND4570:%.*]] = phi i64 [ [[TMP2266]], [[COND_TRUE4567]] ], [ [[TMP2267]], [[COND_FALSE4568]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4570]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2268:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2269:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4571:%.*]] = icmp slt i64 [[TMP2268]], [[TMP2269]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4571]], label [[COND_TRUE4573:%.*]], label [[COND_FALSE4574:%.*]]
// SIMD-ONLY0:       cond.true4573:
// SIMD-ONLY0-NEXT:    [[TMP2270:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4575:%.*]]
// SIMD-ONLY0:       cond.false4574:
// SIMD-ONLY0-NEXT:    [[TMP2271:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4575]]
// SIMD-ONLY0:       cond.end4575:
// SIMD-ONLY0-NEXT:    [[COND4576:%.*]] = phi i64 [ [[TMP2270]], [[COND_TRUE4573]] ], [ [[TMP2271]], [[COND_FALSE4574]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4576]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2272:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2273:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4577:%.*]] = icmp sgt i64 [[TMP2272]], [[TMP2273]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4577]], label [[IF_THEN4579:%.*]], label [[IF_END4580:%.*]]
// SIMD-ONLY0:       if.then4579:
// SIMD-ONLY0-NEXT:    [[TMP2274:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2274]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4580]]
// SIMD-ONLY0:       if.end4580:
// SIMD-ONLY0-NEXT:    [[TMP2275:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2276:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4581:%.*]] = icmp slt i64 [[TMP2275]], [[TMP2276]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4581]], label [[IF_THEN4583:%.*]], label [[IF_END4584:%.*]]
// SIMD-ONLY0:       if.then4583:
// SIMD-ONLY0-NEXT:    [[TMP2277:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2277]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4584]]
// SIMD-ONLY0:       if.end4584:
// SIMD-ONLY0-NEXT:    [[TMP2278:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2279:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4585:%.*]] = icmp sgt i64 [[TMP2278]], [[TMP2279]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4585]], label [[IF_THEN4587:%.*]], label [[IF_END4588:%.*]]
// SIMD-ONLY0:       if.then4587:
// SIMD-ONLY0-NEXT:    [[TMP2280:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2280]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4588]]
// SIMD-ONLY0:       if.end4588:
// SIMD-ONLY0-NEXT:    [[TMP2281:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2282:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4589:%.*]] = icmp slt i64 [[TMP2281]], [[TMP2282]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4589]], label [[IF_THEN4591:%.*]], label [[IF_END4592:%.*]]
// SIMD-ONLY0:       if.then4591:
// SIMD-ONLY0-NEXT:    [[TMP2283:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2283]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4592]]
// SIMD-ONLY0:       if.end4592:
// SIMD-ONLY0-NEXT:    [[TMP2284:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2285:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4593:%.*]] = icmp eq i64 [[TMP2284]], [[TMP2285]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4593]], label [[COND_TRUE4595:%.*]], label [[COND_FALSE4596:%.*]]
// SIMD-ONLY0:       cond.true4595:
// SIMD-ONLY0-NEXT:    [[TMP2286:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4597:%.*]]
// SIMD-ONLY0:       cond.false4596:
// SIMD-ONLY0-NEXT:    [[TMP2287:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4597]]
// SIMD-ONLY0:       cond.end4597:
// SIMD-ONLY0-NEXT:    [[COND4598:%.*]] = phi i64 [ [[TMP2286]], [[COND_TRUE4595]] ], [ [[TMP2287]], [[COND_FALSE4596]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4598]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2288:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2289:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4599:%.*]] = icmp eq i64 [[TMP2288]], [[TMP2289]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4599]], label [[COND_TRUE4601:%.*]], label [[COND_FALSE4602:%.*]]
// SIMD-ONLY0:       cond.true4601:
// SIMD-ONLY0-NEXT:    [[TMP2290:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4603:%.*]]
// SIMD-ONLY0:       cond.false4602:
// SIMD-ONLY0-NEXT:    [[TMP2291:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4603]]
// SIMD-ONLY0:       cond.end4603:
// SIMD-ONLY0-NEXT:    [[COND4604:%.*]] = phi i64 [ [[TMP2290]], [[COND_TRUE4601]] ], [ [[TMP2291]], [[COND_FALSE4602]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4604]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2292:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2293:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4605:%.*]] = icmp eq i64 [[TMP2292]], [[TMP2293]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4605]], label [[IF_THEN4607:%.*]], label [[IF_END4608:%.*]]
// SIMD-ONLY0:       if.then4607:
// SIMD-ONLY0-NEXT:    [[TMP2294:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2294]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4608]]
// SIMD-ONLY0:       if.end4608:
// SIMD-ONLY0-NEXT:    [[TMP2295:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2296:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4609:%.*]] = icmp eq i64 [[TMP2295]], [[TMP2296]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4609]], label [[IF_THEN4611:%.*]], label [[IF_END4612:%.*]]
// SIMD-ONLY0:       if.then4611:
// SIMD-ONLY0-NEXT:    [[TMP2297:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2297]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4612]]
// SIMD-ONLY0:       if.end4612:
// SIMD-ONLY0-NEXT:    [[TMP2298:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2299:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4613:%.*]] = icmp ugt i64 [[TMP2298]], [[TMP2299]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4613]], label [[COND_TRUE4615:%.*]], label [[COND_FALSE4616:%.*]]
// SIMD-ONLY0:       cond.true4615:
// SIMD-ONLY0-NEXT:    [[TMP2300:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4617:%.*]]
// SIMD-ONLY0:       cond.false4616:
// SIMD-ONLY0-NEXT:    [[TMP2301:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4617]]
// SIMD-ONLY0:       cond.end4617:
// SIMD-ONLY0-NEXT:    [[COND4618:%.*]] = phi i64 [ [[TMP2300]], [[COND_TRUE4615]] ], [ [[TMP2301]], [[COND_FALSE4616]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4618]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2302:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2303:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4619:%.*]] = icmp ult i64 [[TMP2302]], [[TMP2303]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4619]], label [[COND_TRUE4621:%.*]], label [[COND_FALSE4622:%.*]]
// SIMD-ONLY0:       cond.true4621:
// SIMD-ONLY0-NEXT:    [[TMP2304:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4623:%.*]]
// SIMD-ONLY0:       cond.false4622:
// SIMD-ONLY0-NEXT:    [[TMP2305:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4623]]
// SIMD-ONLY0:       cond.end4623:
// SIMD-ONLY0-NEXT:    [[COND4624:%.*]] = phi i64 [ [[TMP2304]], [[COND_TRUE4621]] ], [ [[TMP2305]], [[COND_FALSE4622]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4624]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2306:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2307:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4625:%.*]] = icmp ugt i64 [[TMP2306]], [[TMP2307]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4625]], label [[COND_TRUE4627:%.*]], label [[COND_FALSE4628:%.*]]
// SIMD-ONLY0:       cond.true4627:
// SIMD-ONLY0-NEXT:    [[TMP2308:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4629:%.*]]
// SIMD-ONLY0:       cond.false4628:
// SIMD-ONLY0-NEXT:    [[TMP2309:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4629]]
// SIMD-ONLY0:       cond.end4629:
// SIMD-ONLY0-NEXT:    [[COND4630:%.*]] = phi i64 [ [[TMP2308]], [[COND_TRUE4627]] ], [ [[TMP2309]], [[COND_FALSE4628]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4630]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2310:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2311:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4631:%.*]] = icmp ult i64 [[TMP2310]], [[TMP2311]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4631]], label [[COND_TRUE4633:%.*]], label [[COND_FALSE4634:%.*]]
// SIMD-ONLY0:       cond.true4633:
// SIMD-ONLY0-NEXT:    [[TMP2312:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4635:%.*]]
// SIMD-ONLY0:       cond.false4634:
// SIMD-ONLY0-NEXT:    [[TMP2313:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4635]]
// SIMD-ONLY0:       cond.end4635:
// SIMD-ONLY0-NEXT:    [[COND4636:%.*]] = phi i64 [ [[TMP2312]], [[COND_TRUE4633]] ], [ [[TMP2313]], [[COND_FALSE4634]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4636]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2314:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2315:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4637:%.*]] = icmp ugt i64 [[TMP2314]], [[TMP2315]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4637]], label [[IF_THEN4639:%.*]], label [[IF_END4640:%.*]]
// SIMD-ONLY0:       if.then4639:
// SIMD-ONLY0-NEXT:    [[TMP2316:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2316]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4640]]
// SIMD-ONLY0:       if.end4640:
// SIMD-ONLY0-NEXT:    [[TMP2317:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2318:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4641:%.*]] = icmp ult i64 [[TMP2317]], [[TMP2318]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4641]], label [[IF_THEN4643:%.*]], label [[IF_END4644:%.*]]
// SIMD-ONLY0:       if.then4643:
// SIMD-ONLY0-NEXT:    [[TMP2319:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2319]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4644]]
// SIMD-ONLY0:       if.end4644:
// SIMD-ONLY0-NEXT:    [[TMP2320:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2321:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4645:%.*]] = icmp ugt i64 [[TMP2320]], [[TMP2321]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4645]], label [[IF_THEN4647:%.*]], label [[IF_END4648:%.*]]
// SIMD-ONLY0:       if.then4647:
// SIMD-ONLY0-NEXT:    [[TMP2322:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2322]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4648]]
// SIMD-ONLY0:       if.end4648:
// SIMD-ONLY0-NEXT:    [[TMP2323:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2324:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4649:%.*]] = icmp ult i64 [[TMP2323]], [[TMP2324]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4649]], label [[IF_THEN4651:%.*]], label [[IF_END4652:%.*]]
// SIMD-ONLY0:       if.then4651:
// SIMD-ONLY0-NEXT:    [[TMP2325:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2325]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4652]]
// SIMD-ONLY0:       if.end4652:
// SIMD-ONLY0-NEXT:    [[TMP2326:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2327:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4653:%.*]] = icmp eq i64 [[TMP2326]], [[TMP2327]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4653]], label [[COND_TRUE4655:%.*]], label [[COND_FALSE4656:%.*]]
// SIMD-ONLY0:       cond.true4655:
// SIMD-ONLY0-NEXT:    [[TMP2328:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4657:%.*]]
// SIMD-ONLY0:       cond.false4656:
// SIMD-ONLY0-NEXT:    [[TMP2329:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4657]]
// SIMD-ONLY0:       cond.end4657:
// SIMD-ONLY0-NEXT:    [[COND4658:%.*]] = phi i64 [ [[TMP2328]], [[COND_TRUE4655]] ], [ [[TMP2329]], [[COND_FALSE4656]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4658]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2330:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2331:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4659:%.*]] = icmp eq i64 [[TMP2330]], [[TMP2331]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4659]], label [[COND_TRUE4661:%.*]], label [[COND_FALSE4662:%.*]]
// SIMD-ONLY0:       cond.true4661:
// SIMD-ONLY0-NEXT:    [[TMP2332:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4663:%.*]]
// SIMD-ONLY0:       cond.false4662:
// SIMD-ONLY0-NEXT:    [[TMP2333:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4663]]
// SIMD-ONLY0:       cond.end4663:
// SIMD-ONLY0-NEXT:    [[COND4664:%.*]] = phi i64 [ [[TMP2332]], [[COND_TRUE4661]] ], [ [[TMP2333]], [[COND_FALSE4662]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4664]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2334:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2335:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4665:%.*]] = icmp eq i64 [[TMP2334]], [[TMP2335]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4665]], label [[IF_THEN4667:%.*]], label [[IF_END4668:%.*]]
// SIMD-ONLY0:       if.then4667:
// SIMD-ONLY0-NEXT:    [[TMP2336:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2336]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4668]]
// SIMD-ONLY0:       if.end4668:
// SIMD-ONLY0-NEXT:    [[TMP2337:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2338:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4669:%.*]] = icmp eq i64 [[TMP2337]], [[TMP2338]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4669]], label [[IF_THEN4671:%.*]], label [[IF_END4672:%.*]]
// SIMD-ONLY0:       if.then4671:
// SIMD-ONLY0-NEXT:    [[TMP2339:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2339]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4672]]
// SIMD-ONLY0:       if.end4672:
// SIMD-ONLY0-NEXT:    [[TMP2340:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2341:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4673:%.*]] = icmp sgt i64 [[TMP2340]], [[TMP2341]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4673]], label [[COND_TRUE4675:%.*]], label [[COND_FALSE4676:%.*]]
// SIMD-ONLY0:       cond.true4675:
// SIMD-ONLY0-NEXT:    [[TMP2342:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4677:%.*]]
// SIMD-ONLY0:       cond.false4676:
// SIMD-ONLY0-NEXT:    [[TMP2343:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4677]]
// SIMD-ONLY0:       cond.end4677:
// SIMD-ONLY0-NEXT:    [[COND4678:%.*]] = phi i64 [ [[TMP2342]], [[COND_TRUE4675]] ], [ [[TMP2343]], [[COND_FALSE4676]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4678]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2344:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2345:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4679:%.*]] = icmp slt i64 [[TMP2344]], [[TMP2345]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4679]], label [[COND_TRUE4681:%.*]], label [[COND_FALSE4682:%.*]]
// SIMD-ONLY0:       cond.true4681:
// SIMD-ONLY0-NEXT:    [[TMP2346:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4683:%.*]]
// SIMD-ONLY0:       cond.false4682:
// SIMD-ONLY0-NEXT:    [[TMP2347:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4683]]
// SIMD-ONLY0:       cond.end4683:
// SIMD-ONLY0-NEXT:    [[COND4684:%.*]] = phi i64 [ [[TMP2346]], [[COND_TRUE4681]] ], [ [[TMP2347]], [[COND_FALSE4682]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4684]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2348:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2349:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4685:%.*]] = icmp sgt i64 [[TMP2348]], [[TMP2349]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4685]], label [[COND_TRUE4687:%.*]], label [[COND_FALSE4688:%.*]]
// SIMD-ONLY0:       cond.true4687:
// SIMD-ONLY0-NEXT:    [[TMP2350:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4689:%.*]]
// SIMD-ONLY0:       cond.false4688:
// SIMD-ONLY0-NEXT:    [[TMP2351:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4689]]
// SIMD-ONLY0:       cond.end4689:
// SIMD-ONLY0-NEXT:    [[COND4690:%.*]] = phi i64 [ [[TMP2350]], [[COND_TRUE4687]] ], [ [[TMP2351]], [[COND_FALSE4688]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4690]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2352:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2353:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4691:%.*]] = icmp slt i64 [[TMP2352]], [[TMP2353]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4691]], label [[COND_TRUE4693:%.*]], label [[COND_FALSE4694:%.*]]
// SIMD-ONLY0:       cond.true4693:
// SIMD-ONLY0-NEXT:    [[TMP2354:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4695:%.*]]
// SIMD-ONLY0:       cond.false4694:
// SIMD-ONLY0-NEXT:    [[TMP2355:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4695]]
// SIMD-ONLY0:       cond.end4695:
// SIMD-ONLY0-NEXT:    [[COND4696:%.*]] = phi i64 [ [[TMP2354]], [[COND_TRUE4693]] ], [ [[TMP2355]], [[COND_FALSE4694]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4696]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2356:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2357:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4697:%.*]] = icmp sgt i64 [[TMP2356]], [[TMP2357]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4697]], label [[IF_THEN4699:%.*]], label [[IF_END4700:%.*]]
// SIMD-ONLY0:       if.then4699:
// SIMD-ONLY0-NEXT:    [[TMP2358:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2358]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4700]]
// SIMD-ONLY0:       if.end4700:
// SIMD-ONLY0-NEXT:    [[TMP2359:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2360:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4701:%.*]] = icmp slt i64 [[TMP2359]], [[TMP2360]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4701]], label [[IF_THEN4703:%.*]], label [[IF_END4704:%.*]]
// SIMD-ONLY0:       if.then4703:
// SIMD-ONLY0-NEXT:    [[TMP2361:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2361]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4704]]
// SIMD-ONLY0:       if.end4704:
// SIMD-ONLY0-NEXT:    [[TMP2362:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2363:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4705:%.*]] = icmp sgt i64 [[TMP2362]], [[TMP2363]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4705]], label [[IF_THEN4707:%.*]], label [[IF_END4708:%.*]]
// SIMD-ONLY0:       if.then4707:
// SIMD-ONLY0-NEXT:    [[TMP2364:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2364]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4708]]
// SIMD-ONLY0:       if.end4708:
// SIMD-ONLY0-NEXT:    [[TMP2365:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2366:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4709:%.*]] = icmp slt i64 [[TMP2365]], [[TMP2366]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4709]], label [[IF_THEN4711:%.*]], label [[IF_END4712:%.*]]
// SIMD-ONLY0:       if.then4711:
// SIMD-ONLY0-NEXT:    [[TMP2367:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2367]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4712]]
// SIMD-ONLY0:       if.end4712:
// SIMD-ONLY0-NEXT:    [[TMP2368:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2369:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4713:%.*]] = icmp eq i64 [[TMP2368]], [[TMP2369]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4713]], label [[COND_TRUE4715:%.*]], label [[COND_FALSE4716:%.*]]
// SIMD-ONLY0:       cond.true4715:
// SIMD-ONLY0-NEXT:    [[TMP2370:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4717:%.*]]
// SIMD-ONLY0:       cond.false4716:
// SIMD-ONLY0-NEXT:    [[TMP2371:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4717]]
// SIMD-ONLY0:       cond.end4717:
// SIMD-ONLY0-NEXT:    [[COND4718:%.*]] = phi i64 [ [[TMP2370]], [[COND_TRUE4715]] ], [ [[TMP2371]], [[COND_FALSE4716]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4718]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2372:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2373:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4719:%.*]] = icmp eq i64 [[TMP2372]], [[TMP2373]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4719]], label [[COND_TRUE4721:%.*]], label [[COND_FALSE4722:%.*]]
// SIMD-ONLY0:       cond.true4721:
// SIMD-ONLY0-NEXT:    [[TMP2374:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4723:%.*]]
// SIMD-ONLY0:       cond.false4722:
// SIMD-ONLY0-NEXT:    [[TMP2375:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4723]]
// SIMD-ONLY0:       cond.end4723:
// SIMD-ONLY0-NEXT:    [[COND4724:%.*]] = phi i64 [ [[TMP2374]], [[COND_TRUE4721]] ], [ [[TMP2375]], [[COND_FALSE4722]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4724]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2376:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2377:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4725:%.*]] = icmp eq i64 [[TMP2376]], [[TMP2377]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4725]], label [[IF_THEN4727:%.*]], label [[IF_END4728:%.*]]
// SIMD-ONLY0:       if.then4727:
// SIMD-ONLY0-NEXT:    [[TMP2378:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2378]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4728]]
// SIMD-ONLY0:       if.end4728:
// SIMD-ONLY0-NEXT:    [[TMP2379:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2380:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4729:%.*]] = icmp eq i64 [[TMP2379]], [[TMP2380]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4729]], label [[IF_THEN4731:%.*]], label [[IF_END4732:%.*]]
// SIMD-ONLY0:       if.then4731:
// SIMD-ONLY0-NEXT:    [[TMP2381:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2381]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4732]]
// SIMD-ONLY0:       if.end4732:
// SIMD-ONLY0-NEXT:    [[TMP2382:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2383:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4733:%.*]] = icmp ugt i64 [[TMP2382]], [[TMP2383]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4733]], label [[COND_TRUE4735:%.*]], label [[COND_FALSE4736:%.*]]
// SIMD-ONLY0:       cond.true4735:
// SIMD-ONLY0-NEXT:    [[TMP2384:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4737:%.*]]
// SIMD-ONLY0:       cond.false4736:
// SIMD-ONLY0-NEXT:    [[TMP2385:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4737]]
// SIMD-ONLY0:       cond.end4737:
// SIMD-ONLY0-NEXT:    [[COND4738:%.*]] = phi i64 [ [[TMP2384]], [[COND_TRUE4735]] ], [ [[TMP2385]], [[COND_FALSE4736]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4738]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2386:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2387:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4739:%.*]] = icmp ult i64 [[TMP2386]], [[TMP2387]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4739]], label [[COND_TRUE4741:%.*]], label [[COND_FALSE4742:%.*]]
// SIMD-ONLY0:       cond.true4741:
// SIMD-ONLY0-NEXT:    [[TMP2388:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4743:%.*]]
// SIMD-ONLY0:       cond.false4742:
// SIMD-ONLY0-NEXT:    [[TMP2389:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4743]]
// SIMD-ONLY0:       cond.end4743:
// SIMD-ONLY0-NEXT:    [[COND4744:%.*]] = phi i64 [ [[TMP2388]], [[COND_TRUE4741]] ], [ [[TMP2389]], [[COND_FALSE4742]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4744]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2390:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2391:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4745:%.*]] = icmp ugt i64 [[TMP2390]], [[TMP2391]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4745]], label [[COND_TRUE4747:%.*]], label [[COND_FALSE4748:%.*]]
// SIMD-ONLY0:       cond.true4747:
// SIMD-ONLY0-NEXT:    [[TMP2392:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4749:%.*]]
// SIMD-ONLY0:       cond.false4748:
// SIMD-ONLY0-NEXT:    [[TMP2393:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4749]]
// SIMD-ONLY0:       cond.end4749:
// SIMD-ONLY0-NEXT:    [[COND4750:%.*]] = phi i64 [ [[TMP2392]], [[COND_TRUE4747]] ], [ [[TMP2393]], [[COND_FALSE4748]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4750]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2394:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2395:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4751:%.*]] = icmp ult i64 [[TMP2394]], [[TMP2395]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4751]], label [[COND_TRUE4753:%.*]], label [[COND_FALSE4754:%.*]]
// SIMD-ONLY0:       cond.true4753:
// SIMD-ONLY0-NEXT:    [[TMP2396:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4755:%.*]]
// SIMD-ONLY0:       cond.false4754:
// SIMD-ONLY0-NEXT:    [[TMP2397:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4755]]
// SIMD-ONLY0:       cond.end4755:
// SIMD-ONLY0-NEXT:    [[COND4756:%.*]] = phi i64 [ [[TMP2396]], [[COND_TRUE4753]] ], [ [[TMP2397]], [[COND_FALSE4754]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4756]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2398:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2399:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4757:%.*]] = icmp ugt i64 [[TMP2398]], [[TMP2399]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4757]], label [[IF_THEN4759:%.*]], label [[IF_END4760:%.*]]
// SIMD-ONLY0:       if.then4759:
// SIMD-ONLY0-NEXT:    [[TMP2400:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2400]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4760]]
// SIMD-ONLY0:       if.end4760:
// SIMD-ONLY0-NEXT:    [[TMP2401:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2402:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4761:%.*]] = icmp ult i64 [[TMP2401]], [[TMP2402]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4761]], label [[IF_THEN4763:%.*]], label [[IF_END4764:%.*]]
// SIMD-ONLY0:       if.then4763:
// SIMD-ONLY0-NEXT:    [[TMP2403:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2403]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4764]]
// SIMD-ONLY0:       if.end4764:
// SIMD-ONLY0-NEXT:    [[TMP2404:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2405:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4765:%.*]] = icmp ugt i64 [[TMP2404]], [[TMP2405]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4765]], label [[IF_THEN4767:%.*]], label [[IF_END4768:%.*]]
// SIMD-ONLY0:       if.then4767:
// SIMD-ONLY0-NEXT:    [[TMP2406:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2406]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4768]]
// SIMD-ONLY0:       if.end4768:
// SIMD-ONLY0-NEXT:    [[TMP2407:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2408:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4769:%.*]] = icmp ult i64 [[TMP2407]], [[TMP2408]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4769]], label [[IF_THEN4771:%.*]], label [[IF_END4772:%.*]]
// SIMD-ONLY0:       if.then4771:
// SIMD-ONLY0-NEXT:    [[TMP2409:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2409]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4772]]
// SIMD-ONLY0:       if.end4772:
// SIMD-ONLY0-NEXT:    [[TMP2410:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2411:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4773:%.*]] = icmp eq i64 [[TMP2410]], [[TMP2411]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4773]], label [[COND_TRUE4775:%.*]], label [[COND_FALSE4776:%.*]]
// SIMD-ONLY0:       cond.true4775:
// SIMD-ONLY0-NEXT:    [[TMP2412:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4777:%.*]]
// SIMD-ONLY0:       cond.false4776:
// SIMD-ONLY0-NEXT:    [[TMP2413:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4777]]
// SIMD-ONLY0:       cond.end4777:
// SIMD-ONLY0-NEXT:    [[COND4778:%.*]] = phi i64 [ [[TMP2412]], [[COND_TRUE4775]] ], [ [[TMP2413]], [[COND_FALSE4776]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4778]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2414:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2415:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4779:%.*]] = icmp eq i64 [[TMP2414]], [[TMP2415]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4779]], label [[COND_TRUE4781:%.*]], label [[COND_FALSE4782:%.*]]
// SIMD-ONLY0:       cond.true4781:
// SIMD-ONLY0-NEXT:    [[TMP2416:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4783:%.*]]
// SIMD-ONLY0:       cond.false4782:
// SIMD-ONLY0-NEXT:    [[TMP2417:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4783]]
// SIMD-ONLY0:       cond.end4783:
// SIMD-ONLY0-NEXT:    [[COND4784:%.*]] = phi i64 [ [[TMP2416]], [[COND_TRUE4781]] ], [ [[TMP2417]], [[COND_FALSE4782]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4784]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2418:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2419:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4785:%.*]] = icmp eq i64 [[TMP2418]], [[TMP2419]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4785]], label [[IF_THEN4787:%.*]], label [[IF_END4788:%.*]]
// SIMD-ONLY0:       if.then4787:
// SIMD-ONLY0-NEXT:    [[TMP2420:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2420]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4788]]
// SIMD-ONLY0:       if.end4788:
// SIMD-ONLY0-NEXT:    [[TMP2421:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2422:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4789:%.*]] = icmp eq i64 [[TMP2421]], [[TMP2422]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4789]], label [[IF_THEN4791:%.*]], label [[IF_END4792:%.*]]
// SIMD-ONLY0:       if.then4791:
// SIMD-ONLY0-NEXT:    [[TMP2423:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2423]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4792]]
// SIMD-ONLY0:       if.end4792:
// SIMD-ONLY0-NEXT:    [[TMP2424:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2425:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4793:%.*]] = icmp sgt i64 [[TMP2424]], [[TMP2425]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4793]], label [[COND_TRUE4795:%.*]], label [[COND_FALSE4796:%.*]]
// SIMD-ONLY0:       cond.true4795:
// SIMD-ONLY0-NEXT:    [[TMP2426:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4797:%.*]]
// SIMD-ONLY0:       cond.false4796:
// SIMD-ONLY0-NEXT:    [[TMP2427:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4797]]
// SIMD-ONLY0:       cond.end4797:
// SIMD-ONLY0-NEXT:    [[COND4798:%.*]] = phi i64 [ [[TMP2426]], [[COND_TRUE4795]] ], [ [[TMP2427]], [[COND_FALSE4796]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4798]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2428:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2429:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4799:%.*]] = icmp slt i64 [[TMP2428]], [[TMP2429]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4799]], label [[COND_TRUE4801:%.*]], label [[COND_FALSE4802:%.*]]
// SIMD-ONLY0:       cond.true4801:
// SIMD-ONLY0-NEXT:    [[TMP2430:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4803:%.*]]
// SIMD-ONLY0:       cond.false4802:
// SIMD-ONLY0-NEXT:    [[TMP2431:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4803]]
// SIMD-ONLY0:       cond.end4803:
// SIMD-ONLY0-NEXT:    [[COND4804:%.*]] = phi i64 [ [[TMP2430]], [[COND_TRUE4801]] ], [ [[TMP2431]], [[COND_FALSE4802]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4804]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2432:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2433:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4805:%.*]] = icmp sgt i64 [[TMP2432]], [[TMP2433]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4805]], label [[COND_TRUE4807:%.*]], label [[COND_FALSE4808:%.*]]
// SIMD-ONLY0:       cond.true4807:
// SIMD-ONLY0-NEXT:    [[TMP2434:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4809:%.*]]
// SIMD-ONLY0:       cond.false4808:
// SIMD-ONLY0-NEXT:    [[TMP2435:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4809]]
// SIMD-ONLY0:       cond.end4809:
// SIMD-ONLY0-NEXT:    [[COND4810:%.*]] = phi i64 [ [[TMP2434]], [[COND_TRUE4807]] ], [ [[TMP2435]], [[COND_FALSE4808]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4810]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2436:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2437:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4811:%.*]] = icmp slt i64 [[TMP2436]], [[TMP2437]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4811]], label [[COND_TRUE4813:%.*]], label [[COND_FALSE4814:%.*]]
// SIMD-ONLY0:       cond.true4813:
// SIMD-ONLY0-NEXT:    [[TMP2438:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4815:%.*]]
// SIMD-ONLY0:       cond.false4814:
// SIMD-ONLY0-NEXT:    [[TMP2439:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4815]]
// SIMD-ONLY0:       cond.end4815:
// SIMD-ONLY0-NEXT:    [[COND4816:%.*]] = phi i64 [ [[TMP2438]], [[COND_TRUE4813]] ], [ [[TMP2439]], [[COND_FALSE4814]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4816]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2440:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2441:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4817:%.*]] = icmp sgt i64 [[TMP2440]], [[TMP2441]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4817]], label [[IF_THEN4819:%.*]], label [[IF_END4820:%.*]]
// SIMD-ONLY0:       if.then4819:
// SIMD-ONLY0-NEXT:    [[TMP2442:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2442]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4820]]
// SIMD-ONLY0:       if.end4820:
// SIMD-ONLY0-NEXT:    [[TMP2443:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2444:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4821:%.*]] = icmp slt i64 [[TMP2443]], [[TMP2444]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4821]], label [[IF_THEN4823:%.*]], label [[IF_END4824:%.*]]
// SIMD-ONLY0:       if.then4823:
// SIMD-ONLY0-NEXT:    [[TMP2445:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2445]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4824]]
// SIMD-ONLY0:       if.end4824:
// SIMD-ONLY0-NEXT:    [[TMP2446:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2447:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4825:%.*]] = icmp sgt i64 [[TMP2446]], [[TMP2447]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4825]], label [[IF_THEN4827:%.*]], label [[IF_END4828:%.*]]
// SIMD-ONLY0:       if.then4827:
// SIMD-ONLY0-NEXT:    [[TMP2448:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2448]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4828]]
// SIMD-ONLY0:       if.end4828:
// SIMD-ONLY0-NEXT:    [[TMP2449:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2450:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4829:%.*]] = icmp slt i64 [[TMP2449]], [[TMP2450]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4829]], label [[IF_THEN4831:%.*]], label [[IF_END4832:%.*]]
// SIMD-ONLY0:       if.then4831:
// SIMD-ONLY0-NEXT:    [[TMP2451:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2451]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4832]]
// SIMD-ONLY0:       if.end4832:
// SIMD-ONLY0-NEXT:    [[TMP2452:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2453:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4833:%.*]] = icmp eq i64 [[TMP2452]], [[TMP2453]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4833]], label [[COND_TRUE4835:%.*]], label [[COND_FALSE4836:%.*]]
// SIMD-ONLY0:       cond.true4835:
// SIMD-ONLY0-NEXT:    [[TMP2454:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4837:%.*]]
// SIMD-ONLY0:       cond.false4836:
// SIMD-ONLY0-NEXT:    [[TMP2455:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4837]]
// SIMD-ONLY0:       cond.end4837:
// SIMD-ONLY0-NEXT:    [[COND4838:%.*]] = phi i64 [ [[TMP2454]], [[COND_TRUE4835]] ], [ [[TMP2455]], [[COND_FALSE4836]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4838]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2456:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2457:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4839:%.*]] = icmp eq i64 [[TMP2456]], [[TMP2457]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4839]], label [[COND_TRUE4841:%.*]], label [[COND_FALSE4842:%.*]]
// SIMD-ONLY0:       cond.true4841:
// SIMD-ONLY0-NEXT:    [[TMP2458:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4843:%.*]]
// SIMD-ONLY0:       cond.false4842:
// SIMD-ONLY0-NEXT:    [[TMP2459:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4843]]
// SIMD-ONLY0:       cond.end4843:
// SIMD-ONLY0-NEXT:    [[COND4844:%.*]] = phi i64 [ [[TMP2458]], [[COND_TRUE4841]] ], [ [[TMP2459]], [[COND_FALSE4842]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4844]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2460:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2461:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4845:%.*]] = icmp eq i64 [[TMP2460]], [[TMP2461]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4845]], label [[IF_THEN4847:%.*]], label [[IF_END4848:%.*]]
// SIMD-ONLY0:       if.then4847:
// SIMD-ONLY0-NEXT:    [[TMP2462:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2462]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4848]]
// SIMD-ONLY0:       if.end4848:
// SIMD-ONLY0-NEXT:    [[TMP2463:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2464:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4849:%.*]] = icmp eq i64 [[TMP2463]], [[TMP2464]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4849]], label [[IF_THEN4851:%.*]], label [[IF_END4852:%.*]]
// SIMD-ONLY0:       if.then4851:
// SIMD-ONLY0-NEXT:    [[TMP2465:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2465]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4852]]
// SIMD-ONLY0:       if.end4852:
// SIMD-ONLY0-NEXT:    [[TMP2466:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2467:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4853:%.*]] = icmp ugt i64 [[TMP2466]], [[TMP2467]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4853]], label [[COND_TRUE4855:%.*]], label [[COND_FALSE4856:%.*]]
// SIMD-ONLY0:       cond.true4855:
// SIMD-ONLY0-NEXT:    [[TMP2468:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4857:%.*]]
// SIMD-ONLY0:       cond.false4856:
// SIMD-ONLY0-NEXT:    [[TMP2469:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4857]]
// SIMD-ONLY0:       cond.end4857:
// SIMD-ONLY0-NEXT:    [[COND4858:%.*]] = phi i64 [ [[TMP2468]], [[COND_TRUE4855]] ], [ [[TMP2469]], [[COND_FALSE4856]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4858]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2470:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2471:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4859:%.*]] = icmp ult i64 [[TMP2470]], [[TMP2471]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4859]], label [[COND_TRUE4861:%.*]], label [[COND_FALSE4862:%.*]]
// SIMD-ONLY0:       cond.true4861:
// SIMD-ONLY0-NEXT:    [[TMP2472:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4863:%.*]]
// SIMD-ONLY0:       cond.false4862:
// SIMD-ONLY0-NEXT:    [[TMP2473:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4863]]
// SIMD-ONLY0:       cond.end4863:
// SIMD-ONLY0-NEXT:    [[COND4864:%.*]] = phi i64 [ [[TMP2472]], [[COND_TRUE4861]] ], [ [[TMP2473]], [[COND_FALSE4862]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4864]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2474:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2475:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4865:%.*]] = icmp ugt i64 [[TMP2474]], [[TMP2475]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4865]], label [[COND_TRUE4867:%.*]], label [[COND_FALSE4868:%.*]]
// SIMD-ONLY0:       cond.true4867:
// SIMD-ONLY0-NEXT:    [[TMP2476:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4869:%.*]]
// SIMD-ONLY0:       cond.false4868:
// SIMD-ONLY0-NEXT:    [[TMP2477:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4869]]
// SIMD-ONLY0:       cond.end4869:
// SIMD-ONLY0-NEXT:    [[COND4870:%.*]] = phi i64 [ [[TMP2476]], [[COND_TRUE4867]] ], [ [[TMP2477]], [[COND_FALSE4868]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4870]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2478:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2479:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4871:%.*]] = icmp ult i64 [[TMP2478]], [[TMP2479]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4871]], label [[COND_TRUE4873:%.*]], label [[COND_FALSE4874:%.*]]
// SIMD-ONLY0:       cond.true4873:
// SIMD-ONLY0-NEXT:    [[TMP2480:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4875:%.*]]
// SIMD-ONLY0:       cond.false4874:
// SIMD-ONLY0-NEXT:    [[TMP2481:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4875]]
// SIMD-ONLY0:       cond.end4875:
// SIMD-ONLY0-NEXT:    [[COND4876:%.*]] = phi i64 [ [[TMP2480]], [[COND_TRUE4873]] ], [ [[TMP2481]], [[COND_FALSE4874]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4876]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2482:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2483:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4877:%.*]] = icmp ugt i64 [[TMP2482]], [[TMP2483]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4877]], label [[IF_THEN4879:%.*]], label [[IF_END4880:%.*]]
// SIMD-ONLY0:       if.then4879:
// SIMD-ONLY0-NEXT:    [[TMP2484:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2484]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4880]]
// SIMD-ONLY0:       if.end4880:
// SIMD-ONLY0-NEXT:    [[TMP2485:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2486:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4881:%.*]] = icmp ult i64 [[TMP2485]], [[TMP2486]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4881]], label [[IF_THEN4883:%.*]], label [[IF_END4884:%.*]]
// SIMD-ONLY0:       if.then4883:
// SIMD-ONLY0-NEXT:    [[TMP2487:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2487]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4884]]
// SIMD-ONLY0:       if.end4884:
// SIMD-ONLY0-NEXT:    [[TMP2488:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2489:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4885:%.*]] = icmp ugt i64 [[TMP2488]], [[TMP2489]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4885]], label [[IF_THEN4887:%.*]], label [[IF_END4888:%.*]]
// SIMD-ONLY0:       if.then4887:
// SIMD-ONLY0-NEXT:    [[TMP2490:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2490]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4888]]
// SIMD-ONLY0:       if.end4888:
// SIMD-ONLY0-NEXT:    [[TMP2491:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2492:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4889:%.*]] = icmp ult i64 [[TMP2491]], [[TMP2492]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4889]], label [[IF_THEN4891:%.*]], label [[IF_END4892:%.*]]
// SIMD-ONLY0:       if.then4891:
// SIMD-ONLY0-NEXT:    [[TMP2493:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2493]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4892]]
// SIMD-ONLY0:       if.end4892:
// SIMD-ONLY0-NEXT:    [[TMP2494:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2495:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4893:%.*]] = icmp eq i64 [[TMP2494]], [[TMP2495]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4893]], label [[COND_TRUE4895:%.*]], label [[COND_FALSE4896:%.*]]
// SIMD-ONLY0:       cond.true4895:
// SIMD-ONLY0-NEXT:    [[TMP2496:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4897:%.*]]
// SIMD-ONLY0:       cond.false4896:
// SIMD-ONLY0-NEXT:    [[TMP2497:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4897]]
// SIMD-ONLY0:       cond.end4897:
// SIMD-ONLY0-NEXT:    [[COND4898:%.*]] = phi i64 [ [[TMP2496]], [[COND_TRUE4895]] ], [ [[TMP2497]], [[COND_FALSE4896]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4898]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2498:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2499:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4899:%.*]] = icmp eq i64 [[TMP2498]], [[TMP2499]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4899]], label [[COND_TRUE4901:%.*]], label [[COND_FALSE4902:%.*]]
// SIMD-ONLY0:       cond.true4901:
// SIMD-ONLY0-NEXT:    [[TMP2500:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4903:%.*]]
// SIMD-ONLY0:       cond.false4902:
// SIMD-ONLY0-NEXT:    [[TMP2501:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4903]]
// SIMD-ONLY0:       cond.end4903:
// SIMD-ONLY0-NEXT:    [[COND4904:%.*]] = phi i64 [ [[TMP2500]], [[COND_TRUE4901]] ], [ [[TMP2501]], [[COND_FALSE4902]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4904]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2502:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2503:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4905:%.*]] = icmp eq i64 [[TMP2502]], [[TMP2503]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4905]], label [[IF_THEN4907:%.*]], label [[IF_END4908:%.*]]
// SIMD-ONLY0:       if.then4907:
// SIMD-ONLY0-NEXT:    [[TMP2504:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2504]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4908]]
// SIMD-ONLY0:       if.end4908:
// SIMD-ONLY0-NEXT:    [[TMP2505:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2506:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4909:%.*]] = icmp eq i64 [[TMP2505]], [[TMP2506]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4909]], label [[IF_THEN4911:%.*]], label [[IF_END4912:%.*]]
// SIMD-ONLY0:       if.then4911:
// SIMD-ONLY0-NEXT:    [[TMP2507:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2507]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4912]]
// SIMD-ONLY0:       if.end4912:
// SIMD-ONLY0-NEXT:    [[TMP2508:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2509:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4913:%.*]] = icmp sgt i64 [[TMP2508]], [[TMP2509]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4913]], label [[COND_TRUE4915:%.*]], label [[COND_FALSE4916:%.*]]
// SIMD-ONLY0:       cond.true4915:
// SIMD-ONLY0-NEXT:    [[TMP2510:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4917:%.*]]
// SIMD-ONLY0:       cond.false4916:
// SIMD-ONLY0-NEXT:    [[TMP2511:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4917]]
// SIMD-ONLY0:       cond.end4917:
// SIMD-ONLY0-NEXT:    [[COND4918:%.*]] = phi i64 [ [[TMP2510]], [[COND_TRUE4915]] ], [ [[TMP2511]], [[COND_FALSE4916]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4918]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2512:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2513:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4919:%.*]] = icmp slt i64 [[TMP2512]], [[TMP2513]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4919]], label [[COND_TRUE4921:%.*]], label [[COND_FALSE4922:%.*]]
// SIMD-ONLY0:       cond.true4921:
// SIMD-ONLY0-NEXT:    [[TMP2514:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4923:%.*]]
// SIMD-ONLY0:       cond.false4922:
// SIMD-ONLY0-NEXT:    [[TMP2515:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4923]]
// SIMD-ONLY0:       cond.end4923:
// SIMD-ONLY0-NEXT:    [[COND4924:%.*]] = phi i64 [ [[TMP2514]], [[COND_TRUE4921]] ], [ [[TMP2515]], [[COND_FALSE4922]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4924]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2516:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2517:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4925:%.*]] = icmp sgt i64 [[TMP2516]], [[TMP2517]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4925]], label [[COND_TRUE4927:%.*]], label [[COND_FALSE4928:%.*]]
// SIMD-ONLY0:       cond.true4927:
// SIMD-ONLY0-NEXT:    [[TMP2518:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4929:%.*]]
// SIMD-ONLY0:       cond.false4928:
// SIMD-ONLY0-NEXT:    [[TMP2519:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4929]]
// SIMD-ONLY0:       cond.end4929:
// SIMD-ONLY0-NEXT:    [[COND4930:%.*]] = phi i64 [ [[TMP2518]], [[COND_TRUE4927]] ], [ [[TMP2519]], [[COND_FALSE4928]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4930]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2520:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2521:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4931:%.*]] = icmp slt i64 [[TMP2520]], [[TMP2521]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4931]], label [[COND_TRUE4933:%.*]], label [[COND_FALSE4934:%.*]]
// SIMD-ONLY0:       cond.true4933:
// SIMD-ONLY0-NEXT:    [[TMP2522:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4935:%.*]]
// SIMD-ONLY0:       cond.false4934:
// SIMD-ONLY0-NEXT:    [[TMP2523:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4935]]
// SIMD-ONLY0:       cond.end4935:
// SIMD-ONLY0-NEXT:    [[COND4936:%.*]] = phi i64 [ [[TMP2522]], [[COND_TRUE4933]] ], [ [[TMP2523]], [[COND_FALSE4934]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4936]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2524:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2525:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4937:%.*]] = icmp sgt i64 [[TMP2524]], [[TMP2525]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4937]], label [[IF_THEN4939:%.*]], label [[IF_END4940:%.*]]
// SIMD-ONLY0:       if.then4939:
// SIMD-ONLY0-NEXT:    [[TMP2526:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2526]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4940]]
// SIMD-ONLY0:       if.end4940:
// SIMD-ONLY0-NEXT:    [[TMP2527:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2528:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4941:%.*]] = icmp slt i64 [[TMP2527]], [[TMP2528]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4941]], label [[IF_THEN4943:%.*]], label [[IF_END4944:%.*]]
// SIMD-ONLY0:       if.then4943:
// SIMD-ONLY0-NEXT:    [[TMP2529:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2529]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4944]]
// SIMD-ONLY0:       if.end4944:
// SIMD-ONLY0-NEXT:    [[TMP2530:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2531:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4945:%.*]] = icmp sgt i64 [[TMP2530]], [[TMP2531]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4945]], label [[IF_THEN4947:%.*]], label [[IF_END4948:%.*]]
// SIMD-ONLY0:       if.then4947:
// SIMD-ONLY0-NEXT:    [[TMP2532:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2532]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4948]]
// SIMD-ONLY0:       if.end4948:
// SIMD-ONLY0-NEXT:    [[TMP2533:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2534:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4949:%.*]] = icmp slt i64 [[TMP2533]], [[TMP2534]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4949]], label [[IF_THEN4951:%.*]], label [[IF_END4952:%.*]]
// SIMD-ONLY0:       if.then4951:
// SIMD-ONLY0-NEXT:    [[TMP2535:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2535]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4952]]
// SIMD-ONLY0:       if.end4952:
// SIMD-ONLY0-NEXT:    [[TMP2536:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2537:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4953:%.*]] = icmp eq i64 [[TMP2536]], [[TMP2537]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4953]], label [[COND_TRUE4955:%.*]], label [[COND_FALSE4956:%.*]]
// SIMD-ONLY0:       cond.true4955:
// SIMD-ONLY0-NEXT:    [[TMP2538:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4957:%.*]]
// SIMD-ONLY0:       cond.false4956:
// SIMD-ONLY0-NEXT:    [[TMP2539:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4957]]
// SIMD-ONLY0:       cond.end4957:
// SIMD-ONLY0-NEXT:    [[COND4958:%.*]] = phi i64 [ [[TMP2538]], [[COND_TRUE4955]] ], [ [[TMP2539]], [[COND_FALSE4956]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4958]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2540:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2541:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4959:%.*]] = icmp eq i64 [[TMP2540]], [[TMP2541]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4959]], label [[COND_TRUE4961:%.*]], label [[COND_FALSE4962:%.*]]
// SIMD-ONLY0:       cond.true4961:
// SIMD-ONLY0-NEXT:    [[TMP2542:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4963:%.*]]
// SIMD-ONLY0:       cond.false4962:
// SIMD-ONLY0-NEXT:    [[TMP2543:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4963]]
// SIMD-ONLY0:       cond.end4963:
// SIMD-ONLY0-NEXT:    [[COND4964:%.*]] = phi i64 [ [[TMP2542]], [[COND_TRUE4961]] ], [ [[TMP2543]], [[COND_FALSE4962]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4964]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2544:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2545:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4965:%.*]] = icmp eq i64 [[TMP2544]], [[TMP2545]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4965]], label [[IF_THEN4967:%.*]], label [[IF_END4968:%.*]]
// SIMD-ONLY0:       if.then4967:
// SIMD-ONLY0-NEXT:    [[TMP2546:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2546]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4968]]
// SIMD-ONLY0:       if.end4968:
// SIMD-ONLY0-NEXT:    [[TMP2547:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2548:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4969:%.*]] = icmp eq i64 [[TMP2547]], [[TMP2548]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4969]], label [[IF_THEN4971:%.*]], label [[IF_END4972:%.*]]
// SIMD-ONLY0:       if.then4971:
// SIMD-ONLY0-NEXT:    [[TMP2549:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2549]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4972]]
// SIMD-ONLY0:       if.end4972:
// SIMD-ONLY0-NEXT:    [[TMP2550:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2551:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4973:%.*]] = icmp ugt i64 [[TMP2550]], [[TMP2551]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4973]], label [[COND_TRUE4975:%.*]], label [[COND_FALSE4976:%.*]]
// SIMD-ONLY0:       cond.true4975:
// SIMD-ONLY0-NEXT:    [[TMP2552:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4977:%.*]]
// SIMD-ONLY0:       cond.false4976:
// SIMD-ONLY0-NEXT:    [[TMP2553:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4977]]
// SIMD-ONLY0:       cond.end4977:
// SIMD-ONLY0-NEXT:    [[COND4978:%.*]] = phi i64 [ [[TMP2552]], [[COND_TRUE4975]] ], [ [[TMP2553]], [[COND_FALSE4976]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4978]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2554:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2555:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4979:%.*]] = icmp ult i64 [[TMP2554]], [[TMP2555]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4979]], label [[COND_TRUE4981:%.*]], label [[COND_FALSE4982:%.*]]
// SIMD-ONLY0:       cond.true4981:
// SIMD-ONLY0-NEXT:    [[TMP2556:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4983:%.*]]
// SIMD-ONLY0:       cond.false4982:
// SIMD-ONLY0-NEXT:    [[TMP2557:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4983]]
// SIMD-ONLY0:       cond.end4983:
// SIMD-ONLY0-NEXT:    [[COND4984:%.*]] = phi i64 [ [[TMP2556]], [[COND_TRUE4981]] ], [ [[TMP2557]], [[COND_FALSE4982]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4984]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2558:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2559:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4985:%.*]] = icmp ugt i64 [[TMP2558]], [[TMP2559]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4985]], label [[COND_TRUE4987:%.*]], label [[COND_FALSE4988:%.*]]
// SIMD-ONLY0:       cond.true4987:
// SIMD-ONLY0-NEXT:    [[TMP2560:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4989:%.*]]
// SIMD-ONLY0:       cond.false4988:
// SIMD-ONLY0-NEXT:    [[TMP2561:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4989]]
// SIMD-ONLY0:       cond.end4989:
// SIMD-ONLY0-NEXT:    [[COND4990:%.*]] = phi i64 [ [[TMP2560]], [[COND_TRUE4987]] ], [ [[TMP2561]], [[COND_FALSE4988]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4990]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2562:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2563:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4991:%.*]] = icmp ult i64 [[TMP2562]], [[TMP2563]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4991]], label [[COND_TRUE4993:%.*]], label [[COND_FALSE4994:%.*]]
// SIMD-ONLY0:       cond.true4993:
// SIMD-ONLY0-NEXT:    [[TMP2564:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4995:%.*]]
// SIMD-ONLY0:       cond.false4994:
// SIMD-ONLY0-NEXT:    [[TMP2565:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4995]]
// SIMD-ONLY0:       cond.end4995:
// SIMD-ONLY0-NEXT:    [[COND4996:%.*]] = phi i64 [ [[TMP2564]], [[COND_TRUE4993]] ], [ [[TMP2565]], [[COND_FALSE4994]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND4996]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2566:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2567:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4997:%.*]] = icmp ugt i64 [[TMP2566]], [[TMP2567]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4997]], label [[IF_THEN4999:%.*]], label [[IF_END5000:%.*]]
// SIMD-ONLY0:       if.then4999:
// SIMD-ONLY0-NEXT:    [[TMP2568:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2568]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5000]]
// SIMD-ONLY0:       if.end5000:
// SIMD-ONLY0-NEXT:    [[TMP2569:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2570:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5001:%.*]] = icmp ult i64 [[TMP2569]], [[TMP2570]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5001]], label [[IF_THEN5003:%.*]], label [[IF_END5004:%.*]]
// SIMD-ONLY0:       if.then5003:
// SIMD-ONLY0-NEXT:    [[TMP2571:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2571]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5004]]
// SIMD-ONLY0:       if.end5004:
// SIMD-ONLY0-NEXT:    [[TMP2572:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2573:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5005:%.*]] = icmp ugt i64 [[TMP2572]], [[TMP2573]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5005]], label [[IF_THEN5007:%.*]], label [[IF_END5008:%.*]]
// SIMD-ONLY0:       if.then5007:
// SIMD-ONLY0-NEXT:    [[TMP2574:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2574]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5008]]
// SIMD-ONLY0:       if.end5008:
// SIMD-ONLY0-NEXT:    [[TMP2575:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2576:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5009:%.*]] = icmp ult i64 [[TMP2575]], [[TMP2576]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5009]], label [[IF_THEN5011:%.*]], label [[IF_END5012:%.*]]
// SIMD-ONLY0:       if.then5011:
// SIMD-ONLY0-NEXT:    [[TMP2577:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2577]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5012]]
// SIMD-ONLY0:       if.end5012:
// SIMD-ONLY0-NEXT:    [[TMP2578:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2579:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5013:%.*]] = icmp eq i64 [[TMP2578]], [[TMP2579]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5013]], label [[COND_TRUE5015:%.*]], label [[COND_FALSE5016:%.*]]
// SIMD-ONLY0:       cond.true5015:
// SIMD-ONLY0-NEXT:    [[TMP2580:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5017:%.*]]
// SIMD-ONLY0:       cond.false5016:
// SIMD-ONLY0-NEXT:    [[TMP2581:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5017]]
// SIMD-ONLY0:       cond.end5017:
// SIMD-ONLY0-NEXT:    [[COND5018:%.*]] = phi i64 [ [[TMP2580]], [[COND_TRUE5015]] ], [ [[TMP2581]], [[COND_FALSE5016]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND5018]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2582:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2583:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5019:%.*]] = icmp eq i64 [[TMP2582]], [[TMP2583]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5019]], label [[COND_TRUE5021:%.*]], label [[COND_FALSE5022:%.*]]
// SIMD-ONLY0:       cond.true5021:
// SIMD-ONLY0-NEXT:    [[TMP2584:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5023:%.*]]
// SIMD-ONLY0:       cond.false5022:
// SIMD-ONLY0-NEXT:    [[TMP2585:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5023]]
// SIMD-ONLY0:       cond.end5023:
// SIMD-ONLY0-NEXT:    [[COND5024:%.*]] = phi i64 [ [[TMP2584]], [[COND_TRUE5021]] ], [ [[TMP2585]], [[COND_FALSE5022]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND5024]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2586:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2587:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5025:%.*]] = icmp eq i64 [[TMP2586]], [[TMP2587]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5025]], label [[IF_THEN5027:%.*]], label [[IF_END5028:%.*]]
// SIMD-ONLY0:       if.then5027:
// SIMD-ONLY0-NEXT:    [[TMP2588:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2588]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5028]]
// SIMD-ONLY0:       if.end5028:
// SIMD-ONLY0-NEXT:    [[TMP2589:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2590:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5029:%.*]] = icmp eq i64 [[TMP2589]], [[TMP2590]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5029]], label [[IF_THEN5031:%.*]], label [[IF_END5032:%.*]]
// SIMD-ONLY0:       if.then5031:
// SIMD-ONLY0-NEXT:    [[TMP2591:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2591]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5032]]
// SIMD-ONLY0:       if.end5032:
// SIMD-ONLY0-NEXT:    [[TMP2592:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2593:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5033:%.*]] = fcmp ogt float [[TMP2592]], [[TMP2593]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5033]], label [[COND_TRUE5035:%.*]], label [[COND_FALSE5036:%.*]]
// SIMD-ONLY0:       cond.true5035:
// SIMD-ONLY0-NEXT:    [[TMP2594:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5037:%.*]]
// SIMD-ONLY0:       cond.false5036:
// SIMD-ONLY0-NEXT:    [[TMP2595:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5037]]
// SIMD-ONLY0:       cond.end5037:
// SIMD-ONLY0-NEXT:    [[COND5038:%.*]] = phi float [ [[TMP2594]], [[COND_TRUE5035]] ], [ [[TMP2595]], [[COND_FALSE5036]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5038]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2596:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2597:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5039:%.*]] = fcmp olt float [[TMP2596]], [[TMP2597]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5039]], label [[COND_TRUE5041:%.*]], label [[COND_FALSE5042:%.*]]
// SIMD-ONLY0:       cond.true5041:
// SIMD-ONLY0-NEXT:    [[TMP2598:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5043:%.*]]
// SIMD-ONLY0:       cond.false5042:
// SIMD-ONLY0-NEXT:    [[TMP2599:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5043]]
// SIMD-ONLY0:       cond.end5043:
// SIMD-ONLY0-NEXT:    [[COND5044:%.*]] = phi float [ [[TMP2598]], [[COND_TRUE5041]] ], [ [[TMP2599]], [[COND_FALSE5042]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5044]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2600:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2601:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5045:%.*]] = fcmp ogt float [[TMP2600]], [[TMP2601]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5045]], label [[COND_TRUE5047:%.*]], label [[COND_FALSE5048:%.*]]
// SIMD-ONLY0:       cond.true5047:
// SIMD-ONLY0-NEXT:    [[TMP2602:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5049:%.*]]
// SIMD-ONLY0:       cond.false5048:
// SIMD-ONLY0-NEXT:    [[TMP2603:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5049]]
// SIMD-ONLY0:       cond.end5049:
// SIMD-ONLY0-NEXT:    [[COND5050:%.*]] = phi float [ [[TMP2602]], [[COND_TRUE5047]] ], [ [[TMP2603]], [[COND_FALSE5048]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5050]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2604:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2605:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5051:%.*]] = fcmp olt float [[TMP2604]], [[TMP2605]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5051]], label [[COND_TRUE5053:%.*]], label [[COND_FALSE5054:%.*]]
// SIMD-ONLY0:       cond.true5053:
// SIMD-ONLY0-NEXT:    [[TMP2606:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5055:%.*]]
// SIMD-ONLY0:       cond.false5054:
// SIMD-ONLY0-NEXT:    [[TMP2607:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5055]]
// SIMD-ONLY0:       cond.end5055:
// SIMD-ONLY0-NEXT:    [[COND5056:%.*]] = phi float [ [[TMP2606]], [[COND_TRUE5053]] ], [ [[TMP2607]], [[COND_FALSE5054]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5056]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2608:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2609:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5057:%.*]] = fcmp ogt float [[TMP2608]], [[TMP2609]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5057]], label [[IF_THEN5059:%.*]], label [[IF_END5060:%.*]]
// SIMD-ONLY0:       if.then5059:
// SIMD-ONLY0-NEXT:    [[TMP2610:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2610]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5060]]
// SIMD-ONLY0:       if.end5060:
// SIMD-ONLY0-NEXT:    [[TMP2611:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2612:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5061:%.*]] = fcmp olt float [[TMP2611]], [[TMP2612]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5061]], label [[IF_THEN5063:%.*]], label [[IF_END5064:%.*]]
// SIMD-ONLY0:       if.then5063:
// SIMD-ONLY0-NEXT:    [[TMP2613:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2613]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5064]]
// SIMD-ONLY0:       if.end5064:
// SIMD-ONLY0-NEXT:    [[TMP2614:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2615:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5065:%.*]] = fcmp ogt float [[TMP2614]], [[TMP2615]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5065]], label [[IF_THEN5067:%.*]], label [[IF_END5068:%.*]]
// SIMD-ONLY0:       if.then5067:
// SIMD-ONLY0-NEXT:    [[TMP2616:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2616]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5068]]
// SIMD-ONLY0:       if.end5068:
// SIMD-ONLY0-NEXT:    [[TMP2617:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2618:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5069:%.*]] = fcmp olt float [[TMP2617]], [[TMP2618]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5069]], label [[IF_THEN5071:%.*]], label [[IF_END5072:%.*]]
// SIMD-ONLY0:       if.then5071:
// SIMD-ONLY0-NEXT:    [[TMP2619:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2619]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5072]]
// SIMD-ONLY0:       if.end5072:
// SIMD-ONLY0-NEXT:    [[TMP2620:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2621:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5073:%.*]] = fcmp ogt float [[TMP2620]], [[TMP2621]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5073]], label [[COND_TRUE5075:%.*]], label [[COND_FALSE5076:%.*]]
// SIMD-ONLY0:       cond.true5075:
// SIMD-ONLY0-NEXT:    [[TMP2622:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5077:%.*]]
// SIMD-ONLY0:       cond.false5076:
// SIMD-ONLY0-NEXT:    [[TMP2623:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5077]]
// SIMD-ONLY0:       cond.end5077:
// SIMD-ONLY0-NEXT:    [[COND5078:%.*]] = phi float [ [[TMP2622]], [[COND_TRUE5075]] ], [ [[TMP2623]], [[COND_FALSE5076]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5078]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2624:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2625:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5079:%.*]] = fcmp olt float [[TMP2624]], [[TMP2625]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5079]], label [[COND_TRUE5081:%.*]], label [[COND_FALSE5082:%.*]]
// SIMD-ONLY0:       cond.true5081:
// SIMD-ONLY0-NEXT:    [[TMP2626:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5083:%.*]]
// SIMD-ONLY0:       cond.false5082:
// SIMD-ONLY0-NEXT:    [[TMP2627:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5083]]
// SIMD-ONLY0:       cond.end5083:
// SIMD-ONLY0-NEXT:    [[COND5084:%.*]] = phi float [ [[TMP2626]], [[COND_TRUE5081]] ], [ [[TMP2627]], [[COND_FALSE5082]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5084]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2628:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2629:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5085:%.*]] = fcmp ogt float [[TMP2628]], [[TMP2629]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5085]], label [[COND_TRUE5087:%.*]], label [[COND_FALSE5088:%.*]]
// SIMD-ONLY0:       cond.true5087:
// SIMD-ONLY0-NEXT:    [[TMP2630:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5089:%.*]]
// SIMD-ONLY0:       cond.false5088:
// SIMD-ONLY0-NEXT:    [[TMP2631:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5089]]
// SIMD-ONLY0:       cond.end5089:
// SIMD-ONLY0-NEXT:    [[COND5090:%.*]] = phi float [ [[TMP2630]], [[COND_TRUE5087]] ], [ [[TMP2631]], [[COND_FALSE5088]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5090]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2632:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2633:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5091:%.*]] = fcmp olt float [[TMP2632]], [[TMP2633]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5091]], label [[COND_TRUE5093:%.*]], label [[COND_FALSE5094:%.*]]
// SIMD-ONLY0:       cond.true5093:
// SIMD-ONLY0-NEXT:    [[TMP2634:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5095:%.*]]
// SIMD-ONLY0:       cond.false5094:
// SIMD-ONLY0-NEXT:    [[TMP2635:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5095]]
// SIMD-ONLY0:       cond.end5095:
// SIMD-ONLY0-NEXT:    [[COND5096:%.*]] = phi float [ [[TMP2634]], [[COND_TRUE5093]] ], [ [[TMP2635]], [[COND_FALSE5094]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5096]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2636:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2637:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5097:%.*]] = fcmp ogt float [[TMP2636]], [[TMP2637]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5097]], label [[IF_THEN5099:%.*]], label [[IF_END5100:%.*]]
// SIMD-ONLY0:       if.then5099:
// SIMD-ONLY0-NEXT:    [[TMP2638:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2638]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5100]]
// SIMD-ONLY0:       if.end5100:
// SIMD-ONLY0-NEXT:    [[TMP2639:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2640:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5101:%.*]] = fcmp olt float [[TMP2639]], [[TMP2640]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5101]], label [[IF_THEN5103:%.*]], label [[IF_END5104:%.*]]
// SIMD-ONLY0:       if.then5103:
// SIMD-ONLY0-NEXT:    [[TMP2641:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2641]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5104]]
// SIMD-ONLY0:       if.end5104:
// SIMD-ONLY0-NEXT:    [[TMP2642:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2643:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5105:%.*]] = fcmp ogt float [[TMP2642]], [[TMP2643]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5105]], label [[IF_THEN5107:%.*]], label [[IF_END5108:%.*]]
// SIMD-ONLY0:       if.then5107:
// SIMD-ONLY0-NEXT:    [[TMP2644:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2644]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5108]]
// SIMD-ONLY0:       if.end5108:
// SIMD-ONLY0-NEXT:    [[TMP2645:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2646:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5109:%.*]] = fcmp olt float [[TMP2645]], [[TMP2646]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5109]], label [[IF_THEN5111:%.*]], label [[IF_END5112:%.*]]
// SIMD-ONLY0:       if.then5111:
// SIMD-ONLY0-NEXT:    [[TMP2647:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2647]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5112]]
// SIMD-ONLY0:       if.end5112:
// SIMD-ONLY0-NEXT:    [[TMP2648:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2649:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5113:%.*]] = fcmp ogt float [[TMP2648]], [[TMP2649]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5113]], label [[COND_TRUE5115:%.*]], label [[COND_FALSE5116:%.*]]
// SIMD-ONLY0:       cond.true5115:
// SIMD-ONLY0-NEXT:    [[TMP2650:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5117:%.*]]
// SIMD-ONLY0:       cond.false5116:
// SIMD-ONLY0-NEXT:    [[TMP2651:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5117]]
// SIMD-ONLY0:       cond.end5117:
// SIMD-ONLY0-NEXT:    [[COND5118:%.*]] = phi float [ [[TMP2650]], [[COND_TRUE5115]] ], [ [[TMP2651]], [[COND_FALSE5116]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5118]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2652:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2653:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5119:%.*]] = fcmp olt float [[TMP2652]], [[TMP2653]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5119]], label [[COND_TRUE5121:%.*]], label [[COND_FALSE5122:%.*]]
// SIMD-ONLY0:       cond.true5121:
// SIMD-ONLY0-NEXT:    [[TMP2654:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5123:%.*]]
// SIMD-ONLY0:       cond.false5122:
// SIMD-ONLY0-NEXT:    [[TMP2655:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5123]]
// SIMD-ONLY0:       cond.end5123:
// SIMD-ONLY0-NEXT:    [[COND5124:%.*]] = phi float [ [[TMP2654]], [[COND_TRUE5121]] ], [ [[TMP2655]], [[COND_FALSE5122]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5124]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2656:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2657:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5125:%.*]] = fcmp ogt float [[TMP2656]], [[TMP2657]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5125]], label [[COND_TRUE5127:%.*]], label [[COND_FALSE5128:%.*]]
// SIMD-ONLY0:       cond.true5127:
// SIMD-ONLY0-NEXT:    [[TMP2658:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5129:%.*]]
// SIMD-ONLY0:       cond.false5128:
// SIMD-ONLY0-NEXT:    [[TMP2659:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5129]]
// SIMD-ONLY0:       cond.end5129:
// SIMD-ONLY0-NEXT:    [[COND5130:%.*]] = phi float [ [[TMP2658]], [[COND_TRUE5127]] ], [ [[TMP2659]], [[COND_FALSE5128]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5130]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2660:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2661:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5131:%.*]] = fcmp olt float [[TMP2660]], [[TMP2661]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5131]], label [[COND_TRUE5133:%.*]], label [[COND_FALSE5134:%.*]]
// SIMD-ONLY0:       cond.true5133:
// SIMD-ONLY0-NEXT:    [[TMP2662:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5135:%.*]]
// SIMD-ONLY0:       cond.false5134:
// SIMD-ONLY0-NEXT:    [[TMP2663:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5135]]
// SIMD-ONLY0:       cond.end5135:
// SIMD-ONLY0-NEXT:    [[COND5136:%.*]] = phi float [ [[TMP2662]], [[COND_TRUE5133]] ], [ [[TMP2663]], [[COND_FALSE5134]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5136]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2664:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2665:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5137:%.*]] = fcmp ogt float [[TMP2664]], [[TMP2665]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5137]], label [[IF_THEN5139:%.*]], label [[IF_END5140:%.*]]
// SIMD-ONLY0:       if.then5139:
// SIMD-ONLY0-NEXT:    [[TMP2666:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2666]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5140]]
// SIMD-ONLY0:       if.end5140:
// SIMD-ONLY0-NEXT:    [[TMP2667:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2668:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5141:%.*]] = fcmp olt float [[TMP2667]], [[TMP2668]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5141]], label [[IF_THEN5143:%.*]], label [[IF_END5144:%.*]]
// SIMD-ONLY0:       if.then5143:
// SIMD-ONLY0-NEXT:    [[TMP2669:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2669]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5144]]
// SIMD-ONLY0:       if.end5144:
// SIMD-ONLY0-NEXT:    [[TMP2670:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2671:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5145:%.*]] = fcmp ogt float [[TMP2670]], [[TMP2671]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5145]], label [[IF_THEN5147:%.*]], label [[IF_END5148:%.*]]
// SIMD-ONLY0:       if.then5147:
// SIMD-ONLY0-NEXT:    [[TMP2672:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2672]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5148]]
// SIMD-ONLY0:       if.end5148:
// SIMD-ONLY0-NEXT:    [[TMP2673:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2674:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5149:%.*]] = fcmp olt float [[TMP2673]], [[TMP2674]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5149]], label [[IF_THEN5151:%.*]], label [[IF_END5152:%.*]]
// SIMD-ONLY0:       if.then5151:
// SIMD-ONLY0-NEXT:    [[TMP2675:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2675]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5152]]
// SIMD-ONLY0:       if.end5152:
// SIMD-ONLY0-NEXT:    [[TMP2676:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2677:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5153:%.*]] = fcmp ogt float [[TMP2676]], [[TMP2677]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5153]], label [[COND_TRUE5155:%.*]], label [[COND_FALSE5156:%.*]]
// SIMD-ONLY0:       cond.true5155:
// SIMD-ONLY0-NEXT:    [[TMP2678:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5157:%.*]]
// SIMD-ONLY0:       cond.false5156:
// SIMD-ONLY0-NEXT:    [[TMP2679:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5157]]
// SIMD-ONLY0:       cond.end5157:
// SIMD-ONLY0-NEXT:    [[COND5158:%.*]] = phi float [ [[TMP2678]], [[COND_TRUE5155]] ], [ [[TMP2679]], [[COND_FALSE5156]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5158]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2680:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2681:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5159:%.*]] = fcmp olt float [[TMP2680]], [[TMP2681]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5159]], label [[COND_TRUE5161:%.*]], label [[COND_FALSE5162:%.*]]
// SIMD-ONLY0:       cond.true5161:
// SIMD-ONLY0-NEXT:    [[TMP2682:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5163:%.*]]
// SIMD-ONLY0:       cond.false5162:
// SIMD-ONLY0-NEXT:    [[TMP2683:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5163]]
// SIMD-ONLY0:       cond.end5163:
// SIMD-ONLY0-NEXT:    [[COND5164:%.*]] = phi float [ [[TMP2682]], [[COND_TRUE5161]] ], [ [[TMP2683]], [[COND_FALSE5162]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5164]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2684:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2685:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5165:%.*]] = fcmp ogt float [[TMP2684]], [[TMP2685]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5165]], label [[COND_TRUE5167:%.*]], label [[COND_FALSE5168:%.*]]
// SIMD-ONLY0:       cond.true5167:
// SIMD-ONLY0-NEXT:    [[TMP2686:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5169:%.*]]
// SIMD-ONLY0:       cond.false5168:
// SIMD-ONLY0-NEXT:    [[TMP2687:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5169]]
// SIMD-ONLY0:       cond.end5169:
// SIMD-ONLY0-NEXT:    [[COND5170:%.*]] = phi float [ [[TMP2686]], [[COND_TRUE5167]] ], [ [[TMP2687]], [[COND_FALSE5168]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5170]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2688:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2689:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5171:%.*]] = fcmp olt float [[TMP2688]], [[TMP2689]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5171]], label [[COND_TRUE5173:%.*]], label [[COND_FALSE5174:%.*]]
// SIMD-ONLY0:       cond.true5173:
// SIMD-ONLY0-NEXT:    [[TMP2690:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5175:%.*]]
// SIMD-ONLY0:       cond.false5174:
// SIMD-ONLY0-NEXT:    [[TMP2691:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5175]]
// SIMD-ONLY0:       cond.end5175:
// SIMD-ONLY0-NEXT:    [[COND5176:%.*]] = phi float [ [[TMP2690]], [[COND_TRUE5173]] ], [ [[TMP2691]], [[COND_FALSE5174]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5176]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2692:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2693:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5177:%.*]] = fcmp ogt float [[TMP2692]], [[TMP2693]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5177]], label [[IF_THEN5179:%.*]], label [[IF_END5180:%.*]]
// SIMD-ONLY0:       if.then5179:
// SIMD-ONLY0-NEXT:    [[TMP2694:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2694]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5180]]
// SIMD-ONLY0:       if.end5180:
// SIMD-ONLY0-NEXT:    [[TMP2695:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2696:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5181:%.*]] = fcmp olt float [[TMP2695]], [[TMP2696]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5181]], label [[IF_THEN5183:%.*]], label [[IF_END5184:%.*]]
// SIMD-ONLY0:       if.then5183:
// SIMD-ONLY0-NEXT:    [[TMP2697:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2697]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5184]]
// SIMD-ONLY0:       if.end5184:
// SIMD-ONLY0-NEXT:    [[TMP2698:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2699:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5185:%.*]] = fcmp ogt float [[TMP2698]], [[TMP2699]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5185]], label [[IF_THEN5187:%.*]], label [[IF_END5188:%.*]]
// SIMD-ONLY0:       if.then5187:
// SIMD-ONLY0-NEXT:    [[TMP2700:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2700]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5188]]
// SIMD-ONLY0:       if.end5188:
// SIMD-ONLY0-NEXT:    [[TMP2701:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2702:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5189:%.*]] = fcmp olt float [[TMP2701]], [[TMP2702]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5189]], label [[IF_THEN5191:%.*]], label [[IF_END5192:%.*]]
// SIMD-ONLY0:       if.then5191:
// SIMD-ONLY0-NEXT:    [[TMP2703:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2703]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5192]]
// SIMD-ONLY0:       if.end5192:
// SIMD-ONLY0-NEXT:    [[TMP2704:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2705:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5193:%.*]] = fcmp ogt float [[TMP2704]], [[TMP2705]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5193]], label [[COND_TRUE5195:%.*]], label [[COND_FALSE5196:%.*]]
// SIMD-ONLY0:       cond.true5195:
// SIMD-ONLY0-NEXT:    [[TMP2706:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5197:%.*]]
// SIMD-ONLY0:       cond.false5196:
// SIMD-ONLY0-NEXT:    [[TMP2707:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5197]]
// SIMD-ONLY0:       cond.end5197:
// SIMD-ONLY0-NEXT:    [[COND5198:%.*]] = phi float [ [[TMP2706]], [[COND_TRUE5195]] ], [ [[TMP2707]], [[COND_FALSE5196]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5198]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2708:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2709:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5199:%.*]] = fcmp olt float [[TMP2708]], [[TMP2709]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5199]], label [[COND_TRUE5201:%.*]], label [[COND_FALSE5202:%.*]]
// SIMD-ONLY0:       cond.true5201:
// SIMD-ONLY0-NEXT:    [[TMP2710:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5203:%.*]]
// SIMD-ONLY0:       cond.false5202:
// SIMD-ONLY0-NEXT:    [[TMP2711:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5203]]
// SIMD-ONLY0:       cond.end5203:
// SIMD-ONLY0-NEXT:    [[COND5204:%.*]] = phi float [ [[TMP2710]], [[COND_TRUE5201]] ], [ [[TMP2711]], [[COND_FALSE5202]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5204]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2712:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2713:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5205:%.*]] = fcmp ogt float [[TMP2712]], [[TMP2713]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5205]], label [[COND_TRUE5207:%.*]], label [[COND_FALSE5208:%.*]]
// SIMD-ONLY0:       cond.true5207:
// SIMD-ONLY0-NEXT:    [[TMP2714:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5209:%.*]]
// SIMD-ONLY0:       cond.false5208:
// SIMD-ONLY0-NEXT:    [[TMP2715:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5209]]
// SIMD-ONLY0:       cond.end5209:
// SIMD-ONLY0-NEXT:    [[COND5210:%.*]] = phi float [ [[TMP2714]], [[COND_TRUE5207]] ], [ [[TMP2715]], [[COND_FALSE5208]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5210]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2716:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2717:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5211:%.*]] = fcmp olt float [[TMP2716]], [[TMP2717]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5211]], label [[COND_TRUE5213:%.*]], label [[COND_FALSE5214:%.*]]
// SIMD-ONLY0:       cond.true5213:
// SIMD-ONLY0-NEXT:    [[TMP2718:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5215:%.*]]
// SIMD-ONLY0:       cond.false5214:
// SIMD-ONLY0-NEXT:    [[TMP2719:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5215]]
// SIMD-ONLY0:       cond.end5215:
// SIMD-ONLY0-NEXT:    [[COND5216:%.*]] = phi float [ [[TMP2718]], [[COND_TRUE5213]] ], [ [[TMP2719]], [[COND_FALSE5214]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5216]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2720:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2721:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5217:%.*]] = fcmp ogt float [[TMP2720]], [[TMP2721]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5217]], label [[IF_THEN5219:%.*]], label [[IF_END5220:%.*]]
// SIMD-ONLY0:       if.then5219:
// SIMD-ONLY0-NEXT:    [[TMP2722:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2722]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5220]]
// SIMD-ONLY0:       if.end5220:
// SIMD-ONLY0-NEXT:    [[TMP2723:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2724:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5221:%.*]] = fcmp olt float [[TMP2723]], [[TMP2724]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5221]], label [[IF_THEN5223:%.*]], label [[IF_END5224:%.*]]
// SIMD-ONLY0:       if.then5223:
// SIMD-ONLY0-NEXT:    [[TMP2725:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2725]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5224]]
// SIMD-ONLY0:       if.end5224:
// SIMD-ONLY0-NEXT:    [[TMP2726:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2727:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5225:%.*]] = fcmp ogt float [[TMP2726]], [[TMP2727]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5225]], label [[IF_THEN5227:%.*]], label [[IF_END5228:%.*]]
// SIMD-ONLY0:       if.then5227:
// SIMD-ONLY0-NEXT:    [[TMP2728:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2728]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5228]]
// SIMD-ONLY0:       if.end5228:
// SIMD-ONLY0-NEXT:    [[TMP2729:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2730:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5229:%.*]] = fcmp olt float [[TMP2729]], [[TMP2730]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5229]], label [[IF_THEN5231:%.*]], label [[IF_END5232:%.*]]
// SIMD-ONLY0:       if.then5231:
// SIMD-ONLY0-NEXT:    [[TMP2731:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2731]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5232]]
// SIMD-ONLY0:       if.end5232:
// SIMD-ONLY0-NEXT:    [[TMP2732:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2733:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5233:%.*]] = fcmp ogt float [[TMP2732]], [[TMP2733]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5233]], label [[COND_TRUE5235:%.*]], label [[COND_FALSE5236:%.*]]
// SIMD-ONLY0:       cond.true5235:
// SIMD-ONLY0-NEXT:    [[TMP2734:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5237:%.*]]
// SIMD-ONLY0:       cond.false5236:
// SIMD-ONLY0-NEXT:    [[TMP2735:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5237]]
// SIMD-ONLY0:       cond.end5237:
// SIMD-ONLY0-NEXT:    [[COND5238:%.*]] = phi float [ [[TMP2734]], [[COND_TRUE5235]] ], [ [[TMP2735]], [[COND_FALSE5236]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5238]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2736:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2737:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5239:%.*]] = fcmp olt float [[TMP2736]], [[TMP2737]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5239]], label [[COND_TRUE5241:%.*]], label [[COND_FALSE5242:%.*]]
// SIMD-ONLY0:       cond.true5241:
// SIMD-ONLY0-NEXT:    [[TMP2738:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5243:%.*]]
// SIMD-ONLY0:       cond.false5242:
// SIMD-ONLY0-NEXT:    [[TMP2739:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5243]]
// SIMD-ONLY0:       cond.end5243:
// SIMD-ONLY0-NEXT:    [[COND5244:%.*]] = phi float [ [[TMP2738]], [[COND_TRUE5241]] ], [ [[TMP2739]], [[COND_FALSE5242]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5244]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2740:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2741:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5245:%.*]] = fcmp ogt float [[TMP2740]], [[TMP2741]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5245]], label [[COND_TRUE5247:%.*]], label [[COND_FALSE5248:%.*]]
// SIMD-ONLY0:       cond.true5247:
// SIMD-ONLY0-NEXT:    [[TMP2742:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5249:%.*]]
// SIMD-ONLY0:       cond.false5248:
// SIMD-ONLY0-NEXT:    [[TMP2743:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5249]]
// SIMD-ONLY0:       cond.end5249:
// SIMD-ONLY0-NEXT:    [[COND5250:%.*]] = phi float [ [[TMP2742]], [[COND_TRUE5247]] ], [ [[TMP2743]], [[COND_FALSE5248]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5250]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2744:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2745:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5251:%.*]] = fcmp olt float [[TMP2744]], [[TMP2745]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5251]], label [[COND_TRUE5253:%.*]], label [[COND_FALSE5254:%.*]]
// SIMD-ONLY0:       cond.true5253:
// SIMD-ONLY0-NEXT:    [[TMP2746:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5255:%.*]]
// SIMD-ONLY0:       cond.false5254:
// SIMD-ONLY0-NEXT:    [[TMP2747:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END5255]]
// SIMD-ONLY0:       cond.end5255:
// SIMD-ONLY0-NEXT:    [[COND5256:%.*]] = phi float [ [[TMP2746]], [[COND_TRUE5253]] ], [ [[TMP2747]], [[COND_FALSE5254]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5256]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2748:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2749:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5257:%.*]] = fcmp ogt float [[TMP2748]], [[TMP2749]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5257]], label [[IF_THEN5259:%.*]], label [[IF_END5260:%.*]]
// SIMD-ONLY0:       if.then5259:
// SIMD-ONLY0-NEXT:    [[TMP2750:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2750]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5260]]
// SIMD-ONLY0:       if.end5260:
// SIMD-ONLY0-NEXT:    [[TMP2751:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2752:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5261:%.*]] = fcmp olt float [[TMP2751]], [[TMP2752]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5261]], label [[IF_THEN5263:%.*]], label [[IF_END5264:%.*]]
// SIMD-ONLY0:       if.then5263:
// SIMD-ONLY0-NEXT:    [[TMP2753:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2753]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5264]]
// SIMD-ONLY0:       if.end5264:
// SIMD-ONLY0-NEXT:    [[TMP2754:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2755:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5265:%.*]] = fcmp ogt float [[TMP2754]], [[TMP2755]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5265]], label [[IF_THEN5267:%.*]], label [[IF_END5268:%.*]]
// SIMD-ONLY0:       if.then5267:
// SIMD-ONLY0-NEXT:    [[TMP2756:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2756]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5268]]
// SIMD-ONLY0:       if.end5268:
// SIMD-ONLY0-NEXT:    [[TMP2757:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2758:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP5269:%.*]] = fcmp olt float [[TMP2757]], [[TMP2758]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5269]], label [[IF_THEN5271:%.*]], label [[IF_END5272:%.*]]
// SIMD-ONLY0:       if.then5271:
// SIMD-ONLY0-NEXT:    [[TMP2759:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP2759]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END5272]]
// SIMD-ONLY0:       if.end5272:
// SIMD-ONLY0-NEXT:    [[TMP2760:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2761:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5273:%.*]] = fcmp ogt double [[TMP2760]], [[TMP2761]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5273]], label [[COND_TRUE5275:%.*]], label [[COND_FALSE5276:%.*]]
// SIMD-ONLY0:       cond.true5275:
// SIMD-ONLY0-NEXT:    [[TMP2762:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5277:%.*]]
// SIMD-ONLY0:       cond.false5276:
// SIMD-ONLY0-NEXT:    [[TMP2763:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5277]]
// SIMD-ONLY0:       cond.end5277:
// SIMD-ONLY0-NEXT:    [[COND5278:%.*]] = phi double [ [[TMP2762]], [[COND_TRUE5275]] ], [ [[TMP2763]], [[COND_FALSE5276]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5278]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2764:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2765:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5279:%.*]] = fcmp olt double [[TMP2764]], [[TMP2765]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5279]], label [[COND_TRUE5281:%.*]], label [[COND_FALSE5282:%.*]]
// SIMD-ONLY0:       cond.true5281:
// SIMD-ONLY0-NEXT:    [[TMP2766:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5283:%.*]]
// SIMD-ONLY0:       cond.false5282:
// SIMD-ONLY0-NEXT:    [[TMP2767:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5283]]
// SIMD-ONLY0:       cond.end5283:
// SIMD-ONLY0-NEXT:    [[COND5284:%.*]] = phi double [ [[TMP2766]], [[COND_TRUE5281]] ], [ [[TMP2767]], [[COND_FALSE5282]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5284]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2768:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2769:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5285:%.*]] = fcmp ogt double [[TMP2768]], [[TMP2769]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5285]], label [[COND_TRUE5287:%.*]], label [[COND_FALSE5288:%.*]]
// SIMD-ONLY0:       cond.true5287:
// SIMD-ONLY0-NEXT:    [[TMP2770:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5289:%.*]]
// SIMD-ONLY0:       cond.false5288:
// SIMD-ONLY0-NEXT:    [[TMP2771:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5289]]
// SIMD-ONLY0:       cond.end5289:
// SIMD-ONLY0-NEXT:    [[COND5290:%.*]] = phi double [ [[TMP2770]], [[COND_TRUE5287]] ], [ [[TMP2771]], [[COND_FALSE5288]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5290]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2772:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2773:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5291:%.*]] = fcmp olt double [[TMP2772]], [[TMP2773]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5291]], label [[COND_TRUE5293:%.*]], label [[COND_FALSE5294:%.*]]
// SIMD-ONLY0:       cond.true5293:
// SIMD-ONLY0-NEXT:    [[TMP2774:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5295:%.*]]
// SIMD-ONLY0:       cond.false5294:
// SIMD-ONLY0-NEXT:    [[TMP2775:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5295]]
// SIMD-ONLY0:       cond.end5295:
// SIMD-ONLY0-NEXT:    [[COND5296:%.*]] = phi double [ [[TMP2774]], [[COND_TRUE5293]] ], [ [[TMP2775]], [[COND_FALSE5294]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5296]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2776:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2777:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5297:%.*]] = fcmp ogt double [[TMP2776]], [[TMP2777]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5297]], label [[IF_THEN5299:%.*]], label [[IF_END5300:%.*]]
// SIMD-ONLY0:       if.then5299:
// SIMD-ONLY0-NEXT:    [[TMP2778:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2778]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5300]]
// SIMD-ONLY0:       if.end5300:
// SIMD-ONLY0-NEXT:    [[TMP2779:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2780:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5301:%.*]] = fcmp olt double [[TMP2779]], [[TMP2780]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5301]], label [[IF_THEN5303:%.*]], label [[IF_END5304:%.*]]
// SIMD-ONLY0:       if.then5303:
// SIMD-ONLY0-NEXT:    [[TMP2781:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2781]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5304]]
// SIMD-ONLY0:       if.end5304:
// SIMD-ONLY0-NEXT:    [[TMP2782:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2783:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5305:%.*]] = fcmp ogt double [[TMP2782]], [[TMP2783]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5305]], label [[IF_THEN5307:%.*]], label [[IF_END5308:%.*]]
// SIMD-ONLY0:       if.then5307:
// SIMD-ONLY0-NEXT:    [[TMP2784:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2784]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5308]]
// SIMD-ONLY0:       if.end5308:
// SIMD-ONLY0-NEXT:    [[TMP2785:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2786:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5309:%.*]] = fcmp olt double [[TMP2785]], [[TMP2786]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5309]], label [[IF_THEN5311:%.*]], label [[IF_END5312:%.*]]
// SIMD-ONLY0:       if.then5311:
// SIMD-ONLY0-NEXT:    [[TMP2787:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2787]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5312]]
// SIMD-ONLY0:       if.end5312:
// SIMD-ONLY0-NEXT:    [[TMP2788:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2789:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5313:%.*]] = fcmp ogt double [[TMP2788]], [[TMP2789]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5313]], label [[COND_TRUE5315:%.*]], label [[COND_FALSE5316:%.*]]
// SIMD-ONLY0:       cond.true5315:
// SIMD-ONLY0-NEXT:    [[TMP2790:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5317:%.*]]
// SIMD-ONLY0:       cond.false5316:
// SIMD-ONLY0-NEXT:    [[TMP2791:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5317]]
// SIMD-ONLY0:       cond.end5317:
// SIMD-ONLY0-NEXT:    [[COND5318:%.*]] = phi double [ [[TMP2790]], [[COND_TRUE5315]] ], [ [[TMP2791]], [[COND_FALSE5316]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5318]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2792:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2793:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5319:%.*]] = fcmp olt double [[TMP2792]], [[TMP2793]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5319]], label [[COND_TRUE5321:%.*]], label [[COND_FALSE5322:%.*]]
// SIMD-ONLY0:       cond.true5321:
// SIMD-ONLY0-NEXT:    [[TMP2794:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5323:%.*]]
// SIMD-ONLY0:       cond.false5322:
// SIMD-ONLY0-NEXT:    [[TMP2795:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5323]]
// SIMD-ONLY0:       cond.end5323:
// SIMD-ONLY0-NEXT:    [[COND5324:%.*]] = phi double [ [[TMP2794]], [[COND_TRUE5321]] ], [ [[TMP2795]], [[COND_FALSE5322]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5324]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2796:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2797:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5325:%.*]] = fcmp ogt double [[TMP2796]], [[TMP2797]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5325]], label [[COND_TRUE5327:%.*]], label [[COND_FALSE5328:%.*]]
// SIMD-ONLY0:       cond.true5327:
// SIMD-ONLY0-NEXT:    [[TMP2798:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5329:%.*]]
// SIMD-ONLY0:       cond.false5328:
// SIMD-ONLY0-NEXT:    [[TMP2799:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5329]]
// SIMD-ONLY0:       cond.end5329:
// SIMD-ONLY0-NEXT:    [[COND5330:%.*]] = phi double [ [[TMP2798]], [[COND_TRUE5327]] ], [ [[TMP2799]], [[COND_FALSE5328]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5330]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2800:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2801:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5331:%.*]] = fcmp olt double [[TMP2800]], [[TMP2801]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5331]], label [[COND_TRUE5333:%.*]], label [[COND_FALSE5334:%.*]]
// SIMD-ONLY0:       cond.true5333:
// SIMD-ONLY0-NEXT:    [[TMP2802:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5335:%.*]]
// SIMD-ONLY0:       cond.false5334:
// SIMD-ONLY0-NEXT:    [[TMP2803:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5335]]
// SIMD-ONLY0:       cond.end5335:
// SIMD-ONLY0-NEXT:    [[COND5336:%.*]] = phi double [ [[TMP2802]], [[COND_TRUE5333]] ], [ [[TMP2803]], [[COND_FALSE5334]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5336]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2804:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2805:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5337:%.*]] = fcmp ogt double [[TMP2804]], [[TMP2805]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5337]], label [[IF_THEN5339:%.*]], label [[IF_END5340:%.*]]
// SIMD-ONLY0:       if.then5339:
// SIMD-ONLY0-NEXT:    [[TMP2806:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2806]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5340]]
// SIMD-ONLY0:       if.end5340:
// SIMD-ONLY0-NEXT:    [[TMP2807:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2808:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5341:%.*]] = fcmp olt double [[TMP2807]], [[TMP2808]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5341]], label [[IF_THEN5343:%.*]], label [[IF_END5344:%.*]]
// SIMD-ONLY0:       if.then5343:
// SIMD-ONLY0-NEXT:    [[TMP2809:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2809]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5344]]
// SIMD-ONLY0:       if.end5344:
// SIMD-ONLY0-NEXT:    [[TMP2810:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2811:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5345:%.*]] = fcmp ogt double [[TMP2810]], [[TMP2811]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5345]], label [[IF_THEN5347:%.*]], label [[IF_END5348:%.*]]
// SIMD-ONLY0:       if.then5347:
// SIMD-ONLY0-NEXT:    [[TMP2812:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2812]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5348]]
// SIMD-ONLY0:       if.end5348:
// SIMD-ONLY0-NEXT:    [[TMP2813:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2814:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5349:%.*]] = fcmp olt double [[TMP2813]], [[TMP2814]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5349]], label [[IF_THEN5351:%.*]], label [[IF_END5352:%.*]]
// SIMD-ONLY0:       if.then5351:
// SIMD-ONLY0-NEXT:    [[TMP2815:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2815]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5352]]
// SIMD-ONLY0:       if.end5352:
// SIMD-ONLY0-NEXT:    [[TMP2816:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2817:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5353:%.*]] = fcmp ogt double [[TMP2816]], [[TMP2817]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5353]], label [[COND_TRUE5355:%.*]], label [[COND_FALSE5356:%.*]]
// SIMD-ONLY0:       cond.true5355:
// SIMD-ONLY0-NEXT:    [[TMP2818:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5357:%.*]]
// SIMD-ONLY0:       cond.false5356:
// SIMD-ONLY0-NEXT:    [[TMP2819:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5357]]
// SIMD-ONLY0:       cond.end5357:
// SIMD-ONLY0-NEXT:    [[COND5358:%.*]] = phi double [ [[TMP2818]], [[COND_TRUE5355]] ], [ [[TMP2819]], [[COND_FALSE5356]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5358]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2820:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2821:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5359:%.*]] = fcmp olt double [[TMP2820]], [[TMP2821]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5359]], label [[COND_TRUE5361:%.*]], label [[COND_FALSE5362:%.*]]
// SIMD-ONLY0:       cond.true5361:
// SIMD-ONLY0-NEXT:    [[TMP2822:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5363:%.*]]
// SIMD-ONLY0:       cond.false5362:
// SIMD-ONLY0-NEXT:    [[TMP2823:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5363]]
// SIMD-ONLY0:       cond.end5363:
// SIMD-ONLY0-NEXT:    [[COND5364:%.*]] = phi double [ [[TMP2822]], [[COND_TRUE5361]] ], [ [[TMP2823]], [[COND_FALSE5362]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5364]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2824:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2825:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5365:%.*]] = fcmp ogt double [[TMP2824]], [[TMP2825]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5365]], label [[COND_TRUE5367:%.*]], label [[COND_FALSE5368:%.*]]
// SIMD-ONLY0:       cond.true5367:
// SIMD-ONLY0-NEXT:    [[TMP2826:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5369:%.*]]
// SIMD-ONLY0:       cond.false5368:
// SIMD-ONLY0-NEXT:    [[TMP2827:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5369]]
// SIMD-ONLY0:       cond.end5369:
// SIMD-ONLY0-NEXT:    [[COND5370:%.*]] = phi double [ [[TMP2826]], [[COND_TRUE5367]] ], [ [[TMP2827]], [[COND_FALSE5368]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5370]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2828:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2829:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5371:%.*]] = fcmp olt double [[TMP2828]], [[TMP2829]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5371]], label [[COND_TRUE5373:%.*]], label [[COND_FALSE5374:%.*]]
// SIMD-ONLY0:       cond.true5373:
// SIMD-ONLY0-NEXT:    [[TMP2830:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5375:%.*]]
// SIMD-ONLY0:       cond.false5374:
// SIMD-ONLY0-NEXT:    [[TMP2831:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5375]]
// SIMD-ONLY0:       cond.end5375:
// SIMD-ONLY0-NEXT:    [[COND5376:%.*]] = phi double [ [[TMP2830]], [[COND_TRUE5373]] ], [ [[TMP2831]], [[COND_FALSE5374]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5376]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2832:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2833:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5377:%.*]] = fcmp ogt double [[TMP2832]], [[TMP2833]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5377]], label [[IF_THEN5379:%.*]], label [[IF_END5380:%.*]]
// SIMD-ONLY0:       if.then5379:
// SIMD-ONLY0-NEXT:    [[TMP2834:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2834]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5380]]
// SIMD-ONLY0:       if.end5380:
// SIMD-ONLY0-NEXT:    [[TMP2835:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2836:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5381:%.*]] = fcmp olt double [[TMP2835]], [[TMP2836]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5381]], label [[IF_THEN5383:%.*]], label [[IF_END5384:%.*]]
// SIMD-ONLY0:       if.then5383:
// SIMD-ONLY0-NEXT:    [[TMP2837:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2837]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5384]]
// SIMD-ONLY0:       if.end5384:
// SIMD-ONLY0-NEXT:    [[TMP2838:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2839:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5385:%.*]] = fcmp ogt double [[TMP2838]], [[TMP2839]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5385]], label [[IF_THEN5387:%.*]], label [[IF_END5388:%.*]]
// SIMD-ONLY0:       if.then5387:
// SIMD-ONLY0-NEXT:    [[TMP2840:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2840]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5388]]
// SIMD-ONLY0:       if.end5388:
// SIMD-ONLY0-NEXT:    [[TMP2841:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2842:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5389:%.*]] = fcmp olt double [[TMP2841]], [[TMP2842]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5389]], label [[IF_THEN5391:%.*]], label [[IF_END5392:%.*]]
// SIMD-ONLY0:       if.then5391:
// SIMD-ONLY0-NEXT:    [[TMP2843:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2843]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5392]]
// SIMD-ONLY0:       if.end5392:
// SIMD-ONLY0-NEXT:    [[TMP2844:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2845:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5393:%.*]] = fcmp ogt double [[TMP2844]], [[TMP2845]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5393]], label [[COND_TRUE5395:%.*]], label [[COND_FALSE5396:%.*]]
// SIMD-ONLY0:       cond.true5395:
// SIMD-ONLY0-NEXT:    [[TMP2846:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5397:%.*]]
// SIMD-ONLY0:       cond.false5396:
// SIMD-ONLY0-NEXT:    [[TMP2847:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5397]]
// SIMD-ONLY0:       cond.end5397:
// SIMD-ONLY0-NEXT:    [[COND5398:%.*]] = phi double [ [[TMP2846]], [[COND_TRUE5395]] ], [ [[TMP2847]], [[COND_FALSE5396]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5398]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2848:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2849:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5399:%.*]] = fcmp olt double [[TMP2848]], [[TMP2849]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5399]], label [[COND_TRUE5401:%.*]], label [[COND_FALSE5402:%.*]]
// SIMD-ONLY0:       cond.true5401:
// SIMD-ONLY0-NEXT:    [[TMP2850:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5403:%.*]]
// SIMD-ONLY0:       cond.false5402:
// SIMD-ONLY0-NEXT:    [[TMP2851:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5403]]
// SIMD-ONLY0:       cond.end5403:
// SIMD-ONLY0-NEXT:    [[COND5404:%.*]] = phi double [ [[TMP2850]], [[COND_TRUE5401]] ], [ [[TMP2851]], [[COND_FALSE5402]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5404]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2852:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2853:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5405:%.*]] = fcmp ogt double [[TMP2852]], [[TMP2853]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5405]], label [[COND_TRUE5407:%.*]], label [[COND_FALSE5408:%.*]]
// SIMD-ONLY0:       cond.true5407:
// SIMD-ONLY0-NEXT:    [[TMP2854:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5409:%.*]]
// SIMD-ONLY0:       cond.false5408:
// SIMD-ONLY0-NEXT:    [[TMP2855:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5409]]
// SIMD-ONLY0:       cond.end5409:
// SIMD-ONLY0-NEXT:    [[COND5410:%.*]] = phi double [ [[TMP2854]], [[COND_TRUE5407]] ], [ [[TMP2855]], [[COND_FALSE5408]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5410]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2856:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2857:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5411:%.*]] = fcmp olt double [[TMP2856]], [[TMP2857]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5411]], label [[COND_TRUE5413:%.*]], label [[COND_FALSE5414:%.*]]
// SIMD-ONLY0:       cond.true5413:
// SIMD-ONLY0-NEXT:    [[TMP2858:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5415:%.*]]
// SIMD-ONLY0:       cond.false5414:
// SIMD-ONLY0-NEXT:    [[TMP2859:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5415]]
// SIMD-ONLY0:       cond.end5415:
// SIMD-ONLY0-NEXT:    [[COND5416:%.*]] = phi double [ [[TMP2858]], [[COND_TRUE5413]] ], [ [[TMP2859]], [[COND_FALSE5414]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5416]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2860:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2861:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5417:%.*]] = fcmp ogt double [[TMP2860]], [[TMP2861]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5417]], label [[IF_THEN5419:%.*]], label [[IF_END5420:%.*]]
// SIMD-ONLY0:       if.then5419:
// SIMD-ONLY0-NEXT:    [[TMP2862:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2862]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5420]]
// SIMD-ONLY0:       if.end5420:
// SIMD-ONLY0-NEXT:    [[TMP2863:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2864:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5421:%.*]] = fcmp olt double [[TMP2863]], [[TMP2864]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5421]], label [[IF_THEN5423:%.*]], label [[IF_END5424:%.*]]
// SIMD-ONLY0:       if.then5423:
// SIMD-ONLY0-NEXT:    [[TMP2865:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2865]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5424]]
// SIMD-ONLY0:       if.end5424:
// SIMD-ONLY0-NEXT:    [[TMP2866:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2867:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5425:%.*]] = fcmp ogt double [[TMP2866]], [[TMP2867]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5425]], label [[IF_THEN5427:%.*]], label [[IF_END5428:%.*]]
// SIMD-ONLY0:       if.then5427:
// SIMD-ONLY0-NEXT:    [[TMP2868:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2868]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5428]]
// SIMD-ONLY0:       if.end5428:
// SIMD-ONLY0-NEXT:    [[TMP2869:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2870:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5429:%.*]] = fcmp olt double [[TMP2869]], [[TMP2870]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5429]], label [[IF_THEN5431:%.*]], label [[IF_END5432:%.*]]
// SIMD-ONLY0:       if.then5431:
// SIMD-ONLY0-NEXT:    [[TMP2871:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2871]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5432]]
// SIMD-ONLY0:       if.end5432:
// SIMD-ONLY0-NEXT:    [[TMP2872:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2873:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5433:%.*]] = fcmp ogt double [[TMP2872]], [[TMP2873]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5433]], label [[COND_TRUE5435:%.*]], label [[COND_FALSE5436:%.*]]
// SIMD-ONLY0:       cond.true5435:
// SIMD-ONLY0-NEXT:    [[TMP2874:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5437:%.*]]
// SIMD-ONLY0:       cond.false5436:
// SIMD-ONLY0-NEXT:    [[TMP2875:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5437]]
// SIMD-ONLY0:       cond.end5437:
// SIMD-ONLY0-NEXT:    [[COND5438:%.*]] = phi double [ [[TMP2874]], [[COND_TRUE5435]] ], [ [[TMP2875]], [[COND_FALSE5436]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5438]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2876:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2877:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5439:%.*]] = fcmp olt double [[TMP2876]], [[TMP2877]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5439]], label [[COND_TRUE5441:%.*]], label [[COND_FALSE5442:%.*]]
// SIMD-ONLY0:       cond.true5441:
// SIMD-ONLY0-NEXT:    [[TMP2878:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5443:%.*]]
// SIMD-ONLY0:       cond.false5442:
// SIMD-ONLY0-NEXT:    [[TMP2879:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5443]]
// SIMD-ONLY0:       cond.end5443:
// SIMD-ONLY0-NEXT:    [[COND5444:%.*]] = phi double [ [[TMP2878]], [[COND_TRUE5441]] ], [ [[TMP2879]], [[COND_FALSE5442]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5444]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2880:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2881:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5445:%.*]] = fcmp ogt double [[TMP2880]], [[TMP2881]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5445]], label [[COND_TRUE5447:%.*]], label [[COND_FALSE5448:%.*]]
// SIMD-ONLY0:       cond.true5447:
// SIMD-ONLY0-NEXT:    [[TMP2882:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5449:%.*]]
// SIMD-ONLY0:       cond.false5448:
// SIMD-ONLY0-NEXT:    [[TMP2883:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5449]]
// SIMD-ONLY0:       cond.end5449:
// SIMD-ONLY0-NEXT:    [[COND5450:%.*]] = phi double [ [[TMP2882]], [[COND_TRUE5447]] ], [ [[TMP2883]], [[COND_FALSE5448]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5450]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2884:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2885:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5451:%.*]] = fcmp olt double [[TMP2884]], [[TMP2885]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5451]], label [[COND_TRUE5453:%.*]], label [[COND_FALSE5454:%.*]]
// SIMD-ONLY0:       cond.true5453:
// SIMD-ONLY0-NEXT:    [[TMP2886:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5455:%.*]]
// SIMD-ONLY0:       cond.false5454:
// SIMD-ONLY0-NEXT:    [[TMP2887:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5455]]
// SIMD-ONLY0:       cond.end5455:
// SIMD-ONLY0-NEXT:    [[COND5456:%.*]] = phi double [ [[TMP2886]], [[COND_TRUE5453]] ], [ [[TMP2887]], [[COND_FALSE5454]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5456]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2888:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2889:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5457:%.*]] = fcmp ogt double [[TMP2888]], [[TMP2889]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5457]], label [[IF_THEN5459:%.*]], label [[IF_END5460:%.*]]
// SIMD-ONLY0:       if.then5459:
// SIMD-ONLY0-NEXT:    [[TMP2890:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2890]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5460]]
// SIMD-ONLY0:       if.end5460:
// SIMD-ONLY0-NEXT:    [[TMP2891:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2892:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5461:%.*]] = fcmp olt double [[TMP2891]], [[TMP2892]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5461]], label [[IF_THEN5463:%.*]], label [[IF_END5464:%.*]]
// SIMD-ONLY0:       if.then5463:
// SIMD-ONLY0-NEXT:    [[TMP2893:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2893]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5464]]
// SIMD-ONLY0:       if.end5464:
// SIMD-ONLY0-NEXT:    [[TMP2894:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2895:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5465:%.*]] = fcmp ogt double [[TMP2894]], [[TMP2895]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5465]], label [[IF_THEN5467:%.*]], label [[IF_END5468:%.*]]
// SIMD-ONLY0:       if.then5467:
// SIMD-ONLY0-NEXT:    [[TMP2896:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2896]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5468]]
// SIMD-ONLY0:       if.end5468:
// SIMD-ONLY0-NEXT:    [[TMP2897:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2898:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5469:%.*]] = fcmp olt double [[TMP2897]], [[TMP2898]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5469]], label [[IF_THEN5471:%.*]], label [[IF_END5472:%.*]]
// SIMD-ONLY0:       if.then5471:
// SIMD-ONLY0-NEXT:    [[TMP2899:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2899]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5472]]
// SIMD-ONLY0:       if.end5472:
// SIMD-ONLY0-NEXT:    [[TMP2900:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2901:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5473:%.*]] = fcmp ogt double [[TMP2900]], [[TMP2901]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5473]], label [[COND_TRUE5475:%.*]], label [[COND_FALSE5476:%.*]]
// SIMD-ONLY0:       cond.true5475:
// SIMD-ONLY0-NEXT:    [[TMP2902:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5477:%.*]]
// SIMD-ONLY0:       cond.false5476:
// SIMD-ONLY0-NEXT:    [[TMP2903:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5477]]
// SIMD-ONLY0:       cond.end5477:
// SIMD-ONLY0-NEXT:    [[COND5478:%.*]] = phi double [ [[TMP2902]], [[COND_TRUE5475]] ], [ [[TMP2903]], [[COND_FALSE5476]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5478]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2904:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2905:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5479:%.*]] = fcmp olt double [[TMP2904]], [[TMP2905]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5479]], label [[COND_TRUE5481:%.*]], label [[COND_FALSE5482:%.*]]
// SIMD-ONLY0:       cond.true5481:
// SIMD-ONLY0-NEXT:    [[TMP2906:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5483:%.*]]
// SIMD-ONLY0:       cond.false5482:
// SIMD-ONLY0-NEXT:    [[TMP2907:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5483]]
// SIMD-ONLY0:       cond.end5483:
// SIMD-ONLY0-NEXT:    [[COND5484:%.*]] = phi double [ [[TMP2906]], [[COND_TRUE5481]] ], [ [[TMP2907]], [[COND_FALSE5482]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5484]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2908:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2909:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5485:%.*]] = fcmp ogt double [[TMP2908]], [[TMP2909]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5485]], label [[COND_TRUE5487:%.*]], label [[COND_FALSE5488:%.*]]
// SIMD-ONLY0:       cond.true5487:
// SIMD-ONLY0-NEXT:    [[TMP2910:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5489:%.*]]
// SIMD-ONLY0:       cond.false5488:
// SIMD-ONLY0-NEXT:    [[TMP2911:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5489]]
// SIMD-ONLY0:       cond.end5489:
// SIMD-ONLY0-NEXT:    [[COND5490:%.*]] = phi double [ [[TMP2910]], [[COND_TRUE5487]] ], [ [[TMP2911]], [[COND_FALSE5488]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5490]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2912:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2913:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5491:%.*]] = fcmp olt double [[TMP2912]], [[TMP2913]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5491]], label [[COND_TRUE5493:%.*]], label [[COND_FALSE5494:%.*]]
// SIMD-ONLY0:       cond.true5493:
// SIMD-ONLY0-NEXT:    [[TMP2914:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5495:%.*]]
// SIMD-ONLY0:       cond.false5494:
// SIMD-ONLY0-NEXT:    [[TMP2915:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END5495]]
// SIMD-ONLY0:       cond.end5495:
// SIMD-ONLY0-NEXT:    [[COND5496:%.*]] = phi double [ [[TMP2914]], [[COND_TRUE5493]] ], [ [[TMP2915]], [[COND_FALSE5494]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5496]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2916:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2917:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5497:%.*]] = fcmp ogt double [[TMP2916]], [[TMP2917]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5497]], label [[IF_THEN5499:%.*]], label [[IF_END5500:%.*]]
// SIMD-ONLY0:       if.then5499:
// SIMD-ONLY0-NEXT:    [[TMP2918:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2918]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5500]]
// SIMD-ONLY0:       if.end5500:
// SIMD-ONLY0-NEXT:    [[TMP2919:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2920:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5501:%.*]] = fcmp olt double [[TMP2919]], [[TMP2920]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5501]], label [[IF_THEN5503:%.*]], label [[IF_END5504:%.*]]
// SIMD-ONLY0:       if.then5503:
// SIMD-ONLY0-NEXT:    [[TMP2921:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2921]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5504]]
// SIMD-ONLY0:       if.end5504:
// SIMD-ONLY0-NEXT:    [[TMP2922:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2923:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5505:%.*]] = fcmp ogt double [[TMP2922]], [[TMP2923]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5505]], label [[IF_THEN5507:%.*]], label [[IF_END5508:%.*]]
// SIMD-ONLY0:       if.then5507:
// SIMD-ONLY0-NEXT:    [[TMP2924:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2924]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5508]]
// SIMD-ONLY0:       if.end5508:
// SIMD-ONLY0-NEXT:    [[TMP2925:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2926:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5509:%.*]] = fcmp olt double [[TMP2925]], [[TMP2926]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5509]], label [[IF_THEN5511:%.*]], label [[IF_END5512:%.*]]
// SIMD-ONLY0:       if.then5511:
// SIMD-ONLY0-NEXT:    [[TMP2927:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2927]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5512]]
// SIMD-ONLY0:       if.end5512:
// SIMD-ONLY0-NEXT:    ret void
//
//
// SIMD-ONLY0-LABEL: @bar(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[CX:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[CV:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[CR:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[CE:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[CD:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCX:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCV:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCR:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCE:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCD:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[SX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SV:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SR:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USV:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USR:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[IX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IV:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IR:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[ID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIV:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIR:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[LX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LR:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULR:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLR:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLR:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[FX:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FV:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FE:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FD:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[DX:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DV:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DE:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DD:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP0]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = bytecast b8 [[TMP1]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1:%.*]] = sext i8 [[CONV]] to i32
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV2:%.*]] = bytecast b8 [[TMP2]] to i8
// SIMD-ONLY0-NEXT:    [[CONV3:%.*]] = sext i8 [[CONV2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV1]], [[CONV3]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// SIMD-ONLY0:       if.then:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP3]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END]]
// SIMD-ONLY0:       if.end:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP4]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV5:%.*]] = bytecast b8 [[TMP5]] to i8
// SIMD-ONLY0-NEXT:    [[CONV6:%.*]] = sext i8 [[CONV5]] to i32
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV7:%.*]] = bytecast b8 [[TMP6]] to i8
// SIMD-ONLY0-NEXT:    [[CONV8:%.*]] = sext i8 [[CONV7]] to i32
// SIMD-ONLY0-NEXT:    [[CMP9:%.*]] = icmp sgt i32 [[CONV6]], [[CONV8]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP9]], label [[IF_THEN11:%.*]], label [[IF_END12:%.*]]
// SIMD-ONLY0:       if.then11:
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP7]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END12]]
// SIMD-ONLY0:       if.end12:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP8]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV13:%.*]] = bytecast b8 [[TMP9]] to i8
// SIMD-ONLY0-NEXT:    [[CONV14:%.*]] = sext i8 [[CONV13]] to i32
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV15:%.*]] = bytecast b8 [[TMP10]] to i8
// SIMD-ONLY0-NEXT:    [[CONV16:%.*]] = sext i8 [[CONV15]] to i32
// SIMD-ONLY0-NEXT:    [[CMP17:%.*]] = icmp slt i32 [[CONV14]], [[CONV16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP17]], label [[IF_THEN19:%.*]], label [[IF_END20:%.*]]
// SIMD-ONLY0:       if.then19:
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP11]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END20]]
// SIMD-ONLY0:       if.end20:
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP12]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV21:%.*]] = bytecast b8 [[TMP13]] to i8
// SIMD-ONLY0-NEXT:    [[CONV22:%.*]] = sext i8 [[CONV21]] to i32
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV23:%.*]] = bytecast b8 [[TMP14]] to i8
// SIMD-ONLY0-NEXT:    [[CONV24:%.*]] = sext i8 [[CONV23]] to i32
// SIMD-ONLY0-NEXT:    [[CMP25:%.*]] = icmp slt i32 [[CONV22]], [[CONV24]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP25]], label [[IF_THEN27:%.*]], label [[IF_END28:%.*]]
// SIMD-ONLY0:       if.then27:
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP15]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END28]]
// SIMD-ONLY0:       if.end28:
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP16]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV29:%.*]] = bytecast b8 [[TMP17]] to i8
// SIMD-ONLY0-NEXT:    [[CONV30:%.*]] = sext i8 [[CONV29]] to i32
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV31:%.*]] = bytecast b8 [[TMP18]] to i8
// SIMD-ONLY0-NEXT:    [[CONV32:%.*]] = sext i8 [[CONV31]] to i32
// SIMD-ONLY0-NEXT:    [[CMP33:%.*]] = icmp eq i32 [[CONV30]], [[CONV32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP33]], label [[IF_THEN35:%.*]], label [[IF_END36:%.*]]
// SIMD-ONLY0:       if.then35:
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP19]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END36]]
// SIMD-ONLY0:       if.end36:
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP20]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV37:%.*]] = bytecast b8 [[TMP21]] to i8
// SIMD-ONLY0-NEXT:    [[CONV38:%.*]] = sext i8 [[CONV37]] to i32
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV39:%.*]] = bytecast b8 [[TMP22]] to i8
// SIMD-ONLY0-NEXT:    [[CONV40:%.*]] = sext i8 [[CONV39]] to i32
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = icmp eq i32 [[CONV38]], [[CONV40]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[IF_THEN43:%.*]], label [[IF_END44:%.*]]
// SIMD-ONLY0:       if.then43:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP23]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END44]]
// SIMD-ONLY0:       if.end44:
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV45:%.*]] = bytecast b8 [[TMP24]] to i8
// SIMD-ONLY0-NEXT:    [[CONV46:%.*]] = sext i8 [[CONV45]] to i32
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV47:%.*]] = bytecast b8 [[TMP25]] to i8
// SIMD-ONLY0-NEXT:    [[CONV48:%.*]] = sext i8 [[CONV47]] to i32
// SIMD-ONLY0-NEXT:    [[CMP49:%.*]] = icmp sgt i32 [[CONV46]], [[CONV48]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP49]], label [[IF_THEN51:%.*]], label [[IF_END52:%.*]]
// SIMD-ONLY0:       if.then51:
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP26]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END52]]
// SIMD-ONLY0:       if.end52:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP27]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV53:%.*]] = bytecast b8 [[TMP28]] to i8
// SIMD-ONLY0-NEXT:    [[CONV54:%.*]] = sext i8 [[CONV53]] to i32
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV55:%.*]] = bytecast b8 [[TMP29]] to i8
// SIMD-ONLY0-NEXT:    [[CONV56:%.*]] = sext i8 [[CONV55]] to i32
// SIMD-ONLY0-NEXT:    [[CMP57:%.*]] = icmp sgt i32 [[CONV54]], [[CONV56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP57]], label [[IF_THEN59:%.*]], label [[IF_END60:%.*]]
// SIMD-ONLY0:       if.then59:
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP30]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END60]]
// SIMD-ONLY0:       if.end60:
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP31]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV61:%.*]] = bytecast b8 [[TMP32]] to i8
// SIMD-ONLY0-NEXT:    [[CONV62:%.*]] = sext i8 [[CONV61]] to i32
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV63:%.*]] = bytecast b8 [[TMP33]] to i8
// SIMD-ONLY0-NEXT:    [[CONV64:%.*]] = sext i8 [[CONV63]] to i32
// SIMD-ONLY0-NEXT:    [[CMP65:%.*]] = icmp slt i32 [[CONV62]], [[CONV64]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP65]], label [[IF_THEN67:%.*]], label [[IF_END68:%.*]]
// SIMD-ONLY0:       if.then67:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP34]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END68]]
// SIMD-ONLY0:       if.end68:
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP35]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV69:%.*]] = bytecast b8 [[TMP36]] to i8
// SIMD-ONLY0-NEXT:    [[CONV70:%.*]] = sext i8 [[CONV69]] to i32
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV71:%.*]] = bytecast b8 [[TMP37]] to i8
// SIMD-ONLY0-NEXT:    [[CONV72:%.*]] = sext i8 [[CONV71]] to i32
// SIMD-ONLY0-NEXT:    [[CMP73:%.*]] = icmp slt i32 [[CONV70]], [[CONV72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP73]], label [[IF_THEN75:%.*]], label [[IF_END76:%.*]]
// SIMD-ONLY0:       if.then75:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP38]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END76]]
// SIMD-ONLY0:       if.end76:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP39]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV77:%.*]] = bytecast b8 [[TMP40]] to i8
// SIMD-ONLY0-NEXT:    [[CONV78:%.*]] = sext i8 [[CONV77]] to i32
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV79:%.*]] = bytecast b8 [[TMP41]] to i8
// SIMD-ONLY0-NEXT:    [[CONV80:%.*]] = sext i8 [[CONV79]] to i32
// SIMD-ONLY0-NEXT:    [[CMP81:%.*]] = icmp eq i32 [[CONV78]], [[CONV80]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP81]], label [[IF_THEN83:%.*]], label [[IF_END84:%.*]]
// SIMD-ONLY0:       if.then83:
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP42]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END84]]
// SIMD-ONLY0:       if.end84:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP43]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV85:%.*]] = bytecast b8 [[TMP44]] to i8
// SIMD-ONLY0-NEXT:    [[CONV86:%.*]] = sext i8 [[CONV85]] to i32
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV87:%.*]] = bytecast b8 [[TMP45]] to i8
// SIMD-ONLY0-NEXT:    [[CONV88:%.*]] = sext i8 [[CONV87]] to i32
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = icmp eq i32 [[CONV86]], [[CONV88]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[IF_THEN91:%.*]], label [[IF_END92:%.*]]
// SIMD-ONLY0:       if.then91:
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP46]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END92]]
// SIMD-ONLY0:       if.end92:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP47]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV93:%.*]] = bytecast b8 [[TMP48]] to i8
// SIMD-ONLY0-NEXT:    [[CONV94:%.*]] = sext i8 [[CONV93]] to i32
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV95:%.*]] = bytecast b8 [[TMP49]] to i8
// SIMD-ONLY0-NEXT:    [[CONV96:%.*]] = sext i8 [[CONV95]] to i32
// SIMD-ONLY0-NEXT:    [[CMP97:%.*]] = icmp eq i32 [[CONV94]], [[CONV96]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP97]], label [[IF_THEN99:%.*]], label [[IF_ELSE:%.*]]
// SIMD-ONLY0:       if.then99:
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP50]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END100:%.*]]
// SIMD-ONLY0:       if.else:
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP51]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END100]]
// SIMD-ONLY0:       if.end100:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV101:%.*]] = bytecast b8 [[TMP52]] to i8
// SIMD-ONLY0-NEXT:    [[CONV102:%.*]] = sext i8 [[CONV101]] to i32
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV103:%.*]] = bytecast b8 [[TMP53]] to i8
// SIMD-ONLY0-NEXT:    [[CONV104:%.*]] = sext i8 [[CONV103]] to i32
// SIMD-ONLY0-NEXT:    [[CMP105:%.*]] = icmp eq i32 [[CONV102]], [[CONV104]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP105]], label [[IF_THEN107:%.*]], label [[IF_ELSE108:%.*]]
// SIMD-ONLY0:       if.then107:
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP54]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END109:%.*]]
// SIMD-ONLY0:       if.else108:
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP55]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END109]]
// SIMD-ONLY0:       if.end109:
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV110:%.*]] = bytecast b8 [[TMP56]] to i8
// SIMD-ONLY0-NEXT:    [[CONV111:%.*]] = sext i8 [[CONV110]] to i32
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV112:%.*]] = bytecast b8 [[TMP57]] to i8
// SIMD-ONLY0-NEXT:    [[CONV113:%.*]] = sext i8 [[CONV112]] to i32
// SIMD-ONLY0-NEXT:    [[CMP114:%.*]] = icmp eq i32 [[CONV111]], [[CONV113]]
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = zext i1 [[CMP114]] to i32
// SIMD-ONLY0-NEXT:    [[CONV116:%.*]] = trunc i32 [[CONV115]] to i8
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = bitcast i8 [[CONV116]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP58]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV117:%.*]] = bytecast b8 [[TMP59]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL:%.*]] = icmp ne i8 [[CONV117]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL]], label [[IF_THEN118:%.*]], label [[IF_END119:%.*]]
// SIMD-ONLY0:       if.then118:
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP60]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END119]]
// SIMD-ONLY0:       if.end119:
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV120:%.*]] = bytecast b8 [[TMP61]] to i8
// SIMD-ONLY0-NEXT:    [[CONV121:%.*]] = sext i8 [[CONV120]] to i32
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV122:%.*]] = bytecast b8 [[TMP62]] to i8
// SIMD-ONLY0-NEXT:    [[CONV123:%.*]] = sext i8 [[CONV122]] to i32
// SIMD-ONLY0-NEXT:    [[CMP124:%.*]] = icmp eq i32 [[CONV121]], [[CONV123]]
// SIMD-ONLY0-NEXT:    [[CONV125:%.*]] = zext i1 [[CMP124]] to i32
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = trunc i32 [[CONV125]] to i8
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = bitcast i8 [[CONV126]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP63]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV127:%.*]] = bytecast b8 [[TMP64]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL128:%.*]] = icmp ne i8 [[CONV127]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL128]], label [[IF_THEN129:%.*]], label [[IF_END130:%.*]]
// SIMD-ONLY0:       if.then129:
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP65]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END130]]
// SIMD-ONLY0:       if.end130:
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV131:%.*]] = bytecast b8 [[TMP66]] to i8
// SIMD-ONLY0-NEXT:    [[CONV132:%.*]] = sext i8 [[CONV131]] to i32
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV133:%.*]] = bytecast b8 [[TMP67]] to i8
// SIMD-ONLY0-NEXT:    [[CONV134:%.*]] = sext i8 [[CONV133]] to i32
// SIMD-ONLY0-NEXT:    [[CMP135:%.*]] = icmp eq i32 [[CONV132]], [[CONV134]]
// SIMD-ONLY0-NEXT:    [[CONV136:%.*]] = zext i1 [[CMP135]] to i32
// SIMD-ONLY0-NEXT:    [[CONV137:%.*]] = trunc i32 [[CONV136]] to i8
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = bitcast i8 [[CONV137]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP68]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV138:%.*]] = bytecast b8 [[TMP69]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL139:%.*]] = icmp ne i8 [[CONV138]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL139]], label [[IF_THEN140:%.*]], label [[IF_ELSE141:%.*]]
// SIMD-ONLY0:       if.then140:
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP70]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END142:%.*]]
// SIMD-ONLY0:       if.else141:
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP71]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END142]]
// SIMD-ONLY0:       if.end142:
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV143:%.*]] = bytecast b8 [[TMP72]] to i8
// SIMD-ONLY0-NEXT:    [[CONV144:%.*]] = sext i8 [[CONV143]] to i32
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV145:%.*]] = bytecast b8 [[TMP73]] to i8
// SIMD-ONLY0-NEXT:    [[CONV146:%.*]] = sext i8 [[CONV145]] to i32
// SIMD-ONLY0-NEXT:    [[CMP147:%.*]] = icmp eq i32 [[CONV144]], [[CONV146]]
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = zext i1 [[CMP147]] to i32
// SIMD-ONLY0-NEXT:    [[CONV149:%.*]] = trunc i32 [[CONV148]] to i8
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = bitcast i8 [[CONV149]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP74]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV150:%.*]] = bytecast b8 [[TMP75]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL151:%.*]] = icmp ne i8 [[CONV150]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL151]], label [[IF_THEN152:%.*]], label [[IF_ELSE153:%.*]]
// SIMD-ONLY0:       if.then152:
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP76]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END154:%.*]]
// SIMD-ONLY0:       if.else153:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP77]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END154]]
// SIMD-ONLY0:       if.end154:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP78]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV155:%.*]] = bytecast b8 [[TMP79]] to i8
// SIMD-ONLY0-NEXT:    [[CONV156:%.*]] = sext i8 [[CONV155]] to i32
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV157:%.*]] = bytecast b8 [[TMP80]] to i8
// SIMD-ONLY0-NEXT:    [[CONV158:%.*]] = sext i8 [[CONV157]] to i32
// SIMD-ONLY0-NEXT:    [[CMP159:%.*]] = icmp sgt i32 [[CONV156]], [[CONV158]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP159]], label [[IF_THEN161:%.*]], label [[IF_END162:%.*]]
// SIMD-ONLY0:       if.then161:
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP81]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END162]]
// SIMD-ONLY0:       if.end162:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP82]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV163:%.*]] = bytecast b8 [[TMP83]] to i8
// SIMD-ONLY0-NEXT:    [[CONV164:%.*]] = sext i8 [[CONV163]] to i32
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV165:%.*]] = bytecast b8 [[TMP84]] to i8
// SIMD-ONLY0-NEXT:    [[CONV166:%.*]] = sext i8 [[CONV165]] to i32
// SIMD-ONLY0-NEXT:    [[CMP167:%.*]] = icmp sgt i32 [[CONV164]], [[CONV166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP167]], label [[IF_THEN169:%.*]], label [[IF_END170:%.*]]
// SIMD-ONLY0:       if.then169:
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP85]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END170]]
// SIMD-ONLY0:       if.end170:
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP86]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV171:%.*]] = bytecast b8 [[TMP87]] to i8
// SIMD-ONLY0-NEXT:    [[CONV172:%.*]] = sext i8 [[CONV171]] to i32
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV173:%.*]] = bytecast b8 [[TMP88]] to i8
// SIMD-ONLY0-NEXT:    [[CONV174:%.*]] = sext i8 [[CONV173]] to i32
// SIMD-ONLY0-NEXT:    [[CMP175:%.*]] = icmp slt i32 [[CONV172]], [[CONV174]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP175]], label [[IF_THEN177:%.*]], label [[IF_END178:%.*]]
// SIMD-ONLY0:       if.then177:
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP89]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END178]]
// SIMD-ONLY0:       if.end178:
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP90]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV179:%.*]] = bytecast b8 [[TMP91]] to i8
// SIMD-ONLY0-NEXT:    [[CONV180:%.*]] = sext i8 [[CONV179]] to i32
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV181:%.*]] = bytecast b8 [[TMP92]] to i8
// SIMD-ONLY0-NEXT:    [[CONV182:%.*]] = sext i8 [[CONV181]] to i32
// SIMD-ONLY0-NEXT:    [[CMP183:%.*]] = icmp slt i32 [[CONV180]], [[CONV182]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP183]], label [[IF_THEN185:%.*]], label [[IF_END186:%.*]]
// SIMD-ONLY0:       if.then185:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP93]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END186]]
// SIMD-ONLY0:       if.end186:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP94]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV187:%.*]] = bytecast b8 [[TMP95]] to i8
// SIMD-ONLY0-NEXT:    [[CONV188:%.*]] = sext i8 [[CONV187]] to i32
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV189:%.*]] = bytecast b8 [[TMP96]] to i8
// SIMD-ONLY0-NEXT:    [[CONV190:%.*]] = sext i8 [[CONV189]] to i32
// SIMD-ONLY0-NEXT:    [[CMP191:%.*]] = icmp eq i32 [[CONV188]], [[CONV190]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP191]], label [[IF_THEN193:%.*]], label [[IF_END194:%.*]]
// SIMD-ONLY0:       if.then193:
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP97]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END194]]
// SIMD-ONLY0:       if.end194:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP98]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV195:%.*]] = bytecast b8 [[TMP99]] to i8
// SIMD-ONLY0-NEXT:    [[CONV196:%.*]] = sext i8 [[CONV195]] to i32
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV197:%.*]] = bytecast b8 [[TMP100]] to i8
// SIMD-ONLY0-NEXT:    [[CONV198:%.*]] = sext i8 [[CONV197]] to i32
// SIMD-ONLY0-NEXT:    [[CMP199:%.*]] = icmp eq i32 [[CONV196]], [[CONV198]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP199]], label [[IF_THEN201:%.*]], label [[IF_END202:%.*]]
// SIMD-ONLY0:       if.then201:
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP101]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END202]]
// SIMD-ONLY0:       if.end202:
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV203:%.*]] = bytecast b8 [[TMP102]] to i8
// SIMD-ONLY0-NEXT:    [[CONV204:%.*]] = sext i8 [[CONV203]] to i32
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV205:%.*]] = bytecast b8 [[TMP103]] to i8
// SIMD-ONLY0-NEXT:    [[CONV206:%.*]] = sext i8 [[CONV205]] to i32
// SIMD-ONLY0-NEXT:    [[CMP207:%.*]] = icmp sgt i32 [[CONV204]], [[CONV206]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP207]], label [[IF_THEN209:%.*]], label [[IF_END210:%.*]]
// SIMD-ONLY0:       if.then209:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP104]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END210]]
// SIMD-ONLY0:       if.end210:
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP105]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV211:%.*]] = bytecast b8 [[TMP106]] to i8
// SIMD-ONLY0-NEXT:    [[CONV212:%.*]] = sext i8 [[CONV211]] to i32
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV213:%.*]] = bytecast b8 [[TMP107]] to i8
// SIMD-ONLY0-NEXT:    [[CONV214:%.*]] = sext i8 [[CONV213]] to i32
// SIMD-ONLY0-NEXT:    [[CMP215:%.*]] = icmp sgt i32 [[CONV212]], [[CONV214]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP215]], label [[IF_THEN217:%.*]], label [[IF_END218:%.*]]
// SIMD-ONLY0:       if.then217:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP108]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END218]]
// SIMD-ONLY0:       if.end218:
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP109]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV219:%.*]] = bytecast b8 [[TMP110]] to i8
// SIMD-ONLY0-NEXT:    [[CONV220:%.*]] = sext i8 [[CONV219]] to i32
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV221:%.*]] = bytecast b8 [[TMP111]] to i8
// SIMD-ONLY0-NEXT:    [[CONV222:%.*]] = sext i8 [[CONV221]] to i32
// SIMD-ONLY0-NEXT:    [[CMP223:%.*]] = icmp slt i32 [[CONV220]], [[CONV222]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP223]], label [[IF_THEN225:%.*]], label [[IF_END226:%.*]]
// SIMD-ONLY0:       if.then225:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP112]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END226]]
// SIMD-ONLY0:       if.end226:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP113]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV227:%.*]] = bytecast b8 [[TMP114]] to i8
// SIMD-ONLY0-NEXT:    [[CONV228:%.*]] = sext i8 [[CONV227]] to i32
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV229:%.*]] = bytecast b8 [[TMP115]] to i8
// SIMD-ONLY0-NEXT:    [[CONV230:%.*]] = sext i8 [[CONV229]] to i32
// SIMD-ONLY0-NEXT:    [[CMP231:%.*]] = icmp slt i32 [[CONV228]], [[CONV230]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP231]], label [[IF_THEN233:%.*]], label [[IF_END234:%.*]]
// SIMD-ONLY0:       if.then233:
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP116]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END234]]
// SIMD-ONLY0:       if.end234:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP117]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV235:%.*]] = bytecast b8 [[TMP118]] to i8
// SIMD-ONLY0-NEXT:    [[CONV236:%.*]] = sext i8 [[CONV235]] to i32
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV237:%.*]] = bytecast b8 [[TMP119]] to i8
// SIMD-ONLY0-NEXT:    [[CONV238:%.*]] = sext i8 [[CONV237]] to i32
// SIMD-ONLY0-NEXT:    [[CMP239:%.*]] = icmp eq i32 [[CONV236]], [[CONV238]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP239]], label [[IF_THEN241:%.*]], label [[IF_END242:%.*]]
// SIMD-ONLY0:       if.then241:
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP120]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END242]]
// SIMD-ONLY0:       if.end242:
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP121]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV243:%.*]] = bytecast b8 [[TMP122]] to i8
// SIMD-ONLY0-NEXT:    [[CONV244:%.*]] = sext i8 [[CONV243]] to i32
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV245:%.*]] = bytecast b8 [[TMP123]] to i8
// SIMD-ONLY0-NEXT:    [[CONV246:%.*]] = sext i8 [[CONV245]] to i32
// SIMD-ONLY0-NEXT:    [[CMP247:%.*]] = icmp eq i32 [[CONV244]], [[CONV246]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP247]], label [[IF_THEN249:%.*]], label [[IF_END250:%.*]]
// SIMD-ONLY0:       if.then249:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP124]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END250]]
// SIMD-ONLY0:       if.end250:
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP125]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV251:%.*]] = bytecast b8 [[TMP126]] to i8
// SIMD-ONLY0-NEXT:    [[CONV252:%.*]] = sext i8 [[CONV251]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV253:%.*]] = bytecast b8 [[TMP127]] to i8
// SIMD-ONLY0-NEXT:    [[CONV254:%.*]] = sext i8 [[CONV253]] to i32
// SIMD-ONLY0-NEXT:    [[CMP255:%.*]] = icmp eq i32 [[CONV252]], [[CONV254]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP255]], label [[IF_THEN257:%.*]], label [[IF_ELSE258:%.*]]
// SIMD-ONLY0:       if.then257:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP128]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END259:%.*]]
// SIMD-ONLY0:       if.else258:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP129]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END259]]
// SIMD-ONLY0:       if.end259:
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV260:%.*]] = bytecast b8 [[TMP130]] to i8
// SIMD-ONLY0-NEXT:    [[CONV261:%.*]] = sext i8 [[CONV260]] to i32
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV262:%.*]] = bytecast b8 [[TMP131]] to i8
// SIMD-ONLY0-NEXT:    [[CONV263:%.*]] = sext i8 [[CONV262]] to i32
// SIMD-ONLY0-NEXT:    [[CMP264:%.*]] = icmp eq i32 [[CONV261]], [[CONV263]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP264]], label [[IF_THEN266:%.*]], label [[IF_ELSE267:%.*]]
// SIMD-ONLY0:       if.then266:
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP132]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END268:%.*]]
// SIMD-ONLY0:       if.else267:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP133]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END268]]
// SIMD-ONLY0:       if.end268:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV269:%.*]] = bytecast b8 [[TMP134]] to i8
// SIMD-ONLY0-NEXT:    [[CONV270:%.*]] = sext i8 [[CONV269]] to i32
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV271:%.*]] = bytecast b8 [[TMP135]] to i8
// SIMD-ONLY0-NEXT:    [[CONV272:%.*]] = sext i8 [[CONV271]] to i32
// SIMD-ONLY0-NEXT:    [[CMP273:%.*]] = icmp eq i32 [[CONV270]], [[CONV272]]
// SIMD-ONLY0-NEXT:    [[CONV274:%.*]] = zext i1 [[CMP273]] to i32
// SIMD-ONLY0-NEXT:    [[CONV275:%.*]] = trunc i32 [[CONV274]] to i8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = bitcast i8 [[CONV275]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP136]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV276:%.*]] = bytecast b8 [[TMP137]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL277:%.*]] = icmp ne i8 [[CONV276]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL277]], label [[IF_THEN278:%.*]], label [[IF_END279:%.*]]
// SIMD-ONLY0:       if.then278:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP138]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END279]]
// SIMD-ONLY0:       if.end279:
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV280:%.*]] = bytecast b8 [[TMP139]] to i8
// SIMD-ONLY0-NEXT:    [[CONV281:%.*]] = sext i8 [[CONV280]] to i32
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV282:%.*]] = bytecast b8 [[TMP140]] to i8
// SIMD-ONLY0-NEXT:    [[CONV283:%.*]] = sext i8 [[CONV282]] to i32
// SIMD-ONLY0-NEXT:    [[CMP284:%.*]] = icmp eq i32 [[CONV281]], [[CONV283]]
// SIMD-ONLY0-NEXT:    [[CONV285:%.*]] = zext i1 [[CMP284]] to i32
// SIMD-ONLY0-NEXT:    [[CONV286:%.*]] = trunc i32 [[CONV285]] to i8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = bitcast i8 [[CONV286]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP141]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV287:%.*]] = bytecast b8 [[TMP142]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL288:%.*]] = icmp ne i8 [[CONV287]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL288]], label [[IF_THEN289:%.*]], label [[IF_END290:%.*]]
// SIMD-ONLY0:       if.then289:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP143]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END290]]
// SIMD-ONLY0:       if.end290:
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV291:%.*]] = bytecast b8 [[TMP144]] to i8
// SIMD-ONLY0-NEXT:    [[CONV292:%.*]] = sext i8 [[CONV291]] to i32
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV293:%.*]] = bytecast b8 [[TMP145]] to i8
// SIMD-ONLY0-NEXT:    [[CONV294:%.*]] = sext i8 [[CONV293]] to i32
// SIMD-ONLY0-NEXT:    [[CMP295:%.*]] = icmp eq i32 [[CONV292]], [[CONV294]]
// SIMD-ONLY0-NEXT:    [[CONV296:%.*]] = zext i1 [[CMP295]] to i32
// SIMD-ONLY0-NEXT:    [[CONV297:%.*]] = trunc i32 [[CONV296]] to i8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = bitcast i8 [[CONV297]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP146]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV298:%.*]] = bytecast b8 [[TMP147]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL299:%.*]] = icmp ne i8 [[CONV298]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL299]], label [[IF_THEN300:%.*]], label [[IF_ELSE301:%.*]]
// SIMD-ONLY0:       if.then300:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP148]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END302:%.*]]
// SIMD-ONLY0:       if.else301:
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP149]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END302]]
// SIMD-ONLY0:       if.end302:
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV303:%.*]] = bytecast b8 [[TMP150]] to i8
// SIMD-ONLY0-NEXT:    [[CONV304:%.*]] = sext i8 [[CONV303]] to i32
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV305:%.*]] = bytecast b8 [[TMP151]] to i8
// SIMD-ONLY0-NEXT:    [[CONV306:%.*]] = sext i8 [[CONV305]] to i32
// SIMD-ONLY0-NEXT:    [[CMP307:%.*]] = icmp eq i32 [[CONV304]], [[CONV306]]
// SIMD-ONLY0-NEXT:    [[CONV308:%.*]] = zext i1 [[CMP307]] to i32
// SIMD-ONLY0-NEXT:    [[CONV309:%.*]] = trunc i32 [[CONV308]] to i8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = bitcast i8 [[CONV309]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP152]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV310:%.*]] = bytecast b8 [[TMP153]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL311:%.*]] = icmp ne i8 [[CONV310]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL311]], label [[IF_THEN312:%.*]], label [[IF_ELSE313:%.*]]
// SIMD-ONLY0:       if.then312:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP154]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END314:%.*]]
// SIMD-ONLY0:       if.else313:
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP155]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END314]]
// SIMD-ONLY0:       if.end314:
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP156]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV315:%.*]] = bytecast b8 [[TMP157]] to i8
// SIMD-ONLY0-NEXT:    [[CONV316:%.*]] = sext i8 [[CONV315]] to i32
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV317:%.*]] = bytecast b8 [[TMP158]] to i8
// SIMD-ONLY0-NEXT:    [[CONV318:%.*]] = sext i8 [[CONV317]] to i32
// SIMD-ONLY0-NEXT:    [[CMP319:%.*]] = icmp sgt i32 [[CONV316]], [[CONV318]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP319]], label [[IF_THEN321:%.*]], label [[IF_END322:%.*]]
// SIMD-ONLY0:       if.then321:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP159]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END322]]
// SIMD-ONLY0:       if.end322:
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP160]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV323:%.*]] = bytecast b8 [[TMP161]] to i8
// SIMD-ONLY0-NEXT:    [[CONV324:%.*]] = sext i8 [[CONV323]] to i32
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV325:%.*]] = bytecast b8 [[TMP162]] to i8
// SIMD-ONLY0-NEXT:    [[CONV326:%.*]] = sext i8 [[CONV325]] to i32
// SIMD-ONLY0-NEXT:    [[CMP327:%.*]] = icmp sgt i32 [[CONV324]], [[CONV326]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP327]], label [[IF_THEN329:%.*]], label [[IF_END330:%.*]]
// SIMD-ONLY0:       if.then329:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP163]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END330]]
// SIMD-ONLY0:       if.end330:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP164]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV331:%.*]] = bytecast b8 [[TMP165]] to i8
// SIMD-ONLY0-NEXT:    [[CONV332:%.*]] = sext i8 [[CONV331]] to i32
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV333:%.*]] = bytecast b8 [[TMP166]] to i8
// SIMD-ONLY0-NEXT:    [[CONV334:%.*]] = sext i8 [[CONV333]] to i32
// SIMD-ONLY0-NEXT:    [[CMP335:%.*]] = icmp slt i32 [[CONV332]], [[CONV334]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP335]], label [[IF_THEN337:%.*]], label [[IF_END338:%.*]]
// SIMD-ONLY0:       if.then337:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP167]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END338]]
// SIMD-ONLY0:       if.end338:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP168]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV339:%.*]] = bytecast b8 [[TMP169]] to i8
// SIMD-ONLY0-NEXT:    [[CONV340:%.*]] = sext i8 [[CONV339]] to i32
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV341:%.*]] = bytecast b8 [[TMP170]] to i8
// SIMD-ONLY0-NEXT:    [[CONV342:%.*]] = sext i8 [[CONV341]] to i32
// SIMD-ONLY0-NEXT:    [[CMP343:%.*]] = icmp slt i32 [[CONV340]], [[CONV342]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP343]], label [[IF_THEN345:%.*]], label [[IF_END346:%.*]]
// SIMD-ONLY0:       if.then345:
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP171]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END346]]
// SIMD-ONLY0:       if.end346:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP172]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV347:%.*]] = bytecast b8 [[TMP173]] to i8
// SIMD-ONLY0-NEXT:    [[CONV348:%.*]] = sext i8 [[CONV347]] to i32
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV349:%.*]] = bytecast b8 [[TMP174]] to i8
// SIMD-ONLY0-NEXT:    [[CONV350:%.*]] = sext i8 [[CONV349]] to i32
// SIMD-ONLY0-NEXT:    [[CMP351:%.*]] = icmp eq i32 [[CONV348]], [[CONV350]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP351]], label [[IF_THEN353:%.*]], label [[IF_END354:%.*]]
// SIMD-ONLY0:       if.then353:
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP175]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END354]]
// SIMD-ONLY0:       if.end354:
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP176]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV355:%.*]] = bytecast b8 [[TMP177]] to i8
// SIMD-ONLY0-NEXT:    [[CONV356:%.*]] = sext i8 [[CONV355]] to i32
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV357:%.*]] = bytecast b8 [[TMP178]] to i8
// SIMD-ONLY0-NEXT:    [[CONV358:%.*]] = sext i8 [[CONV357]] to i32
// SIMD-ONLY0-NEXT:    [[CMP359:%.*]] = icmp eq i32 [[CONV356]], [[CONV358]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP359]], label [[IF_THEN361:%.*]], label [[IF_END362:%.*]]
// SIMD-ONLY0:       if.then361:
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP179]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END362]]
// SIMD-ONLY0:       if.end362:
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV363:%.*]] = bytecast b8 [[TMP180]] to i8
// SIMD-ONLY0-NEXT:    [[CONV364:%.*]] = sext i8 [[CONV363]] to i32
// SIMD-ONLY0-NEXT:    [[TMP181:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV365:%.*]] = bytecast b8 [[TMP181]] to i8
// SIMD-ONLY0-NEXT:    [[CONV366:%.*]] = sext i8 [[CONV365]] to i32
// SIMD-ONLY0-NEXT:    [[CMP367:%.*]] = icmp sgt i32 [[CONV364]], [[CONV366]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP367]], label [[IF_THEN369:%.*]], label [[IF_END370:%.*]]
// SIMD-ONLY0:       if.then369:
// SIMD-ONLY0-NEXT:    [[TMP182:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP182]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END370]]
// SIMD-ONLY0:       if.end370:
// SIMD-ONLY0-NEXT:    [[TMP183:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP183]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP184:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV371:%.*]] = bytecast b8 [[TMP184]] to i8
// SIMD-ONLY0-NEXT:    [[CONV372:%.*]] = sext i8 [[CONV371]] to i32
// SIMD-ONLY0-NEXT:    [[TMP185:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV373:%.*]] = bytecast b8 [[TMP185]] to i8
// SIMD-ONLY0-NEXT:    [[CONV374:%.*]] = sext i8 [[CONV373]] to i32
// SIMD-ONLY0-NEXT:    [[CMP375:%.*]] = icmp sgt i32 [[CONV372]], [[CONV374]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP375]], label [[IF_THEN377:%.*]], label [[IF_END378:%.*]]
// SIMD-ONLY0:       if.then377:
// SIMD-ONLY0-NEXT:    [[TMP186:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP186]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END378]]
// SIMD-ONLY0:       if.end378:
// SIMD-ONLY0-NEXT:    [[TMP187:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP187]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP188:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV379:%.*]] = bytecast b8 [[TMP188]] to i8
// SIMD-ONLY0-NEXT:    [[CONV380:%.*]] = sext i8 [[CONV379]] to i32
// SIMD-ONLY0-NEXT:    [[TMP189:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV381:%.*]] = bytecast b8 [[TMP189]] to i8
// SIMD-ONLY0-NEXT:    [[CONV382:%.*]] = sext i8 [[CONV381]] to i32
// SIMD-ONLY0-NEXT:    [[CMP383:%.*]] = icmp slt i32 [[CONV380]], [[CONV382]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP383]], label [[IF_THEN385:%.*]], label [[IF_END386:%.*]]
// SIMD-ONLY0:       if.then385:
// SIMD-ONLY0-NEXT:    [[TMP190:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP190]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END386]]
// SIMD-ONLY0:       if.end386:
// SIMD-ONLY0-NEXT:    [[TMP191:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP191]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP192:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV387:%.*]] = bytecast b8 [[TMP192]] to i8
// SIMD-ONLY0-NEXT:    [[CONV388:%.*]] = sext i8 [[CONV387]] to i32
// SIMD-ONLY0-NEXT:    [[TMP193:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV389:%.*]] = bytecast b8 [[TMP193]] to i8
// SIMD-ONLY0-NEXT:    [[CONV390:%.*]] = sext i8 [[CONV389]] to i32
// SIMD-ONLY0-NEXT:    [[CMP391:%.*]] = icmp slt i32 [[CONV388]], [[CONV390]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP391]], label [[IF_THEN393:%.*]], label [[IF_END394:%.*]]
// SIMD-ONLY0:       if.then393:
// SIMD-ONLY0-NEXT:    [[TMP194:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP194]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END394]]
// SIMD-ONLY0:       if.end394:
// SIMD-ONLY0-NEXT:    [[TMP195:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP195]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP196:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV395:%.*]] = bytecast b8 [[TMP196]] to i8
// SIMD-ONLY0-NEXT:    [[CONV396:%.*]] = sext i8 [[CONV395]] to i32
// SIMD-ONLY0-NEXT:    [[TMP197:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV397:%.*]] = bytecast b8 [[TMP197]] to i8
// SIMD-ONLY0-NEXT:    [[CONV398:%.*]] = sext i8 [[CONV397]] to i32
// SIMD-ONLY0-NEXT:    [[CMP399:%.*]] = icmp eq i32 [[CONV396]], [[CONV398]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP399]], label [[IF_THEN401:%.*]], label [[IF_END402:%.*]]
// SIMD-ONLY0:       if.then401:
// SIMD-ONLY0-NEXT:    [[TMP198:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP198]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END402]]
// SIMD-ONLY0:       if.end402:
// SIMD-ONLY0-NEXT:    [[TMP199:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP199]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP200:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV403:%.*]] = bytecast b8 [[TMP200]] to i8
// SIMD-ONLY0-NEXT:    [[CONV404:%.*]] = sext i8 [[CONV403]] to i32
// SIMD-ONLY0-NEXT:    [[TMP201:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV405:%.*]] = bytecast b8 [[TMP201]] to i8
// SIMD-ONLY0-NEXT:    [[CONV406:%.*]] = sext i8 [[CONV405]] to i32
// SIMD-ONLY0-NEXT:    [[CMP407:%.*]] = icmp eq i32 [[CONV404]], [[CONV406]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP407]], label [[IF_THEN409:%.*]], label [[IF_END410:%.*]]
// SIMD-ONLY0:       if.then409:
// SIMD-ONLY0-NEXT:    [[TMP202:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP202]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END410]]
// SIMD-ONLY0:       if.end410:
// SIMD-ONLY0-NEXT:    [[TMP203:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP203]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP204:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV411:%.*]] = bytecast b8 [[TMP204]] to i8
// SIMD-ONLY0-NEXT:    [[CONV412:%.*]] = sext i8 [[CONV411]] to i32
// SIMD-ONLY0-NEXT:    [[TMP205:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV413:%.*]] = bytecast b8 [[TMP205]] to i8
// SIMD-ONLY0-NEXT:    [[CONV414:%.*]] = sext i8 [[CONV413]] to i32
// SIMD-ONLY0-NEXT:    [[CMP415:%.*]] = icmp eq i32 [[CONV412]], [[CONV414]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP415]], label [[IF_THEN417:%.*]], label [[IF_ELSE418:%.*]]
// SIMD-ONLY0:       if.then417:
// SIMD-ONLY0-NEXT:    [[TMP206:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP206]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END419:%.*]]
// SIMD-ONLY0:       if.else418:
// SIMD-ONLY0-NEXT:    [[TMP207:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP207]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END419]]
// SIMD-ONLY0:       if.end419:
// SIMD-ONLY0-NEXT:    [[TMP208:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV420:%.*]] = bytecast b8 [[TMP208]] to i8
// SIMD-ONLY0-NEXT:    [[CONV421:%.*]] = sext i8 [[CONV420]] to i32
// SIMD-ONLY0-NEXT:    [[TMP209:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV422:%.*]] = bytecast b8 [[TMP209]] to i8
// SIMD-ONLY0-NEXT:    [[CONV423:%.*]] = sext i8 [[CONV422]] to i32
// SIMD-ONLY0-NEXT:    [[CMP424:%.*]] = icmp eq i32 [[CONV421]], [[CONV423]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP424]], label [[IF_THEN426:%.*]], label [[IF_ELSE427:%.*]]
// SIMD-ONLY0:       if.then426:
// SIMD-ONLY0-NEXT:    [[TMP210:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP210]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END428:%.*]]
// SIMD-ONLY0:       if.else427:
// SIMD-ONLY0-NEXT:    [[TMP211:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP211]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END428]]
// SIMD-ONLY0:       if.end428:
// SIMD-ONLY0-NEXT:    [[TMP212:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV429:%.*]] = bytecast b8 [[TMP212]] to i8
// SIMD-ONLY0-NEXT:    [[CONV430:%.*]] = sext i8 [[CONV429]] to i32
// SIMD-ONLY0-NEXT:    [[TMP213:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV431:%.*]] = bytecast b8 [[TMP213]] to i8
// SIMD-ONLY0-NEXT:    [[CONV432:%.*]] = sext i8 [[CONV431]] to i32
// SIMD-ONLY0-NEXT:    [[CMP433:%.*]] = icmp eq i32 [[CONV430]], [[CONV432]]
// SIMD-ONLY0-NEXT:    [[CONV434:%.*]] = zext i1 [[CMP433]] to i32
// SIMD-ONLY0-NEXT:    [[CONV435:%.*]] = trunc i32 [[CONV434]] to i8
// SIMD-ONLY0-NEXT:    [[TMP214:%.*]] = bitcast i8 [[CONV435]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP214]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP215:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV436:%.*]] = bytecast b8 [[TMP215]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL437:%.*]] = icmp ne i8 [[CONV436]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL437]], label [[IF_THEN438:%.*]], label [[IF_END439:%.*]]
// SIMD-ONLY0:       if.then438:
// SIMD-ONLY0-NEXT:    [[TMP216:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP216]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END439]]
// SIMD-ONLY0:       if.end439:
// SIMD-ONLY0-NEXT:    [[TMP217:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV440:%.*]] = bytecast b8 [[TMP217]] to i8
// SIMD-ONLY0-NEXT:    [[CONV441:%.*]] = sext i8 [[CONV440]] to i32
// SIMD-ONLY0-NEXT:    [[TMP218:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV442:%.*]] = bytecast b8 [[TMP218]] to i8
// SIMD-ONLY0-NEXT:    [[CONV443:%.*]] = sext i8 [[CONV442]] to i32
// SIMD-ONLY0-NEXT:    [[CMP444:%.*]] = icmp eq i32 [[CONV441]], [[CONV443]]
// SIMD-ONLY0-NEXT:    [[CONV445:%.*]] = zext i1 [[CMP444]] to i32
// SIMD-ONLY0-NEXT:    [[CONV446:%.*]] = trunc i32 [[CONV445]] to i8
// SIMD-ONLY0-NEXT:    [[TMP219:%.*]] = bitcast i8 [[CONV446]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP219]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP220:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV447:%.*]] = bytecast b8 [[TMP220]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL448:%.*]] = icmp ne i8 [[CONV447]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL448]], label [[IF_THEN449:%.*]], label [[IF_END450:%.*]]
// SIMD-ONLY0:       if.then449:
// SIMD-ONLY0-NEXT:    [[TMP221:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP221]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END450]]
// SIMD-ONLY0:       if.end450:
// SIMD-ONLY0-NEXT:    [[TMP222:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV451:%.*]] = bytecast b8 [[TMP222]] to i8
// SIMD-ONLY0-NEXT:    [[CONV452:%.*]] = sext i8 [[CONV451]] to i32
// SIMD-ONLY0-NEXT:    [[TMP223:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV453:%.*]] = bytecast b8 [[TMP223]] to i8
// SIMD-ONLY0-NEXT:    [[CONV454:%.*]] = sext i8 [[CONV453]] to i32
// SIMD-ONLY0-NEXT:    [[CMP455:%.*]] = icmp eq i32 [[CONV452]], [[CONV454]]
// SIMD-ONLY0-NEXT:    [[CONV456:%.*]] = zext i1 [[CMP455]] to i32
// SIMD-ONLY0-NEXT:    [[CONV457:%.*]] = trunc i32 [[CONV456]] to i8
// SIMD-ONLY0-NEXT:    [[TMP224:%.*]] = bitcast i8 [[CONV457]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP224]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP225:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV458:%.*]] = bytecast b8 [[TMP225]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL459:%.*]] = icmp ne i8 [[CONV458]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL459]], label [[IF_THEN460:%.*]], label [[IF_ELSE461:%.*]]
// SIMD-ONLY0:       if.then460:
// SIMD-ONLY0-NEXT:    [[TMP226:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP226]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END462:%.*]]
// SIMD-ONLY0:       if.else461:
// SIMD-ONLY0-NEXT:    [[TMP227:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP227]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END462]]
// SIMD-ONLY0:       if.end462:
// SIMD-ONLY0-NEXT:    [[TMP228:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV463:%.*]] = bytecast b8 [[TMP228]] to i8
// SIMD-ONLY0-NEXT:    [[CONV464:%.*]] = sext i8 [[CONV463]] to i32
// SIMD-ONLY0-NEXT:    [[TMP229:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV465:%.*]] = bytecast b8 [[TMP229]] to i8
// SIMD-ONLY0-NEXT:    [[CONV466:%.*]] = sext i8 [[CONV465]] to i32
// SIMD-ONLY0-NEXT:    [[CMP467:%.*]] = icmp eq i32 [[CONV464]], [[CONV466]]
// SIMD-ONLY0-NEXT:    [[CONV468:%.*]] = zext i1 [[CMP467]] to i32
// SIMD-ONLY0-NEXT:    [[CONV469:%.*]] = trunc i32 [[CONV468]] to i8
// SIMD-ONLY0-NEXT:    [[TMP230:%.*]] = bitcast i8 [[CONV469]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP230]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP231:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV470:%.*]] = bytecast b8 [[TMP231]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL471:%.*]] = icmp ne i8 [[CONV470]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL471]], label [[IF_THEN472:%.*]], label [[IF_ELSE473:%.*]]
// SIMD-ONLY0:       if.then472:
// SIMD-ONLY0-NEXT:    [[TMP232:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP232]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END474:%.*]]
// SIMD-ONLY0:       if.else473:
// SIMD-ONLY0-NEXT:    [[TMP233:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP233]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END474]]
// SIMD-ONLY0:       if.end474:
// SIMD-ONLY0-NEXT:    [[TMP234:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP234]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP235:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV475:%.*]] = bytecast b8 [[TMP235]] to i8
// SIMD-ONLY0-NEXT:    [[CONV476:%.*]] = sext i8 [[CONV475]] to i32
// SIMD-ONLY0-NEXT:    [[TMP236:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV477:%.*]] = bytecast b8 [[TMP236]] to i8
// SIMD-ONLY0-NEXT:    [[CONV478:%.*]] = sext i8 [[CONV477]] to i32
// SIMD-ONLY0-NEXT:    [[CMP479:%.*]] = icmp sgt i32 [[CONV476]], [[CONV478]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP479]], label [[IF_THEN481:%.*]], label [[IF_END482:%.*]]
// SIMD-ONLY0:       if.then481:
// SIMD-ONLY0-NEXT:    [[TMP237:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP237]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END482]]
// SIMD-ONLY0:       if.end482:
// SIMD-ONLY0-NEXT:    [[TMP238:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP238]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP239:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV483:%.*]] = bytecast b8 [[TMP239]] to i8
// SIMD-ONLY0-NEXT:    [[CONV484:%.*]] = sext i8 [[CONV483]] to i32
// SIMD-ONLY0-NEXT:    [[TMP240:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV485:%.*]] = bytecast b8 [[TMP240]] to i8
// SIMD-ONLY0-NEXT:    [[CONV486:%.*]] = sext i8 [[CONV485]] to i32
// SIMD-ONLY0-NEXT:    [[CMP487:%.*]] = icmp sgt i32 [[CONV484]], [[CONV486]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP487]], label [[IF_THEN489:%.*]], label [[IF_END490:%.*]]
// SIMD-ONLY0:       if.then489:
// SIMD-ONLY0-NEXT:    [[TMP241:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP241]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END490]]
// SIMD-ONLY0:       if.end490:
// SIMD-ONLY0-NEXT:    [[TMP242:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP242]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP243:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV491:%.*]] = bytecast b8 [[TMP243]] to i8
// SIMD-ONLY0-NEXT:    [[CONV492:%.*]] = sext i8 [[CONV491]] to i32
// SIMD-ONLY0-NEXT:    [[TMP244:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV493:%.*]] = bytecast b8 [[TMP244]] to i8
// SIMD-ONLY0-NEXT:    [[CONV494:%.*]] = sext i8 [[CONV493]] to i32
// SIMD-ONLY0-NEXT:    [[CMP495:%.*]] = icmp slt i32 [[CONV492]], [[CONV494]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP495]], label [[IF_THEN497:%.*]], label [[IF_END498:%.*]]
// SIMD-ONLY0:       if.then497:
// SIMD-ONLY0-NEXT:    [[TMP245:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP245]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END498]]
// SIMD-ONLY0:       if.end498:
// SIMD-ONLY0-NEXT:    [[TMP246:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP246]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP247:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV499:%.*]] = bytecast b8 [[TMP247]] to i8
// SIMD-ONLY0-NEXT:    [[CONV500:%.*]] = sext i8 [[CONV499]] to i32
// SIMD-ONLY0-NEXT:    [[TMP248:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV501:%.*]] = bytecast b8 [[TMP248]] to i8
// SIMD-ONLY0-NEXT:    [[CONV502:%.*]] = sext i8 [[CONV501]] to i32
// SIMD-ONLY0-NEXT:    [[CMP503:%.*]] = icmp slt i32 [[CONV500]], [[CONV502]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP503]], label [[IF_THEN505:%.*]], label [[IF_END506:%.*]]
// SIMD-ONLY0:       if.then505:
// SIMD-ONLY0-NEXT:    [[TMP249:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP249]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END506]]
// SIMD-ONLY0:       if.end506:
// SIMD-ONLY0-NEXT:    [[TMP250:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP250]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP251:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV507:%.*]] = bytecast b8 [[TMP251]] to i8
// SIMD-ONLY0-NEXT:    [[CONV508:%.*]] = sext i8 [[CONV507]] to i32
// SIMD-ONLY0-NEXT:    [[TMP252:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV509:%.*]] = bytecast b8 [[TMP252]] to i8
// SIMD-ONLY0-NEXT:    [[CONV510:%.*]] = sext i8 [[CONV509]] to i32
// SIMD-ONLY0-NEXT:    [[CMP511:%.*]] = icmp eq i32 [[CONV508]], [[CONV510]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP511]], label [[IF_THEN513:%.*]], label [[IF_END514:%.*]]
// SIMD-ONLY0:       if.then513:
// SIMD-ONLY0-NEXT:    [[TMP253:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP253]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END514]]
// SIMD-ONLY0:       if.end514:
// SIMD-ONLY0-NEXT:    [[TMP254:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP254]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP255:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV515:%.*]] = bytecast b8 [[TMP255]] to i8
// SIMD-ONLY0-NEXT:    [[CONV516:%.*]] = sext i8 [[CONV515]] to i32
// SIMD-ONLY0-NEXT:    [[TMP256:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV517:%.*]] = bytecast b8 [[TMP256]] to i8
// SIMD-ONLY0-NEXT:    [[CONV518:%.*]] = sext i8 [[CONV517]] to i32
// SIMD-ONLY0-NEXT:    [[CMP519:%.*]] = icmp eq i32 [[CONV516]], [[CONV518]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP519]], label [[IF_THEN521:%.*]], label [[IF_END522:%.*]]
// SIMD-ONLY0:       if.then521:
// SIMD-ONLY0-NEXT:    [[TMP257:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP257]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END522]]
// SIMD-ONLY0:       if.end522:
// SIMD-ONLY0-NEXT:    [[TMP258:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV523:%.*]] = bytecast b8 [[TMP258]] to i8
// SIMD-ONLY0-NEXT:    [[CONV524:%.*]] = sext i8 [[CONV523]] to i32
// SIMD-ONLY0-NEXT:    [[TMP259:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV525:%.*]] = bytecast b8 [[TMP259]] to i8
// SIMD-ONLY0-NEXT:    [[CONV526:%.*]] = sext i8 [[CONV525]] to i32
// SIMD-ONLY0-NEXT:    [[CMP527:%.*]] = icmp sgt i32 [[CONV524]], [[CONV526]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP527]], label [[IF_THEN529:%.*]], label [[IF_END530:%.*]]
// SIMD-ONLY0:       if.then529:
// SIMD-ONLY0-NEXT:    [[TMP260:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP260]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END530]]
// SIMD-ONLY0:       if.end530:
// SIMD-ONLY0-NEXT:    [[TMP261:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP261]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP262:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV531:%.*]] = bytecast b8 [[TMP262]] to i8
// SIMD-ONLY0-NEXT:    [[CONV532:%.*]] = sext i8 [[CONV531]] to i32
// SIMD-ONLY0-NEXT:    [[TMP263:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV533:%.*]] = bytecast b8 [[TMP263]] to i8
// SIMD-ONLY0-NEXT:    [[CONV534:%.*]] = sext i8 [[CONV533]] to i32
// SIMD-ONLY0-NEXT:    [[CMP535:%.*]] = icmp sgt i32 [[CONV532]], [[CONV534]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP535]], label [[IF_THEN537:%.*]], label [[IF_END538:%.*]]
// SIMD-ONLY0:       if.then537:
// SIMD-ONLY0-NEXT:    [[TMP264:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP264]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END538]]
// SIMD-ONLY0:       if.end538:
// SIMD-ONLY0-NEXT:    [[TMP265:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP265]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP266:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV539:%.*]] = bytecast b8 [[TMP266]] to i8
// SIMD-ONLY0-NEXT:    [[CONV540:%.*]] = sext i8 [[CONV539]] to i32
// SIMD-ONLY0-NEXT:    [[TMP267:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV541:%.*]] = bytecast b8 [[TMP267]] to i8
// SIMD-ONLY0-NEXT:    [[CONV542:%.*]] = sext i8 [[CONV541]] to i32
// SIMD-ONLY0-NEXT:    [[CMP543:%.*]] = icmp slt i32 [[CONV540]], [[CONV542]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP543]], label [[IF_THEN545:%.*]], label [[IF_END546:%.*]]
// SIMD-ONLY0:       if.then545:
// SIMD-ONLY0-NEXT:    [[TMP268:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP268]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END546]]
// SIMD-ONLY0:       if.end546:
// SIMD-ONLY0-NEXT:    [[TMP269:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP269]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP270:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV547:%.*]] = bytecast b8 [[TMP270]] to i8
// SIMD-ONLY0-NEXT:    [[CONV548:%.*]] = sext i8 [[CONV547]] to i32
// SIMD-ONLY0-NEXT:    [[TMP271:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV549:%.*]] = bytecast b8 [[TMP271]] to i8
// SIMD-ONLY0-NEXT:    [[CONV550:%.*]] = sext i8 [[CONV549]] to i32
// SIMD-ONLY0-NEXT:    [[CMP551:%.*]] = icmp slt i32 [[CONV548]], [[CONV550]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP551]], label [[IF_THEN553:%.*]], label [[IF_END554:%.*]]
// SIMD-ONLY0:       if.then553:
// SIMD-ONLY0-NEXT:    [[TMP272:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP272]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END554]]
// SIMD-ONLY0:       if.end554:
// SIMD-ONLY0-NEXT:    [[TMP273:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP273]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP274:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV555:%.*]] = bytecast b8 [[TMP274]] to i8
// SIMD-ONLY0-NEXT:    [[CONV556:%.*]] = sext i8 [[CONV555]] to i32
// SIMD-ONLY0-NEXT:    [[TMP275:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV557:%.*]] = bytecast b8 [[TMP275]] to i8
// SIMD-ONLY0-NEXT:    [[CONV558:%.*]] = sext i8 [[CONV557]] to i32
// SIMD-ONLY0-NEXT:    [[CMP559:%.*]] = icmp eq i32 [[CONV556]], [[CONV558]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP559]], label [[IF_THEN561:%.*]], label [[IF_END562:%.*]]
// SIMD-ONLY0:       if.then561:
// SIMD-ONLY0-NEXT:    [[TMP276:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP276]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END562]]
// SIMD-ONLY0:       if.end562:
// SIMD-ONLY0-NEXT:    [[TMP277:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP277]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP278:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV563:%.*]] = bytecast b8 [[TMP278]] to i8
// SIMD-ONLY0-NEXT:    [[CONV564:%.*]] = sext i8 [[CONV563]] to i32
// SIMD-ONLY0-NEXT:    [[TMP279:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV565:%.*]] = bytecast b8 [[TMP279]] to i8
// SIMD-ONLY0-NEXT:    [[CONV566:%.*]] = sext i8 [[CONV565]] to i32
// SIMD-ONLY0-NEXT:    [[CMP567:%.*]] = icmp eq i32 [[CONV564]], [[CONV566]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP567]], label [[IF_THEN569:%.*]], label [[IF_END570:%.*]]
// SIMD-ONLY0:       if.then569:
// SIMD-ONLY0-NEXT:    [[TMP280:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP280]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END570]]
// SIMD-ONLY0:       if.end570:
// SIMD-ONLY0-NEXT:    [[TMP281:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP281]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP282:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV571:%.*]] = bytecast b8 [[TMP282]] to i8
// SIMD-ONLY0-NEXT:    [[CONV572:%.*]] = sext i8 [[CONV571]] to i32
// SIMD-ONLY0-NEXT:    [[TMP283:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV573:%.*]] = bytecast b8 [[TMP283]] to i8
// SIMD-ONLY0-NEXT:    [[CONV574:%.*]] = sext i8 [[CONV573]] to i32
// SIMD-ONLY0-NEXT:    [[CMP575:%.*]] = icmp eq i32 [[CONV572]], [[CONV574]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP575]], label [[IF_THEN577:%.*]], label [[IF_ELSE578:%.*]]
// SIMD-ONLY0:       if.then577:
// SIMD-ONLY0-NEXT:    [[TMP284:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP284]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END579:%.*]]
// SIMD-ONLY0:       if.else578:
// SIMD-ONLY0-NEXT:    [[TMP285:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP285]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END579]]
// SIMD-ONLY0:       if.end579:
// SIMD-ONLY0-NEXT:    [[TMP286:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV580:%.*]] = bytecast b8 [[TMP286]] to i8
// SIMD-ONLY0-NEXT:    [[CONV581:%.*]] = sext i8 [[CONV580]] to i32
// SIMD-ONLY0-NEXT:    [[TMP287:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV582:%.*]] = bytecast b8 [[TMP287]] to i8
// SIMD-ONLY0-NEXT:    [[CONV583:%.*]] = sext i8 [[CONV582]] to i32
// SIMD-ONLY0-NEXT:    [[CMP584:%.*]] = icmp eq i32 [[CONV581]], [[CONV583]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP584]], label [[IF_THEN586:%.*]], label [[IF_ELSE587:%.*]]
// SIMD-ONLY0:       if.then586:
// SIMD-ONLY0-NEXT:    [[TMP288:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP288]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END588:%.*]]
// SIMD-ONLY0:       if.else587:
// SIMD-ONLY0-NEXT:    [[TMP289:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP289]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END588]]
// SIMD-ONLY0:       if.end588:
// SIMD-ONLY0-NEXT:    [[TMP290:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV589:%.*]] = bytecast b8 [[TMP290]] to i8
// SIMD-ONLY0-NEXT:    [[CONV590:%.*]] = sext i8 [[CONV589]] to i32
// SIMD-ONLY0-NEXT:    [[TMP291:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV591:%.*]] = bytecast b8 [[TMP291]] to i8
// SIMD-ONLY0-NEXT:    [[CONV592:%.*]] = sext i8 [[CONV591]] to i32
// SIMD-ONLY0-NEXT:    [[CMP593:%.*]] = icmp eq i32 [[CONV590]], [[CONV592]]
// SIMD-ONLY0-NEXT:    [[CONV594:%.*]] = zext i1 [[CMP593]] to i32
// SIMD-ONLY0-NEXT:    [[CONV595:%.*]] = trunc i32 [[CONV594]] to i8
// SIMD-ONLY0-NEXT:    [[TMP292:%.*]] = bitcast i8 [[CONV595]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP292]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP293:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV596:%.*]] = bytecast b8 [[TMP293]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL597:%.*]] = icmp ne i8 [[CONV596]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL597]], label [[IF_THEN598:%.*]], label [[IF_END599:%.*]]
// SIMD-ONLY0:       if.then598:
// SIMD-ONLY0-NEXT:    [[TMP294:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP294]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END599]]
// SIMD-ONLY0:       if.end599:
// SIMD-ONLY0-NEXT:    [[TMP295:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV600:%.*]] = bytecast b8 [[TMP295]] to i8
// SIMD-ONLY0-NEXT:    [[CONV601:%.*]] = sext i8 [[CONV600]] to i32
// SIMD-ONLY0-NEXT:    [[TMP296:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV602:%.*]] = bytecast b8 [[TMP296]] to i8
// SIMD-ONLY0-NEXT:    [[CONV603:%.*]] = sext i8 [[CONV602]] to i32
// SIMD-ONLY0-NEXT:    [[CMP604:%.*]] = icmp eq i32 [[CONV601]], [[CONV603]]
// SIMD-ONLY0-NEXT:    [[CONV605:%.*]] = zext i1 [[CMP604]] to i32
// SIMD-ONLY0-NEXT:    [[CONV606:%.*]] = trunc i32 [[CONV605]] to i8
// SIMD-ONLY0-NEXT:    [[TMP297:%.*]] = bitcast i8 [[CONV606]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP297]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP298:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV607:%.*]] = bytecast b8 [[TMP298]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL608:%.*]] = icmp ne i8 [[CONV607]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL608]], label [[IF_THEN609:%.*]], label [[IF_END610:%.*]]
// SIMD-ONLY0:       if.then609:
// SIMD-ONLY0-NEXT:    [[TMP299:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP299]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END610]]
// SIMD-ONLY0:       if.end610:
// SIMD-ONLY0-NEXT:    [[TMP300:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV611:%.*]] = bytecast b8 [[TMP300]] to i8
// SIMD-ONLY0-NEXT:    [[CONV612:%.*]] = sext i8 [[CONV611]] to i32
// SIMD-ONLY0-NEXT:    [[TMP301:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV613:%.*]] = bytecast b8 [[TMP301]] to i8
// SIMD-ONLY0-NEXT:    [[CONV614:%.*]] = sext i8 [[CONV613]] to i32
// SIMD-ONLY0-NEXT:    [[CMP615:%.*]] = icmp eq i32 [[CONV612]], [[CONV614]]
// SIMD-ONLY0-NEXT:    [[CONV616:%.*]] = zext i1 [[CMP615]] to i32
// SIMD-ONLY0-NEXT:    [[CONV617:%.*]] = trunc i32 [[CONV616]] to i8
// SIMD-ONLY0-NEXT:    [[TMP302:%.*]] = bitcast i8 [[CONV617]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP302]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP303:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV618:%.*]] = bytecast b8 [[TMP303]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL619:%.*]] = icmp ne i8 [[CONV618]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL619]], label [[IF_THEN620:%.*]], label [[IF_ELSE621:%.*]]
// SIMD-ONLY0:       if.then620:
// SIMD-ONLY0-NEXT:    [[TMP304:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP304]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END622:%.*]]
// SIMD-ONLY0:       if.else621:
// SIMD-ONLY0-NEXT:    [[TMP305:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP305]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END622]]
// SIMD-ONLY0:       if.end622:
// SIMD-ONLY0-NEXT:    [[TMP306:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV623:%.*]] = bytecast b8 [[TMP306]] to i8
// SIMD-ONLY0-NEXT:    [[CONV624:%.*]] = sext i8 [[CONV623]] to i32
// SIMD-ONLY0-NEXT:    [[TMP307:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV625:%.*]] = bytecast b8 [[TMP307]] to i8
// SIMD-ONLY0-NEXT:    [[CONV626:%.*]] = sext i8 [[CONV625]] to i32
// SIMD-ONLY0-NEXT:    [[CMP627:%.*]] = icmp eq i32 [[CONV624]], [[CONV626]]
// SIMD-ONLY0-NEXT:    [[CONV628:%.*]] = zext i1 [[CMP627]] to i32
// SIMD-ONLY0-NEXT:    [[CONV629:%.*]] = trunc i32 [[CONV628]] to i8
// SIMD-ONLY0-NEXT:    [[TMP308:%.*]] = bitcast i8 [[CONV629]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP308]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP309:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV630:%.*]] = bytecast b8 [[TMP309]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL631:%.*]] = icmp ne i8 [[CONV630]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL631]], label [[IF_THEN632:%.*]], label [[IF_ELSE633:%.*]]
// SIMD-ONLY0:       if.then632:
// SIMD-ONLY0-NEXT:    [[TMP310:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP310]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END634:%.*]]
// SIMD-ONLY0:       if.else633:
// SIMD-ONLY0-NEXT:    [[TMP311:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP311]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END634]]
// SIMD-ONLY0:       if.end634:
// SIMD-ONLY0-NEXT:    [[TMP312:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP312]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP313:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV635:%.*]] = bytecast b8 [[TMP313]] to i8
// SIMD-ONLY0-NEXT:    [[CONV636:%.*]] = sext i8 [[CONV635]] to i32
// SIMD-ONLY0-NEXT:    [[TMP314:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV637:%.*]] = bytecast b8 [[TMP314]] to i8
// SIMD-ONLY0-NEXT:    [[CONV638:%.*]] = sext i8 [[CONV637]] to i32
// SIMD-ONLY0-NEXT:    [[CMP639:%.*]] = icmp sgt i32 [[CONV636]], [[CONV638]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP639]], label [[IF_THEN641:%.*]], label [[IF_END642:%.*]]
// SIMD-ONLY0:       if.then641:
// SIMD-ONLY0-NEXT:    [[TMP315:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP315]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END642]]
// SIMD-ONLY0:       if.end642:
// SIMD-ONLY0-NEXT:    [[TMP316:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP316]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP317:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV643:%.*]] = bytecast b8 [[TMP317]] to i8
// SIMD-ONLY0-NEXT:    [[CONV644:%.*]] = sext i8 [[CONV643]] to i32
// SIMD-ONLY0-NEXT:    [[TMP318:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV645:%.*]] = bytecast b8 [[TMP318]] to i8
// SIMD-ONLY0-NEXT:    [[CONV646:%.*]] = sext i8 [[CONV645]] to i32
// SIMD-ONLY0-NEXT:    [[CMP647:%.*]] = icmp sgt i32 [[CONV644]], [[CONV646]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP647]], label [[IF_THEN649:%.*]], label [[IF_END650:%.*]]
// SIMD-ONLY0:       if.then649:
// SIMD-ONLY0-NEXT:    [[TMP319:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP319]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END650]]
// SIMD-ONLY0:       if.end650:
// SIMD-ONLY0-NEXT:    [[TMP320:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP320]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP321:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV651:%.*]] = bytecast b8 [[TMP321]] to i8
// SIMD-ONLY0-NEXT:    [[CONV652:%.*]] = sext i8 [[CONV651]] to i32
// SIMD-ONLY0-NEXT:    [[TMP322:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV653:%.*]] = bytecast b8 [[TMP322]] to i8
// SIMD-ONLY0-NEXT:    [[CONV654:%.*]] = sext i8 [[CONV653]] to i32
// SIMD-ONLY0-NEXT:    [[CMP655:%.*]] = icmp slt i32 [[CONV652]], [[CONV654]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP655]], label [[IF_THEN657:%.*]], label [[IF_END658:%.*]]
// SIMD-ONLY0:       if.then657:
// SIMD-ONLY0-NEXT:    [[TMP323:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP323]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END658]]
// SIMD-ONLY0:       if.end658:
// SIMD-ONLY0-NEXT:    [[TMP324:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP324]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP325:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV659:%.*]] = bytecast b8 [[TMP325]] to i8
// SIMD-ONLY0-NEXT:    [[CONV660:%.*]] = sext i8 [[CONV659]] to i32
// SIMD-ONLY0-NEXT:    [[TMP326:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV661:%.*]] = bytecast b8 [[TMP326]] to i8
// SIMD-ONLY0-NEXT:    [[CONV662:%.*]] = sext i8 [[CONV661]] to i32
// SIMD-ONLY0-NEXT:    [[CMP663:%.*]] = icmp slt i32 [[CONV660]], [[CONV662]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP663]], label [[IF_THEN665:%.*]], label [[IF_END666:%.*]]
// SIMD-ONLY0:       if.then665:
// SIMD-ONLY0-NEXT:    [[TMP327:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP327]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END666]]
// SIMD-ONLY0:       if.end666:
// SIMD-ONLY0-NEXT:    [[TMP328:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP328]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP329:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV667:%.*]] = bytecast b8 [[TMP329]] to i8
// SIMD-ONLY0-NEXT:    [[CONV668:%.*]] = sext i8 [[CONV667]] to i32
// SIMD-ONLY0-NEXT:    [[TMP330:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV669:%.*]] = bytecast b8 [[TMP330]] to i8
// SIMD-ONLY0-NEXT:    [[CONV670:%.*]] = sext i8 [[CONV669]] to i32
// SIMD-ONLY0-NEXT:    [[CMP671:%.*]] = icmp eq i32 [[CONV668]], [[CONV670]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP671]], label [[IF_THEN673:%.*]], label [[IF_END674:%.*]]
// SIMD-ONLY0:       if.then673:
// SIMD-ONLY0-NEXT:    [[TMP331:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP331]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END674]]
// SIMD-ONLY0:       if.end674:
// SIMD-ONLY0-NEXT:    [[TMP332:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP332]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP333:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV675:%.*]] = bytecast b8 [[TMP333]] to i8
// SIMD-ONLY0-NEXT:    [[CONV676:%.*]] = sext i8 [[CONV675]] to i32
// SIMD-ONLY0-NEXT:    [[TMP334:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV677:%.*]] = bytecast b8 [[TMP334]] to i8
// SIMD-ONLY0-NEXT:    [[CONV678:%.*]] = sext i8 [[CONV677]] to i32
// SIMD-ONLY0-NEXT:    [[CMP679:%.*]] = icmp eq i32 [[CONV676]], [[CONV678]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP679]], label [[IF_THEN681:%.*]], label [[IF_END682:%.*]]
// SIMD-ONLY0:       if.then681:
// SIMD-ONLY0-NEXT:    [[TMP335:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP335]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END682]]
// SIMD-ONLY0:       if.end682:
// SIMD-ONLY0-NEXT:    [[TMP336:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV683:%.*]] = bytecast b8 [[TMP336]] to i8
// SIMD-ONLY0-NEXT:    [[CONV684:%.*]] = sext i8 [[CONV683]] to i32
// SIMD-ONLY0-NEXT:    [[TMP337:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV685:%.*]] = bytecast b8 [[TMP337]] to i8
// SIMD-ONLY0-NEXT:    [[CONV686:%.*]] = sext i8 [[CONV685]] to i32
// SIMD-ONLY0-NEXT:    [[CMP687:%.*]] = icmp sgt i32 [[CONV684]], [[CONV686]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP687]], label [[IF_THEN689:%.*]], label [[IF_END690:%.*]]
// SIMD-ONLY0:       if.then689:
// SIMD-ONLY0-NEXT:    [[TMP338:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP338]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END690]]
// SIMD-ONLY0:       if.end690:
// SIMD-ONLY0-NEXT:    [[TMP339:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP339]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP340:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV691:%.*]] = bytecast b8 [[TMP340]] to i8
// SIMD-ONLY0-NEXT:    [[CONV692:%.*]] = sext i8 [[CONV691]] to i32
// SIMD-ONLY0-NEXT:    [[TMP341:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV693:%.*]] = bytecast b8 [[TMP341]] to i8
// SIMD-ONLY0-NEXT:    [[CONV694:%.*]] = sext i8 [[CONV693]] to i32
// SIMD-ONLY0-NEXT:    [[CMP695:%.*]] = icmp sgt i32 [[CONV692]], [[CONV694]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP695]], label [[IF_THEN697:%.*]], label [[IF_END698:%.*]]
// SIMD-ONLY0:       if.then697:
// SIMD-ONLY0-NEXT:    [[TMP342:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP342]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END698]]
// SIMD-ONLY0:       if.end698:
// SIMD-ONLY0-NEXT:    [[TMP343:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP343]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP344:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV699:%.*]] = bytecast b8 [[TMP344]] to i8
// SIMD-ONLY0-NEXT:    [[CONV700:%.*]] = sext i8 [[CONV699]] to i32
// SIMD-ONLY0-NEXT:    [[TMP345:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV701:%.*]] = bytecast b8 [[TMP345]] to i8
// SIMD-ONLY0-NEXT:    [[CONV702:%.*]] = sext i8 [[CONV701]] to i32
// SIMD-ONLY0-NEXT:    [[CMP703:%.*]] = icmp slt i32 [[CONV700]], [[CONV702]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP703]], label [[IF_THEN705:%.*]], label [[IF_END706:%.*]]
// SIMD-ONLY0:       if.then705:
// SIMD-ONLY0-NEXT:    [[TMP346:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP346]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END706]]
// SIMD-ONLY0:       if.end706:
// SIMD-ONLY0-NEXT:    [[TMP347:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP347]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP348:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV707:%.*]] = bytecast b8 [[TMP348]] to i8
// SIMD-ONLY0-NEXT:    [[CONV708:%.*]] = sext i8 [[CONV707]] to i32
// SIMD-ONLY0-NEXT:    [[TMP349:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV709:%.*]] = bytecast b8 [[TMP349]] to i8
// SIMD-ONLY0-NEXT:    [[CONV710:%.*]] = sext i8 [[CONV709]] to i32
// SIMD-ONLY0-NEXT:    [[CMP711:%.*]] = icmp slt i32 [[CONV708]], [[CONV710]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP711]], label [[IF_THEN713:%.*]], label [[IF_END714:%.*]]
// SIMD-ONLY0:       if.then713:
// SIMD-ONLY0-NEXT:    [[TMP350:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP350]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END714]]
// SIMD-ONLY0:       if.end714:
// SIMD-ONLY0-NEXT:    [[TMP351:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP351]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP352:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV715:%.*]] = bytecast b8 [[TMP352]] to i8
// SIMD-ONLY0-NEXT:    [[CONV716:%.*]] = sext i8 [[CONV715]] to i32
// SIMD-ONLY0-NEXT:    [[TMP353:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV717:%.*]] = bytecast b8 [[TMP353]] to i8
// SIMD-ONLY0-NEXT:    [[CONV718:%.*]] = sext i8 [[CONV717]] to i32
// SIMD-ONLY0-NEXT:    [[CMP719:%.*]] = icmp eq i32 [[CONV716]], [[CONV718]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP719]], label [[IF_THEN721:%.*]], label [[IF_END722:%.*]]
// SIMD-ONLY0:       if.then721:
// SIMD-ONLY0-NEXT:    [[TMP354:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP354]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END722]]
// SIMD-ONLY0:       if.end722:
// SIMD-ONLY0-NEXT:    [[TMP355:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP355]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP356:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV723:%.*]] = bytecast b8 [[TMP356]] to i8
// SIMD-ONLY0-NEXT:    [[CONV724:%.*]] = sext i8 [[CONV723]] to i32
// SIMD-ONLY0-NEXT:    [[TMP357:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV725:%.*]] = bytecast b8 [[TMP357]] to i8
// SIMD-ONLY0-NEXT:    [[CONV726:%.*]] = sext i8 [[CONV725]] to i32
// SIMD-ONLY0-NEXT:    [[CMP727:%.*]] = icmp eq i32 [[CONV724]], [[CONV726]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP727]], label [[IF_THEN729:%.*]], label [[IF_END730:%.*]]
// SIMD-ONLY0:       if.then729:
// SIMD-ONLY0-NEXT:    [[TMP358:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP358]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END730]]
// SIMD-ONLY0:       if.end730:
// SIMD-ONLY0-NEXT:    [[TMP359:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP359]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP360:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV731:%.*]] = bytecast b8 [[TMP360]] to i8
// SIMD-ONLY0-NEXT:    [[CONV732:%.*]] = sext i8 [[CONV731]] to i32
// SIMD-ONLY0-NEXT:    [[TMP361:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV733:%.*]] = bytecast b8 [[TMP361]] to i8
// SIMD-ONLY0-NEXT:    [[CONV734:%.*]] = sext i8 [[CONV733]] to i32
// SIMD-ONLY0-NEXT:    [[CMP735:%.*]] = icmp eq i32 [[CONV732]], [[CONV734]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP735]], label [[IF_THEN737:%.*]], label [[IF_ELSE738:%.*]]
// SIMD-ONLY0:       if.then737:
// SIMD-ONLY0-NEXT:    [[TMP362:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP362]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END739:%.*]]
// SIMD-ONLY0:       if.else738:
// SIMD-ONLY0-NEXT:    [[TMP363:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP363]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END739]]
// SIMD-ONLY0:       if.end739:
// SIMD-ONLY0-NEXT:    [[TMP364:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV740:%.*]] = bytecast b8 [[TMP364]] to i8
// SIMD-ONLY0-NEXT:    [[CONV741:%.*]] = sext i8 [[CONV740]] to i32
// SIMD-ONLY0-NEXT:    [[TMP365:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV742:%.*]] = bytecast b8 [[TMP365]] to i8
// SIMD-ONLY0-NEXT:    [[CONV743:%.*]] = sext i8 [[CONV742]] to i32
// SIMD-ONLY0-NEXT:    [[CMP744:%.*]] = icmp eq i32 [[CONV741]], [[CONV743]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP744]], label [[IF_THEN746:%.*]], label [[IF_ELSE747:%.*]]
// SIMD-ONLY0:       if.then746:
// SIMD-ONLY0-NEXT:    [[TMP366:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP366]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END748:%.*]]
// SIMD-ONLY0:       if.else747:
// SIMD-ONLY0-NEXT:    [[TMP367:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP367]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END748]]
// SIMD-ONLY0:       if.end748:
// SIMD-ONLY0-NEXT:    [[TMP368:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV749:%.*]] = bytecast b8 [[TMP368]] to i8
// SIMD-ONLY0-NEXT:    [[CONV750:%.*]] = sext i8 [[CONV749]] to i32
// SIMD-ONLY0-NEXT:    [[TMP369:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV751:%.*]] = bytecast b8 [[TMP369]] to i8
// SIMD-ONLY0-NEXT:    [[CONV752:%.*]] = sext i8 [[CONV751]] to i32
// SIMD-ONLY0-NEXT:    [[CMP753:%.*]] = icmp eq i32 [[CONV750]], [[CONV752]]
// SIMD-ONLY0-NEXT:    [[CONV754:%.*]] = zext i1 [[CMP753]] to i32
// SIMD-ONLY0-NEXT:    [[CONV755:%.*]] = trunc i32 [[CONV754]] to i8
// SIMD-ONLY0-NEXT:    [[TMP370:%.*]] = bitcast i8 [[CONV755]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP370]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP371:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV756:%.*]] = bytecast b8 [[TMP371]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL757:%.*]] = icmp ne i8 [[CONV756]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL757]], label [[IF_THEN758:%.*]], label [[IF_END759:%.*]]
// SIMD-ONLY0:       if.then758:
// SIMD-ONLY0-NEXT:    [[TMP372:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP372]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END759]]
// SIMD-ONLY0:       if.end759:
// SIMD-ONLY0-NEXT:    [[TMP373:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV760:%.*]] = bytecast b8 [[TMP373]] to i8
// SIMD-ONLY0-NEXT:    [[CONV761:%.*]] = sext i8 [[CONV760]] to i32
// SIMD-ONLY0-NEXT:    [[TMP374:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV762:%.*]] = bytecast b8 [[TMP374]] to i8
// SIMD-ONLY0-NEXT:    [[CONV763:%.*]] = sext i8 [[CONV762]] to i32
// SIMD-ONLY0-NEXT:    [[CMP764:%.*]] = icmp eq i32 [[CONV761]], [[CONV763]]
// SIMD-ONLY0-NEXT:    [[CONV765:%.*]] = zext i1 [[CMP764]] to i32
// SIMD-ONLY0-NEXT:    [[CONV766:%.*]] = trunc i32 [[CONV765]] to i8
// SIMD-ONLY0-NEXT:    [[TMP375:%.*]] = bitcast i8 [[CONV766]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP375]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP376:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV767:%.*]] = bytecast b8 [[TMP376]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL768:%.*]] = icmp ne i8 [[CONV767]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL768]], label [[IF_THEN769:%.*]], label [[IF_END770:%.*]]
// SIMD-ONLY0:       if.then769:
// SIMD-ONLY0-NEXT:    [[TMP377:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP377]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END770]]
// SIMD-ONLY0:       if.end770:
// SIMD-ONLY0-NEXT:    [[TMP378:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV771:%.*]] = bytecast b8 [[TMP378]] to i8
// SIMD-ONLY0-NEXT:    [[CONV772:%.*]] = sext i8 [[CONV771]] to i32
// SIMD-ONLY0-NEXT:    [[TMP379:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV773:%.*]] = bytecast b8 [[TMP379]] to i8
// SIMD-ONLY0-NEXT:    [[CONV774:%.*]] = sext i8 [[CONV773]] to i32
// SIMD-ONLY0-NEXT:    [[CMP775:%.*]] = icmp eq i32 [[CONV772]], [[CONV774]]
// SIMD-ONLY0-NEXT:    [[CONV776:%.*]] = zext i1 [[CMP775]] to i32
// SIMD-ONLY0-NEXT:    [[CONV777:%.*]] = trunc i32 [[CONV776]] to i8
// SIMD-ONLY0-NEXT:    [[TMP380:%.*]] = bitcast i8 [[CONV777]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP380]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP381:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV778:%.*]] = bytecast b8 [[TMP381]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL779:%.*]] = icmp ne i8 [[CONV778]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL779]], label [[IF_THEN780:%.*]], label [[IF_ELSE781:%.*]]
// SIMD-ONLY0:       if.then780:
// SIMD-ONLY0-NEXT:    [[TMP382:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP382]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END782:%.*]]
// SIMD-ONLY0:       if.else781:
// SIMD-ONLY0-NEXT:    [[TMP383:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP383]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END782]]
// SIMD-ONLY0:       if.end782:
// SIMD-ONLY0-NEXT:    [[TMP384:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV783:%.*]] = bytecast b8 [[TMP384]] to i8
// SIMD-ONLY0-NEXT:    [[CONV784:%.*]] = sext i8 [[CONV783]] to i32
// SIMD-ONLY0-NEXT:    [[TMP385:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV785:%.*]] = bytecast b8 [[TMP385]] to i8
// SIMD-ONLY0-NEXT:    [[CONV786:%.*]] = sext i8 [[CONV785]] to i32
// SIMD-ONLY0-NEXT:    [[CMP787:%.*]] = icmp eq i32 [[CONV784]], [[CONV786]]
// SIMD-ONLY0-NEXT:    [[CONV788:%.*]] = zext i1 [[CMP787]] to i32
// SIMD-ONLY0-NEXT:    [[CONV789:%.*]] = trunc i32 [[CONV788]] to i8
// SIMD-ONLY0-NEXT:    [[TMP386:%.*]] = bitcast i8 [[CONV789]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP386]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP387:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV790:%.*]] = bytecast b8 [[TMP387]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL791:%.*]] = icmp ne i8 [[CONV790]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL791]], label [[IF_THEN792:%.*]], label [[IF_ELSE793:%.*]]
// SIMD-ONLY0:       if.then792:
// SIMD-ONLY0-NEXT:    [[TMP388:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP388]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END794:%.*]]
// SIMD-ONLY0:       if.else793:
// SIMD-ONLY0-NEXT:    [[TMP389:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP389]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END794]]
// SIMD-ONLY0:       if.end794:
// SIMD-ONLY0-NEXT:    [[TMP390:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP390]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP391:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV795:%.*]] = bytecast b8 [[TMP391]] to i8
// SIMD-ONLY0-NEXT:    [[CONV796:%.*]] = sext i8 [[CONV795]] to i32
// SIMD-ONLY0-NEXT:    [[TMP392:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV797:%.*]] = bytecast b8 [[TMP392]] to i8
// SIMD-ONLY0-NEXT:    [[CONV798:%.*]] = sext i8 [[CONV797]] to i32
// SIMD-ONLY0-NEXT:    [[CMP799:%.*]] = icmp sgt i32 [[CONV796]], [[CONV798]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP799]], label [[IF_THEN801:%.*]], label [[IF_END802:%.*]]
// SIMD-ONLY0:       if.then801:
// SIMD-ONLY0-NEXT:    [[TMP393:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP393]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END802]]
// SIMD-ONLY0:       if.end802:
// SIMD-ONLY0-NEXT:    [[TMP394:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP394]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP395:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV803:%.*]] = bytecast b8 [[TMP395]] to i8
// SIMD-ONLY0-NEXT:    [[CONV804:%.*]] = sext i8 [[CONV803]] to i32
// SIMD-ONLY0-NEXT:    [[TMP396:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV805:%.*]] = bytecast b8 [[TMP396]] to i8
// SIMD-ONLY0-NEXT:    [[CONV806:%.*]] = sext i8 [[CONV805]] to i32
// SIMD-ONLY0-NEXT:    [[CMP807:%.*]] = icmp sgt i32 [[CONV804]], [[CONV806]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP807]], label [[IF_THEN809:%.*]], label [[IF_END810:%.*]]
// SIMD-ONLY0:       if.then809:
// SIMD-ONLY0-NEXT:    [[TMP397:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP397]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END810]]
// SIMD-ONLY0:       if.end810:
// SIMD-ONLY0-NEXT:    [[TMP398:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP398]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP399:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV811:%.*]] = bytecast b8 [[TMP399]] to i8
// SIMD-ONLY0-NEXT:    [[CONV812:%.*]] = sext i8 [[CONV811]] to i32
// SIMD-ONLY0-NEXT:    [[TMP400:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV813:%.*]] = bytecast b8 [[TMP400]] to i8
// SIMD-ONLY0-NEXT:    [[CONV814:%.*]] = sext i8 [[CONV813]] to i32
// SIMD-ONLY0-NEXT:    [[CMP815:%.*]] = icmp slt i32 [[CONV812]], [[CONV814]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP815]], label [[IF_THEN817:%.*]], label [[IF_END818:%.*]]
// SIMD-ONLY0:       if.then817:
// SIMD-ONLY0-NEXT:    [[TMP401:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP401]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END818]]
// SIMD-ONLY0:       if.end818:
// SIMD-ONLY0-NEXT:    [[TMP402:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP402]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP403:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV819:%.*]] = bytecast b8 [[TMP403]] to i8
// SIMD-ONLY0-NEXT:    [[CONV820:%.*]] = sext i8 [[CONV819]] to i32
// SIMD-ONLY0-NEXT:    [[TMP404:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV821:%.*]] = bytecast b8 [[TMP404]] to i8
// SIMD-ONLY0-NEXT:    [[CONV822:%.*]] = sext i8 [[CONV821]] to i32
// SIMD-ONLY0-NEXT:    [[CMP823:%.*]] = icmp slt i32 [[CONV820]], [[CONV822]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP823]], label [[IF_THEN825:%.*]], label [[IF_END826:%.*]]
// SIMD-ONLY0:       if.then825:
// SIMD-ONLY0-NEXT:    [[TMP405:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP405]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END826]]
// SIMD-ONLY0:       if.end826:
// SIMD-ONLY0-NEXT:    [[TMP406:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP406]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP407:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV827:%.*]] = bytecast b8 [[TMP407]] to i8
// SIMD-ONLY0-NEXT:    [[CONV828:%.*]] = sext i8 [[CONV827]] to i32
// SIMD-ONLY0-NEXT:    [[TMP408:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV829:%.*]] = bytecast b8 [[TMP408]] to i8
// SIMD-ONLY0-NEXT:    [[CONV830:%.*]] = sext i8 [[CONV829]] to i32
// SIMD-ONLY0-NEXT:    [[CMP831:%.*]] = icmp eq i32 [[CONV828]], [[CONV830]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP831]], label [[IF_THEN833:%.*]], label [[IF_END834:%.*]]
// SIMD-ONLY0:       if.then833:
// SIMD-ONLY0-NEXT:    [[TMP409:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP409]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END834]]
// SIMD-ONLY0:       if.end834:
// SIMD-ONLY0-NEXT:    [[TMP410:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP410]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP411:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV835:%.*]] = bytecast b8 [[TMP411]] to i8
// SIMD-ONLY0-NEXT:    [[CONV836:%.*]] = sext i8 [[CONV835]] to i32
// SIMD-ONLY0-NEXT:    [[TMP412:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV837:%.*]] = bytecast b8 [[TMP412]] to i8
// SIMD-ONLY0-NEXT:    [[CONV838:%.*]] = sext i8 [[CONV837]] to i32
// SIMD-ONLY0-NEXT:    [[CMP839:%.*]] = icmp eq i32 [[CONV836]], [[CONV838]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP839]], label [[IF_THEN841:%.*]], label [[IF_END842:%.*]]
// SIMD-ONLY0:       if.then841:
// SIMD-ONLY0-NEXT:    [[TMP413:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP413]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END842]]
// SIMD-ONLY0:       if.end842:
// SIMD-ONLY0-NEXT:    [[TMP414:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV843:%.*]] = bytecast b8 [[TMP414]] to i8
// SIMD-ONLY0-NEXT:    [[CONV844:%.*]] = sext i8 [[CONV843]] to i32
// SIMD-ONLY0-NEXT:    [[TMP415:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV845:%.*]] = bytecast b8 [[TMP415]] to i8
// SIMD-ONLY0-NEXT:    [[CONV846:%.*]] = sext i8 [[CONV845]] to i32
// SIMD-ONLY0-NEXT:    [[CMP847:%.*]] = icmp sgt i32 [[CONV844]], [[CONV846]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP847]], label [[IF_THEN849:%.*]], label [[IF_END850:%.*]]
// SIMD-ONLY0:       if.then849:
// SIMD-ONLY0-NEXT:    [[TMP416:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP416]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END850]]
// SIMD-ONLY0:       if.end850:
// SIMD-ONLY0-NEXT:    [[TMP417:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP417]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP418:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV851:%.*]] = bytecast b8 [[TMP418]] to i8
// SIMD-ONLY0-NEXT:    [[CONV852:%.*]] = sext i8 [[CONV851]] to i32
// SIMD-ONLY0-NEXT:    [[TMP419:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV853:%.*]] = bytecast b8 [[TMP419]] to i8
// SIMD-ONLY0-NEXT:    [[CONV854:%.*]] = sext i8 [[CONV853]] to i32
// SIMD-ONLY0-NEXT:    [[CMP855:%.*]] = icmp sgt i32 [[CONV852]], [[CONV854]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP855]], label [[IF_THEN857:%.*]], label [[IF_END858:%.*]]
// SIMD-ONLY0:       if.then857:
// SIMD-ONLY0-NEXT:    [[TMP420:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP420]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END858]]
// SIMD-ONLY0:       if.end858:
// SIMD-ONLY0-NEXT:    [[TMP421:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP421]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP422:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV859:%.*]] = bytecast b8 [[TMP422]] to i8
// SIMD-ONLY0-NEXT:    [[CONV860:%.*]] = sext i8 [[CONV859]] to i32
// SIMD-ONLY0-NEXT:    [[TMP423:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV861:%.*]] = bytecast b8 [[TMP423]] to i8
// SIMD-ONLY0-NEXT:    [[CONV862:%.*]] = sext i8 [[CONV861]] to i32
// SIMD-ONLY0-NEXT:    [[CMP863:%.*]] = icmp slt i32 [[CONV860]], [[CONV862]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP863]], label [[IF_THEN865:%.*]], label [[IF_END866:%.*]]
// SIMD-ONLY0:       if.then865:
// SIMD-ONLY0-NEXT:    [[TMP424:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP424]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END866]]
// SIMD-ONLY0:       if.end866:
// SIMD-ONLY0-NEXT:    [[TMP425:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP425]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP426:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV867:%.*]] = bytecast b8 [[TMP426]] to i8
// SIMD-ONLY0-NEXT:    [[CONV868:%.*]] = sext i8 [[CONV867]] to i32
// SIMD-ONLY0-NEXT:    [[TMP427:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV869:%.*]] = bytecast b8 [[TMP427]] to i8
// SIMD-ONLY0-NEXT:    [[CONV870:%.*]] = sext i8 [[CONV869]] to i32
// SIMD-ONLY0-NEXT:    [[CMP871:%.*]] = icmp slt i32 [[CONV868]], [[CONV870]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP871]], label [[IF_THEN873:%.*]], label [[IF_END874:%.*]]
// SIMD-ONLY0:       if.then873:
// SIMD-ONLY0-NEXT:    [[TMP428:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP428]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END874]]
// SIMD-ONLY0:       if.end874:
// SIMD-ONLY0-NEXT:    [[TMP429:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP429]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP430:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV875:%.*]] = bytecast b8 [[TMP430]] to i8
// SIMD-ONLY0-NEXT:    [[CONV876:%.*]] = sext i8 [[CONV875]] to i32
// SIMD-ONLY0-NEXT:    [[TMP431:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV877:%.*]] = bytecast b8 [[TMP431]] to i8
// SIMD-ONLY0-NEXT:    [[CONV878:%.*]] = sext i8 [[CONV877]] to i32
// SIMD-ONLY0-NEXT:    [[CMP879:%.*]] = icmp eq i32 [[CONV876]], [[CONV878]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP879]], label [[IF_THEN881:%.*]], label [[IF_END882:%.*]]
// SIMD-ONLY0:       if.then881:
// SIMD-ONLY0-NEXT:    [[TMP432:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP432]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END882]]
// SIMD-ONLY0:       if.end882:
// SIMD-ONLY0-NEXT:    [[TMP433:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP433]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP434:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV883:%.*]] = bytecast b8 [[TMP434]] to i8
// SIMD-ONLY0-NEXT:    [[CONV884:%.*]] = sext i8 [[CONV883]] to i32
// SIMD-ONLY0-NEXT:    [[TMP435:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV885:%.*]] = bytecast b8 [[TMP435]] to i8
// SIMD-ONLY0-NEXT:    [[CONV886:%.*]] = sext i8 [[CONV885]] to i32
// SIMD-ONLY0-NEXT:    [[CMP887:%.*]] = icmp eq i32 [[CONV884]], [[CONV886]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP887]], label [[IF_THEN889:%.*]], label [[IF_END890:%.*]]
// SIMD-ONLY0:       if.then889:
// SIMD-ONLY0-NEXT:    [[TMP436:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP436]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END890]]
// SIMD-ONLY0:       if.end890:
// SIMD-ONLY0-NEXT:    [[TMP437:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP437]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP438:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV891:%.*]] = bytecast b8 [[TMP438]] to i8
// SIMD-ONLY0-NEXT:    [[CONV892:%.*]] = sext i8 [[CONV891]] to i32
// SIMD-ONLY0-NEXT:    [[TMP439:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV893:%.*]] = bytecast b8 [[TMP439]] to i8
// SIMD-ONLY0-NEXT:    [[CONV894:%.*]] = sext i8 [[CONV893]] to i32
// SIMD-ONLY0-NEXT:    [[CMP895:%.*]] = icmp eq i32 [[CONV892]], [[CONV894]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP895]], label [[IF_THEN897:%.*]], label [[IF_ELSE898:%.*]]
// SIMD-ONLY0:       if.then897:
// SIMD-ONLY0-NEXT:    [[TMP440:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP440]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END899:%.*]]
// SIMD-ONLY0:       if.else898:
// SIMD-ONLY0-NEXT:    [[TMP441:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP441]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END899]]
// SIMD-ONLY0:       if.end899:
// SIMD-ONLY0-NEXT:    [[TMP442:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV900:%.*]] = bytecast b8 [[TMP442]] to i8
// SIMD-ONLY0-NEXT:    [[CONV901:%.*]] = sext i8 [[CONV900]] to i32
// SIMD-ONLY0-NEXT:    [[TMP443:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV902:%.*]] = bytecast b8 [[TMP443]] to i8
// SIMD-ONLY0-NEXT:    [[CONV903:%.*]] = sext i8 [[CONV902]] to i32
// SIMD-ONLY0-NEXT:    [[CMP904:%.*]] = icmp eq i32 [[CONV901]], [[CONV903]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP904]], label [[IF_THEN906:%.*]], label [[IF_ELSE907:%.*]]
// SIMD-ONLY0:       if.then906:
// SIMD-ONLY0-NEXT:    [[TMP444:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP444]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END908:%.*]]
// SIMD-ONLY0:       if.else907:
// SIMD-ONLY0-NEXT:    [[TMP445:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP445]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END908]]
// SIMD-ONLY0:       if.end908:
// SIMD-ONLY0-NEXT:    [[TMP446:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV909:%.*]] = bytecast b8 [[TMP446]] to i8
// SIMD-ONLY0-NEXT:    [[CONV910:%.*]] = sext i8 [[CONV909]] to i32
// SIMD-ONLY0-NEXT:    [[TMP447:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV911:%.*]] = bytecast b8 [[TMP447]] to i8
// SIMD-ONLY0-NEXT:    [[CONV912:%.*]] = sext i8 [[CONV911]] to i32
// SIMD-ONLY0-NEXT:    [[CMP913:%.*]] = icmp eq i32 [[CONV910]], [[CONV912]]
// SIMD-ONLY0-NEXT:    [[CONV914:%.*]] = zext i1 [[CMP913]] to i32
// SIMD-ONLY0-NEXT:    [[CONV915:%.*]] = trunc i32 [[CONV914]] to i8
// SIMD-ONLY0-NEXT:    [[TMP448:%.*]] = bitcast i8 [[CONV915]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP448]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP449:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV916:%.*]] = bytecast b8 [[TMP449]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL917:%.*]] = icmp ne i8 [[CONV916]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL917]], label [[IF_THEN918:%.*]], label [[IF_END919:%.*]]
// SIMD-ONLY0:       if.then918:
// SIMD-ONLY0-NEXT:    [[TMP450:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP450]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END919]]
// SIMD-ONLY0:       if.end919:
// SIMD-ONLY0-NEXT:    [[TMP451:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV920:%.*]] = bytecast b8 [[TMP451]] to i8
// SIMD-ONLY0-NEXT:    [[CONV921:%.*]] = sext i8 [[CONV920]] to i32
// SIMD-ONLY0-NEXT:    [[TMP452:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV922:%.*]] = bytecast b8 [[TMP452]] to i8
// SIMD-ONLY0-NEXT:    [[CONV923:%.*]] = sext i8 [[CONV922]] to i32
// SIMD-ONLY0-NEXT:    [[CMP924:%.*]] = icmp eq i32 [[CONV921]], [[CONV923]]
// SIMD-ONLY0-NEXT:    [[CONV925:%.*]] = zext i1 [[CMP924]] to i32
// SIMD-ONLY0-NEXT:    [[CONV926:%.*]] = trunc i32 [[CONV925]] to i8
// SIMD-ONLY0-NEXT:    [[TMP453:%.*]] = bitcast i8 [[CONV926]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP453]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP454:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV927:%.*]] = bytecast b8 [[TMP454]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL928:%.*]] = icmp ne i8 [[CONV927]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL928]], label [[IF_THEN929:%.*]], label [[IF_END930:%.*]]
// SIMD-ONLY0:       if.then929:
// SIMD-ONLY0-NEXT:    [[TMP455:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP455]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END930]]
// SIMD-ONLY0:       if.end930:
// SIMD-ONLY0-NEXT:    [[TMP456:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV931:%.*]] = bytecast b8 [[TMP456]] to i8
// SIMD-ONLY0-NEXT:    [[CONV932:%.*]] = sext i8 [[CONV931]] to i32
// SIMD-ONLY0-NEXT:    [[TMP457:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV933:%.*]] = bytecast b8 [[TMP457]] to i8
// SIMD-ONLY0-NEXT:    [[CONV934:%.*]] = sext i8 [[CONV933]] to i32
// SIMD-ONLY0-NEXT:    [[CMP935:%.*]] = icmp eq i32 [[CONV932]], [[CONV934]]
// SIMD-ONLY0-NEXT:    [[CONV936:%.*]] = zext i1 [[CMP935]] to i32
// SIMD-ONLY0-NEXT:    [[CONV937:%.*]] = trunc i32 [[CONV936]] to i8
// SIMD-ONLY0-NEXT:    [[TMP458:%.*]] = bitcast i8 [[CONV937]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP458]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP459:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV938:%.*]] = bytecast b8 [[TMP459]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL939:%.*]] = icmp ne i8 [[CONV938]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL939]], label [[IF_THEN940:%.*]], label [[IF_ELSE941:%.*]]
// SIMD-ONLY0:       if.then940:
// SIMD-ONLY0-NEXT:    [[TMP460:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP460]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END942:%.*]]
// SIMD-ONLY0:       if.else941:
// SIMD-ONLY0-NEXT:    [[TMP461:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP461]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END942]]
// SIMD-ONLY0:       if.end942:
// SIMD-ONLY0-NEXT:    [[TMP462:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV943:%.*]] = bytecast b8 [[TMP462]] to i8
// SIMD-ONLY0-NEXT:    [[CONV944:%.*]] = sext i8 [[CONV943]] to i32
// SIMD-ONLY0-NEXT:    [[TMP463:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV945:%.*]] = bytecast b8 [[TMP463]] to i8
// SIMD-ONLY0-NEXT:    [[CONV946:%.*]] = sext i8 [[CONV945]] to i32
// SIMD-ONLY0-NEXT:    [[CMP947:%.*]] = icmp eq i32 [[CONV944]], [[CONV946]]
// SIMD-ONLY0-NEXT:    [[CONV948:%.*]] = zext i1 [[CMP947]] to i32
// SIMD-ONLY0-NEXT:    [[CONV949:%.*]] = trunc i32 [[CONV948]] to i8
// SIMD-ONLY0-NEXT:    [[TMP464:%.*]] = bitcast i8 [[CONV949]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP464]], ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP465:%.*]] = load b8, ptr [[CR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV950:%.*]] = bytecast b8 [[TMP465]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL951:%.*]] = icmp ne i8 [[CONV950]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL951]], label [[IF_THEN952:%.*]], label [[IF_ELSE953:%.*]]
// SIMD-ONLY0:       if.then952:
// SIMD-ONLY0-NEXT:    [[TMP466:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP466]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END954:%.*]]
// SIMD-ONLY0:       if.else953:
// SIMD-ONLY0-NEXT:    [[TMP467:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP467]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END954]]
// SIMD-ONLY0:       if.end954:
// SIMD-ONLY0-NEXT:    [[TMP468:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP468]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP469:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV955:%.*]] = bytecast b8 [[TMP469]] to i8
// SIMD-ONLY0-NEXT:    [[CONV956:%.*]] = zext i8 [[CONV955]] to i32
// SIMD-ONLY0-NEXT:    [[TMP470:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV957:%.*]] = bytecast b8 [[TMP470]] to i8
// SIMD-ONLY0-NEXT:    [[CONV958:%.*]] = zext i8 [[CONV957]] to i32
// SIMD-ONLY0-NEXT:    [[CMP959:%.*]] = icmp sgt i32 [[CONV956]], [[CONV958]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP959]], label [[IF_THEN961:%.*]], label [[IF_END962:%.*]]
// SIMD-ONLY0:       if.then961:
// SIMD-ONLY0-NEXT:    [[TMP471:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP471]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END962]]
// SIMD-ONLY0:       if.end962:
// SIMD-ONLY0-NEXT:    [[TMP472:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP472]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP473:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV963:%.*]] = bytecast b8 [[TMP473]] to i8
// SIMD-ONLY0-NEXT:    [[CONV964:%.*]] = zext i8 [[CONV963]] to i32
// SIMD-ONLY0-NEXT:    [[TMP474:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV965:%.*]] = bytecast b8 [[TMP474]] to i8
// SIMD-ONLY0-NEXT:    [[CONV966:%.*]] = zext i8 [[CONV965]] to i32
// SIMD-ONLY0-NEXT:    [[CMP967:%.*]] = icmp sgt i32 [[CONV964]], [[CONV966]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP967]], label [[IF_THEN969:%.*]], label [[IF_END970:%.*]]
// SIMD-ONLY0:       if.then969:
// SIMD-ONLY0-NEXT:    [[TMP475:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP475]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END970]]
// SIMD-ONLY0:       if.end970:
// SIMD-ONLY0-NEXT:    [[TMP476:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP476]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP477:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV971:%.*]] = bytecast b8 [[TMP477]] to i8
// SIMD-ONLY0-NEXT:    [[CONV972:%.*]] = zext i8 [[CONV971]] to i32
// SIMD-ONLY0-NEXT:    [[TMP478:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV973:%.*]] = bytecast b8 [[TMP478]] to i8
// SIMD-ONLY0-NEXT:    [[CONV974:%.*]] = zext i8 [[CONV973]] to i32
// SIMD-ONLY0-NEXT:    [[CMP975:%.*]] = icmp slt i32 [[CONV972]], [[CONV974]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP975]], label [[IF_THEN977:%.*]], label [[IF_END978:%.*]]
// SIMD-ONLY0:       if.then977:
// SIMD-ONLY0-NEXT:    [[TMP479:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP479]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END978]]
// SIMD-ONLY0:       if.end978:
// SIMD-ONLY0-NEXT:    [[TMP480:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP480]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP481:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV979:%.*]] = bytecast b8 [[TMP481]] to i8
// SIMD-ONLY0-NEXT:    [[CONV980:%.*]] = zext i8 [[CONV979]] to i32
// SIMD-ONLY0-NEXT:    [[TMP482:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV981:%.*]] = bytecast b8 [[TMP482]] to i8
// SIMD-ONLY0-NEXT:    [[CONV982:%.*]] = zext i8 [[CONV981]] to i32
// SIMD-ONLY0-NEXT:    [[CMP983:%.*]] = icmp slt i32 [[CONV980]], [[CONV982]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP983]], label [[IF_THEN985:%.*]], label [[IF_END986:%.*]]
// SIMD-ONLY0:       if.then985:
// SIMD-ONLY0-NEXT:    [[TMP483:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP483]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END986]]
// SIMD-ONLY0:       if.end986:
// SIMD-ONLY0-NEXT:    [[TMP484:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP484]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP485:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV987:%.*]] = bytecast b8 [[TMP485]] to i8
// SIMD-ONLY0-NEXT:    [[CONV988:%.*]] = zext i8 [[CONV987]] to i32
// SIMD-ONLY0-NEXT:    [[TMP486:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV989:%.*]] = bytecast b8 [[TMP486]] to i8
// SIMD-ONLY0-NEXT:    [[CONV990:%.*]] = zext i8 [[CONV989]] to i32
// SIMD-ONLY0-NEXT:    [[CMP991:%.*]] = icmp eq i32 [[CONV988]], [[CONV990]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP991]], label [[IF_THEN993:%.*]], label [[IF_END994:%.*]]
// SIMD-ONLY0:       if.then993:
// SIMD-ONLY0-NEXT:    [[TMP487:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP487]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END994]]
// SIMD-ONLY0:       if.end994:
// SIMD-ONLY0-NEXT:    [[TMP488:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP488]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP489:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV995:%.*]] = bytecast b8 [[TMP489]] to i8
// SIMD-ONLY0-NEXT:    [[CONV996:%.*]] = zext i8 [[CONV995]] to i32
// SIMD-ONLY0-NEXT:    [[TMP490:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV997:%.*]] = bytecast b8 [[TMP490]] to i8
// SIMD-ONLY0-NEXT:    [[CONV998:%.*]] = zext i8 [[CONV997]] to i32
// SIMD-ONLY0-NEXT:    [[CMP999:%.*]] = icmp eq i32 [[CONV996]], [[CONV998]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP999]], label [[IF_THEN1001:%.*]], label [[IF_END1002:%.*]]
// SIMD-ONLY0:       if.then1001:
// SIMD-ONLY0-NEXT:    [[TMP491:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP491]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1002]]
// SIMD-ONLY0:       if.end1002:
// SIMD-ONLY0-NEXT:    [[TMP492:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1003:%.*]] = bytecast b8 [[TMP492]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1004:%.*]] = zext i8 [[CONV1003]] to i32
// SIMD-ONLY0-NEXT:    [[TMP493:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1005:%.*]] = bytecast b8 [[TMP493]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1006:%.*]] = zext i8 [[CONV1005]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1007:%.*]] = icmp sgt i32 [[CONV1004]], [[CONV1006]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1007]], label [[IF_THEN1009:%.*]], label [[IF_END1010:%.*]]
// SIMD-ONLY0:       if.then1009:
// SIMD-ONLY0-NEXT:    [[TMP494:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP494]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1010]]
// SIMD-ONLY0:       if.end1010:
// SIMD-ONLY0-NEXT:    [[TMP495:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP495]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP496:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1011:%.*]] = bytecast b8 [[TMP496]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1012:%.*]] = zext i8 [[CONV1011]] to i32
// SIMD-ONLY0-NEXT:    [[TMP497:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1013:%.*]] = bytecast b8 [[TMP497]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1014:%.*]] = zext i8 [[CONV1013]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1015:%.*]] = icmp sgt i32 [[CONV1012]], [[CONV1014]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1015]], label [[IF_THEN1017:%.*]], label [[IF_END1018:%.*]]
// SIMD-ONLY0:       if.then1017:
// SIMD-ONLY0-NEXT:    [[TMP498:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP498]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1018]]
// SIMD-ONLY0:       if.end1018:
// SIMD-ONLY0-NEXT:    [[TMP499:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP499]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP500:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1019:%.*]] = bytecast b8 [[TMP500]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1020:%.*]] = zext i8 [[CONV1019]] to i32
// SIMD-ONLY0-NEXT:    [[TMP501:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1021:%.*]] = bytecast b8 [[TMP501]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1022:%.*]] = zext i8 [[CONV1021]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1023:%.*]] = icmp slt i32 [[CONV1020]], [[CONV1022]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1023]], label [[IF_THEN1025:%.*]], label [[IF_END1026:%.*]]
// SIMD-ONLY0:       if.then1025:
// SIMD-ONLY0-NEXT:    [[TMP502:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP502]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1026]]
// SIMD-ONLY0:       if.end1026:
// SIMD-ONLY0-NEXT:    [[TMP503:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP503]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP504:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1027:%.*]] = bytecast b8 [[TMP504]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1028:%.*]] = zext i8 [[CONV1027]] to i32
// SIMD-ONLY0-NEXT:    [[TMP505:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1029:%.*]] = bytecast b8 [[TMP505]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1030:%.*]] = zext i8 [[CONV1029]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1031:%.*]] = icmp slt i32 [[CONV1028]], [[CONV1030]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1031]], label [[IF_THEN1033:%.*]], label [[IF_END1034:%.*]]
// SIMD-ONLY0:       if.then1033:
// SIMD-ONLY0-NEXT:    [[TMP506:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP506]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1034]]
// SIMD-ONLY0:       if.end1034:
// SIMD-ONLY0-NEXT:    [[TMP507:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP507]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP508:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1035:%.*]] = bytecast b8 [[TMP508]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1036:%.*]] = zext i8 [[CONV1035]] to i32
// SIMD-ONLY0-NEXT:    [[TMP509:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1037:%.*]] = bytecast b8 [[TMP509]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1038:%.*]] = zext i8 [[CONV1037]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1039:%.*]] = icmp eq i32 [[CONV1036]], [[CONV1038]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1039]], label [[IF_THEN1041:%.*]], label [[IF_END1042:%.*]]
// SIMD-ONLY0:       if.then1041:
// SIMD-ONLY0-NEXT:    [[TMP510:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP510]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1042]]
// SIMD-ONLY0:       if.end1042:
// SIMD-ONLY0-NEXT:    [[TMP511:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP511]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP512:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1043:%.*]] = bytecast b8 [[TMP512]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1044:%.*]] = zext i8 [[CONV1043]] to i32
// SIMD-ONLY0-NEXT:    [[TMP513:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1045:%.*]] = bytecast b8 [[TMP513]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1046:%.*]] = zext i8 [[CONV1045]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1047:%.*]] = icmp eq i32 [[CONV1044]], [[CONV1046]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1047]], label [[IF_THEN1049:%.*]], label [[IF_END1050:%.*]]
// SIMD-ONLY0:       if.then1049:
// SIMD-ONLY0-NEXT:    [[TMP514:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP514]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1050]]
// SIMD-ONLY0:       if.end1050:
// SIMD-ONLY0-NEXT:    [[TMP515:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP515]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP516:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1051:%.*]] = bytecast b8 [[TMP516]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1052:%.*]] = zext i8 [[CONV1051]] to i32
// SIMD-ONLY0-NEXT:    [[TMP517:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1053:%.*]] = bytecast b8 [[TMP517]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1054:%.*]] = zext i8 [[CONV1053]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1055:%.*]] = icmp eq i32 [[CONV1052]], [[CONV1054]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1055]], label [[IF_THEN1057:%.*]], label [[IF_ELSE1058:%.*]]
// SIMD-ONLY0:       if.then1057:
// SIMD-ONLY0-NEXT:    [[TMP518:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP518]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1059:%.*]]
// SIMD-ONLY0:       if.else1058:
// SIMD-ONLY0-NEXT:    [[TMP519:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP519]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1059]]
// SIMD-ONLY0:       if.end1059:
// SIMD-ONLY0-NEXT:    [[TMP520:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1060:%.*]] = bytecast b8 [[TMP520]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1061:%.*]] = zext i8 [[CONV1060]] to i32
// SIMD-ONLY0-NEXT:    [[TMP521:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1062:%.*]] = bytecast b8 [[TMP521]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1063:%.*]] = zext i8 [[CONV1062]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1064:%.*]] = icmp eq i32 [[CONV1061]], [[CONV1063]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1064]], label [[IF_THEN1066:%.*]], label [[IF_ELSE1067:%.*]]
// SIMD-ONLY0:       if.then1066:
// SIMD-ONLY0-NEXT:    [[TMP522:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP522]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1068:%.*]]
// SIMD-ONLY0:       if.else1067:
// SIMD-ONLY0-NEXT:    [[TMP523:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP523]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1068]]
// SIMD-ONLY0:       if.end1068:
// SIMD-ONLY0-NEXT:    [[TMP524:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1069:%.*]] = bytecast b8 [[TMP524]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1070:%.*]] = zext i8 [[CONV1069]] to i32
// SIMD-ONLY0-NEXT:    [[TMP525:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1071:%.*]] = bytecast b8 [[TMP525]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1072:%.*]] = zext i8 [[CONV1071]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1073:%.*]] = icmp eq i32 [[CONV1070]], [[CONV1072]]
// SIMD-ONLY0-NEXT:    [[CONV1074:%.*]] = zext i1 [[CMP1073]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1075:%.*]] = trunc i32 [[CONV1074]] to i8
// SIMD-ONLY0-NEXT:    [[TMP526:%.*]] = bitcast i8 [[CONV1075]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP526]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP527:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1076:%.*]] = bytecast b8 [[TMP527]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1077:%.*]] = icmp ne i8 [[CONV1076]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1077]], label [[IF_THEN1078:%.*]], label [[IF_END1079:%.*]]
// SIMD-ONLY0:       if.then1078:
// SIMD-ONLY0-NEXT:    [[TMP528:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP528]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1079]]
// SIMD-ONLY0:       if.end1079:
// SIMD-ONLY0-NEXT:    [[TMP529:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1080:%.*]] = bytecast b8 [[TMP529]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1081:%.*]] = zext i8 [[CONV1080]] to i32
// SIMD-ONLY0-NEXT:    [[TMP530:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1082:%.*]] = bytecast b8 [[TMP530]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1083:%.*]] = zext i8 [[CONV1082]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1084:%.*]] = icmp eq i32 [[CONV1081]], [[CONV1083]]
// SIMD-ONLY0-NEXT:    [[CONV1085:%.*]] = zext i1 [[CMP1084]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1086:%.*]] = trunc i32 [[CONV1085]] to i8
// SIMD-ONLY0-NEXT:    [[TMP531:%.*]] = bitcast i8 [[CONV1086]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP531]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP532:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1087:%.*]] = bytecast b8 [[TMP532]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1088:%.*]] = icmp ne i8 [[CONV1087]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1088]], label [[IF_THEN1089:%.*]], label [[IF_END1090:%.*]]
// SIMD-ONLY0:       if.then1089:
// SIMD-ONLY0-NEXT:    [[TMP533:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP533]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1090]]
// SIMD-ONLY0:       if.end1090:
// SIMD-ONLY0-NEXT:    [[TMP534:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1091:%.*]] = bytecast b8 [[TMP534]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1092:%.*]] = zext i8 [[CONV1091]] to i32
// SIMD-ONLY0-NEXT:    [[TMP535:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1093:%.*]] = bytecast b8 [[TMP535]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1094:%.*]] = zext i8 [[CONV1093]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1095:%.*]] = icmp eq i32 [[CONV1092]], [[CONV1094]]
// SIMD-ONLY0-NEXT:    [[CONV1096:%.*]] = zext i1 [[CMP1095]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1097:%.*]] = trunc i32 [[CONV1096]] to i8
// SIMD-ONLY0-NEXT:    [[TMP536:%.*]] = bitcast i8 [[CONV1097]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP536]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP537:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1098:%.*]] = bytecast b8 [[TMP537]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1099:%.*]] = icmp ne i8 [[CONV1098]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1099]], label [[IF_THEN1100:%.*]], label [[IF_ELSE1101:%.*]]
// SIMD-ONLY0:       if.then1100:
// SIMD-ONLY0-NEXT:    [[TMP538:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP538]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1102:%.*]]
// SIMD-ONLY0:       if.else1101:
// SIMD-ONLY0-NEXT:    [[TMP539:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP539]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1102]]
// SIMD-ONLY0:       if.end1102:
// SIMD-ONLY0-NEXT:    [[TMP540:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1103:%.*]] = bytecast b8 [[TMP540]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1104:%.*]] = zext i8 [[CONV1103]] to i32
// SIMD-ONLY0-NEXT:    [[TMP541:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1105:%.*]] = bytecast b8 [[TMP541]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1106:%.*]] = zext i8 [[CONV1105]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1107:%.*]] = icmp eq i32 [[CONV1104]], [[CONV1106]]
// SIMD-ONLY0-NEXT:    [[CONV1108:%.*]] = zext i1 [[CMP1107]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1109:%.*]] = trunc i32 [[CONV1108]] to i8
// SIMD-ONLY0-NEXT:    [[TMP542:%.*]] = bitcast i8 [[CONV1109]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP542]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP543:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1110:%.*]] = bytecast b8 [[TMP543]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1111:%.*]] = icmp ne i8 [[CONV1110]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1111]], label [[IF_THEN1112:%.*]], label [[IF_ELSE1113:%.*]]
// SIMD-ONLY0:       if.then1112:
// SIMD-ONLY0-NEXT:    [[TMP544:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP544]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1114:%.*]]
// SIMD-ONLY0:       if.else1113:
// SIMD-ONLY0-NEXT:    [[TMP545:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP545]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1114]]
// SIMD-ONLY0:       if.end1114:
// SIMD-ONLY0-NEXT:    [[TMP546:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP546]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP547:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1115:%.*]] = bytecast b8 [[TMP547]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1116:%.*]] = zext i8 [[CONV1115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP548:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1117:%.*]] = bytecast b8 [[TMP548]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1118:%.*]] = zext i8 [[CONV1117]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1119:%.*]] = icmp sgt i32 [[CONV1116]], [[CONV1118]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1119]], label [[IF_THEN1121:%.*]], label [[IF_END1122:%.*]]
// SIMD-ONLY0:       if.then1121:
// SIMD-ONLY0-NEXT:    [[TMP549:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP549]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1122]]
// SIMD-ONLY0:       if.end1122:
// SIMD-ONLY0-NEXT:    [[TMP550:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP550]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP551:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1123:%.*]] = bytecast b8 [[TMP551]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1124:%.*]] = zext i8 [[CONV1123]] to i32
// SIMD-ONLY0-NEXT:    [[TMP552:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1125:%.*]] = bytecast b8 [[TMP552]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1126:%.*]] = zext i8 [[CONV1125]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1127:%.*]] = icmp sgt i32 [[CONV1124]], [[CONV1126]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1127]], label [[IF_THEN1129:%.*]], label [[IF_END1130:%.*]]
// SIMD-ONLY0:       if.then1129:
// SIMD-ONLY0-NEXT:    [[TMP553:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP553]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1130]]
// SIMD-ONLY0:       if.end1130:
// SIMD-ONLY0-NEXT:    [[TMP554:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP554]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP555:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1131:%.*]] = bytecast b8 [[TMP555]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1132:%.*]] = zext i8 [[CONV1131]] to i32
// SIMD-ONLY0-NEXT:    [[TMP556:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1133:%.*]] = bytecast b8 [[TMP556]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1134:%.*]] = zext i8 [[CONV1133]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1135:%.*]] = icmp slt i32 [[CONV1132]], [[CONV1134]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1135]], label [[IF_THEN1137:%.*]], label [[IF_END1138:%.*]]
// SIMD-ONLY0:       if.then1137:
// SIMD-ONLY0-NEXT:    [[TMP557:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP557]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1138]]
// SIMD-ONLY0:       if.end1138:
// SIMD-ONLY0-NEXT:    [[TMP558:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP558]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP559:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1139:%.*]] = bytecast b8 [[TMP559]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1140:%.*]] = zext i8 [[CONV1139]] to i32
// SIMD-ONLY0-NEXT:    [[TMP560:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1141:%.*]] = bytecast b8 [[TMP560]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1142:%.*]] = zext i8 [[CONV1141]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1143:%.*]] = icmp slt i32 [[CONV1140]], [[CONV1142]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1143]], label [[IF_THEN1145:%.*]], label [[IF_END1146:%.*]]
// SIMD-ONLY0:       if.then1145:
// SIMD-ONLY0-NEXT:    [[TMP561:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP561]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1146]]
// SIMD-ONLY0:       if.end1146:
// SIMD-ONLY0-NEXT:    [[TMP562:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP562]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP563:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1147:%.*]] = bytecast b8 [[TMP563]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1148:%.*]] = zext i8 [[CONV1147]] to i32
// SIMD-ONLY0-NEXT:    [[TMP564:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1149:%.*]] = bytecast b8 [[TMP564]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1150:%.*]] = zext i8 [[CONV1149]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1151:%.*]] = icmp eq i32 [[CONV1148]], [[CONV1150]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1151]], label [[IF_THEN1153:%.*]], label [[IF_END1154:%.*]]
// SIMD-ONLY0:       if.then1153:
// SIMD-ONLY0-NEXT:    [[TMP565:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP565]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1154]]
// SIMD-ONLY0:       if.end1154:
// SIMD-ONLY0-NEXT:    [[TMP566:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP566]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP567:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1155:%.*]] = bytecast b8 [[TMP567]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1156:%.*]] = zext i8 [[CONV1155]] to i32
// SIMD-ONLY0-NEXT:    [[TMP568:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1157:%.*]] = bytecast b8 [[TMP568]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1158:%.*]] = zext i8 [[CONV1157]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1159:%.*]] = icmp eq i32 [[CONV1156]], [[CONV1158]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1159]], label [[IF_THEN1161:%.*]], label [[IF_END1162:%.*]]
// SIMD-ONLY0:       if.then1161:
// SIMD-ONLY0-NEXT:    [[TMP569:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP569]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1162]]
// SIMD-ONLY0:       if.end1162:
// SIMD-ONLY0-NEXT:    [[TMP570:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1163:%.*]] = bytecast b8 [[TMP570]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1164:%.*]] = zext i8 [[CONV1163]] to i32
// SIMD-ONLY0-NEXT:    [[TMP571:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1165:%.*]] = bytecast b8 [[TMP571]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1166:%.*]] = zext i8 [[CONV1165]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1167:%.*]] = icmp sgt i32 [[CONV1164]], [[CONV1166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1167]], label [[IF_THEN1169:%.*]], label [[IF_END1170:%.*]]
// SIMD-ONLY0:       if.then1169:
// SIMD-ONLY0-NEXT:    [[TMP572:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP572]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1170]]
// SIMD-ONLY0:       if.end1170:
// SIMD-ONLY0-NEXT:    [[TMP573:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP573]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP574:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1171:%.*]] = bytecast b8 [[TMP574]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1172:%.*]] = zext i8 [[CONV1171]] to i32
// SIMD-ONLY0-NEXT:    [[TMP575:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1173:%.*]] = bytecast b8 [[TMP575]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1174:%.*]] = zext i8 [[CONV1173]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1175:%.*]] = icmp sgt i32 [[CONV1172]], [[CONV1174]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1175]], label [[IF_THEN1177:%.*]], label [[IF_END1178:%.*]]
// SIMD-ONLY0:       if.then1177:
// SIMD-ONLY0-NEXT:    [[TMP576:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP576]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1178]]
// SIMD-ONLY0:       if.end1178:
// SIMD-ONLY0-NEXT:    [[TMP577:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP577]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP578:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1179:%.*]] = bytecast b8 [[TMP578]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1180:%.*]] = zext i8 [[CONV1179]] to i32
// SIMD-ONLY0-NEXT:    [[TMP579:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1181:%.*]] = bytecast b8 [[TMP579]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1182:%.*]] = zext i8 [[CONV1181]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1183:%.*]] = icmp slt i32 [[CONV1180]], [[CONV1182]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1183]], label [[IF_THEN1185:%.*]], label [[IF_END1186:%.*]]
// SIMD-ONLY0:       if.then1185:
// SIMD-ONLY0-NEXT:    [[TMP580:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP580]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1186]]
// SIMD-ONLY0:       if.end1186:
// SIMD-ONLY0-NEXT:    [[TMP581:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP581]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP582:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1187:%.*]] = bytecast b8 [[TMP582]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1188:%.*]] = zext i8 [[CONV1187]] to i32
// SIMD-ONLY0-NEXT:    [[TMP583:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1189:%.*]] = bytecast b8 [[TMP583]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1190:%.*]] = zext i8 [[CONV1189]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1191:%.*]] = icmp slt i32 [[CONV1188]], [[CONV1190]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1191]], label [[IF_THEN1193:%.*]], label [[IF_END1194:%.*]]
// SIMD-ONLY0:       if.then1193:
// SIMD-ONLY0-NEXT:    [[TMP584:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP584]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1194]]
// SIMD-ONLY0:       if.end1194:
// SIMD-ONLY0-NEXT:    [[TMP585:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP585]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP586:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1195:%.*]] = bytecast b8 [[TMP586]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1196:%.*]] = zext i8 [[CONV1195]] to i32
// SIMD-ONLY0-NEXT:    [[TMP587:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1197:%.*]] = bytecast b8 [[TMP587]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1198:%.*]] = zext i8 [[CONV1197]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1199:%.*]] = icmp eq i32 [[CONV1196]], [[CONV1198]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1199]], label [[IF_THEN1201:%.*]], label [[IF_END1202:%.*]]
// SIMD-ONLY0:       if.then1201:
// SIMD-ONLY0-NEXT:    [[TMP588:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP588]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1202]]
// SIMD-ONLY0:       if.end1202:
// SIMD-ONLY0-NEXT:    [[TMP589:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP589]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP590:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1203:%.*]] = bytecast b8 [[TMP590]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1204:%.*]] = zext i8 [[CONV1203]] to i32
// SIMD-ONLY0-NEXT:    [[TMP591:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1205:%.*]] = bytecast b8 [[TMP591]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1206:%.*]] = zext i8 [[CONV1205]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1207:%.*]] = icmp eq i32 [[CONV1204]], [[CONV1206]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1207]], label [[IF_THEN1209:%.*]], label [[IF_END1210:%.*]]
// SIMD-ONLY0:       if.then1209:
// SIMD-ONLY0-NEXT:    [[TMP592:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP592]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1210]]
// SIMD-ONLY0:       if.end1210:
// SIMD-ONLY0-NEXT:    [[TMP593:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP593]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP594:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1211:%.*]] = bytecast b8 [[TMP594]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1212:%.*]] = zext i8 [[CONV1211]] to i32
// SIMD-ONLY0-NEXT:    [[TMP595:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1213:%.*]] = bytecast b8 [[TMP595]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1214:%.*]] = zext i8 [[CONV1213]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1215:%.*]] = icmp eq i32 [[CONV1212]], [[CONV1214]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1215]], label [[IF_THEN1217:%.*]], label [[IF_ELSE1218:%.*]]
// SIMD-ONLY0:       if.then1217:
// SIMD-ONLY0-NEXT:    [[TMP596:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP596]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1219:%.*]]
// SIMD-ONLY0:       if.else1218:
// SIMD-ONLY0-NEXT:    [[TMP597:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP597]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1219]]
// SIMD-ONLY0:       if.end1219:
// SIMD-ONLY0-NEXT:    [[TMP598:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1220:%.*]] = bytecast b8 [[TMP598]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1221:%.*]] = zext i8 [[CONV1220]] to i32
// SIMD-ONLY0-NEXT:    [[TMP599:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1222:%.*]] = bytecast b8 [[TMP599]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1223:%.*]] = zext i8 [[CONV1222]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1224:%.*]] = icmp eq i32 [[CONV1221]], [[CONV1223]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1224]], label [[IF_THEN1226:%.*]], label [[IF_ELSE1227:%.*]]
// SIMD-ONLY0:       if.then1226:
// SIMD-ONLY0-NEXT:    [[TMP600:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP600]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1228:%.*]]
// SIMD-ONLY0:       if.else1227:
// SIMD-ONLY0-NEXT:    [[TMP601:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP601]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1228]]
// SIMD-ONLY0:       if.end1228:
// SIMD-ONLY0-NEXT:    [[TMP602:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1229:%.*]] = bytecast b8 [[TMP602]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1230:%.*]] = zext i8 [[CONV1229]] to i32
// SIMD-ONLY0-NEXT:    [[TMP603:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1231:%.*]] = bytecast b8 [[TMP603]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1232:%.*]] = zext i8 [[CONV1231]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1233:%.*]] = icmp eq i32 [[CONV1230]], [[CONV1232]]
// SIMD-ONLY0-NEXT:    [[CONV1234:%.*]] = zext i1 [[CMP1233]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1235:%.*]] = trunc i32 [[CONV1234]] to i8
// SIMD-ONLY0-NEXT:    [[TMP604:%.*]] = bitcast i8 [[CONV1235]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP604]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP605:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1236:%.*]] = bytecast b8 [[TMP605]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1237:%.*]] = icmp ne i8 [[CONV1236]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1237]], label [[IF_THEN1238:%.*]], label [[IF_END1239:%.*]]
// SIMD-ONLY0:       if.then1238:
// SIMD-ONLY0-NEXT:    [[TMP606:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP606]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1239]]
// SIMD-ONLY0:       if.end1239:
// SIMD-ONLY0-NEXT:    [[TMP607:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1240:%.*]] = bytecast b8 [[TMP607]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1241:%.*]] = zext i8 [[CONV1240]] to i32
// SIMD-ONLY0-NEXT:    [[TMP608:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1242:%.*]] = bytecast b8 [[TMP608]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1243:%.*]] = zext i8 [[CONV1242]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1244:%.*]] = icmp eq i32 [[CONV1241]], [[CONV1243]]
// SIMD-ONLY0-NEXT:    [[CONV1245:%.*]] = zext i1 [[CMP1244]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1246:%.*]] = trunc i32 [[CONV1245]] to i8
// SIMD-ONLY0-NEXT:    [[TMP609:%.*]] = bitcast i8 [[CONV1246]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP609]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP610:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1247:%.*]] = bytecast b8 [[TMP610]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1248:%.*]] = icmp ne i8 [[CONV1247]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1248]], label [[IF_THEN1249:%.*]], label [[IF_END1250:%.*]]
// SIMD-ONLY0:       if.then1249:
// SIMD-ONLY0-NEXT:    [[TMP611:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP611]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1250]]
// SIMD-ONLY0:       if.end1250:
// SIMD-ONLY0-NEXT:    [[TMP612:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1251:%.*]] = bytecast b8 [[TMP612]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1252:%.*]] = zext i8 [[CONV1251]] to i32
// SIMD-ONLY0-NEXT:    [[TMP613:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1253:%.*]] = bytecast b8 [[TMP613]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1254:%.*]] = zext i8 [[CONV1253]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1255:%.*]] = icmp eq i32 [[CONV1252]], [[CONV1254]]
// SIMD-ONLY0-NEXT:    [[CONV1256:%.*]] = zext i1 [[CMP1255]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1257:%.*]] = trunc i32 [[CONV1256]] to i8
// SIMD-ONLY0-NEXT:    [[TMP614:%.*]] = bitcast i8 [[CONV1257]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP614]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP615:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1258:%.*]] = bytecast b8 [[TMP615]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1259:%.*]] = icmp ne i8 [[CONV1258]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1259]], label [[IF_THEN1260:%.*]], label [[IF_ELSE1261:%.*]]
// SIMD-ONLY0:       if.then1260:
// SIMD-ONLY0-NEXT:    [[TMP616:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP616]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1262:%.*]]
// SIMD-ONLY0:       if.else1261:
// SIMD-ONLY0-NEXT:    [[TMP617:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP617]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1262]]
// SIMD-ONLY0:       if.end1262:
// SIMD-ONLY0-NEXT:    [[TMP618:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1263:%.*]] = bytecast b8 [[TMP618]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1264:%.*]] = zext i8 [[CONV1263]] to i32
// SIMD-ONLY0-NEXT:    [[TMP619:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1265:%.*]] = bytecast b8 [[TMP619]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1266:%.*]] = zext i8 [[CONV1265]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1267:%.*]] = icmp eq i32 [[CONV1264]], [[CONV1266]]
// SIMD-ONLY0-NEXT:    [[CONV1268:%.*]] = zext i1 [[CMP1267]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1269:%.*]] = trunc i32 [[CONV1268]] to i8
// SIMD-ONLY0-NEXT:    [[TMP620:%.*]] = bitcast i8 [[CONV1269]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP620]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP621:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1270:%.*]] = bytecast b8 [[TMP621]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1271:%.*]] = icmp ne i8 [[CONV1270]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1271]], label [[IF_THEN1272:%.*]], label [[IF_ELSE1273:%.*]]
// SIMD-ONLY0:       if.then1272:
// SIMD-ONLY0-NEXT:    [[TMP622:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP622]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1274:%.*]]
// SIMD-ONLY0:       if.else1273:
// SIMD-ONLY0-NEXT:    [[TMP623:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP623]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1274]]
// SIMD-ONLY0:       if.end1274:
// SIMD-ONLY0-NEXT:    [[TMP624:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP624]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP625:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1275:%.*]] = bytecast b8 [[TMP625]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1276:%.*]] = zext i8 [[CONV1275]] to i32
// SIMD-ONLY0-NEXT:    [[TMP626:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1277:%.*]] = bytecast b8 [[TMP626]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1278:%.*]] = zext i8 [[CONV1277]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1279:%.*]] = icmp sgt i32 [[CONV1276]], [[CONV1278]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1279]], label [[IF_THEN1281:%.*]], label [[IF_END1282:%.*]]
// SIMD-ONLY0:       if.then1281:
// SIMD-ONLY0-NEXT:    [[TMP627:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP627]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1282]]
// SIMD-ONLY0:       if.end1282:
// SIMD-ONLY0-NEXT:    [[TMP628:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP628]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP629:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1283:%.*]] = bytecast b8 [[TMP629]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1284:%.*]] = zext i8 [[CONV1283]] to i32
// SIMD-ONLY0-NEXT:    [[TMP630:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1285:%.*]] = bytecast b8 [[TMP630]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1286:%.*]] = zext i8 [[CONV1285]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1287:%.*]] = icmp sgt i32 [[CONV1284]], [[CONV1286]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1287]], label [[IF_THEN1289:%.*]], label [[IF_END1290:%.*]]
// SIMD-ONLY0:       if.then1289:
// SIMD-ONLY0-NEXT:    [[TMP631:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP631]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1290]]
// SIMD-ONLY0:       if.end1290:
// SIMD-ONLY0-NEXT:    [[TMP632:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP632]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP633:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1291:%.*]] = bytecast b8 [[TMP633]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1292:%.*]] = zext i8 [[CONV1291]] to i32
// SIMD-ONLY0-NEXT:    [[TMP634:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1293:%.*]] = bytecast b8 [[TMP634]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1294:%.*]] = zext i8 [[CONV1293]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1295:%.*]] = icmp slt i32 [[CONV1292]], [[CONV1294]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1295]], label [[IF_THEN1297:%.*]], label [[IF_END1298:%.*]]
// SIMD-ONLY0:       if.then1297:
// SIMD-ONLY0-NEXT:    [[TMP635:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP635]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1298]]
// SIMD-ONLY0:       if.end1298:
// SIMD-ONLY0-NEXT:    [[TMP636:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP636]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP637:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1299:%.*]] = bytecast b8 [[TMP637]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1300:%.*]] = zext i8 [[CONV1299]] to i32
// SIMD-ONLY0-NEXT:    [[TMP638:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1301:%.*]] = bytecast b8 [[TMP638]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1302:%.*]] = zext i8 [[CONV1301]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1303:%.*]] = icmp slt i32 [[CONV1300]], [[CONV1302]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1303]], label [[IF_THEN1305:%.*]], label [[IF_END1306:%.*]]
// SIMD-ONLY0:       if.then1305:
// SIMD-ONLY0-NEXT:    [[TMP639:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP639]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1306]]
// SIMD-ONLY0:       if.end1306:
// SIMD-ONLY0-NEXT:    [[TMP640:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP640]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP641:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1307:%.*]] = bytecast b8 [[TMP641]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1308:%.*]] = zext i8 [[CONV1307]] to i32
// SIMD-ONLY0-NEXT:    [[TMP642:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1309:%.*]] = bytecast b8 [[TMP642]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1310:%.*]] = zext i8 [[CONV1309]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1311:%.*]] = icmp eq i32 [[CONV1308]], [[CONV1310]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1311]], label [[IF_THEN1313:%.*]], label [[IF_END1314:%.*]]
// SIMD-ONLY0:       if.then1313:
// SIMD-ONLY0-NEXT:    [[TMP643:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP643]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1314]]
// SIMD-ONLY0:       if.end1314:
// SIMD-ONLY0-NEXT:    [[TMP644:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP644]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP645:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1315:%.*]] = bytecast b8 [[TMP645]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1316:%.*]] = zext i8 [[CONV1315]] to i32
// SIMD-ONLY0-NEXT:    [[TMP646:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1317:%.*]] = bytecast b8 [[TMP646]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1318:%.*]] = zext i8 [[CONV1317]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1319:%.*]] = icmp eq i32 [[CONV1316]], [[CONV1318]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1319]], label [[IF_THEN1321:%.*]], label [[IF_END1322:%.*]]
// SIMD-ONLY0:       if.then1321:
// SIMD-ONLY0-NEXT:    [[TMP647:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP647]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1322]]
// SIMD-ONLY0:       if.end1322:
// SIMD-ONLY0-NEXT:    [[TMP648:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1323:%.*]] = bytecast b8 [[TMP648]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1324:%.*]] = zext i8 [[CONV1323]] to i32
// SIMD-ONLY0-NEXT:    [[TMP649:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1325:%.*]] = bytecast b8 [[TMP649]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1326:%.*]] = zext i8 [[CONV1325]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1327:%.*]] = icmp sgt i32 [[CONV1324]], [[CONV1326]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1327]], label [[IF_THEN1329:%.*]], label [[IF_END1330:%.*]]
// SIMD-ONLY0:       if.then1329:
// SIMD-ONLY0-NEXT:    [[TMP650:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP650]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1330]]
// SIMD-ONLY0:       if.end1330:
// SIMD-ONLY0-NEXT:    [[TMP651:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP651]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP652:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1331:%.*]] = bytecast b8 [[TMP652]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1332:%.*]] = zext i8 [[CONV1331]] to i32
// SIMD-ONLY0-NEXT:    [[TMP653:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1333:%.*]] = bytecast b8 [[TMP653]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1334:%.*]] = zext i8 [[CONV1333]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1335:%.*]] = icmp sgt i32 [[CONV1332]], [[CONV1334]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1335]], label [[IF_THEN1337:%.*]], label [[IF_END1338:%.*]]
// SIMD-ONLY0:       if.then1337:
// SIMD-ONLY0-NEXT:    [[TMP654:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP654]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1338]]
// SIMD-ONLY0:       if.end1338:
// SIMD-ONLY0-NEXT:    [[TMP655:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP655]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP656:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1339:%.*]] = bytecast b8 [[TMP656]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1340:%.*]] = zext i8 [[CONV1339]] to i32
// SIMD-ONLY0-NEXT:    [[TMP657:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1341:%.*]] = bytecast b8 [[TMP657]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1342:%.*]] = zext i8 [[CONV1341]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1343:%.*]] = icmp slt i32 [[CONV1340]], [[CONV1342]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1343]], label [[IF_THEN1345:%.*]], label [[IF_END1346:%.*]]
// SIMD-ONLY0:       if.then1345:
// SIMD-ONLY0-NEXT:    [[TMP658:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP658]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1346]]
// SIMD-ONLY0:       if.end1346:
// SIMD-ONLY0-NEXT:    [[TMP659:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP659]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP660:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1347:%.*]] = bytecast b8 [[TMP660]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1348:%.*]] = zext i8 [[CONV1347]] to i32
// SIMD-ONLY0-NEXT:    [[TMP661:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1349:%.*]] = bytecast b8 [[TMP661]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1350:%.*]] = zext i8 [[CONV1349]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1351:%.*]] = icmp slt i32 [[CONV1348]], [[CONV1350]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1351]], label [[IF_THEN1353:%.*]], label [[IF_END1354:%.*]]
// SIMD-ONLY0:       if.then1353:
// SIMD-ONLY0-NEXT:    [[TMP662:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP662]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1354]]
// SIMD-ONLY0:       if.end1354:
// SIMD-ONLY0-NEXT:    [[TMP663:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP663]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP664:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1355:%.*]] = bytecast b8 [[TMP664]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1356:%.*]] = zext i8 [[CONV1355]] to i32
// SIMD-ONLY0-NEXT:    [[TMP665:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1357:%.*]] = bytecast b8 [[TMP665]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1358:%.*]] = zext i8 [[CONV1357]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1359:%.*]] = icmp eq i32 [[CONV1356]], [[CONV1358]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1359]], label [[IF_THEN1361:%.*]], label [[IF_END1362:%.*]]
// SIMD-ONLY0:       if.then1361:
// SIMD-ONLY0-NEXT:    [[TMP666:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP666]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1362]]
// SIMD-ONLY0:       if.end1362:
// SIMD-ONLY0-NEXT:    [[TMP667:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP667]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP668:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1363:%.*]] = bytecast b8 [[TMP668]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1364:%.*]] = zext i8 [[CONV1363]] to i32
// SIMD-ONLY0-NEXT:    [[TMP669:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1365:%.*]] = bytecast b8 [[TMP669]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1366:%.*]] = zext i8 [[CONV1365]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1367:%.*]] = icmp eq i32 [[CONV1364]], [[CONV1366]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1367]], label [[IF_THEN1369:%.*]], label [[IF_END1370:%.*]]
// SIMD-ONLY0:       if.then1369:
// SIMD-ONLY0-NEXT:    [[TMP670:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP670]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1370]]
// SIMD-ONLY0:       if.end1370:
// SIMD-ONLY0-NEXT:    [[TMP671:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP671]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP672:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1371:%.*]] = bytecast b8 [[TMP672]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1372:%.*]] = zext i8 [[CONV1371]] to i32
// SIMD-ONLY0-NEXT:    [[TMP673:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1373:%.*]] = bytecast b8 [[TMP673]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1374:%.*]] = zext i8 [[CONV1373]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1375:%.*]] = icmp eq i32 [[CONV1372]], [[CONV1374]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1375]], label [[IF_THEN1377:%.*]], label [[IF_ELSE1378:%.*]]
// SIMD-ONLY0:       if.then1377:
// SIMD-ONLY0-NEXT:    [[TMP674:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP674]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1379:%.*]]
// SIMD-ONLY0:       if.else1378:
// SIMD-ONLY0-NEXT:    [[TMP675:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP675]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1379]]
// SIMD-ONLY0:       if.end1379:
// SIMD-ONLY0-NEXT:    [[TMP676:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1380:%.*]] = bytecast b8 [[TMP676]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1381:%.*]] = zext i8 [[CONV1380]] to i32
// SIMD-ONLY0-NEXT:    [[TMP677:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1382:%.*]] = bytecast b8 [[TMP677]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1383:%.*]] = zext i8 [[CONV1382]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1384:%.*]] = icmp eq i32 [[CONV1381]], [[CONV1383]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1384]], label [[IF_THEN1386:%.*]], label [[IF_ELSE1387:%.*]]
// SIMD-ONLY0:       if.then1386:
// SIMD-ONLY0-NEXT:    [[TMP678:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP678]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1388:%.*]]
// SIMD-ONLY0:       if.else1387:
// SIMD-ONLY0-NEXT:    [[TMP679:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP679]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1388]]
// SIMD-ONLY0:       if.end1388:
// SIMD-ONLY0-NEXT:    [[TMP680:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1389:%.*]] = bytecast b8 [[TMP680]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1390:%.*]] = zext i8 [[CONV1389]] to i32
// SIMD-ONLY0-NEXT:    [[TMP681:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1391:%.*]] = bytecast b8 [[TMP681]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1392:%.*]] = zext i8 [[CONV1391]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1393:%.*]] = icmp eq i32 [[CONV1390]], [[CONV1392]]
// SIMD-ONLY0-NEXT:    [[CONV1394:%.*]] = zext i1 [[CMP1393]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1395:%.*]] = trunc i32 [[CONV1394]] to i8
// SIMD-ONLY0-NEXT:    [[TMP682:%.*]] = bitcast i8 [[CONV1395]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP682]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP683:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1396:%.*]] = bytecast b8 [[TMP683]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1397:%.*]] = icmp ne i8 [[CONV1396]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1397]], label [[IF_THEN1398:%.*]], label [[IF_END1399:%.*]]
// SIMD-ONLY0:       if.then1398:
// SIMD-ONLY0-NEXT:    [[TMP684:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP684]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1399]]
// SIMD-ONLY0:       if.end1399:
// SIMD-ONLY0-NEXT:    [[TMP685:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1400:%.*]] = bytecast b8 [[TMP685]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1401:%.*]] = zext i8 [[CONV1400]] to i32
// SIMD-ONLY0-NEXT:    [[TMP686:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1402:%.*]] = bytecast b8 [[TMP686]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1403:%.*]] = zext i8 [[CONV1402]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1404:%.*]] = icmp eq i32 [[CONV1401]], [[CONV1403]]
// SIMD-ONLY0-NEXT:    [[CONV1405:%.*]] = zext i1 [[CMP1404]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1406:%.*]] = trunc i32 [[CONV1405]] to i8
// SIMD-ONLY0-NEXT:    [[TMP687:%.*]] = bitcast i8 [[CONV1406]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP687]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP688:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1407:%.*]] = bytecast b8 [[TMP688]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1408:%.*]] = icmp ne i8 [[CONV1407]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1408]], label [[IF_THEN1409:%.*]], label [[IF_END1410:%.*]]
// SIMD-ONLY0:       if.then1409:
// SIMD-ONLY0-NEXT:    [[TMP689:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP689]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1410]]
// SIMD-ONLY0:       if.end1410:
// SIMD-ONLY0-NEXT:    [[TMP690:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1411:%.*]] = bytecast b8 [[TMP690]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1412:%.*]] = zext i8 [[CONV1411]] to i32
// SIMD-ONLY0-NEXT:    [[TMP691:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1413:%.*]] = bytecast b8 [[TMP691]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1414:%.*]] = zext i8 [[CONV1413]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1415:%.*]] = icmp eq i32 [[CONV1412]], [[CONV1414]]
// SIMD-ONLY0-NEXT:    [[CONV1416:%.*]] = zext i1 [[CMP1415]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1417:%.*]] = trunc i32 [[CONV1416]] to i8
// SIMD-ONLY0-NEXT:    [[TMP692:%.*]] = bitcast i8 [[CONV1417]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP692]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP693:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1418:%.*]] = bytecast b8 [[TMP693]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1419:%.*]] = icmp ne i8 [[CONV1418]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1419]], label [[IF_THEN1420:%.*]], label [[IF_ELSE1421:%.*]]
// SIMD-ONLY0:       if.then1420:
// SIMD-ONLY0-NEXT:    [[TMP694:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP694]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1422:%.*]]
// SIMD-ONLY0:       if.else1421:
// SIMD-ONLY0-NEXT:    [[TMP695:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP695]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1422]]
// SIMD-ONLY0:       if.end1422:
// SIMD-ONLY0-NEXT:    [[TMP696:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1423:%.*]] = bytecast b8 [[TMP696]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1424:%.*]] = zext i8 [[CONV1423]] to i32
// SIMD-ONLY0-NEXT:    [[TMP697:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1425:%.*]] = bytecast b8 [[TMP697]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1426:%.*]] = zext i8 [[CONV1425]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1427:%.*]] = icmp eq i32 [[CONV1424]], [[CONV1426]]
// SIMD-ONLY0-NEXT:    [[CONV1428:%.*]] = zext i1 [[CMP1427]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1429:%.*]] = trunc i32 [[CONV1428]] to i8
// SIMD-ONLY0-NEXT:    [[TMP698:%.*]] = bitcast i8 [[CONV1429]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP698]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP699:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1430:%.*]] = bytecast b8 [[TMP699]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1431:%.*]] = icmp ne i8 [[CONV1430]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1431]], label [[IF_THEN1432:%.*]], label [[IF_ELSE1433:%.*]]
// SIMD-ONLY0:       if.then1432:
// SIMD-ONLY0-NEXT:    [[TMP700:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP700]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1434:%.*]]
// SIMD-ONLY0:       if.else1433:
// SIMD-ONLY0-NEXT:    [[TMP701:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP701]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1434]]
// SIMD-ONLY0:       if.end1434:
// SIMD-ONLY0-NEXT:    [[TMP702:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP702]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP703:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1435:%.*]] = bytecast b8 [[TMP703]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1436:%.*]] = zext i8 [[CONV1435]] to i32
// SIMD-ONLY0-NEXT:    [[TMP704:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1437:%.*]] = bytecast b8 [[TMP704]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1438:%.*]] = zext i8 [[CONV1437]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1439:%.*]] = icmp sgt i32 [[CONV1436]], [[CONV1438]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1439]], label [[IF_THEN1441:%.*]], label [[IF_END1442:%.*]]
// SIMD-ONLY0:       if.then1441:
// SIMD-ONLY0-NEXT:    [[TMP705:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP705]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1442]]
// SIMD-ONLY0:       if.end1442:
// SIMD-ONLY0-NEXT:    [[TMP706:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP706]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP707:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1443:%.*]] = bytecast b8 [[TMP707]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1444:%.*]] = zext i8 [[CONV1443]] to i32
// SIMD-ONLY0-NEXT:    [[TMP708:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1445:%.*]] = bytecast b8 [[TMP708]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1446:%.*]] = zext i8 [[CONV1445]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1447:%.*]] = icmp sgt i32 [[CONV1444]], [[CONV1446]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1447]], label [[IF_THEN1449:%.*]], label [[IF_END1450:%.*]]
// SIMD-ONLY0:       if.then1449:
// SIMD-ONLY0-NEXT:    [[TMP709:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP709]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1450]]
// SIMD-ONLY0:       if.end1450:
// SIMD-ONLY0-NEXT:    [[TMP710:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP710]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP711:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1451:%.*]] = bytecast b8 [[TMP711]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1452:%.*]] = zext i8 [[CONV1451]] to i32
// SIMD-ONLY0-NEXT:    [[TMP712:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1453:%.*]] = bytecast b8 [[TMP712]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1454:%.*]] = zext i8 [[CONV1453]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1455:%.*]] = icmp slt i32 [[CONV1452]], [[CONV1454]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1455]], label [[IF_THEN1457:%.*]], label [[IF_END1458:%.*]]
// SIMD-ONLY0:       if.then1457:
// SIMD-ONLY0-NEXT:    [[TMP713:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP713]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1458]]
// SIMD-ONLY0:       if.end1458:
// SIMD-ONLY0-NEXT:    [[TMP714:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP714]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP715:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1459:%.*]] = bytecast b8 [[TMP715]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1460:%.*]] = zext i8 [[CONV1459]] to i32
// SIMD-ONLY0-NEXT:    [[TMP716:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1461:%.*]] = bytecast b8 [[TMP716]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1462:%.*]] = zext i8 [[CONV1461]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1463:%.*]] = icmp slt i32 [[CONV1460]], [[CONV1462]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1463]], label [[IF_THEN1465:%.*]], label [[IF_END1466:%.*]]
// SIMD-ONLY0:       if.then1465:
// SIMD-ONLY0-NEXT:    [[TMP717:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP717]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1466]]
// SIMD-ONLY0:       if.end1466:
// SIMD-ONLY0-NEXT:    [[TMP718:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP718]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP719:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1467:%.*]] = bytecast b8 [[TMP719]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1468:%.*]] = zext i8 [[CONV1467]] to i32
// SIMD-ONLY0-NEXT:    [[TMP720:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1469:%.*]] = bytecast b8 [[TMP720]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1470:%.*]] = zext i8 [[CONV1469]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1471:%.*]] = icmp eq i32 [[CONV1468]], [[CONV1470]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1471]], label [[IF_THEN1473:%.*]], label [[IF_END1474:%.*]]
// SIMD-ONLY0:       if.then1473:
// SIMD-ONLY0-NEXT:    [[TMP721:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP721]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1474]]
// SIMD-ONLY0:       if.end1474:
// SIMD-ONLY0-NEXT:    [[TMP722:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP722]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP723:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1475:%.*]] = bytecast b8 [[TMP723]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1476:%.*]] = zext i8 [[CONV1475]] to i32
// SIMD-ONLY0-NEXT:    [[TMP724:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1477:%.*]] = bytecast b8 [[TMP724]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1478:%.*]] = zext i8 [[CONV1477]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1479:%.*]] = icmp eq i32 [[CONV1476]], [[CONV1478]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1479]], label [[IF_THEN1481:%.*]], label [[IF_END1482:%.*]]
// SIMD-ONLY0:       if.then1481:
// SIMD-ONLY0-NEXT:    [[TMP725:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP725]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1482]]
// SIMD-ONLY0:       if.end1482:
// SIMD-ONLY0-NEXT:    [[TMP726:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1483:%.*]] = bytecast b8 [[TMP726]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1484:%.*]] = zext i8 [[CONV1483]] to i32
// SIMD-ONLY0-NEXT:    [[TMP727:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1485:%.*]] = bytecast b8 [[TMP727]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1486:%.*]] = zext i8 [[CONV1485]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1487:%.*]] = icmp sgt i32 [[CONV1484]], [[CONV1486]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1487]], label [[IF_THEN1489:%.*]], label [[IF_END1490:%.*]]
// SIMD-ONLY0:       if.then1489:
// SIMD-ONLY0-NEXT:    [[TMP728:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP728]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1490]]
// SIMD-ONLY0:       if.end1490:
// SIMD-ONLY0-NEXT:    [[TMP729:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP729]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP730:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1491:%.*]] = bytecast b8 [[TMP730]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1492:%.*]] = zext i8 [[CONV1491]] to i32
// SIMD-ONLY0-NEXT:    [[TMP731:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1493:%.*]] = bytecast b8 [[TMP731]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1494:%.*]] = zext i8 [[CONV1493]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1495:%.*]] = icmp sgt i32 [[CONV1492]], [[CONV1494]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1495]], label [[IF_THEN1497:%.*]], label [[IF_END1498:%.*]]
// SIMD-ONLY0:       if.then1497:
// SIMD-ONLY0-NEXT:    [[TMP732:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP732]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1498]]
// SIMD-ONLY0:       if.end1498:
// SIMD-ONLY0-NEXT:    [[TMP733:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP733]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP734:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1499:%.*]] = bytecast b8 [[TMP734]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1500:%.*]] = zext i8 [[CONV1499]] to i32
// SIMD-ONLY0-NEXT:    [[TMP735:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1501:%.*]] = bytecast b8 [[TMP735]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1502:%.*]] = zext i8 [[CONV1501]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1503:%.*]] = icmp slt i32 [[CONV1500]], [[CONV1502]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1503]], label [[IF_THEN1505:%.*]], label [[IF_END1506:%.*]]
// SIMD-ONLY0:       if.then1505:
// SIMD-ONLY0-NEXT:    [[TMP736:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP736]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1506]]
// SIMD-ONLY0:       if.end1506:
// SIMD-ONLY0-NEXT:    [[TMP737:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP737]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP738:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1507:%.*]] = bytecast b8 [[TMP738]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1508:%.*]] = zext i8 [[CONV1507]] to i32
// SIMD-ONLY0-NEXT:    [[TMP739:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1509:%.*]] = bytecast b8 [[TMP739]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1510:%.*]] = zext i8 [[CONV1509]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1511:%.*]] = icmp slt i32 [[CONV1508]], [[CONV1510]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1511]], label [[IF_THEN1513:%.*]], label [[IF_END1514:%.*]]
// SIMD-ONLY0:       if.then1513:
// SIMD-ONLY0-NEXT:    [[TMP740:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP740]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1514]]
// SIMD-ONLY0:       if.end1514:
// SIMD-ONLY0-NEXT:    [[TMP741:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP741]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP742:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1515:%.*]] = bytecast b8 [[TMP742]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1516:%.*]] = zext i8 [[CONV1515]] to i32
// SIMD-ONLY0-NEXT:    [[TMP743:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1517:%.*]] = bytecast b8 [[TMP743]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1518:%.*]] = zext i8 [[CONV1517]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1519:%.*]] = icmp eq i32 [[CONV1516]], [[CONV1518]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1519]], label [[IF_THEN1521:%.*]], label [[IF_END1522:%.*]]
// SIMD-ONLY0:       if.then1521:
// SIMD-ONLY0-NEXT:    [[TMP744:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP744]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1522]]
// SIMD-ONLY0:       if.end1522:
// SIMD-ONLY0-NEXT:    [[TMP745:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP745]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP746:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1523:%.*]] = bytecast b8 [[TMP746]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1524:%.*]] = zext i8 [[CONV1523]] to i32
// SIMD-ONLY0-NEXT:    [[TMP747:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1525:%.*]] = bytecast b8 [[TMP747]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1526:%.*]] = zext i8 [[CONV1525]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1527:%.*]] = icmp eq i32 [[CONV1524]], [[CONV1526]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1527]], label [[IF_THEN1529:%.*]], label [[IF_END1530:%.*]]
// SIMD-ONLY0:       if.then1529:
// SIMD-ONLY0-NEXT:    [[TMP748:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP748]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1530]]
// SIMD-ONLY0:       if.end1530:
// SIMD-ONLY0-NEXT:    [[TMP749:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP749]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP750:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1531:%.*]] = bytecast b8 [[TMP750]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1532:%.*]] = zext i8 [[CONV1531]] to i32
// SIMD-ONLY0-NEXT:    [[TMP751:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1533:%.*]] = bytecast b8 [[TMP751]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1534:%.*]] = zext i8 [[CONV1533]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1535:%.*]] = icmp eq i32 [[CONV1532]], [[CONV1534]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1535]], label [[IF_THEN1537:%.*]], label [[IF_ELSE1538:%.*]]
// SIMD-ONLY0:       if.then1537:
// SIMD-ONLY0-NEXT:    [[TMP752:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP752]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1539:%.*]]
// SIMD-ONLY0:       if.else1538:
// SIMD-ONLY0-NEXT:    [[TMP753:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP753]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1539]]
// SIMD-ONLY0:       if.end1539:
// SIMD-ONLY0-NEXT:    [[TMP754:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1540:%.*]] = bytecast b8 [[TMP754]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1541:%.*]] = zext i8 [[CONV1540]] to i32
// SIMD-ONLY0-NEXT:    [[TMP755:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1542:%.*]] = bytecast b8 [[TMP755]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1543:%.*]] = zext i8 [[CONV1542]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1544:%.*]] = icmp eq i32 [[CONV1541]], [[CONV1543]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1544]], label [[IF_THEN1546:%.*]], label [[IF_ELSE1547:%.*]]
// SIMD-ONLY0:       if.then1546:
// SIMD-ONLY0-NEXT:    [[TMP756:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP756]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1548:%.*]]
// SIMD-ONLY0:       if.else1547:
// SIMD-ONLY0-NEXT:    [[TMP757:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP757]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1548]]
// SIMD-ONLY0:       if.end1548:
// SIMD-ONLY0-NEXT:    [[TMP758:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1549:%.*]] = bytecast b8 [[TMP758]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1550:%.*]] = zext i8 [[CONV1549]] to i32
// SIMD-ONLY0-NEXT:    [[TMP759:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1551:%.*]] = bytecast b8 [[TMP759]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1552:%.*]] = zext i8 [[CONV1551]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1553:%.*]] = icmp eq i32 [[CONV1550]], [[CONV1552]]
// SIMD-ONLY0-NEXT:    [[CONV1554:%.*]] = zext i1 [[CMP1553]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1555:%.*]] = trunc i32 [[CONV1554]] to i8
// SIMD-ONLY0-NEXT:    [[TMP760:%.*]] = bitcast i8 [[CONV1555]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP760]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP761:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1556:%.*]] = bytecast b8 [[TMP761]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1557:%.*]] = icmp ne i8 [[CONV1556]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1557]], label [[IF_THEN1558:%.*]], label [[IF_END1559:%.*]]
// SIMD-ONLY0:       if.then1558:
// SIMD-ONLY0-NEXT:    [[TMP762:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP762]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1559]]
// SIMD-ONLY0:       if.end1559:
// SIMD-ONLY0-NEXT:    [[TMP763:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1560:%.*]] = bytecast b8 [[TMP763]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1561:%.*]] = zext i8 [[CONV1560]] to i32
// SIMD-ONLY0-NEXT:    [[TMP764:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1562:%.*]] = bytecast b8 [[TMP764]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1563:%.*]] = zext i8 [[CONV1562]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1564:%.*]] = icmp eq i32 [[CONV1561]], [[CONV1563]]
// SIMD-ONLY0-NEXT:    [[CONV1565:%.*]] = zext i1 [[CMP1564]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1566:%.*]] = trunc i32 [[CONV1565]] to i8
// SIMD-ONLY0-NEXT:    [[TMP765:%.*]] = bitcast i8 [[CONV1566]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP765]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP766:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1567:%.*]] = bytecast b8 [[TMP766]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1568:%.*]] = icmp ne i8 [[CONV1567]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1568]], label [[IF_THEN1569:%.*]], label [[IF_END1570:%.*]]
// SIMD-ONLY0:       if.then1569:
// SIMD-ONLY0-NEXT:    [[TMP767:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP767]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1570]]
// SIMD-ONLY0:       if.end1570:
// SIMD-ONLY0-NEXT:    [[TMP768:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1571:%.*]] = bytecast b8 [[TMP768]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1572:%.*]] = zext i8 [[CONV1571]] to i32
// SIMD-ONLY0-NEXT:    [[TMP769:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1573:%.*]] = bytecast b8 [[TMP769]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1574:%.*]] = zext i8 [[CONV1573]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1575:%.*]] = icmp eq i32 [[CONV1572]], [[CONV1574]]
// SIMD-ONLY0-NEXT:    [[CONV1576:%.*]] = zext i1 [[CMP1575]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1577:%.*]] = trunc i32 [[CONV1576]] to i8
// SIMD-ONLY0-NEXT:    [[TMP770:%.*]] = bitcast i8 [[CONV1577]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP770]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP771:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1578:%.*]] = bytecast b8 [[TMP771]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1579:%.*]] = icmp ne i8 [[CONV1578]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1579]], label [[IF_THEN1580:%.*]], label [[IF_ELSE1581:%.*]]
// SIMD-ONLY0:       if.then1580:
// SIMD-ONLY0-NEXT:    [[TMP772:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP772]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1582:%.*]]
// SIMD-ONLY0:       if.else1581:
// SIMD-ONLY0-NEXT:    [[TMP773:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP773]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1582]]
// SIMD-ONLY0:       if.end1582:
// SIMD-ONLY0-NEXT:    [[TMP774:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1583:%.*]] = bytecast b8 [[TMP774]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1584:%.*]] = zext i8 [[CONV1583]] to i32
// SIMD-ONLY0-NEXT:    [[TMP775:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1585:%.*]] = bytecast b8 [[TMP775]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1586:%.*]] = zext i8 [[CONV1585]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1587:%.*]] = icmp eq i32 [[CONV1584]], [[CONV1586]]
// SIMD-ONLY0-NEXT:    [[CONV1588:%.*]] = zext i1 [[CMP1587]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1589:%.*]] = trunc i32 [[CONV1588]] to i8
// SIMD-ONLY0-NEXT:    [[TMP776:%.*]] = bitcast i8 [[CONV1589]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP776]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP777:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1590:%.*]] = bytecast b8 [[TMP777]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1591:%.*]] = icmp ne i8 [[CONV1590]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1591]], label [[IF_THEN1592:%.*]], label [[IF_ELSE1593:%.*]]
// SIMD-ONLY0:       if.then1592:
// SIMD-ONLY0-NEXT:    [[TMP778:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP778]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1594:%.*]]
// SIMD-ONLY0:       if.else1593:
// SIMD-ONLY0-NEXT:    [[TMP779:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP779]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1594]]
// SIMD-ONLY0:       if.end1594:
// SIMD-ONLY0-NEXT:    [[TMP780:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP780]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP781:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1595:%.*]] = bytecast b8 [[TMP781]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1596:%.*]] = zext i8 [[CONV1595]] to i32
// SIMD-ONLY0-NEXT:    [[TMP782:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1597:%.*]] = bytecast b8 [[TMP782]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1598:%.*]] = zext i8 [[CONV1597]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1599:%.*]] = icmp sgt i32 [[CONV1596]], [[CONV1598]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1599]], label [[IF_THEN1601:%.*]], label [[IF_END1602:%.*]]
// SIMD-ONLY0:       if.then1601:
// SIMD-ONLY0-NEXT:    [[TMP783:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP783]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1602]]
// SIMD-ONLY0:       if.end1602:
// SIMD-ONLY0-NEXT:    [[TMP784:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP784]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP785:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1603:%.*]] = bytecast b8 [[TMP785]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1604:%.*]] = zext i8 [[CONV1603]] to i32
// SIMD-ONLY0-NEXT:    [[TMP786:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1605:%.*]] = bytecast b8 [[TMP786]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1606:%.*]] = zext i8 [[CONV1605]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1607:%.*]] = icmp sgt i32 [[CONV1604]], [[CONV1606]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1607]], label [[IF_THEN1609:%.*]], label [[IF_END1610:%.*]]
// SIMD-ONLY0:       if.then1609:
// SIMD-ONLY0-NEXT:    [[TMP787:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP787]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1610]]
// SIMD-ONLY0:       if.end1610:
// SIMD-ONLY0-NEXT:    [[TMP788:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP788]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP789:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1611:%.*]] = bytecast b8 [[TMP789]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1612:%.*]] = zext i8 [[CONV1611]] to i32
// SIMD-ONLY0-NEXT:    [[TMP790:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1613:%.*]] = bytecast b8 [[TMP790]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1614:%.*]] = zext i8 [[CONV1613]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1615:%.*]] = icmp slt i32 [[CONV1612]], [[CONV1614]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1615]], label [[IF_THEN1617:%.*]], label [[IF_END1618:%.*]]
// SIMD-ONLY0:       if.then1617:
// SIMD-ONLY0-NEXT:    [[TMP791:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP791]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1618]]
// SIMD-ONLY0:       if.end1618:
// SIMD-ONLY0-NEXT:    [[TMP792:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP792]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP793:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1619:%.*]] = bytecast b8 [[TMP793]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1620:%.*]] = zext i8 [[CONV1619]] to i32
// SIMD-ONLY0-NEXT:    [[TMP794:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1621:%.*]] = bytecast b8 [[TMP794]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1622:%.*]] = zext i8 [[CONV1621]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1623:%.*]] = icmp slt i32 [[CONV1620]], [[CONV1622]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1623]], label [[IF_THEN1625:%.*]], label [[IF_END1626:%.*]]
// SIMD-ONLY0:       if.then1625:
// SIMD-ONLY0-NEXT:    [[TMP795:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP795]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1626]]
// SIMD-ONLY0:       if.end1626:
// SIMD-ONLY0-NEXT:    [[TMP796:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP796]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP797:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1627:%.*]] = bytecast b8 [[TMP797]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1628:%.*]] = zext i8 [[CONV1627]] to i32
// SIMD-ONLY0-NEXT:    [[TMP798:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1629:%.*]] = bytecast b8 [[TMP798]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1630:%.*]] = zext i8 [[CONV1629]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1631:%.*]] = icmp eq i32 [[CONV1628]], [[CONV1630]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1631]], label [[IF_THEN1633:%.*]], label [[IF_END1634:%.*]]
// SIMD-ONLY0:       if.then1633:
// SIMD-ONLY0-NEXT:    [[TMP799:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP799]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1634]]
// SIMD-ONLY0:       if.end1634:
// SIMD-ONLY0-NEXT:    [[TMP800:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP800]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP801:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1635:%.*]] = bytecast b8 [[TMP801]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1636:%.*]] = zext i8 [[CONV1635]] to i32
// SIMD-ONLY0-NEXT:    [[TMP802:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1637:%.*]] = bytecast b8 [[TMP802]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1638:%.*]] = zext i8 [[CONV1637]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1639:%.*]] = icmp eq i32 [[CONV1636]], [[CONV1638]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1639]], label [[IF_THEN1641:%.*]], label [[IF_END1642:%.*]]
// SIMD-ONLY0:       if.then1641:
// SIMD-ONLY0-NEXT:    [[TMP803:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP803]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1642]]
// SIMD-ONLY0:       if.end1642:
// SIMD-ONLY0-NEXT:    [[TMP804:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1643:%.*]] = bytecast b8 [[TMP804]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1644:%.*]] = zext i8 [[CONV1643]] to i32
// SIMD-ONLY0-NEXT:    [[TMP805:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1645:%.*]] = bytecast b8 [[TMP805]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1646:%.*]] = zext i8 [[CONV1645]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1647:%.*]] = icmp sgt i32 [[CONV1644]], [[CONV1646]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1647]], label [[IF_THEN1649:%.*]], label [[IF_END1650:%.*]]
// SIMD-ONLY0:       if.then1649:
// SIMD-ONLY0-NEXT:    [[TMP806:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP806]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1650]]
// SIMD-ONLY0:       if.end1650:
// SIMD-ONLY0-NEXT:    [[TMP807:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP807]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP808:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1651:%.*]] = bytecast b8 [[TMP808]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1652:%.*]] = zext i8 [[CONV1651]] to i32
// SIMD-ONLY0-NEXT:    [[TMP809:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1653:%.*]] = bytecast b8 [[TMP809]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1654:%.*]] = zext i8 [[CONV1653]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1655:%.*]] = icmp sgt i32 [[CONV1652]], [[CONV1654]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1655]], label [[IF_THEN1657:%.*]], label [[IF_END1658:%.*]]
// SIMD-ONLY0:       if.then1657:
// SIMD-ONLY0-NEXT:    [[TMP810:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP810]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1658]]
// SIMD-ONLY0:       if.end1658:
// SIMD-ONLY0-NEXT:    [[TMP811:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP811]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP812:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1659:%.*]] = bytecast b8 [[TMP812]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1660:%.*]] = zext i8 [[CONV1659]] to i32
// SIMD-ONLY0-NEXT:    [[TMP813:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1661:%.*]] = bytecast b8 [[TMP813]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1662:%.*]] = zext i8 [[CONV1661]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1663:%.*]] = icmp slt i32 [[CONV1660]], [[CONV1662]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1663]], label [[IF_THEN1665:%.*]], label [[IF_END1666:%.*]]
// SIMD-ONLY0:       if.then1665:
// SIMD-ONLY0-NEXT:    [[TMP814:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP814]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1666]]
// SIMD-ONLY0:       if.end1666:
// SIMD-ONLY0-NEXT:    [[TMP815:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP815]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP816:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1667:%.*]] = bytecast b8 [[TMP816]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1668:%.*]] = zext i8 [[CONV1667]] to i32
// SIMD-ONLY0-NEXT:    [[TMP817:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1669:%.*]] = bytecast b8 [[TMP817]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1670:%.*]] = zext i8 [[CONV1669]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1671:%.*]] = icmp slt i32 [[CONV1668]], [[CONV1670]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1671]], label [[IF_THEN1673:%.*]], label [[IF_END1674:%.*]]
// SIMD-ONLY0:       if.then1673:
// SIMD-ONLY0-NEXT:    [[TMP818:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP818]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1674]]
// SIMD-ONLY0:       if.end1674:
// SIMD-ONLY0-NEXT:    [[TMP819:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP819]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP820:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1675:%.*]] = bytecast b8 [[TMP820]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1676:%.*]] = zext i8 [[CONV1675]] to i32
// SIMD-ONLY0-NEXT:    [[TMP821:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1677:%.*]] = bytecast b8 [[TMP821]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1678:%.*]] = zext i8 [[CONV1677]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1679:%.*]] = icmp eq i32 [[CONV1676]], [[CONV1678]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1679]], label [[IF_THEN1681:%.*]], label [[IF_END1682:%.*]]
// SIMD-ONLY0:       if.then1681:
// SIMD-ONLY0-NEXT:    [[TMP822:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP822]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1682]]
// SIMD-ONLY0:       if.end1682:
// SIMD-ONLY0-NEXT:    [[TMP823:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP823]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP824:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1683:%.*]] = bytecast b8 [[TMP824]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1684:%.*]] = zext i8 [[CONV1683]] to i32
// SIMD-ONLY0-NEXT:    [[TMP825:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1685:%.*]] = bytecast b8 [[TMP825]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1686:%.*]] = zext i8 [[CONV1685]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1687:%.*]] = icmp eq i32 [[CONV1684]], [[CONV1686]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1687]], label [[IF_THEN1689:%.*]], label [[IF_END1690:%.*]]
// SIMD-ONLY0:       if.then1689:
// SIMD-ONLY0-NEXT:    [[TMP826:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP826]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1690]]
// SIMD-ONLY0:       if.end1690:
// SIMD-ONLY0-NEXT:    [[TMP827:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP827]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP828:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1691:%.*]] = bytecast b8 [[TMP828]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1692:%.*]] = zext i8 [[CONV1691]] to i32
// SIMD-ONLY0-NEXT:    [[TMP829:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1693:%.*]] = bytecast b8 [[TMP829]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1694:%.*]] = zext i8 [[CONV1693]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1695:%.*]] = icmp eq i32 [[CONV1692]], [[CONV1694]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1695]], label [[IF_THEN1697:%.*]], label [[IF_ELSE1698:%.*]]
// SIMD-ONLY0:       if.then1697:
// SIMD-ONLY0-NEXT:    [[TMP830:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP830]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1699:%.*]]
// SIMD-ONLY0:       if.else1698:
// SIMD-ONLY0-NEXT:    [[TMP831:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP831]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1699]]
// SIMD-ONLY0:       if.end1699:
// SIMD-ONLY0-NEXT:    [[TMP832:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1700:%.*]] = bytecast b8 [[TMP832]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1701:%.*]] = zext i8 [[CONV1700]] to i32
// SIMD-ONLY0-NEXT:    [[TMP833:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1702:%.*]] = bytecast b8 [[TMP833]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1703:%.*]] = zext i8 [[CONV1702]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1704:%.*]] = icmp eq i32 [[CONV1701]], [[CONV1703]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1704]], label [[IF_THEN1706:%.*]], label [[IF_ELSE1707:%.*]]
// SIMD-ONLY0:       if.then1706:
// SIMD-ONLY0-NEXT:    [[TMP834:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP834]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1708:%.*]]
// SIMD-ONLY0:       if.else1707:
// SIMD-ONLY0-NEXT:    [[TMP835:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP835]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1708]]
// SIMD-ONLY0:       if.end1708:
// SIMD-ONLY0-NEXT:    [[TMP836:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1709:%.*]] = bytecast b8 [[TMP836]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1710:%.*]] = zext i8 [[CONV1709]] to i32
// SIMD-ONLY0-NEXT:    [[TMP837:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1711:%.*]] = bytecast b8 [[TMP837]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1712:%.*]] = zext i8 [[CONV1711]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1713:%.*]] = icmp eq i32 [[CONV1710]], [[CONV1712]]
// SIMD-ONLY0-NEXT:    [[CONV1714:%.*]] = zext i1 [[CMP1713]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1715:%.*]] = trunc i32 [[CONV1714]] to i8
// SIMD-ONLY0-NEXT:    [[TMP838:%.*]] = bitcast i8 [[CONV1715]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP838]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP839:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1716:%.*]] = bytecast b8 [[TMP839]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1717:%.*]] = icmp ne i8 [[CONV1716]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1717]], label [[IF_THEN1718:%.*]], label [[IF_END1719:%.*]]
// SIMD-ONLY0:       if.then1718:
// SIMD-ONLY0-NEXT:    [[TMP840:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP840]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1719]]
// SIMD-ONLY0:       if.end1719:
// SIMD-ONLY0-NEXT:    [[TMP841:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1720:%.*]] = bytecast b8 [[TMP841]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1721:%.*]] = zext i8 [[CONV1720]] to i32
// SIMD-ONLY0-NEXT:    [[TMP842:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1722:%.*]] = bytecast b8 [[TMP842]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1723:%.*]] = zext i8 [[CONV1722]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1724:%.*]] = icmp eq i32 [[CONV1721]], [[CONV1723]]
// SIMD-ONLY0-NEXT:    [[CONV1725:%.*]] = zext i1 [[CMP1724]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1726:%.*]] = trunc i32 [[CONV1725]] to i8
// SIMD-ONLY0-NEXT:    [[TMP843:%.*]] = bitcast i8 [[CONV1726]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP843]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP844:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1727:%.*]] = bytecast b8 [[TMP844]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1728:%.*]] = icmp ne i8 [[CONV1727]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1728]], label [[IF_THEN1729:%.*]], label [[IF_END1730:%.*]]
// SIMD-ONLY0:       if.then1729:
// SIMD-ONLY0-NEXT:    [[TMP845:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP845]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1730]]
// SIMD-ONLY0:       if.end1730:
// SIMD-ONLY0-NEXT:    [[TMP846:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1731:%.*]] = bytecast b8 [[TMP846]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1732:%.*]] = zext i8 [[CONV1731]] to i32
// SIMD-ONLY0-NEXT:    [[TMP847:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1733:%.*]] = bytecast b8 [[TMP847]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1734:%.*]] = zext i8 [[CONV1733]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1735:%.*]] = icmp eq i32 [[CONV1732]], [[CONV1734]]
// SIMD-ONLY0-NEXT:    [[CONV1736:%.*]] = zext i1 [[CMP1735]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1737:%.*]] = trunc i32 [[CONV1736]] to i8
// SIMD-ONLY0-NEXT:    [[TMP848:%.*]] = bitcast i8 [[CONV1737]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP848]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP849:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1738:%.*]] = bytecast b8 [[TMP849]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1739:%.*]] = icmp ne i8 [[CONV1738]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1739]], label [[IF_THEN1740:%.*]], label [[IF_ELSE1741:%.*]]
// SIMD-ONLY0:       if.then1740:
// SIMD-ONLY0-NEXT:    [[TMP850:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP850]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1742:%.*]]
// SIMD-ONLY0:       if.else1741:
// SIMD-ONLY0-NEXT:    [[TMP851:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP851]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1742]]
// SIMD-ONLY0:       if.end1742:
// SIMD-ONLY0-NEXT:    [[TMP852:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1743:%.*]] = bytecast b8 [[TMP852]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1744:%.*]] = zext i8 [[CONV1743]] to i32
// SIMD-ONLY0-NEXT:    [[TMP853:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1745:%.*]] = bytecast b8 [[TMP853]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1746:%.*]] = zext i8 [[CONV1745]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1747:%.*]] = icmp eq i32 [[CONV1744]], [[CONV1746]]
// SIMD-ONLY0-NEXT:    [[CONV1748:%.*]] = zext i1 [[CMP1747]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1749:%.*]] = trunc i32 [[CONV1748]] to i8
// SIMD-ONLY0-NEXT:    [[TMP854:%.*]] = bitcast i8 [[CONV1749]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP854]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP855:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1750:%.*]] = bytecast b8 [[TMP855]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1751:%.*]] = icmp ne i8 [[CONV1750]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1751]], label [[IF_THEN1752:%.*]], label [[IF_ELSE1753:%.*]]
// SIMD-ONLY0:       if.then1752:
// SIMD-ONLY0-NEXT:    [[TMP856:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP856]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1754:%.*]]
// SIMD-ONLY0:       if.else1753:
// SIMD-ONLY0-NEXT:    [[TMP857:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP857]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1754]]
// SIMD-ONLY0:       if.end1754:
// SIMD-ONLY0-NEXT:    [[TMP858:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP858]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP859:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1755:%.*]] = bytecast b8 [[TMP859]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1756:%.*]] = zext i8 [[CONV1755]] to i32
// SIMD-ONLY0-NEXT:    [[TMP860:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1757:%.*]] = bytecast b8 [[TMP860]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1758:%.*]] = zext i8 [[CONV1757]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1759:%.*]] = icmp sgt i32 [[CONV1756]], [[CONV1758]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1759]], label [[IF_THEN1761:%.*]], label [[IF_END1762:%.*]]
// SIMD-ONLY0:       if.then1761:
// SIMD-ONLY0-NEXT:    [[TMP861:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP861]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1762]]
// SIMD-ONLY0:       if.end1762:
// SIMD-ONLY0-NEXT:    [[TMP862:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP862]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP863:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1763:%.*]] = bytecast b8 [[TMP863]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1764:%.*]] = zext i8 [[CONV1763]] to i32
// SIMD-ONLY0-NEXT:    [[TMP864:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1765:%.*]] = bytecast b8 [[TMP864]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1766:%.*]] = zext i8 [[CONV1765]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1767:%.*]] = icmp sgt i32 [[CONV1764]], [[CONV1766]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1767]], label [[IF_THEN1769:%.*]], label [[IF_END1770:%.*]]
// SIMD-ONLY0:       if.then1769:
// SIMD-ONLY0-NEXT:    [[TMP865:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP865]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1770]]
// SIMD-ONLY0:       if.end1770:
// SIMD-ONLY0-NEXT:    [[TMP866:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP866]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP867:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1771:%.*]] = bytecast b8 [[TMP867]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1772:%.*]] = zext i8 [[CONV1771]] to i32
// SIMD-ONLY0-NEXT:    [[TMP868:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1773:%.*]] = bytecast b8 [[TMP868]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1774:%.*]] = zext i8 [[CONV1773]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1775:%.*]] = icmp slt i32 [[CONV1772]], [[CONV1774]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1775]], label [[IF_THEN1777:%.*]], label [[IF_END1778:%.*]]
// SIMD-ONLY0:       if.then1777:
// SIMD-ONLY0-NEXT:    [[TMP869:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP869]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1778]]
// SIMD-ONLY0:       if.end1778:
// SIMD-ONLY0-NEXT:    [[TMP870:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP870]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP871:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1779:%.*]] = bytecast b8 [[TMP871]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1780:%.*]] = zext i8 [[CONV1779]] to i32
// SIMD-ONLY0-NEXT:    [[TMP872:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1781:%.*]] = bytecast b8 [[TMP872]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1782:%.*]] = zext i8 [[CONV1781]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1783:%.*]] = icmp slt i32 [[CONV1780]], [[CONV1782]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1783]], label [[IF_THEN1785:%.*]], label [[IF_END1786:%.*]]
// SIMD-ONLY0:       if.then1785:
// SIMD-ONLY0-NEXT:    [[TMP873:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP873]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1786]]
// SIMD-ONLY0:       if.end1786:
// SIMD-ONLY0-NEXT:    [[TMP874:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP874]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP875:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1787:%.*]] = bytecast b8 [[TMP875]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1788:%.*]] = zext i8 [[CONV1787]] to i32
// SIMD-ONLY0-NEXT:    [[TMP876:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1789:%.*]] = bytecast b8 [[TMP876]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1790:%.*]] = zext i8 [[CONV1789]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1791:%.*]] = icmp eq i32 [[CONV1788]], [[CONV1790]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1791]], label [[IF_THEN1793:%.*]], label [[IF_END1794:%.*]]
// SIMD-ONLY0:       if.then1793:
// SIMD-ONLY0-NEXT:    [[TMP877:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP877]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1794]]
// SIMD-ONLY0:       if.end1794:
// SIMD-ONLY0-NEXT:    [[TMP878:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP878]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP879:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1795:%.*]] = bytecast b8 [[TMP879]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1796:%.*]] = zext i8 [[CONV1795]] to i32
// SIMD-ONLY0-NEXT:    [[TMP880:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1797:%.*]] = bytecast b8 [[TMP880]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1798:%.*]] = zext i8 [[CONV1797]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1799:%.*]] = icmp eq i32 [[CONV1796]], [[CONV1798]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1799]], label [[IF_THEN1801:%.*]], label [[IF_END1802:%.*]]
// SIMD-ONLY0:       if.then1801:
// SIMD-ONLY0-NEXT:    [[TMP881:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP881]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1802]]
// SIMD-ONLY0:       if.end1802:
// SIMD-ONLY0-NEXT:    [[TMP882:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1803:%.*]] = bytecast b8 [[TMP882]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1804:%.*]] = zext i8 [[CONV1803]] to i32
// SIMD-ONLY0-NEXT:    [[TMP883:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1805:%.*]] = bytecast b8 [[TMP883]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1806:%.*]] = zext i8 [[CONV1805]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1807:%.*]] = icmp sgt i32 [[CONV1804]], [[CONV1806]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1807]], label [[IF_THEN1809:%.*]], label [[IF_END1810:%.*]]
// SIMD-ONLY0:       if.then1809:
// SIMD-ONLY0-NEXT:    [[TMP884:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP884]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1810]]
// SIMD-ONLY0:       if.end1810:
// SIMD-ONLY0-NEXT:    [[TMP885:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP885]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP886:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1811:%.*]] = bytecast b8 [[TMP886]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1812:%.*]] = zext i8 [[CONV1811]] to i32
// SIMD-ONLY0-NEXT:    [[TMP887:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1813:%.*]] = bytecast b8 [[TMP887]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1814:%.*]] = zext i8 [[CONV1813]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1815:%.*]] = icmp sgt i32 [[CONV1812]], [[CONV1814]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1815]], label [[IF_THEN1817:%.*]], label [[IF_END1818:%.*]]
// SIMD-ONLY0:       if.then1817:
// SIMD-ONLY0-NEXT:    [[TMP888:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP888]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1818]]
// SIMD-ONLY0:       if.end1818:
// SIMD-ONLY0-NEXT:    [[TMP889:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP889]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP890:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1819:%.*]] = bytecast b8 [[TMP890]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1820:%.*]] = zext i8 [[CONV1819]] to i32
// SIMD-ONLY0-NEXT:    [[TMP891:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1821:%.*]] = bytecast b8 [[TMP891]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1822:%.*]] = zext i8 [[CONV1821]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1823:%.*]] = icmp slt i32 [[CONV1820]], [[CONV1822]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1823]], label [[IF_THEN1825:%.*]], label [[IF_END1826:%.*]]
// SIMD-ONLY0:       if.then1825:
// SIMD-ONLY0-NEXT:    [[TMP892:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP892]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1826]]
// SIMD-ONLY0:       if.end1826:
// SIMD-ONLY0-NEXT:    [[TMP893:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP893]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP894:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1827:%.*]] = bytecast b8 [[TMP894]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1828:%.*]] = zext i8 [[CONV1827]] to i32
// SIMD-ONLY0-NEXT:    [[TMP895:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1829:%.*]] = bytecast b8 [[TMP895]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1830:%.*]] = zext i8 [[CONV1829]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1831:%.*]] = icmp slt i32 [[CONV1828]], [[CONV1830]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1831]], label [[IF_THEN1833:%.*]], label [[IF_END1834:%.*]]
// SIMD-ONLY0:       if.then1833:
// SIMD-ONLY0-NEXT:    [[TMP896:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP896]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1834]]
// SIMD-ONLY0:       if.end1834:
// SIMD-ONLY0-NEXT:    [[TMP897:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP897]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP898:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1835:%.*]] = bytecast b8 [[TMP898]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1836:%.*]] = zext i8 [[CONV1835]] to i32
// SIMD-ONLY0-NEXT:    [[TMP899:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1837:%.*]] = bytecast b8 [[TMP899]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1838:%.*]] = zext i8 [[CONV1837]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1839:%.*]] = icmp eq i32 [[CONV1836]], [[CONV1838]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1839]], label [[IF_THEN1841:%.*]], label [[IF_END1842:%.*]]
// SIMD-ONLY0:       if.then1841:
// SIMD-ONLY0-NEXT:    [[TMP900:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP900]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1842]]
// SIMD-ONLY0:       if.end1842:
// SIMD-ONLY0-NEXT:    [[TMP901:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP901]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP902:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1843:%.*]] = bytecast b8 [[TMP902]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1844:%.*]] = zext i8 [[CONV1843]] to i32
// SIMD-ONLY0-NEXT:    [[TMP903:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1845:%.*]] = bytecast b8 [[TMP903]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1846:%.*]] = zext i8 [[CONV1845]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1847:%.*]] = icmp eq i32 [[CONV1844]], [[CONV1846]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1847]], label [[IF_THEN1849:%.*]], label [[IF_END1850:%.*]]
// SIMD-ONLY0:       if.then1849:
// SIMD-ONLY0-NEXT:    [[TMP904:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP904]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1850]]
// SIMD-ONLY0:       if.end1850:
// SIMD-ONLY0-NEXT:    [[TMP905:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP905]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP906:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1851:%.*]] = bytecast b8 [[TMP906]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1852:%.*]] = zext i8 [[CONV1851]] to i32
// SIMD-ONLY0-NEXT:    [[TMP907:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1853:%.*]] = bytecast b8 [[TMP907]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1854:%.*]] = zext i8 [[CONV1853]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1855:%.*]] = icmp eq i32 [[CONV1852]], [[CONV1854]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1855]], label [[IF_THEN1857:%.*]], label [[IF_ELSE1858:%.*]]
// SIMD-ONLY0:       if.then1857:
// SIMD-ONLY0-NEXT:    [[TMP908:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP908]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1859:%.*]]
// SIMD-ONLY0:       if.else1858:
// SIMD-ONLY0-NEXT:    [[TMP909:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP909]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1859]]
// SIMD-ONLY0:       if.end1859:
// SIMD-ONLY0-NEXT:    [[TMP910:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1860:%.*]] = bytecast b8 [[TMP910]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1861:%.*]] = zext i8 [[CONV1860]] to i32
// SIMD-ONLY0-NEXT:    [[TMP911:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1862:%.*]] = bytecast b8 [[TMP911]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1863:%.*]] = zext i8 [[CONV1862]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1864:%.*]] = icmp eq i32 [[CONV1861]], [[CONV1863]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1864]], label [[IF_THEN1866:%.*]], label [[IF_ELSE1867:%.*]]
// SIMD-ONLY0:       if.then1866:
// SIMD-ONLY0-NEXT:    [[TMP912:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP912]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1868:%.*]]
// SIMD-ONLY0:       if.else1867:
// SIMD-ONLY0-NEXT:    [[TMP913:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP913]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1868]]
// SIMD-ONLY0:       if.end1868:
// SIMD-ONLY0-NEXT:    [[TMP914:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1869:%.*]] = bytecast b8 [[TMP914]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1870:%.*]] = zext i8 [[CONV1869]] to i32
// SIMD-ONLY0-NEXT:    [[TMP915:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1871:%.*]] = bytecast b8 [[TMP915]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1872:%.*]] = zext i8 [[CONV1871]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1873:%.*]] = icmp eq i32 [[CONV1870]], [[CONV1872]]
// SIMD-ONLY0-NEXT:    [[CONV1874:%.*]] = zext i1 [[CMP1873]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1875:%.*]] = trunc i32 [[CONV1874]] to i8
// SIMD-ONLY0-NEXT:    [[TMP916:%.*]] = bitcast i8 [[CONV1875]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP916]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP917:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1876:%.*]] = bytecast b8 [[TMP917]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1877:%.*]] = icmp ne i8 [[CONV1876]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1877]], label [[IF_THEN1878:%.*]], label [[IF_END1879:%.*]]
// SIMD-ONLY0:       if.then1878:
// SIMD-ONLY0-NEXT:    [[TMP918:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP918]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1879]]
// SIMD-ONLY0:       if.end1879:
// SIMD-ONLY0-NEXT:    [[TMP919:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1880:%.*]] = bytecast b8 [[TMP919]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1881:%.*]] = zext i8 [[CONV1880]] to i32
// SIMD-ONLY0-NEXT:    [[TMP920:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1882:%.*]] = bytecast b8 [[TMP920]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1883:%.*]] = zext i8 [[CONV1882]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1884:%.*]] = icmp eq i32 [[CONV1881]], [[CONV1883]]
// SIMD-ONLY0-NEXT:    [[CONV1885:%.*]] = zext i1 [[CMP1884]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1886:%.*]] = trunc i32 [[CONV1885]] to i8
// SIMD-ONLY0-NEXT:    [[TMP921:%.*]] = bitcast i8 [[CONV1886]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP921]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP922:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1887:%.*]] = bytecast b8 [[TMP922]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1888:%.*]] = icmp ne i8 [[CONV1887]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1888]], label [[IF_THEN1889:%.*]], label [[IF_END1890:%.*]]
// SIMD-ONLY0:       if.then1889:
// SIMD-ONLY0-NEXT:    [[TMP923:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP923]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1890]]
// SIMD-ONLY0:       if.end1890:
// SIMD-ONLY0-NEXT:    [[TMP924:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1891:%.*]] = bytecast b8 [[TMP924]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1892:%.*]] = zext i8 [[CONV1891]] to i32
// SIMD-ONLY0-NEXT:    [[TMP925:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1893:%.*]] = bytecast b8 [[TMP925]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1894:%.*]] = zext i8 [[CONV1893]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1895:%.*]] = icmp eq i32 [[CONV1892]], [[CONV1894]]
// SIMD-ONLY0-NEXT:    [[CONV1896:%.*]] = zext i1 [[CMP1895]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1897:%.*]] = trunc i32 [[CONV1896]] to i8
// SIMD-ONLY0-NEXT:    [[TMP926:%.*]] = bitcast i8 [[CONV1897]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP926]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP927:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1898:%.*]] = bytecast b8 [[TMP927]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1899:%.*]] = icmp ne i8 [[CONV1898]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1899]], label [[IF_THEN1900:%.*]], label [[IF_ELSE1901:%.*]]
// SIMD-ONLY0:       if.then1900:
// SIMD-ONLY0-NEXT:    [[TMP928:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP928]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1902:%.*]]
// SIMD-ONLY0:       if.else1901:
// SIMD-ONLY0-NEXT:    [[TMP929:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP929]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1902]]
// SIMD-ONLY0:       if.end1902:
// SIMD-ONLY0-NEXT:    [[TMP930:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1903:%.*]] = bytecast b8 [[TMP930]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1904:%.*]] = zext i8 [[CONV1903]] to i32
// SIMD-ONLY0-NEXT:    [[TMP931:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1905:%.*]] = bytecast b8 [[TMP931]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1906:%.*]] = zext i8 [[CONV1905]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1907:%.*]] = icmp eq i32 [[CONV1904]], [[CONV1906]]
// SIMD-ONLY0-NEXT:    [[CONV1908:%.*]] = zext i1 [[CMP1907]] to i32
// SIMD-ONLY0-NEXT:    [[CONV1909:%.*]] = trunc i32 [[CONV1908]] to i8
// SIMD-ONLY0-NEXT:    [[TMP932:%.*]] = bitcast i8 [[CONV1909]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP932]], ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[TMP933:%.*]] = load b8, ptr [[UCR]], align 1
// SIMD-ONLY0-NEXT:    [[CONV1910:%.*]] = bytecast b8 [[TMP933]] to i8
// SIMD-ONLY0-NEXT:    [[TOBOOL1911:%.*]] = icmp ne i8 [[CONV1910]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL1911]], label [[IF_THEN1912:%.*]], label [[IF_ELSE1913:%.*]]
// SIMD-ONLY0:       if.then1912:
// SIMD-ONLY0-NEXT:    [[TMP934:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP934]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1914:%.*]]
// SIMD-ONLY0:       if.else1913:
// SIMD-ONLY0-NEXT:    [[TMP935:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP935]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    br label [[IF_END1914]]
// SIMD-ONLY0:       if.end1914:
// SIMD-ONLY0-NEXT:    [[TMP936:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP936]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP937:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1915:%.*]] = sext i16 [[TMP937]] to i32
// SIMD-ONLY0-NEXT:    [[TMP938:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1916:%.*]] = sext i16 [[TMP938]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1917:%.*]] = icmp sgt i32 [[CONV1915]], [[CONV1916]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1917]], label [[IF_THEN1919:%.*]], label [[IF_END1920:%.*]]
// SIMD-ONLY0:       if.then1919:
// SIMD-ONLY0-NEXT:    [[TMP939:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP939]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1920]]
// SIMD-ONLY0:       if.end1920:
// SIMD-ONLY0-NEXT:    [[TMP940:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP940]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP941:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1921:%.*]] = sext i16 [[TMP941]] to i32
// SIMD-ONLY0-NEXT:    [[TMP942:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1922:%.*]] = sext i16 [[TMP942]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1923:%.*]] = icmp sgt i32 [[CONV1921]], [[CONV1922]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1923]], label [[IF_THEN1925:%.*]], label [[IF_END1926:%.*]]
// SIMD-ONLY0:       if.then1925:
// SIMD-ONLY0-NEXT:    [[TMP943:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP943]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1926]]
// SIMD-ONLY0:       if.end1926:
// SIMD-ONLY0-NEXT:    [[TMP944:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP944]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP945:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1927:%.*]] = sext i16 [[TMP945]] to i32
// SIMD-ONLY0-NEXT:    [[TMP946:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1928:%.*]] = sext i16 [[TMP946]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1929:%.*]] = icmp slt i32 [[CONV1927]], [[CONV1928]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1929]], label [[IF_THEN1931:%.*]], label [[IF_END1932:%.*]]
// SIMD-ONLY0:       if.then1931:
// SIMD-ONLY0-NEXT:    [[TMP947:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP947]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1932]]
// SIMD-ONLY0:       if.end1932:
// SIMD-ONLY0-NEXT:    [[TMP948:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP948]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP949:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1933:%.*]] = sext i16 [[TMP949]] to i32
// SIMD-ONLY0-NEXT:    [[TMP950:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1934:%.*]] = sext i16 [[TMP950]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1935:%.*]] = icmp slt i32 [[CONV1933]], [[CONV1934]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1935]], label [[IF_THEN1937:%.*]], label [[IF_END1938:%.*]]
// SIMD-ONLY0:       if.then1937:
// SIMD-ONLY0-NEXT:    [[TMP951:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP951]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1938]]
// SIMD-ONLY0:       if.end1938:
// SIMD-ONLY0-NEXT:    [[TMP952:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP952]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP953:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1939:%.*]] = sext i16 [[TMP953]] to i32
// SIMD-ONLY0-NEXT:    [[TMP954:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1940:%.*]] = sext i16 [[TMP954]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1941:%.*]] = icmp eq i32 [[CONV1939]], [[CONV1940]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1941]], label [[IF_THEN1943:%.*]], label [[IF_END1944:%.*]]
// SIMD-ONLY0:       if.then1943:
// SIMD-ONLY0-NEXT:    [[TMP955:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP955]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1944]]
// SIMD-ONLY0:       if.end1944:
// SIMD-ONLY0-NEXT:    [[TMP956:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP956]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP957:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1945:%.*]] = sext i16 [[TMP957]] to i32
// SIMD-ONLY0-NEXT:    [[TMP958:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1946:%.*]] = sext i16 [[TMP958]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1947:%.*]] = icmp eq i32 [[CONV1945]], [[CONV1946]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1947]], label [[IF_THEN1949:%.*]], label [[IF_END1950:%.*]]
// SIMD-ONLY0:       if.then1949:
// SIMD-ONLY0-NEXT:    [[TMP959:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP959]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1950]]
// SIMD-ONLY0:       if.end1950:
// SIMD-ONLY0-NEXT:    [[TMP960:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1951:%.*]] = sext i16 [[TMP960]] to i32
// SIMD-ONLY0-NEXT:    [[TMP961:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1952:%.*]] = sext i16 [[TMP961]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1953:%.*]] = icmp sgt i32 [[CONV1951]], [[CONV1952]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1953]], label [[IF_THEN1955:%.*]], label [[IF_END1956:%.*]]
// SIMD-ONLY0:       if.then1955:
// SIMD-ONLY0-NEXT:    [[TMP962:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP962]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1956]]
// SIMD-ONLY0:       if.end1956:
// SIMD-ONLY0-NEXT:    [[TMP963:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP963]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP964:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1957:%.*]] = sext i16 [[TMP964]] to i32
// SIMD-ONLY0-NEXT:    [[TMP965:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1958:%.*]] = sext i16 [[TMP965]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1959:%.*]] = icmp sgt i32 [[CONV1957]], [[CONV1958]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1959]], label [[IF_THEN1961:%.*]], label [[IF_END1962:%.*]]
// SIMD-ONLY0:       if.then1961:
// SIMD-ONLY0-NEXT:    [[TMP966:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP966]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1962]]
// SIMD-ONLY0:       if.end1962:
// SIMD-ONLY0-NEXT:    [[TMP967:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP967]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP968:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1963:%.*]] = sext i16 [[TMP968]] to i32
// SIMD-ONLY0-NEXT:    [[TMP969:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1964:%.*]] = sext i16 [[TMP969]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1965:%.*]] = icmp slt i32 [[CONV1963]], [[CONV1964]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1965]], label [[IF_THEN1967:%.*]], label [[IF_END1968:%.*]]
// SIMD-ONLY0:       if.then1967:
// SIMD-ONLY0-NEXT:    [[TMP970:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP970]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1968]]
// SIMD-ONLY0:       if.end1968:
// SIMD-ONLY0-NEXT:    [[TMP971:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP971]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP972:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1969:%.*]] = sext i16 [[TMP972]] to i32
// SIMD-ONLY0-NEXT:    [[TMP973:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1970:%.*]] = sext i16 [[TMP973]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1971:%.*]] = icmp slt i32 [[CONV1969]], [[CONV1970]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1971]], label [[IF_THEN1973:%.*]], label [[IF_END1974:%.*]]
// SIMD-ONLY0:       if.then1973:
// SIMD-ONLY0-NEXT:    [[TMP974:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP974]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1974]]
// SIMD-ONLY0:       if.end1974:
// SIMD-ONLY0-NEXT:    [[TMP975:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP975]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP976:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1975:%.*]] = sext i16 [[TMP976]] to i32
// SIMD-ONLY0-NEXT:    [[TMP977:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1976:%.*]] = sext i16 [[TMP977]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1977:%.*]] = icmp eq i32 [[CONV1975]], [[CONV1976]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1977]], label [[IF_THEN1979:%.*]], label [[IF_END1980:%.*]]
// SIMD-ONLY0:       if.then1979:
// SIMD-ONLY0-NEXT:    [[TMP978:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP978]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1980]]
// SIMD-ONLY0:       if.end1980:
// SIMD-ONLY0-NEXT:    [[TMP979:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP979]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP980:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1981:%.*]] = sext i16 [[TMP980]] to i32
// SIMD-ONLY0-NEXT:    [[TMP981:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1982:%.*]] = sext i16 [[TMP981]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1983:%.*]] = icmp eq i32 [[CONV1981]], [[CONV1982]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1983]], label [[IF_THEN1985:%.*]], label [[IF_END1986:%.*]]
// SIMD-ONLY0:       if.then1985:
// SIMD-ONLY0-NEXT:    [[TMP982:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP982]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1986]]
// SIMD-ONLY0:       if.end1986:
// SIMD-ONLY0-NEXT:    [[TMP983:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP983]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP984:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1987:%.*]] = sext i16 [[TMP984]] to i32
// SIMD-ONLY0-NEXT:    [[TMP985:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1988:%.*]] = sext i16 [[TMP985]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1989:%.*]] = icmp eq i32 [[CONV1987]], [[CONV1988]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1989]], label [[IF_THEN1991:%.*]], label [[IF_ELSE1992:%.*]]
// SIMD-ONLY0:       if.then1991:
// SIMD-ONLY0-NEXT:    [[TMP986:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP986]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1993:%.*]]
// SIMD-ONLY0:       if.else1992:
// SIMD-ONLY0-NEXT:    [[TMP987:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP987]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END1993]]
// SIMD-ONLY0:       if.end1993:
// SIMD-ONLY0-NEXT:    [[TMP988:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1994:%.*]] = sext i16 [[TMP988]] to i32
// SIMD-ONLY0-NEXT:    [[TMP989:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1995:%.*]] = sext i16 [[TMP989]] to i32
// SIMD-ONLY0-NEXT:    [[CMP1996:%.*]] = icmp eq i32 [[CONV1994]], [[CONV1995]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1996]], label [[IF_THEN1998:%.*]], label [[IF_ELSE1999:%.*]]
// SIMD-ONLY0:       if.then1998:
// SIMD-ONLY0-NEXT:    [[TMP990:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP990]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2000:%.*]]
// SIMD-ONLY0:       if.else1999:
// SIMD-ONLY0-NEXT:    [[TMP991:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP991]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2000]]
// SIMD-ONLY0:       if.end2000:
// SIMD-ONLY0-NEXT:    [[TMP992:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2001:%.*]] = sext i16 [[TMP992]] to i32
// SIMD-ONLY0-NEXT:    [[TMP993:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2002:%.*]] = sext i16 [[TMP993]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2003:%.*]] = icmp eq i32 [[CONV2001]], [[CONV2002]]
// SIMD-ONLY0-NEXT:    [[CONV2004:%.*]] = zext i1 [[CMP2003]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2005:%.*]] = trunc i32 [[CONV2004]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2005]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP994:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2006:%.*]] = icmp ne i16 [[TMP994]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2006]], label [[IF_THEN2007:%.*]], label [[IF_END2008:%.*]]
// SIMD-ONLY0:       if.then2007:
// SIMD-ONLY0-NEXT:    [[TMP995:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP995]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2008]]
// SIMD-ONLY0:       if.end2008:
// SIMD-ONLY0-NEXT:    [[TMP996:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2009:%.*]] = sext i16 [[TMP996]] to i32
// SIMD-ONLY0-NEXT:    [[TMP997:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2010:%.*]] = sext i16 [[TMP997]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2011:%.*]] = icmp eq i32 [[CONV2009]], [[CONV2010]]
// SIMD-ONLY0-NEXT:    [[CONV2012:%.*]] = zext i1 [[CMP2011]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2013:%.*]] = trunc i32 [[CONV2012]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2013]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP998:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2014:%.*]] = icmp ne i16 [[TMP998]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2014]], label [[IF_THEN2015:%.*]], label [[IF_END2016:%.*]]
// SIMD-ONLY0:       if.then2015:
// SIMD-ONLY0-NEXT:    [[TMP999:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP999]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2016]]
// SIMD-ONLY0:       if.end2016:
// SIMD-ONLY0-NEXT:    [[TMP1000:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2017:%.*]] = sext i16 [[TMP1000]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1001:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2018:%.*]] = sext i16 [[TMP1001]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2019:%.*]] = icmp eq i32 [[CONV2017]], [[CONV2018]]
// SIMD-ONLY0-NEXT:    [[CONV2020:%.*]] = zext i1 [[CMP2019]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2021:%.*]] = trunc i32 [[CONV2020]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2021]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1002:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2022:%.*]] = icmp ne i16 [[TMP1002]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2022]], label [[IF_THEN2023:%.*]], label [[IF_ELSE2024:%.*]]
// SIMD-ONLY0:       if.then2023:
// SIMD-ONLY0-NEXT:    [[TMP1003:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1003]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2025:%.*]]
// SIMD-ONLY0:       if.else2024:
// SIMD-ONLY0-NEXT:    [[TMP1004:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1004]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2025]]
// SIMD-ONLY0:       if.end2025:
// SIMD-ONLY0-NEXT:    [[TMP1005:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2026:%.*]] = sext i16 [[TMP1005]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1006:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2027:%.*]] = sext i16 [[TMP1006]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2028:%.*]] = icmp eq i32 [[CONV2026]], [[CONV2027]]
// SIMD-ONLY0-NEXT:    [[CONV2029:%.*]] = zext i1 [[CMP2028]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2030:%.*]] = trunc i32 [[CONV2029]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2030]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1007:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2031:%.*]] = icmp ne i16 [[TMP1007]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2031]], label [[IF_THEN2032:%.*]], label [[IF_ELSE2033:%.*]]
// SIMD-ONLY0:       if.then2032:
// SIMD-ONLY0-NEXT:    [[TMP1008:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1008]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2034:%.*]]
// SIMD-ONLY0:       if.else2033:
// SIMD-ONLY0-NEXT:    [[TMP1009:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1009]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2034]]
// SIMD-ONLY0:       if.end2034:
// SIMD-ONLY0-NEXT:    [[TMP1010:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1010]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1011:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2035:%.*]] = sext i16 [[TMP1011]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1012:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2036:%.*]] = sext i16 [[TMP1012]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2037:%.*]] = icmp sgt i32 [[CONV2035]], [[CONV2036]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2037]], label [[IF_THEN2039:%.*]], label [[IF_END2040:%.*]]
// SIMD-ONLY0:       if.then2039:
// SIMD-ONLY0-NEXT:    [[TMP1013:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1013]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2040]]
// SIMD-ONLY0:       if.end2040:
// SIMD-ONLY0-NEXT:    [[TMP1014:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1014]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1015:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2041:%.*]] = sext i16 [[TMP1015]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1016:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2042:%.*]] = sext i16 [[TMP1016]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2043:%.*]] = icmp sgt i32 [[CONV2041]], [[CONV2042]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2043]], label [[IF_THEN2045:%.*]], label [[IF_END2046:%.*]]
// SIMD-ONLY0:       if.then2045:
// SIMD-ONLY0-NEXT:    [[TMP1017:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1017]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2046]]
// SIMD-ONLY0:       if.end2046:
// SIMD-ONLY0-NEXT:    [[TMP1018:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1018]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1019:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2047:%.*]] = sext i16 [[TMP1019]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1020:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2048:%.*]] = sext i16 [[TMP1020]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2049:%.*]] = icmp slt i32 [[CONV2047]], [[CONV2048]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2049]], label [[IF_THEN2051:%.*]], label [[IF_END2052:%.*]]
// SIMD-ONLY0:       if.then2051:
// SIMD-ONLY0-NEXT:    [[TMP1021:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1021]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2052]]
// SIMD-ONLY0:       if.end2052:
// SIMD-ONLY0-NEXT:    [[TMP1022:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1022]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1023:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2053:%.*]] = sext i16 [[TMP1023]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1024:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2054:%.*]] = sext i16 [[TMP1024]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2055:%.*]] = icmp slt i32 [[CONV2053]], [[CONV2054]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2055]], label [[IF_THEN2057:%.*]], label [[IF_END2058:%.*]]
// SIMD-ONLY0:       if.then2057:
// SIMD-ONLY0-NEXT:    [[TMP1025:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1025]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2058]]
// SIMD-ONLY0:       if.end2058:
// SIMD-ONLY0-NEXT:    [[TMP1026:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1026]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1027:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2059:%.*]] = sext i16 [[TMP1027]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1028:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2060:%.*]] = sext i16 [[TMP1028]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2061:%.*]] = icmp eq i32 [[CONV2059]], [[CONV2060]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2061]], label [[IF_THEN2063:%.*]], label [[IF_END2064:%.*]]
// SIMD-ONLY0:       if.then2063:
// SIMD-ONLY0-NEXT:    [[TMP1029:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1029]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2064]]
// SIMD-ONLY0:       if.end2064:
// SIMD-ONLY0-NEXT:    [[TMP1030:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1030]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1031:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2065:%.*]] = sext i16 [[TMP1031]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1032:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2066:%.*]] = sext i16 [[TMP1032]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2067:%.*]] = icmp eq i32 [[CONV2065]], [[CONV2066]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2067]], label [[IF_THEN2069:%.*]], label [[IF_END2070:%.*]]
// SIMD-ONLY0:       if.then2069:
// SIMD-ONLY0-NEXT:    [[TMP1033:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1033]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2070]]
// SIMD-ONLY0:       if.end2070:
// SIMD-ONLY0-NEXT:    [[TMP1034:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2071:%.*]] = sext i16 [[TMP1034]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1035:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2072:%.*]] = sext i16 [[TMP1035]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2073:%.*]] = icmp sgt i32 [[CONV2071]], [[CONV2072]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2073]], label [[IF_THEN2075:%.*]], label [[IF_END2076:%.*]]
// SIMD-ONLY0:       if.then2075:
// SIMD-ONLY0-NEXT:    [[TMP1036:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1036]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2076]]
// SIMD-ONLY0:       if.end2076:
// SIMD-ONLY0-NEXT:    [[TMP1037:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1037]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1038:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2077:%.*]] = sext i16 [[TMP1038]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1039:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2078:%.*]] = sext i16 [[TMP1039]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2079:%.*]] = icmp sgt i32 [[CONV2077]], [[CONV2078]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2079]], label [[IF_THEN2081:%.*]], label [[IF_END2082:%.*]]
// SIMD-ONLY0:       if.then2081:
// SIMD-ONLY0-NEXT:    [[TMP1040:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1040]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2082]]
// SIMD-ONLY0:       if.end2082:
// SIMD-ONLY0-NEXT:    [[TMP1041:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1041]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1042:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2083:%.*]] = sext i16 [[TMP1042]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1043:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2084:%.*]] = sext i16 [[TMP1043]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2085:%.*]] = icmp slt i32 [[CONV2083]], [[CONV2084]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2085]], label [[IF_THEN2087:%.*]], label [[IF_END2088:%.*]]
// SIMD-ONLY0:       if.then2087:
// SIMD-ONLY0-NEXT:    [[TMP1044:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1044]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2088]]
// SIMD-ONLY0:       if.end2088:
// SIMD-ONLY0-NEXT:    [[TMP1045:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1045]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1046:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2089:%.*]] = sext i16 [[TMP1046]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1047:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2090:%.*]] = sext i16 [[TMP1047]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2091:%.*]] = icmp slt i32 [[CONV2089]], [[CONV2090]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2091]], label [[IF_THEN2093:%.*]], label [[IF_END2094:%.*]]
// SIMD-ONLY0:       if.then2093:
// SIMD-ONLY0-NEXT:    [[TMP1048:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1048]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2094]]
// SIMD-ONLY0:       if.end2094:
// SIMD-ONLY0-NEXT:    [[TMP1049:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1049]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1050:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2095:%.*]] = sext i16 [[TMP1050]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1051:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2096:%.*]] = sext i16 [[TMP1051]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2097:%.*]] = icmp eq i32 [[CONV2095]], [[CONV2096]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2097]], label [[IF_THEN2099:%.*]], label [[IF_END2100:%.*]]
// SIMD-ONLY0:       if.then2099:
// SIMD-ONLY0-NEXT:    [[TMP1052:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1052]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2100]]
// SIMD-ONLY0:       if.end2100:
// SIMD-ONLY0-NEXT:    [[TMP1053:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1053]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1054:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2101:%.*]] = sext i16 [[TMP1054]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1055:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2102:%.*]] = sext i16 [[TMP1055]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2103:%.*]] = icmp eq i32 [[CONV2101]], [[CONV2102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2103]], label [[IF_THEN2105:%.*]], label [[IF_END2106:%.*]]
// SIMD-ONLY0:       if.then2105:
// SIMD-ONLY0-NEXT:    [[TMP1056:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1056]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2106]]
// SIMD-ONLY0:       if.end2106:
// SIMD-ONLY0-NEXT:    [[TMP1057:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1057]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1058:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2107:%.*]] = sext i16 [[TMP1058]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1059:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2108:%.*]] = sext i16 [[TMP1059]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2109:%.*]] = icmp eq i32 [[CONV2107]], [[CONV2108]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2109]], label [[IF_THEN2111:%.*]], label [[IF_ELSE2112:%.*]]
// SIMD-ONLY0:       if.then2111:
// SIMD-ONLY0-NEXT:    [[TMP1060:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1060]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2113:%.*]]
// SIMD-ONLY0:       if.else2112:
// SIMD-ONLY0-NEXT:    [[TMP1061:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1061]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2113]]
// SIMD-ONLY0:       if.end2113:
// SIMD-ONLY0-NEXT:    [[TMP1062:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2114:%.*]] = sext i16 [[TMP1062]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1063:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2115:%.*]] = sext i16 [[TMP1063]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2116:%.*]] = icmp eq i32 [[CONV2114]], [[CONV2115]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2116]], label [[IF_THEN2118:%.*]], label [[IF_ELSE2119:%.*]]
// SIMD-ONLY0:       if.then2118:
// SIMD-ONLY0-NEXT:    [[TMP1064:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1064]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2120:%.*]]
// SIMD-ONLY0:       if.else2119:
// SIMD-ONLY0-NEXT:    [[TMP1065:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1065]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2120]]
// SIMD-ONLY0:       if.end2120:
// SIMD-ONLY0-NEXT:    [[TMP1066:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2121:%.*]] = sext i16 [[TMP1066]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1067:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2122:%.*]] = sext i16 [[TMP1067]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2123:%.*]] = icmp eq i32 [[CONV2121]], [[CONV2122]]
// SIMD-ONLY0-NEXT:    [[CONV2124:%.*]] = zext i1 [[CMP2123]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2125:%.*]] = trunc i32 [[CONV2124]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2125]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1068:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2126:%.*]] = icmp ne i16 [[TMP1068]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2126]], label [[IF_THEN2127:%.*]], label [[IF_END2128:%.*]]
// SIMD-ONLY0:       if.then2127:
// SIMD-ONLY0-NEXT:    [[TMP1069:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1069]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2128]]
// SIMD-ONLY0:       if.end2128:
// SIMD-ONLY0-NEXT:    [[TMP1070:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2129:%.*]] = sext i16 [[TMP1070]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1071:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2130:%.*]] = sext i16 [[TMP1071]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2131:%.*]] = icmp eq i32 [[CONV2129]], [[CONV2130]]
// SIMD-ONLY0-NEXT:    [[CONV2132:%.*]] = zext i1 [[CMP2131]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2133:%.*]] = trunc i32 [[CONV2132]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2133]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1072:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2134:%.*]] = icmp ne i16 [[TMP1072]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2134]], label [[IF_THEN2135:%.*]], label [[IF_END2136:%.*]]
// SIMD-ONLY0:       if.then2135:
// SIMD-ONLY0-NEXT:    [[TMP1073:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1073]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2136]]
// SIMD-ONLY0:       if.end2136:
// SIMD-ONLY0-NEXT:    [[TMP1074:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2137:%.*]] = sext i16 [[TMP1074]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1075:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2138:%.*]] = sext i16 [[TMP1075]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2139:%.*]] = icmp eq i32 [[CONV2137]], [[CONV2138]]
// SIMD-ONLY0-NEXT:    [[CONV2140:%.*]] = zext i1 [[CMP2139]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2141:%.*]] = trunc i32 [[CONV2140]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2141]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1076:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2142:%.*]] = icmp ne i16 [[TMP1076]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2142]], label [[IF_THEN2143:%.*]], label [[IF_ELSE2144:%.*]]
// SIMD-ONLY0:       if.then2143:
// SIMD-ONLY0-NEXT:    [[TMP1077:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1077]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2145:%.*]]
// SIMD-ONLY0:       if.else2144:
// SIMD-ONLY0-NEXT:    [[TMP1078:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1078]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2145]]
// SIMD-ONLY0:       if.end2145:
// SIMD-ONLY0-NEXT:    [[TMP1079:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2146:%.*]] = sext i16 [[TMP1079]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1080:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2147:%.*]] = sext i16 [[TMP1080]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2148:%.*]] = icmp eq i32 [[CONV2146]], [[CONV2147]]
// SIMD-ONLY0-NEXT:    [[CONV2149:%.*]] = zext i1 [[CMP2148]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2150:%.*]] = trunc i32 [[CONV2149]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2150]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1081:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2151:%.*]] = icmp ne i16 [[TMP1081]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2151]], label [[IF_THEN2152:%.*]], label [[IF_ELSE2153:%.*]]
// SIMD-ONLY0:       if.then2152:
// SIMD-ONLY0-NEXT:    [[TMP1082:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1082]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2154:%.*]]
// SIMD-ONLY0:       if.else2153:
// SIMD-ONLY0-NEXT:    [[TMP1083:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1083]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2154]]
// SIMD-ONLY0:       if.end2154:
// SIMD-ONLY0-NEXT:    [[TMP1084:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1084]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1085:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2155:%.*]] = sext i16 [[TMP1085]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1086:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2156:%.*]] = sext i16 [[TMP1086]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2157:%.*]] = icmp sgt i32 [[CONV2155]], [[CONV2156]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2157]], label [[IF_THEN2159:%.*]], label [[IF_END2160:%.*]]
// SIMD-ONLY0:       if.then2159:
// SIMD-ONLY0-NEXT:    [[TMP1087:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1087]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2160]]
// SIMD-ONLY0:       if.end2160:
// SIMD-ONLY0-NEXT:    [[TMP1088:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1088]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1089:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2161:%.*]] = sext i16 [[TMP1089]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1090:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2162:%.*]] = sext i16 [[TMP1090]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2163:%.*]] = icmp sgt i32 [[CONV2161]], [[CONV2162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2163]], label [[IF_THEN2165:%.*]], label [[IF_END2166:%.*]]
// SIMD-ONLY0:       if.then2165:
// SIMD-ONLY0-NEXT:    [[TMP1091:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1091]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2166]]
// SIMD-ONLY0:       if.end2166:
// SIMD-ONLY0-NEXT:    [[TMP1092:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1092]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1093:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2167:%.*]] = sext i16 [[TMP1093]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1094:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2168:%.*]] = sext i16 [[TMP1094]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2169:%.*]] = icmp slt i32 [[CONV2167]], [[CONV2168]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2169]], label [[IF_THEN2171:%.*]], label [[IF_END2172:%.*]]
// SIMD-ONLY0:       if.then2171:
// SIMD-ONLY0-NEXT:    [[TMP1095:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1095]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2172]]
// SIMD-ONLY0:       if.end2172:
// SIMD-ONLY0-NEXT:    [[TMP1096:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1096]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1097:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2173:%.*]] = sext i16 [[TMP1097]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1098:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2174:%.*]] = sext i16 [[TMP1098]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2175:%.*]] = icmp slt i32 [[CONV2173]], [[CONV2174]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2175]], label [[IF_THEN2177:%.*]], label [[IF_END2178:%.*]]
// SIMD-ONLY0:       if.then2177:
// SIMD-ONLY0-NEXT:    [[TMP1099:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1099]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2178]]
// SIMD-ONLY0:       if.end2178:
// SIMD-ONLY0-NEXT:    [[TMP1100:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1100]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1101:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2179:%.*]] = sext i16 [[TMP1101]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1102:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2180:%.*]] = sext i16 [[TMP1102]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2181:%.*]] = icmp eq i32 [[CONV2179]], [[CONV2180]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2181]], label [[IF_THEN2183:%.*]], label [[IF_END2184:%.*]]
// SIMD-ONLY0:       if.then2183:
// SIMD-ONLY0-NEXT:    [[TMP1103:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1103]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2184]]
// SIMD-ONLY0:       if.end2184:
// SIMD-ONLY0-NEXT:    [[TMP1104:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1104]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1105:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2185:%.*]] = sext i16 [[TMP1105]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1106:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2186:%.*]] = sext i16 [[TMP1106]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2187:%.*]] = icmp eq i32 [[CONV2185]], [[CONV2186]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2187]], label [[IF_THEN2189:%.*]], label [[IF_END2190:%.*]]
// SIMD-ONLY0:       if.then2189:
// SIMD-ONLY0-NEXT:    [[TMP1107:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1107]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2190]]
// SIMD-ONLY0:       if.end2190:
// SIMD-ONLY0-NEXT:    [[TMP1108:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2191:%.*]] = sext i16 [[TMP1108]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1109:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2192:%.*]] = sext i16 [[TMP1109]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2193:%.*]] = icmp sgt i32 [[CONV2191]], [[CONV2192]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2193]], label [[IF_THEN2195:%.*]], label [[IF_END2196:%.*]]
// SIMD-ONLY0:       if.then2195:
// SIMD-ONLY0-NEXT:    [[TMP1110:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1110]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2196]]
// SIMD-ONLY0:       if.end2196:
// SIMD-ONLY0-NEXT:    [[TMP1111:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1111]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1112:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2197:%.*]] = sext i16 [[TMP1112]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1113:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2198:%.*]] = sext i16 [[TMP1113]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2199:%.*]] = icmp sgt i32 [[CONV2197]], [[CONV2198]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2199]], label [[IF_THEN2201:%.*]], label [[IF_END2202:%.*]]
// SIMD-ONLY0:       if.then2201:
// SIMD-ONLY0-NEXT:    [[TMP1114:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1114]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2202]]
// SIMD-ONLY0:       if.end2202:
// SIMD-ONLY0-NEXT:    [[TMP1115:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1115]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1116:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2203:%.*]] = sext i16 [[TMP1116]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1117:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2204:%.*]] = sext i16 [[TMP1117]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2205:%.*]] = icmp slt i32 [[CONV2203]], [[CONV2204]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2205]], label [[IF_THEN2207:%.*]], label [[IF_END2208:%.*]]
// SIMD-ONLY0:       if.then2207:
// SIMD-ONLY0-NEXT:    [[TMP1118:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1118]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2208]]
// SIMD-ONLY0:       if.end2208:
// SIMD-ONLY0-NEXT:    [[TMP1119:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1119]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1120:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2209:%.*]] = sext i16 [[TMP1120]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1121:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2210:%.*]] = sext i16 [[TMP1121]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2211:%.*]] = icmp slt i32 [[CONV2209]], [[CONV2210]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2211]], label [[IF_THEN2213:%.*]], label [[IF_END2214:%.*]]
// SIMD-ONLY0:       if.then2213:
// SIMD-ONLY0-NEXT:    [[TMP1122:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1122]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2214]]
// SIMD-ONLY0:       if.end2214:
// SIMD-ONLY0-NEXT:    [[TMP1123:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1123]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1124:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2215:%.*]] = sext i16 [[TMP1124]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1125:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2216:%.*]] = sext i16 [[TMP1125]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2217:%.*]] = icmp eq i32 [[CONV2215]], [[CONV2216]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2217]], label [[IF_THEN2219:%.*]], label [[IF_END2220:%.*]]
// SIMD-ONLY0:       if.then2219:
// SIMD-ONLY0-NEXT:    [[TMP1126:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1126]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2220]]
// SIMD-ONLY0:       if.end2220:
// SIMD-ONLY0-NEXT:    [[TMP1127:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1127]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1128:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2221:%.*]] = sext i16 [[TMP1128]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1129:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2222:%.*]] = sext i16 [[TMP1129]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2223:%.*]] = icmp eq i32 [[CONV2221]], [[CONV2222]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2223]], label [[IF_THEN2225:%.*]], label [[IF_END2226:%.*]]
// SIMD-ONLY0:       if.then2225:
// SIMD-ONLY0-NEXT:    [[TMP1130:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1130]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2226]]
// SIMD-ONLY0:       if.end2226:
// SIMD-ONLY0-NEXT:    [[TMP1131:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1131]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1132:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2227:%.*]] = sext i16 [[TMP1132]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1133:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2228:%.*]] = sext i16 [[TMP1133]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2229:%.*]] = icmp eq i32 [[CONV2227]], [[CONV2228]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2229]], label [[IF_THEN2231:%.*]], label [[IF_ELSE2232:%.*]]
// SIMD-ONLY0:       if.then2231:
// SIMD-ONLY0-NEXT:    [[TMP1134:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1134]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2233:%.*]]
// SIMD-ONLY0:       if.else2232:
// SIMD-ONLY0-NEXT:    [[TMP1135:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1135]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2233]]
// SIMD-ONLY0:       if.end2233:
// SIMD-ONLY0-NEXT:    [[TMP1136:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2234:%.*]] = sext i16 [[TMP1136]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1137:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2235:%.*]] = sext i16 [[TMP1137]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2236:%.*]] = icmp eq i32 [[CONV2234]], [[CONV2235]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2236]], label [[IF_THEN2238:%.*]], label [[IF_ELSE2239:%.*]]
// SIMD-ONLY0:       if.then2238:
// SIMD-ONLY0-NEXT:    [[TMP1138:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1138]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2240:%.*]]
// SIMD-ONLY0:       if.else2239:
// SIMD-ONLY0-NEXT:    [[TMP1139:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1139]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2240]]
// SIMD-ONLY0:       if.end2240:
// SIMD-ONLY0-NEXT:    [[TMP1140:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2241:%.*]] = sext i16 [[TMP1140]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1141:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2242:%.*]] = sext i16 [[TMP1141]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2243:%.*]] = icmp eq i32 [[CONV2241]], [[CONV2242]]
// SIMD-ONLY0-NEXT:    [[CONV2244:%.*]] = zext i1 [[CMP2243]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2245:%.*]] = trunc i32 [[CONV2244]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2245]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1142:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2246:%.*]] = icmp ne i16 [[TMP1142]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2246]], label [[IF_THEN2247:%.*]], label [[IF_END2248:%.*]]
// SIMD-ONLY0:       if.then2247:
// SIMD-ONLY0-NEXT:    [[TMP1143:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1143]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2248]]
// SIMD-ONLY0:       if.end2248:
// SIMD-ONLY0-NEXT:    [[TMP1144:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2249:%.*]] = sext i16 [[TMP1144]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1145:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2250:%.*]] = sext i16 [[TMP1145]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2251:%.*]] = icmp eq i32 [[CONV2249]], [[CONV2250]]
// SIMD-ONLY0-NEXT:    [[CONV2252:%.*]] = zext i1 [[CMP2251]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2253:%.*]] = trunc i32 [[CONV2252]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2253]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1146:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2254:%.*]] = icmp ne i16 [[TMP1146]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2254]], label [[IF_THEN2255:%.*]], label [[IF_END2256:%.*]]
// SIMD-ONLY0:       if.then2255:
// SIMD-ONLY0-NEXT:    [[TMP1147:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1147]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2256]]
// SIMD-ONLY0:       if.end2256:
// SIMD-ONLY0-NEXT:    [[TMP1148:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2257:%.*]] = sext i16 [[TMP1148]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1149:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2258:%.*]] = sext i16 [[TMP1149]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2259:%.*]] = icmp eq i32 [[CONV2257]], [[CONV2258]]
// SIMD-ONLY0-NEXT:    [[CONV2260:%.*]] = zext i1 [[CMP2259]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2261:%.*]] = trunc i32 [[CONV2260]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2261]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1150:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2262:%.*]] = icmp ne i16 [[TMP1150]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2262]], label [[IF_THEN2263:%.*]], label [[IF_ELSE2264:%.*]]
// SIMD-ONLY0:       if.then2263:
// SIMD-ONLY0-NEXT:    [[TMP1151:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1151]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2265:%.*]]
// SIMD-ONLY0:       if.else2264:
// SIMD-ONLY0-NEXT:    [[TMP1152:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1152]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2265]]
// SIMD-ONLY0:       if.end2265:
// SIMD-ONLY0-NEXT:    [[TMP1153:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2266:%.*]] = sext i16 [[TMP1153]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1154:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2267:%.*]] = sext i16 [[TMP1154]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2268:%.*]] = icmp eq i32 [[CONV2266]], [[CONV2267]]
// SIMD-ONLY0-NEXT:    [[CONV2269:%.*]] = zext i1 [[CMP2268]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2270:%.*]] = trunc i32 [[CONV2269]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2270]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1155:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2271:%.*]] = icmp ne i16 [[TMP1155]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2271]], label [[IF_THEN2272:%.*]], label [[IF_ELSE2273:%.*]]
// SIMD-ONLY0:       if.then2272:
// SIMD-ONLY0-NEXT:    [[TMP1156:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1156]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2274:%.*]]
// SIMD-ONLY0:       if.else2273:
// SIMD-ONLY0-NEXT:    [[TMP1157:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1157]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2274]]
// SIMD-ONLY0:       if.end2274:
// SIMD-ONLY0-NEXT:    [[TMP1158:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1158]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1159:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2275:%.*]] = sext i16 [[TMP1159]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1160:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2276:%.*]] = sext i16 [[TMP1160]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2277:%.*]] = icmp sgt i32 [[CONV2275]], [[CONV2276]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2277]], label [[IF_THEN2279:%.*]], label [[IF_END2280:%.*]]
// SIMD-ONLY0:       if.then2279:
// SIMD-ONLY0-NEXT:    [[TMP1161:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1161]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2280]]
// SIMD-ONLY0:       if.end2280:
// SIMD-ONLY0-NEXT:    [[TMP1162:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1162]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1163:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2281:%.*]] = sext i16 [[TMP1163]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1164:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2282:%.*]] = sext i16 [[TMP1164]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2283:%.*]] = icmp sgt i32 [[CONV2281]], [[CONV2282]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2283]], label [[IF_THEN2285:%.*]], label [[IF_END2286:%.*]]
// SIMD-ONLY0:       if.then2285:
// SIMD-ONLY0-NEXT:    [[TMP1165:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1165]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2286]]
// SIMD-ONLY0:       if.end2286:
// SIMD-ONLY0-NEXT:    [[TMP1166:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1166]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1167:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2287:%.*]] = sext i16 [[TMP1167]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1168:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2288:%.*]] = sext i16 [[TMP1168]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2289:%.*]] = icmp slt i32 [[CONV2287]], [[CONV2288]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2289]], label [[IF_THEN2291:%.*]], label [[IF_END2292:%.*]]
// SIMD-ONLY0:       if.then2291:
// SIMD-ONLY0-NEXT:    [[TMP1169:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1169]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2292]]
// SIMD-ONLY0:       if.end2292:
// SIMD-ONLY0-NEXT:    [[TMP1170:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1170]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1171:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2293:%.*]] = sext i16 [[TMP1171]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1172:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2294:%.*]] = sext i16 [[TMP1172]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2295:%.*]] = icmp slt i32 [[CONV2293]], [[CONV2294]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2295]], label [[IF_THEN2297:%.*]], label [[IF_END2298:%.*]]
// SIMD-ONLY0:       if.then2297:
// SIMD-ONLY0-NEXT:    [[TMP1173:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1173]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2298]]
// SIMD-ONLY0:       if.end2298:
// SIMD-ONLY0-NEXT:    [[TMP1174:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1174]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1175:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2299:%.*]] = sext i16 [[TMP1175]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1176:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2300:%.*]] = sext i16 [[TMP1176]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2301:%.*]] = icmp eq i32 [[CONV2299]], [[CONV2300]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2301]], label [[IF_THEN2303:%.*]], label [[IF_END2304:%.*]]
// SIMD-ONLY0:       if.then2303:
// SIMD-ONLY0-NEXT:    [[TMP1177:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1177]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2304]]
// SIMD-ONLY0:       if.end2304:
// SIMD-ONLY0-NEXT:    [[TMP1178:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1178]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1179:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2305:%.*]] = sext i16 [[TMP1179]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1180:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2306:%.*]] = sext i16 [[TMP1180]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2307:%.*]] = icmp eq i32 [[CONV2305]], [[CONV2306]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2307]], label [[IF_THEN2309:%.*]], label [[IF_END2310:%.*]]
// SIMD-ONLY0:       if.then2309:
// SIMD-ONLY0-NEXT:    [[TMP1181:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1181]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2310]]
// SIMD-ONLY0:       if.end2310:
// SIMD-ONLY0-NEXT:    [[TMP1182:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2311:%.*]] = sext i16 [[TMP1182]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1183:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2312:%.*]] = sext i16 [[TMP1183]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2313:%.*]] = icmp sgt i32 [[CONV2311]], [[CONV2312]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2313]], label [[IF_THEN2315:%.*]], label [[IF_END2316:%.*]]
// SIMD-ONLY0:       if.then2315:
// SIMD-ONLY0-NEXT:    [[TMP1184:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1184]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2316]]
// SIMD-ONLY0:       if.end2316:
// SIMD-ONLY0-NEXT:    [[TMP1185:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1185]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1186:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2317:%.*]] = sext i16 [[TMP1186]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1187:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2318:%.*]] = sext i16 [[TMP1187]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2319:%.*]] = icmp sgt i32 [[CONV2317]], [[CONV2318]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2319]], label [[IF_THEN2321:%.*]], label [[IF_END2322:%.*]]
// SIMD-ONLY0:       if.then2321:
// SIMD-ONLY0-NEXT:    [[TMP1188:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1188]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2322]]
// SIMD-ONLY0:       if.end2322:
// SIMD-ONLY0-NEXT:    [[TMP1189:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1189]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1190:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2323:%.*]] = sext i16 [[TMP1190]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1191:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2324:%.*]] = sext i16 [[TMP1191]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2325:%.*]] = icmp slt i32 [[CONV2323]], [[CONV2324]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2325]], label [[IF_THEN2327:%.*]], label [[IF_END2328:%.*]]
// SIMD-ONLY0:       if.then2327:
// SIMD-ONLY0-NEXT:    [[TMP1192:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1192]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2328]]
// SIMD-ONLY0:       if.end2328:
// SIMD-ONLY0-NEXT:    [[TMP1193:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1193]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1194:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2329:%.*]] = sext i16 [[TMP1194]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1195:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2330:%.*]] = sext i16 [[TMP1195]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2331:%.*]] = icmp slt i32 [[CONV2329]], [[CONV2330]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2331]], label [[IF_THEN2333:%.*]], label [[IF_END2334:%.*]]
// SIMD-ONLY0:       if.then2333:
// SIMD-ONLY0-NEXT:    [[TMP1196:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1196]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2334]]
// SIMD-ONLY0:       if.end2334:
// SIMD-ONLY0-NEXT:    [[TMP1197:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1197]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1198:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2335:%.*]] = sext i16 [[TMP1198]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1199:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2336:%.*]] = sext i16 [[TMP1199]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2337:%.*]] = icmp eq i32 [[CONV2335]], [[CONV2336]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2337]], label [[IF_THEN2339:%.*]], label [[IF_END2340:%.*]]
// SIMD-ONLY0:       if.then2339:
// SIMD-ONLY0-NEXT:    [[TMP1200:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1200]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2340]]
// SIMD-ONLY0:       if.end2340:
// SIMD-ONLY0-NEXT:    [[TMP1201:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1201]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1202:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2341:%.*]] = sext i16 [[TMP1202]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1203:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2342:%.*]] = sext i16 [[TMP1203]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2343:%.*]] = icmp eq i32 [[CONV2341]], [[CONV2342]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2343]], label [[IF_THEN2345:%.*]], label [[IF_END2346:%.*]]
// SIMD-ONLY0:       if.then2345:
// SIMD-ONLY0-NEXT:    [[TMP1204:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1204]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2346]]
// SIMD-ONLY0:       if.end2346:
// SIMD-ONLY0-NEXT:    [[TMP1205:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1205]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1206:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2347:%.*]] = sext i16 [[TMP1206]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1207:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2348:%.*]] = sext i16 [[TMP1207]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2349:%.*]] = icmp eq i32 [[CONV2347]], [[CONV2348]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2349]], label [[IF_THEN2351:%.*]], label [[IF_ELSE2352:%.*]]
// SIMD-ONLY0:       if.then2351:
// SIMD-ONLY0-NEXT:    [[TMP1208:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1208]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2353:%.*]]
// SIMD-ONLY0:       if.else2352:
// SIMD-ONLY0-NEXT:    [[TMP1209:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1209]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2353]]
// SIMD-ONLY0:       if.end2353:
// SIMD-ONLY0-NEXT:    [[TMP1210:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2354:%.*]] = sext i16 [[TMP1210]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1211:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2355:%.*]] = sext i16 [[TMP1211]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2356:%.*]] = icmp eq i32 [[CONV2354]], [[CONV2355]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2356]], label [[IF_THEN2358:%.*]], label [[IF_ELSE2359:%.*]]
// SIMD-ONLY0:       if.then2358:
// SIMD-ONLY0-NEXT:    [[TMP1212:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1212]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2360:%.*]]
// SIMD-ONLY0:       if.else2359:
// SIMD-ONLY0-NEXT:    [[TMP1213:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1213]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2360]]
// SIMD-ONLY0:       if.end2360:
// SIMD-ONLY0-NEXT:    [[TMP1214:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2361:%.*]] = sext i16 [[TMP1214]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1215:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2362:%.*]] = sext i16 [[TMP1215]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2363:%.*]] = icmp eq i32 [[CONV2361]], [[CONV2362]]
// SIMD-ONLY0-NEXT:    [[CONV2364:%.*]] = zext i1 [[CMP2363]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2365:%.*]] = trunc i32 [[CONV2364]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2365]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1216:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2366:%.*]] = icmp ne i16 [[TMP1216]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2366]], label [[IF_THEN2367:%.*]], label [[IF_END2368:%.*]]
// SIMD-ONLY0:       if.then2367:
// SIMD-ONLY0-NEXT:    [[TMP1217:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1217]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2368]]
// SIMD-ONLY0:       if.end2368:
// SIMD-ONLY0-NEXT:    [[TMP1218:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2369:%.*]] = sext i16 [[TMP1218]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1219:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2370:%.*]] = sext i16 [[TMP1219]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2371:%.*]] = icmp eq i32 [[CONV2369]], [[CONV2370]]
// SIMD-ONLY0-NEXT:    [[CONV2372:%.*]] = zext i1 [[CMP2371]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2373:%.*]] = trunc i32 [[CONV2372]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2373]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1220:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2374:%.*]] = icmp ne i16 [[TMP1220]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2374]], label [[IF_THEN2375:%.*]], label [[IF_END2376:%.*]]
// SIMD-ONLY0:       if.then2375:
// SIMD-ONLY0-NEXT:    [[TMP1221:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1221]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2376]]
// SIMD-ONLY0:       if.end2376:
// SIMD-ONLY0-NEXT:    [[TMP1222:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2377:%.*]] = sext i16 [[TMP1222]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1223:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2378:%.*]] = sext i16 [[TMP1223]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2379:%.*]] = icmp eq i32 [[CONV2377]], [[CONV2378]]
// SIMD-ONLY0-NEXT:    [[CONV2380:%.*]] = zext i1 [[CMP2379]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2381:%.*]] = trunc i32 [[CONV2380]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2381]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1224:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2382:%.*]] = icmp ne i16 [[TMP1224]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2382]], label [[IF_THEN2383:%.*]], label [[IF_ELSE2384:%.*]]
// SIMD-ONLY0:       if.then2383:
// SIMD-ONLY0-NEXT:    [[TMP1225:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1225]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2385:%.*]]
// SIMD-ONLY0:       if.else2384:
// SIMD-ONLY0-NEXT:    [[TMP1226:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1226]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2385]]
// SIMD-ONLY0:       if.end2385:
// SIMD-ONLY0-NEXT:    [[TMP1227:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2386:%.*]] = sext i16 [[TMP1227]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1228:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2387:%.*]] = sext i16 [[TMP1228]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2388:%.*]] = icmp eq i32 [[CONV2386]], [[CONV2387]]
// SIMD-ONLY0-NEXT:    [[CONV2389:%.*]] = zext i1 [[CMP2388]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2390:%.*]] = trunc i32 [[CONV2389]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2390]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1229:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2391:%.*]] = icmp ne i16 [[TMP1229]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2391]], label [[IF_THEN2392:%.*]], label [[IF_ELSE2393:%.*]]
// SIMD-ONLY0:       if.then2392:
// SIMD-ONLY0-NEXT:    [[TMP1230:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1230]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2394:%.*]]
// SIMD-ONLY0:       if.else2393:
// SIMD-ONLY0-NEXT:    [[TMP1231:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1231]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2394]]
// SIMD-ONLY0:       if.end2394:
// SIMD-ONLY0-NEXT:    [[TMP1232:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1232]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1233:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2395:%.*]] = sext i16 [[TMP1233]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1234:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2396:%.*]] = sext i16 [[TMP1234]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2397:%.*]] = icmp sgt i32 [[CONV2395]], [[CONV2396]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2397]], label [[IF_THEN2399:%.*]], label [[IF_END2400:%.*]]
// SIMD-ONLY0:       if.then2399:
// SIMD-ONLY0-NEXT:    [[TMP1235:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1235]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2400]]
// SIMD-ONLY0:       if.end2400:
// SIMD-ONLY0-NEXT:    [[TMP1236:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1236]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1237:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2401:%.*]] = sext i16 [[TMP1237]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1238:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2402:%.*]] = sext i16 [[TMP1238]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2403:%.*]] = icmp sgt i32 [[CONV2401]], [[CONV2402]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2403]], label [[IF_THEN2405:%.*]], label [[IF_END2406:%.*]]
// SIMD-ONLY0:       if.then2405:
// SIMD-ONLY0-NEXT:    [[TMP1239:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1239]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2406]]
// SIMD-ONLY0:       if.end2406:
// SIMD-ONLY0-NEXT:    [[TMP1240:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1240]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1241:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2407:%.*]] = sext i16 [[TMP1241]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1242:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2408:%.*]] = sext i16 [[TMP1242]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2409:%.*]] = icmp slt i32 [[CONV2407]], [[CONV2408]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2409]], label [[IF_THEN2411:%.*]], label [[IF_END2412:%.*]]
// SIMD-ONLY0:       if.then2411:
// SIMD-ONLY0-NEXT:    [[TMP1243:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1243]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2412]]
// SIMD-ONLY0:       if.end2412:
// SIMD-ONLY0-NEXT:    [[TMP1244:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1244]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1245:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2413:%.*]] = sext i16 [[TMP1245]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1246:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2414:%.*]] = sext i16 [[TMP1246]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2415:%.*]] = icmp slt i32 [[CONV2413]], [[CONV2414]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2415]], label [[IF_THEN2417:%.*]], label [[IF_END2418:%.*]]
// SIMD-ONLY0:       if.then2417:
// SIMD-ONLY0-NEXT:    [[TMP1247:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1247]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2418]]
// SIMD-ONLY0:       if.end2418:
// SIMD-ONLY0-NEXT:    [[TMP1248:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1248]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1249:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2419:%.*]] = sext i16 [[TMP1249]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1250:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2420:%.*]] = sext i16 [[TMP1250]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2421:%.*]] = icmp eq i32 [[CONV2419]], [[CONV2420]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2421]], label [[IF_THEN2423:%.*]], label [[IF_END2424:%.*]]
// SIMD-ONLY0:       if.then2423:
// SIMD-ONLY0-NEXT:    [[TMP1251:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1251]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2424]]
// SIMD-ONLY0:       if.end2424:
// SIMD-ONLY0-NEXT:    [[TMP1252:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1252]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1253:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2425:%.*]] = sext i16 [[TMP1253]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1254:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2426:%.*]] = sext i16 [[TMP1254]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2427:%.*]] = icmp eq i32 [[CONV2425]], [[CONV2426]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2427]], label [[IF_THEN2429:%.*]], label [[IF_END2430:%.*]]
// SIMD-ONLY0:       if.then2429:
// SIMD-ONLY0-NEXT:    [[TMP1255:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1255]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2430]]
// SIMD-ONLY0:       if.end2430:
// SIMD-ONLY0-NEXT:    [[TMP1256:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2431:%.*]] = sext i16 [[TMP1256]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1257:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2432:%.*]] = sext i16 [[TMP1257]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2433:%.*]] = icmp sgt i32 [[CONV2431]], [[CONV2432]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2433]], label [[IF_THEN2435:%.*]], label [[IF_END2436:%.*]]
// SIMD-ONLY0:       if.then2435:
// SIMD-ONLY0-NEXT:    [[TMP1258:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1258]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2436]]
// SIMD-ONLY0:       if.end2436:
// SIMD-ONLY0-NEXT:    [[TMP1259:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1259]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1260:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2437:%.*]] = sext i16 [[TMP1260]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1261:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2438:%.*]] = sext i16 [[TMP1261]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2439:%.*]] = icmp sgt i32 [[CONV2437]], [[CONV2438]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2439]], label [[IF_THEN2441:%.*]], label [[IF_END2442:%.*]]
// SIMD-ONLY0:       if.then2441:
// SIMD-ONLY0-NEXT:    [[TMP1262:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1262]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2442]]
// SIMD-ONLY0:       if.end2442:
// SIMD-ONLY0-NEXT:    [[TMP1263:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1263]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1264:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2443:%.*]] = sext i16 [[TMP1264]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1265:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2444:%.*]] = sext i16 [[TMP1265]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2445:%.*]] = icmp slt i32 [[CONV2443]], [[CONV2444]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2445]], label [[IF_THEN2447:%.*]], label [[IF_END2448:%.*]]
// SIMD-ONLY0:       if.then2447:
// SIMD-ONLY0-NEXT:    [[TMP1266:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1266]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2448]]
// SIMD-ONLY0:       if.end2448:
// SIMD-ONLY0-NEXT:    [[TMP1267:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1267]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1268:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2449:%.*]] = sext i16 [[TMP1268]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1269:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2450:%.*]] = sext i16 [[TMP1269]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2451:%.*]] = icmp slt i32 [[CONV2449]], [[CONV2450]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2451]], label [[IF_THEN2453:%.*]], label [[IF_END2454:%.*]]
// SIMD-ONLY0:       if.then2453:
// SIMD-ONLY0-NEXT:    [[TMP1270:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1270]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2454]]
// SIMD-ONLY0:       if.end2454:
// SIMD-ONLY0-NEXT:    [[TMP1271:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1271]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1272:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2455:%.*]] = sext i16 [[TMP1272]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1273:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2456:%.*]] = sext i16 [[TMP1273]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2457:%.*]] = icmp eq i32 [[CONV2455]], [[CONV2456]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2457]], label [[IF_THEN2459:%.*]], label [[IF_END2460:%.*]]
// SIMD-ONLY0:       if.then2459:
// SIMD-ONLY0-NEXT:    [[TMP1274:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1274]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2460]]
// SIMD-ONLY0:       if.end2460:
// SIMD-ONLY0-NEXT:    [[TMP1275:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1275]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1276:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2461:%.*]] = sext i16 [[TMP1276]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1277:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2462:%.*]] = sext i16 [[TMP1277]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2463:%.*]] = icmp eq i32 [[CONV2461]], [[CONV2462]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2463]], label [[IF_THEN2465:%.*]], label [[IF_END2466:%.*]]
// SIMD-ONLY0:       if.then2465:
// SIMD-ONLY0-NEXT:    [[TMP1278:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1278]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2466]]
// SIMD-ONLY0:       if.end2466:
// SIMD-ONLY0-NEXT:    [[TMP1279:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1279]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1280:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2467:%.*]] = sext i16 [[TMP1280]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1281:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2468:%.*]] = sext i16 [[TMP1281]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2469:%.*]] = icmp eq i32 [[CONV2467]], [[CONV2468]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2469]], label [[IF_THEN2471:%.*]], label [[IF_ELSE2472:%.*]]
// SIMD-ONLY0:       if.then2471:
// SIMD-ONLY0-NEXT:    [[TMP1282:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1282]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2473:%.*]]
// SIMD-ONLY0:       if.else2472:
// SIMD-ONLY0-NEXT:    [[TMP1283:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1283]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2473]]
// SIMD-ONLY0:       if.end2473:
// SIMD-ONLY0-NEXT:    [[TMP1284:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2474:%.*]] = sext i16 [[TMP1284]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1285:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2475:%.*]] = sext i16 [[TMP1285]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2476:%.*]] = icmp eq i32 [[CONV2474]], [[CONV2475]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2476]], label [[IF_THEN2478:%.*]], label [[IF_ELSE2479:%.*]]
// SIMD-ONLY0:       if.then2478:
// SIMD-ONLY0-NEXT:    [[TMP1286:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1286]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2480:%.*]]
// SIMD-ONLY0:       if.else2479:
// SIMD-ONLY0-NEXT:    [[TMP1287:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1287]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2480]]
// SIMD-ONLY0:       if.end2480:
// SIMD-ONLY0-NEXT:    [[TMP1288:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2481:%.*]] = sext i16 [[TMP1288]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1289:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2482:%.*]] = sext i16 [[TMP1289]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2483:%.*]] = icmp eq i32 [[CONV2481]], [[CONV2482]]
// SIMD-ONLY0-NEXT:    [[CONV2484:%.*]] = zext i1 [[CMP2483]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2485:%.*]] = trunc i32 [[CONV2484]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2485]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1290:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2486:%.*]] = icmp ne i16 [[TMP1290]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2486]], label [[IF_THEN2487:%.*]], label [[IF_END2488:%.*]]
// SIMD-ONLY0:       if.then2487:
// SIMD-ONLY0-NEXT:    [[TMP1291:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1291]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2488]]
// SIMD-ONLY0:       if.end2488:
// SIMD-ONLY0-NEXT:    [[TMP1292:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2489:%.*]] = sext i16 [[TMP1292]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1293:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2490:%.*]] = sext i16 [[TMP1293]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2491:%.*]] = icmp eq i32 [[CONV2489]], [[CONV2490]]
// SIMD-ONLY0-NEXT:    [[CONV2492:%.*]] = zext i1 [[CMP2491]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2493:%.*]] = trunc i32 [[CONV2492]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2493]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1294:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2494:%.*]] = icmp ne i16 [[TMP1294]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2494]], label [[IF_THEN2495:%.*]], label [[IF_END2496:%.*]]
// SIMD-ONLY0:       if.then2495:
// SIMD-ONLY0-NEXT:    [[TMP1295:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1295]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2496]]
// SIMD-ONLY0:       if.end2496:
// SIMD-ONLY0-NEXT:    [[TMP1296:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2497:%.*]] = sext i16 [[TMP1296]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1297:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2498:%.*]] = sext i16 [[TMP1297]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2499:%.*]] = icmp eq i32 [[CONV2497]], [[CONV2498]]
// SIMD-ONLY0-NEXT:    [[CONV2500:%.*]] = zext i1 [[CMP2499]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2501:%.*]] = trunc i32 [[CONV2500]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2501]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1298:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2502:%.*]] = icmp ne i16 [[TMP1298]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2502]], label [[IF_THEN2503:%.*]], label [[IF_ELSE2504:%.*]]
// SIMD-ONLY0:       if.then2503:
// SIMD-ONLY0-NEXT:    [[TMP1299:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1299]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2505:%.*]]
// SIMD-ONLY0:       if.else2504:
// SIMD-ONLY0-NEXT:    [[TMP1300:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1300]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2505]]
// SIMD-ONLY0:       if.end2505:
// SIMD-ONLY0-NEXT:    [[TMP1301:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2506:%.*]] = sext i16 [[TMP1301]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1302:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2507:%.*]] = sext i16 [[TMP1302]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2508:%.*]] = icmp eq i32 [[CONV2506]], [[CONV2507]]
// SIMD-ONLY0-NEXT:    [[CONV2509:%.*]] = zext i1 [[CMP2508]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2510:%.*]] = trunc i32 [[CONV2509]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2510]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1303:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2511:%.*]] = icmp ne i16 [[TMP1303]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2511]], label [[IF_THEN2512:%.*]], label [[IF_ELSE2513:%.*]]
// SIMD-ONLY0:       if.then2512:
// SIMD-ONLY0-NEXT:    [[TMP1304:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1304]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2514:%.*]]
// SIMD-ONLY0:       if.else2513:
// SIMD-ONLY0-NEXT:    [[TMP1305:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1305]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2514]]
// SIMD-ONLY0:       if.end2514:
// SIMD-ONLY0-NEXT:    [[TMP1306:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1306]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1307:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2515:%.*]] = sext i16 [[TMP1307]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1308:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2516:%.*]] = sext i16 [[TMP1308]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2517:%.*]] = icmp sgt i32 [[CONV2515]], [[CONV2516]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2517]], label [[IF_THEN2519:%.*]], label [[IF_END2520:%.*]]
// SIMD-ONLY0:       if.then2519:
// SIMD-ONLY0-NEXT:    [[TMP1309:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1309]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2520]]
// SIMD-ONLY0:       if.end2520:
// SIMD-ONLY0-NEXT:    [[TMP1310:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1310]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1311:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2521:%.*]] = sext i16 [[TMP1311]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1312:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2522:%.*]] = sext i16 [[TMP1312]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2523:%.*]] = icmp sgt i32 [[CONV2521]], [[CONV2522]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2523]], label [[IF_THEN2525:%.*]], label [[IF_END2526:%.*]]
// SIMD-ONLY0:       if.then2525:
// SIMD-ONLY0-NEXT:    [[TMP1313:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1313]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2526]]
// SIMD-ONLY0:       if.end2526:
// SIMD-ONLY0-NEXT:    [[TMP1314:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1314]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1315:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2527:%.*]] = sext i16 [[TMP1315]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1316:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2528:%.*]] = sext i16 [[TMP1316]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2529:%.*]] = icmp slt i32 [[CONV2527]], [[CONV2528]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2529]], label [[IF_THEN2531:%.*]], label [[IF_END2532:%.*]]
// SIMD-ONLY0:       if.then2531:
// SIMD-ONLY0-NEXT:    [[TMP1317:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1317]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2532]]
// SIMD-ONLY0:       if.end2532:
// SIMD-ONLY0-NEXT:    [[TMP1318:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1318]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1319:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2533:%.*]] = sext i16 [[TMP1319]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1320:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2534:%.*]] = sext i16 [[TMP1320]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2535:%.*]] = icmp slt i32 [[CONV2533]], [[CONV2534]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2535]], label [[IF_THEN2537:%.*]], label [[IF_END2538:%.*]]
// SIMD-ONLY0:       if.then2537:
// SIMD-ONLY0-NEXT:    [[TMP1321:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1321]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2538]]
// SIMD-ONLY0:       if.end2538:
// SIMD-ONLY0-NEXT:    [[TMP1322:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1322]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1323:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2539:%.*]] = sext i16 [[TMP1323]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1324:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2540:%.*]] = sext i16 [[TMP1324]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2541:%.*]] = icmp eq i32 [[CONV2539]], [[CONV2540]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2541]], label [[IF_THEN2543:%.*]], label [[IF_END2544:%.*]]
// SIMD-ONLY0:       if.then2543:
// SIMD-ONLY0-NEXT:    [[TMP1325:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1325]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2544]]
// SIMD-ONLY0:       if.end2544:
// SIMD-ONLY0-NEXT:    [[TMP1326:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1326]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1327:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2545:%.*]] = sext i16 [[TMP1327]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1328:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2546:%.*]] = sext i16 [[TMP1328]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2547:%.*]] = icmp eq i32 [[CONV2545]], [[CONV2546]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2547]], label [[IF_THEN2549:%.*]], label [[IF_END2550:%.*]]
// SIMD-ONLY0:       if.then2549:
// SIMD-ONLY0-NEXT:    [[TMP1329:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1329]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2550]]
// SIMD-ONLY0:       if.end2550:
// SIMD-ONLY0-NEXT:    [[TMP1330:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2551:%.*]] = sext i16 [[TMP1330]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1331:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2552:%.*]] = sext i16 [[TMP1331]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2553:%.*]] = icmp sgt i32 [[CONV2551]], [[CONV2552]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2553]], label [[IF_THEN2555:%.*]], label [[IF_END2556:%.*]]
// SIMD-ONLY0:       if.then2555:
// SIMD-ONLY0-NEXT:    [[TMP1332:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1332]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2556]]
// SIMD-ONLY0:       if.end2556:
// SIMD-ONLY0-NEXT:    [[TMP1333:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1333]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1334:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2557:%.*]] = sext i16 [[TMP1334]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1335:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2558:%.*]] = sext i16 [[TMP1335]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2559:%.*]] = icmp sgt i32 [[CONV2557]], [[CONV2558]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2559]], label [[IF_THEN2561:%.*]], label [[IF_END2562:%.*]]
// SIMD-ONLY0:       if.then2561:
// SIMD-ONLY0-NEXT:    [[TMP1336:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1336]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2562]]
// SIMD-ONLY0:       if.end2562:
// SIMD-ONLY0-NEXT:    [[TMP1337:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1337]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1338:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2563:%.*]] = sext i16 [[TMP1338]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1339:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2564:%.*]] = sext i16 [[TMP1339]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2565:%.*]] = icmp slt i32 [[CONV2563]], [[CONV2564]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2565]], label [[IF_THEN2567:%.*]], label [[IF_END2568:%.*]]
// SIMD-ONLY0:       if.then2567:
// SIMD-ONLY0-NEXT:    [[TMP1340:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1340]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2568]]
// SIMD-ONLY0:       if.end2568:
// SIMD-ONLY0-NEXT:    [[TMP1341:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1341]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1342:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2569:%.*]] = sext i16 [[TMP1342]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1343:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2570:%.*]] = sext i16 [[TMP1343]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2571:%.*]] = icmp slt i32 [[CONV2569]], [[CONV2570]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2571]], label [[IF_THEN2573:%.*]], label [[IF_END2574:%.*]]
// SIMD-ONLY0:       if.then2573:
// SIMD-ONLY0-NEXT:    [[TMP1344:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1344]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2574]]
// SIMD-ONLY0:       if.end2574:
// SIMD-ONLY0-NEXT:    [[TMP1345:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1345]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1346:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2575:%.*]] = sext i16 [[TMP1346]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1347:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2576:%.*]] = sext i16 [[TMP1347]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2577:%.*]] = icmp eq i32 [[CONV2575]], [[CONV2576]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2577]], label [[IF_THEN2579:%.*]], label [[IF_END2580:%.*]]
// SIMD-ONLY0:       if.then2579:
// SIMD-ONLY0-NEXT:    [[TMP1348:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1348]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2580]]
// SIMD-ONLY0:       if.end2580:
// SIMD-ONLY0-NEXT:    [[TMP1349:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1349]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1350:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2581:%.*]] = sext i16 [[TMP1350]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1351:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2582:%.*]] = sext i16 [[TMP1351]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2583:%.*]] = icmp eq i32 [[CONV2581]], [[CONV2582]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2583]], label [[IF_THEN2585:%.*]], label [[IF_END2586:%.*]]
// SIMD-ONLY0:       if.then2585:
// SIMD-ONLY0-NEXT:    [[TMP1352:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1352]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2586]]
// SIMD-ONLY0:       if.end2586:
// SIMD-ONLY0-NEXT:    [[TMP1353:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1353]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1354:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2587:%.*]] = sext i16 [[TMP1354]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1355:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2588:%.*]] = sext i16 [[TMP1355]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2589:%.*]] = icmp eq i32 [[CONV2587]], [[CONV2588]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2589]], label [[IF_THEN2591:%.*]], label [[IF_ELSE2592:%.*]]
// SIMD-ONLY0:       if.then2591:
// SIMD-ONLY0-NEXT:    [[TMP1356:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1356]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2593:%.*]]
// SIMD-ONLY0:       if.else2592:
// SIMD-ONLY0-NEXT:    [[TMP1357:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1357]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2593]]
// SIMD-ONLY0:       if.end2593:
// SIMD-ONLY0-NEXT:    [[TMP1358:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2594:%.*]] = sext i16 [[TMP1358]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1359:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2595:%.*]] = sext i16 [[TMP1359]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2596:%.*]] = icmp eq i32 [[CONV2594]], [[CONV2595]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2596]], label [[IF_THEN2598:%.*]], label [[IF_ELSE2599:%.*]]
// SIMD-ONLY0:       if.then2598:
// SIMD-ONLY0-NEXT:    [[TMP1360:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1360]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2600:%.*]]
// SIMD-ONLY0:       if.else2599:
// SIMD-ONLY0-NEXT:    [[TMP1361:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1361]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2600]]
// SIMD-ONLY0:       if.end2600:
// SIMD-ONLY0-NEXT:    [[TMP1362:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2601:%.*]] = sext i16 [[TMP1362]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1363:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2602:%.*]] = sext i16 [[TMP1363]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2603:%.*]] = icmp eq i32 [[CONV2601]], [[CONV2602]]
// SIMD-ONLY0-NEXT:    [[CONV2604:%.*]] = zext i1 [[CMP2603]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2605:%.*]] = trunc i32 [[CONV2604]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2605]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1364:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2606:%.*]] = icmp ne i16 [[TMP1364]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2606]], label [[IF_THEN2607:%.*]], label [[IF_END2608:%.*]]
// SIMD-ONLY0:       if.then2607:
// SIMD-ONLY0-NEXT:    [[TMP1365:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1365]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2608]]
// SIMD-ONLY0:       if.end2608:
// SIMD-ONLY0-NEXT:    [[TMP1366:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2609:%.*]] = sext i16 [[TMP1366]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1367:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2610:%.*]] = sext i16 [[TMP1367]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2611:%.*]] = icmp eq i32 [[CONV2609]], [[CONV2610]]
// SIMD-ONLY0-NEXT:    [[CONV2612:%.*]] = zext i1 [[CMP2611]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2613:%.*]] = trunc i32 [[CONV2612]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2613]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1368:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2614:%.*]] = icmp ne i16 [[TMP1368]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2614]], label [[IF_THEN2615:%.*]], label [[IF_END2616:%.*]]
// SIMD-ONLY0:       if.then2615:
// SIMD-ONLY0-NEXT:    [[TMP1369:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1369]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2616]]
// SIMD-ONLY0:       if.end2616:
// SIMD-ONLY0-NEXT:    [[TMP1370:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2617:%.*]] = sext i16 [[TMP1370]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1371:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2618:%.*]] = sext i16 [[TMP1371]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2619:%.*]] = icmp eq i32 [[CONV2617]], [[CONV2618]]
// SIMD-ONLY0-NEXT:    [[CONV2620:%.*]] = zext i1 [[CMP2619]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2621:%.*]] = trunc i32 [[CONV2620]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2621]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1372:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2622:%.*]] = icmp ne i16 [[TMP1372]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2622]], label [[IF_THEN2623:%.*]], label [[IF_ELSE2624:%.*]]
// SIMD-ONLY0:       if.then2623:
// SIMD-ONLY0-NEXT:    [[TMP1373:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1373]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2625:%.*]]
// SIMD-ONLY0:       if.else2624:
// SIMD-ONLY0-NEXT:    [[TMP1374:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1374]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2625]]
// SIMD-ONLY0:       if.end2625:
// SIMD-ONLY0-NEXT:    [[TMP1375:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2626:%.*]] = sext i16 [[TMP1375]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1376:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2627:%.*]] = sext i16 [[TMP1376]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2628:%.*]] = icmp eq i32 [[CONV2626]], [[CONV2627]]
// SIMD-ONLY0-NEXT:    [[CONV2629:%.*]] = zext i1 [[CMP2628]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2630:%.*]] = trunc i32 [[CONV2629]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2630]], ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1377:%.*]] = load i16, ptr [[SR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2631:%.*]] = icmp ne i16 [[TMP1377]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2631]], label [[IF_THEN2632:%.*]], label [[IF_ELSE2633:%.*]]
// SIMD-ONLY0:       if.then2632:
// SIMD-ONLY0-NEXT:    [[TMP1378:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1378]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2634:%.*]]
// SIMD-ONLY0:       if.else2633:
// SIMD-ONLY0-NEXT:    [[TMP1379:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1379]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2634]]
// SIMD-ONLY0:       if.end2634:
// SIMD-ONLY0-NEXT:    [[TMP1380:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1380]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1381:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2635:%.*]] = zext i16 [[TMP1381]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1382:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2636:%.*]] = zext i16 [[TMP1382]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2637:%.*]] = icmp sgt i32 [[CONV2635]], [[CONV2636]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2637]], label [[IF_THEN2639:%.*]], label [[IF_END2640:%.*]]
// SIMD-ONLY0:       if.then2639:
// SIMD-ONLY0-NEXT:    [[TMP1383:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1383]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2640]]
// SIMD-ONLY0:       if.end2640:
// SIMD-ONLY0-NEXT:    [[TMP1384:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1384]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1385:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2641:%.*]] = zext i16 [[TMP1385]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1386:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2642:%.*]] = zext i16 [[TMP1386]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2643:%.*]] = icmp sgt i32 [[CONV2641]], [[CONV2642]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2643]], label [[IF_THEN2645:%.*]], label [[IF_END2646:%.*]]
// SIMD-ONLY0:       if.then2645:
// SIMD-ONLY0-NEXT:    [[TMP1387:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1387]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2646]]
// SIMD-ONLY0:       if.end2646:
// SIMD-ONLY0-NEXT:    [[TMP1388:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1388]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1389:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2647:%.*]] = zext i16 [[TMP1389]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1390:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2648:%.*]] = zext i16 [[TMP1390]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2649:%.*]] = icmp slt i32 [[CONV2647]], [[CONV2648]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2649]], label [[IF_THEN2651:%.*]], label [[IF_END2652:%.*]]
// SIMD-ONLY0:       if.then2651:
// SIMD-ONLY0-NEXT:    [[TMP1391:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1391]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2652]]
// SIMD-ONLY0:       if.end2652:
// SIMD-ONLY0-NEXT:    [[TMP1392:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1392]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1393:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2653:%.*]] = zext i16 [[TMP1393]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1394:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2654:%.*]] = zext i16 [[TMP1394]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2655:%.*]] = icmp slt i32 [[CONV2653]], [[CONV2654]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2655]], label [[IF_THEN2657:%.*]], label [[IF_END2658:%.*]]
// SIMD-ONLY0:       if.then2657:
// SIMD-ONLY0-NEXT:    [[TMP1395:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1395]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2658]]
// SIMD-ONLY0:       if.end2658:
// SIMD-ONLY0-NEXT:    [[TMP1396:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1396]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1397:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2659:%.*]] = zext i16 [[TMP1397]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1398:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2660:%.*]] = zext i16 [[TMP1398]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2661:%.*]] = icmp eq i32 [[CONV2659]], [[CONV2660]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2661]], label [[IF_THEN2663:%.*]], label [[IF_END2664:%.*]]
// SIMD-ONLY0:       if.then2663:
// SIMD-ONLY0-NEXT:    [[TMP1399:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1399]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2664]]
// SIMD-ONLY0:       if.end2664:
// SIMD-ONLY0-NEXT:    [[TMP1400:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1400]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1401:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2665:%.*]] = zext i16 [[TMP1401]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1402:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2666:%.*]] = zext i16 [[TMP1402]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2667:%.*]] = icmp eq i32 [[CONV2665]], [[CONV2666]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2667]], label [[IF_THEN2669:%.*]], label [[IF_END2670:%.*]]
// SIMD-ONLY0:       if.then2669:
// SIMD-ONLY0-NEXT:    [[TMP1403:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1403]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2670]]
// SIMD-ONLY0:       if.end2670:
// SIMD-ONLY0-NEXT:    [[TMP1404:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2671:%.*]] = zext i16 [[TMP1404]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1405:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2672:%.*]] = zext i16 [[TMP1405]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2673:%.*]] = icmp sgt i32 [[CONV2671]], [[CONV2672]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2673]], label [[IF_THEN2675:%.*]], label [[IF_END2676:%.*]]
// SIMD-ONLY0:       if.then2675:
// SIMD-ONLY0-NEXT:    [[TMP1406:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1406]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2676]]
// SIMD-ONLY0:       if.end2676:
// SIMD-ONLY0-NEXT:    [[TMP1407:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1407]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1408:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2677:%.*]] = zext i16 [[TMP1408]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1409:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2678:%.*]] = zext i16 [[TMP1409]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2679:%.*]] = icmp sgt i32 [[CONV2677]], [[CONV2678]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2679]], label [[IF_THEN2681:%.*]], label [[IF_END2682:%.*]]
// SIMD-ONLY0:       if.then2681:
// SIMD-ONLY0-NEXT:    [[TMP1410:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1410]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2682]]
// SIMD-ONLY0:       if.end2682:
// SIMD-ONLY0-NEXT:    [[TMP1411:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1411]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1412:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2683:%.*]] = zext i16 [[TMP1412]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1413:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2684:%.*]] = zext i16 [[TMP1413]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2685:%.*]] = icmp slt i32 [[CONV2683]], [[CONV2684]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2685]], label [[IF_THEN2687:%.*]], label [[IF_END2688:%.*]]
// SIMD-ONLY0:       if.then2687:
// SIMD-ONLY0-NEXT:    [[TMP1414:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1414]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2688]]
// SIMD-ONLY0:       if.end2688:
// SIMD-ONLY0-NEXT:    [[TMP1415:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1415]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1416:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2689:%.*]] = zext i16 [[TMP1416]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1417:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2690:%.*]] = zext i16 [[TMP1417]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2691:%.*]] = icmp slt i32 [[CONV2689]], [[CONV2690]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2691]], label [[IF_THEN2693:%.*]], label [[IF_END2694:%.*]]
// SIMD-ONLY0:       if.then2693:
// SIMD-ONLY0-NEXT:    [[TMP1418:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1418]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2694]]
// SIMD-ONLY0:       if.end2694:
// SIMD-ONLY0-NEXT:    [[TMP1419:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1419]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1420:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2695:%.*]] = zext i16 [[TMP1420]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1421:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2696:%.*]] = zext i16 [[TMP1421]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2697:%.*]] = icmp eq i32 [[CONV2695]], [[CONV2696]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2697]], label [[IF_THEN2699:%.*]], label [[IF_END2700:%.*]]
// SIMD-ONLY0:       if.then2699:
// SIMD-ONLY0-NEXT:    [[TMP1422:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1422]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2700]]
// SIMD-ONLY0:       if.end2700:
// SIMD-ONLY0-NEXT:    [[TMP1423:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1423]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1424:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2701:%.*]] = zext i16 [[TMP1424]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1425:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2702:%.*]] = zext i16 [[TMP1425]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2703:%.*]] = icmp eq i32 [[CONV2701]], [[CONV2702]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2703]], label [[IF_THEN2705:%.*]], label [[IF_END2706:%.*]]
// SIMD-ONLY0:       if.then2705:
// SIMD-ONLY0-NEXT:    [[TMP1426:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1426]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2706]]
// SIMD-ONLY0:       if.end2706:
// SIMD-ONLY0-NEXT:    [[TMP1427:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1427]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1428:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2707:%.*]] = zext i16 [[TMP1428]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1429:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2708:%.*]] = zext i16 [[TMP1429]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2709:%.*]] = icmp eq i32 [[CONV2707]], [[CONV2708]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2709]], label [[IF_THEN2711:%.*]], label [[IF_ELSE2712:%.*]]
// SIMD-ONLY0:       if.then2711:
// SIMD-ONLY0-NEXT:    [[TMP1430:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1430]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2713:%.*]]
// SIMD-ONLY0:       if.else2712:
// SIMD-ONLY0-NEXT:    [[TMP1431:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1431]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2713]]
// SIMD-ONLY0:       if.end2713:
// SIMD-ONLY0-NEXT:    [[TMP1432:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2714:%.*]] = zext i16 [[TMP1432]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1433:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2715:%.*]] = zext i16 [[TMP1433]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2716:%.*]] = icmp eq i32 [[CONV2714]], [[CONV2715]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2716]], label [[IF_THEN2718:%.*]], label [[IF_ELSE2719:%.*]]
// SIMD-ONLY0:       if.then2718:
// SIMD-ONLY0-NEXT:    [[TMP1434:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1434]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2720:%.*]]
// SIMD-ONLY0:       if.else2719:
// SIMD-ONLY0-NEXT:    [[TMP1435:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1435]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2720]]
// SIMD-ONLY0:       if.end2720:
// SIMD-ONLY0-NEXT:    [[TMP1436:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2721:%.*]] = zext i16 [[TMP1436]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1437:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2722:%.*]] = zext i16 [[TMP1437]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2723:%.*]] = icmp eq i32 [[CONV2721]], [[CONV2722]]
// SIMD-ONLY0-NEXT:    [[CONV2724:%.*]] = zext i1 [[CMP2723]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2725:%.*]] = trunc i32 [[CONV2724]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2725]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1438:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2726:%.*]] = icmp ne i16 [[TMP1438]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2726]], label [[IF_THEN2727:%.*]], label [[IF_END2728:%.*]]
// SIMD-ONLY0:       if.then2727:
// SIMD-ONLY0-NEXT:    [[TMP1439:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1439]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2728]]
// SIMD-ONLY0:       if.end2728:
// SIMD-ONLY0-NEXT:    [[TMP1440:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2729:%.*]] = zext i16 [[TMP1440]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1441:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2730:%.*]] = zext i16 [[TMP1441]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2731:%.*]] = icmp eq i32 [[CONV2729]], [[CONV2730]]
// SIMD-ONLY0-NEXT:    [[CONV2732:%.*]] = zext i1 [[CMP2731]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2733:%.*]] = trunc i32 [[CONV2732]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2733]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1442:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2734:%.*]] = icmp ne i16 [[TMP1442]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2734]], label [[IF_THEN2735:%.*]], label [[IF_END2736:%.*]]
// SIMD-ONLY0:       if.then2735:
// SIMD-ONLY0-NEXT:    [[TMP1443:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1443]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2736]]
// SIMD-ONLY0:       if.end2736:
// SIMD-ONLY0-NEXT:    [[TMP1444:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2737:%.*]] = zext i16 [[TMP1444]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1445:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2738:%.*]] = zext i16 [[TMP1445]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2739:%.*]] = icmp eq i32 [[CONV2737]], [[CONV2738]]
// SIMD-ONLY0-NEXT:    [[CONV2740:%.*]] = zext i1 [[CMP2739]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2741:%.*]] = trunc i32 [[CONV2740]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2741]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1446:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2742:%.*]] = icmp ne i16 [[TMP1446]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2742]], label [[IF_THEN2743:%.*]], label [[IF_ELSE2744:%.*]]
// SIMD-ONLY0:       if.then2743:
// SIMD-ONLY0-NEXT:    [[TMP1447:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1447]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2745:%.*]]
// SIMD-ONLY0:       if.else2744:
// SIMD-ONLY0-NEXT:    [[TMP1448:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1448]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2745]]
// SIMD-ONLY0:       if.end2745:
// SIMD-ONLY0-NEXT:    [[TMP1449:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2746:%.*]] = zext i16 [[TMP1449]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1450:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2747:%.*]] = zext i16 [[TMP1450]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2748:%.*]] = icmp eq i32 [[CONV2746]], [[CONV2747]]
// SIMD-ONLY0-NEXT:    [[CONV2749:%.*]] = zext i1 [[CMP2748]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2750:%.*]] = trunc i32 [[CONV2749]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2750]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1451:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2751:%.*]] = icmp ne i16 [[TMP1451]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2751]], label [[IF_THEN2752:%.*]], label [[IF_ELSE2753:%.*]]
// SIMD-ONLY0:       if.then2752:
// SIMD-ONLY0-NEXT:    [[TMP1452:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1452]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2754:%.*]]
// SIMD-ONLY0:       if.else2753:
// SIMD-ONLY0-NEXT:    [[TMP1453:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1453]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2754]]
// SIMD-ONLY0:       if.end2754:
// SIMD-ONLY0-NEXT:    [[TMP1454:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1454]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1455:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2755:%.*]] = zext i16 [[TMP1455]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1456:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2756:%.*]] = zext i16 [[TMP1456]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2757:%.*]] = icmp sgt i32 [[CONV2755]], [[CONV2756]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2757]], label [[IF_THEN2759:%.*]], label [[IF_END2760:%.*]]
// SIMD-ONLY0:       if.then2759:
// SIMD-ONLY0-NEXT:    [[TMP1457:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1457]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2760]]
// SIMD-ONLY0:       if.end2760:
// SIMD-ONLY0-NEXT:    [[TMP1458:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1458]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1459:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2761:%.*]] = zext i16 [[TMP1459]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1460:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2762:%.*]] = zext i16 [[TMP1460]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2763:%.*]] = icmp sgt i32 [[CONV2761]], [[CONV2762]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2763]], label [[IF_THEN2765:%.*]], label [[IF_END2766:%.*]]
// SIMD-ONLY0:       if.then2765:
// SIMD-ONLY0-NEXT:    [[TMP1461:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1461]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2766]]
// SIMD-ONLY0:       if.end2766:
// SIMD-ONLY0-NEXT:    [[TMP1462:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1462]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1463:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2767:%.*]] = zext i16 [[TMP1463]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1464:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2768:%.*]] = zext i16 [[TMP1464]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2769:%.*]] = icmp slt i32 [[CONV2767]], [[CONV2768]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2769]], label [[IF_THEN2771:%.*]], label [[IF_END2772:%.*]]
// SIMD-ONLY0:       if.then2771:
// SIMD-ONLY0-NEXT:    [[TMP1465:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1465]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2772]]
// SIMD-ONLY0:       if.end2772:
// SIMD-ONLY0-NEXT:    [[TMP1466:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1466]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1467:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2773:%.*]] = zext i16 [[TMP1467]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1468:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2774:%.*]] = zext i16 [[TMP1468]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2775:%.*]] = icmp slt i32 [[CONV2773]], [[CONV2774]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2775]], label [[IF_THEN2777:%.*]], label [[IF_END2778:%.*]]
// SIMD-ONLY0:       if.then2777:
// SIMD-ONLY0-NEXT:    [[TMP1469:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1469]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2778]]
// SIMD-ONLY0:       if.end2778:
// SIMD-ONLY0-NEXT:    [[TMP1470:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1470]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1471:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2779:%.*]] = zext i16 [[TMP1471]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1472:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2780:%.*]] = zext i16 [[TMP1472]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2781:%.*]] = icmp eq i32 [[CONV2779]], [[CONV2780]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2781]], label [[IF_THEN2783:%.*]], label [[IF_END2784:%.*]]
// SIMD-ONLY0:       if.then2783:
// SIMD-ONLY0-NEXT:    [[TMP1473:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1473]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2784]]
// SIMD-ONLY0:       if.end2784:
// SIMD-ONLY0-NEXT:    [[TMP1474:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1474]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1475:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2785:%.*]] = zext i16 [[TMP1475]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1476:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2786:%.*]] = zext i16 [[TMP1476]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2787:%.*]] = icmp eq i32 [[CONV2785]], [[CONV2786]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2787]], label [[IF_THEN2789:%.*]], label [[IF_END2790:%.*]]
// SIMD-ONLY0:       if.then2789:
// SIMD-ONLY0-NEXT:    [[TMP1477:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1477]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2790]]
// SIMD-ONLY0:       if.end2790:
// SIMD-ONLY0-NEXT:    [[TMP1478:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2791:%.*]] = zext i16 [[TMP1478]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1479:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2792:%.*]] = zext i16 [[TMP1479]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2793:%.*]] = icmp sgt i32 [[CONV2791]], [[CONV2792]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2793]], label [[IF_THEN2795:%.*]], label [[IF_END2796:%.*]]
// SIMD-ONLY0:       if.then2795:
// SIMD-ONLY0-NEXT:    [[TMP1480:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1480]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2796]]
// SIMD-ONLY0:       if.end2796:
// SIMD-ONLY0-NEXT:    [[TMP1481:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1481]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1482:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2797:%.*]] = zext i16 [[TMP1482]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1483:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2798:%.*]] = zext i16 [[TMP1483]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2799:%.*]] = icmp sgt i32 [[CONV2797]], [[CONV2798]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2799]], label [[IF_THEN2801:%.*]], label [[IF_END2802:%.*]]
// SIMD-ONLY0:       if.then2801:
// SIMD-ONLY0-NEXT:    [[TMP1484:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1484]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2802]]
// SIMD-ONLY0:       if.end2802:
// SIMD-ONLY0-NEXT:    [[TMP1485:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1485]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1486:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2803:%.*]] = zext i16 [[TMP1486]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1487:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2804:%.*]] = zext i16 [[TMP1487]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2805:%.*]] = icmp slt i32 [[CONV2803]], [[CONV2804]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2805]], label [[IF_THEN2807:%.*]], label [[IF_END2808:%.*]]
// SIMD-ONLY0:       if.then2807:
// SIMD-ONLY0-NEXT:    [[TMP1488:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1488]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2808]]
// SIMD-ONLY0:       if.end2808:
// SIMD-ONLY0-NEXT:    [[TMP1489:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1489]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1490:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2809:%.*]] = zext i16 [[TMP1490]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1491:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2810:%.*]] = zext i16 [[TMP1491]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2811:%.*]] = icmp slt i32 [[CONV2809]], [[CONV2810]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2811]], label [[IF_THEN2813:%.*]], label [[IF_END2814:%.*]]
// SIMD-ONLY0:       if.then2813:
// SIMD-ONLY0-NEXT:    [[TMP1492:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1492]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2814]]
// SIMD-ONLY0:       if.end2814:
// SIMD-ONLY0-NEXT:    [[TMP1493:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1493]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1494:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2815:%.*]] = zext i16 [[TMP1494]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1495:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2816:%.*]] = zext i16 [[TMP1495]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2817:%.*]] = icmp eq i32 [[CONV2815]], [[CONV2816]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2817]], label [[IF_THEN2819:%.*]], label [[IF_END2820:%.*]]
// SIMD-ONLY0:       if.then2819:
// SIMD-ONLY0-NEXT:    [[TMP1496:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1496]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2820]]
// SIMD-ONLY0:       if.end2820:
// SIMD-ONLY0-NEXT:    [[TMP1497:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1497]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1498:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2821:%.*]] = zext i16 [[TMP1498]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1499:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2822:%.*]] = zext i16 [[TMP1499]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2823:%.*]] = icmp eq i32 [[CONV2821]], [[CONV2822]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2823]], label [[IF_THEN2825:%.*]], label [[IF_END2826:%.*]]
// SIMD-ONLY0:       if.then2825:
// SIMD-ONLY0-NEXT:    [[TMP1500:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1500]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2826]]
// SIMD-ONLY0:       if.end2826:
// SIMD-ONLY0-NEXT:    [[TMP1501:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1501]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1502:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2827:%.*]] = zext i16 [[TMP1502]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1503:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2828:%.*]] = zext i16 [[TMP1503]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2829:%.*]] = icmp eq i32 [[CONV2827]], [[CONV2828]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2829]], label [[IF_THEN2831:%.*]], label [[IF_ELSE2832:%.*]]
// SIMD-ONLY0:       if.then2831:
// SIMD-ONLY0-NEXT:    [[TMP1504:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1504]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2833:%.*]]
// SIMD-ONLY0:       if.else2832:
// SIMD-ONLY0-NEXT:    [[TMP1505:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1505]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2833]]
// SIMD-ONLY0:       if.end2833:
// SIMD-ONLY0-NEXT:    [[TMP1506:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2834:%.*]] = zext i16 [[TMP1506]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1507:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2835:%.*]] = zext i16 [[TMP1507]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2836:%.*]] = icmp eq i32 [[CONV2834]], [[CONV2835]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2836]], label [[IF_THEN2838:%.*]], label [[IF_ELSE2839:%.*]]
// SIMD-ONLY0:       if.then2838:
// SIMD-ONLY0-NEXT:    [[TMP1508:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1508]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2840:%.*]]
// SIMD-ONLY0:       if.else2839:
// SIMD-ONLY0-NEXT:    [[TMP1509:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1509]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2840]]
// SIMD-ONLY0:       if.end2840:
// SIMD-ONLY0-NEXT:    [[TMP1510:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2841:%.*]] = zext i16 [[TMP1510]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1511:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2842:%.*]] = zext i16 [[TMP1511]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2843:%.*]] = icmp eq i32 [[CONV2841]], [[CONV2842]]
// SIMD-ONLY0-NEXT:    [[CONV2844:%.*]] = zext i1 [[CMP2843]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2845:%.*]] = trunc i32 [[CONV2844]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2845]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1512:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2846:%.*]] = icmp ne i16 [[TMP1512]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2846]], label [[IF_THEN2847:%.*]], label [[IF_END2848:%.*]]
// SIMD-ONLY0:       if.then2847:
// SIMD-ONLY0-NEXT:    [[TMP1513:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1513]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2848]]
// SIMD-ONLY0:       if.end2848:
// SIMD-ONLY0-NEXT:    [[TMP1514:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2849:%.*]] = zext i16 [[TMP1514]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1515:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2850:%.*]] = zext i16 [[TMP1515]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2851:%.*]] = icmp eq i32 [[CONV2849]], [[CONV2850]]
// SIMD-ONLY0-NEXT:    [[CONV2852:%.*]] = zext i1 [[CMP2851]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2853:%.*]] = trunc i32 [[CONV2852]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2853]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1516:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2854:%.*]] = icmp ne i16 [[TMP1516]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2854]], label [[IF_THEN2855:%.*]], label [[IF_END2856:%.*]]
// SIMD-ONLY0:       if.then2855:
// SIMD-ONLY0-NEXT:    [[TMP1517:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1517]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2856]]
// SIMD-ONLY0:       if.end2856:
// SIMD-ONLY0-NEXT:    [[TMP1518:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2857:%.*]] = zext i16 [[TMP1518]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1519:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2858:%.*]] = zext i16 [[TMP1519]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2859:%.*]] = icmp eq i32 [[CONV2857]], [[CONV2858]]
// SIMD-ONLY0-NEXT:    [[CONV2860:%.*]] = zext i1 [[CMP2859]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2861:%.*]] = trunc i32 [[CONV2860]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2861]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1520:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2862:%.*]] = icmp ne i16 [[TMP1520]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2862]], label [[IF_THEN2863:%.*]], label [[IF_ELSE2864:%.*]]
// SIMD-ONLY0:       if.then2863:
// SIMD-ONLY0-NEXT:    [[TMP1521:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1521]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2865:%.*]]
// SIMD-ONLY0:       if.else2864:
// SIMD-ONLY0-NEXT:    [[TMP1522:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1522]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2865]]
// SIMD-ONLY0:       if.end2865:
// SIMD-ONLY0-NEXT:    [[TMP1523:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2866:%.*]] = zext i16 [[TMP1523]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1524:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2867:%.*]] = zext i16 [[TMP1524]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2868:%.*]] = icmp eq i32 [[CONV2866]], [[CONV2867]]
// SIMD-ONLY0-NEXT:    [[CONV2869:%.*]] = zext i1 [[CMP2868]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2870:%.*]] = trunc i32 [[CONV2869]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2870]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1525:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2871:%.*]] = icmp ne i16 [[TMP1525]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2871]], label [[IF_THEN2872:%.*]], label [[IF_ELSE2873:%.*]]
// SIMD-ONLY0:       if.then2872:
// SIMD-ONLY0-NEXT:    [[TMP1526:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1526]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2874:%.*]]
// SIMD-ONLY0:       if.else2873:
// SIMD-ONLY0-NEXT:    [[TMP1527:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1527]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2874]]
// SIMD-ONLY0:       if.end2874:
// SIMD-ONLY0-NEXT:    [[TMP1528:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1528]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1529:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2875:%.*]] = zext i16 [[TMP1529]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1530:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2876:%.*]] = zext i16 [[TMP1530]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2877:%.*]] = icmp sgt i32 [[CONV2875]], [[CONV2876]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2877]], label [[IF_THEN2879:%.*]], label [[IF_END2880:%.*]]
// SIMD-ONLY0:       if.then2879:
// SIMD-ONLY0-NEXT:    [[TMP1531:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1531]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2880]]
// SIMD-ONLY0:       if.end2880:
// SIMD-ONLY0-NEXT:    [[TMP1532:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1532]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1533:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2881:%.*]] = zext i16 [[TMP1533]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1534:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2882:%.*]] = zext i16 [[TMP1534]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2883:%.*]] = icmp sgt i32 [[CONV2881]], [[CONV2882]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2883]], label [[IF_THEN2885:%.*]], label [[IF_END2886:%.*]]
// SIMD-ONLY0:       if.then2885:
// SIMD-ONLY0-NEXT:    [[TMP1535:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1535]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2886]]
// SIMD-ONLY0:       if.end2886:
// SIMD-ONLY0-NEXT:    [[TMP1536:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1536]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1537:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2887:%.*]] = zext i16 [[TMP1537]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1538:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2888:%.*]] = zext i16 [[TMP1538]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2889:%.*]] = icmp slt i32 [[CONV2887]], [[CONV2888]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2889]], label [[IF_THEN2891:%.*]], label [[IF_END2892:%.*]]
// SIMD-ONLY0:       if.then2891:
// SIMD-ONLY0-NEXT:    [[TMP1539:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1539]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2892]]
// SIMD-ONLY0:       if.end2892:
// SIMD-ONLY0-NEXT:    [[TMP1540:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1540]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1541:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2893:%.*]] = zext i16 [[TMP1541]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1542:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2894:%.*]] = zext i16 [[TMP1542]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2895:%.*]] = icmp slt i32 [[CONV2893]], [[CONV2894]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2895]], label [[IF_THEN2897:%.*]], label [[IF_END2898:%.*]]
// SIMD-ONLY0:       if.then2897:
// SIMD-ONLY0-NEXT:    [[TMP1543:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1543]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2898]]
// SIMD-ONLY0:       if.end2898:
// SIMD-ONLY0-NEXT:    [[TMP1544:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1544]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1545:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2899:%.*]] = zext i16 [[TMP1545]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1546:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2900:%.*]] = zext i16 [[TMP1546]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2901:%.*]] = icmp eq i32 [[CONV2899]], [[CONV2900]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2901]], label [[IF_THEN2903:%.*]], label [[IF_END2904:%.*]]
// SIMD-ONLY0:       if.then2903:
// SIMD-ONLY0-NEXT:    [[TMP1547:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1547]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2904]]
// SIMD-ONLY0:       if.end2904:
// SIMD-ONLY0-NEXT:    [[TMP1548:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1548]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1549:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2905:%.*]] = zext i16 [[TMP1549]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1550:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2906:%.*]] = zext i16 [[TMP1550]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2907:%.*]] = icmp eq i32 [[CONV2905]], [[CONV2906]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2907]], label [[IF_THEN2909:%.*]], label [[IF_END2910:%.*]]
// SIMD-ONLY0:       if.then2909:
// SIMD-ONLY0-NEXT:    [[TMP1551:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1551]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2910]]
// SIMD-ONLY0:       if.end2910:
// SIMD-ONLY0-NEXT:    [[TMP1552:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2911:%.*]] = zext i16 [[TMP1552]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1553:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2912:%.*]] = zext i16 [[TMP1553]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2913:%.*]] = icmp sgt i32 [[CONV2911]], [[CONV2912]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2913]], label [[IF_THEN2915:%.*]], label [[IF_END2916:%.*]]
// SIMD-ONLY0:       if.then2915:
// SIMD-ONLY0-NEXT:    [[TMP1554:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1554]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2916]]
// SIMD-ONLY0:       if.end2916:
// SIMD-ONLY0-NEXT:    [[TMP1555:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1555]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1556:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2917:%.*]] = zext i16 [[TMP1556]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1557:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2918:%.*]] = zext i16 [[TMP1557]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2919:%.*]] = icmp sgt i32 [[CONV2917]], [[CONV2918]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2919]], label [[IF_THEN2921:%.*]], label [[IF_END2922:%.*]]
// SIMD-ONLY0:       if.then2921:
// SIMD-ONLY0-NEXT:    [[TMP1558:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1558]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2922]]
// SIMD-ONLY0:       if.end2922:
// SIMD-ONLY0-NEXT:    [[TMP1559:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1559]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1560:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2923:%.*]] = zext i16 [[TMP1560]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1561:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2924:%.*]] = zext i16 [[TMP1561]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2925:%.*]] = icmp slt i32 [[CONV2923]], [[CONV2924]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2925]], label [[IF_THEN2927:%.*]], label [[IF_END2928:%.*]]
// SIMD-ONLY0:       if.then2927:
// SIMD-ONLY0-NEXT:    [[TMP1562:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1562]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2928]]
// SIMD-ONLY0:       if.end2928:
// SIMD-ONLY0-NEXT:    [[TMP1563:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1563]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1564:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2929:%.*]] = zext i16 [[TMP1564]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1565:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2930:%.*]] = zext i16 [[TMP1565]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2931:%.*]] = icmp slt i32 [[CONV2929]], [[CONV2930]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2931]], label [[IF_THEN2933:%.*]], label [[IF_END2934:%.*]]
// SIMD-ONLY0:       if.then2933:
// SIMD-ONLY0-NEXT:    [[TMP1566:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1566]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2934]]
// SIMD-ONLY0:       if.end2934:
// SIMD-ONLY0-NEXT:    [[TMP1567:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1567]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1568:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2935:%.*]] = zext i16 [[TMP1568]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1569:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2936:%.*]] = zext i16 [[TMP1569]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2937:%.*]] = icmp eq i32 [[CONV2935]], [[CONV2936]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2937]], label [[IF_THEN2939:%.*]], label [[IF_END2940:%.*]]
// SIMD-ONLY0:       if.then2939:
// SIMD-ONLY0-NEXT:    [[TMP1570:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1570]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2940]]
// SIMD-ONLY0:       if.end2940:
// SIMD-ONLY0-NEXT:    [[TMP1571:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1571]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1572:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2941:%.*]] = zext i16 [[TMP1572]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1573:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2942:%.*]] = zext i16 [[TMP1573]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2943:%.*]] = icmp eq i32 [[CONV2941]], [[CONV2942]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2943]], label [[IF_THEN2945:%.*]], label [[IF_END2946:%.*]]
// SIMD-ONLY0:       if.then2945:
// SIMD-ONLY0-NEXT:    [[TMP1574:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1574]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2946]]
// SIMD-ONLY0:       if.end2946:
// SIMD-ONLY0-NEXT:    [[TMP1575:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1575]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1576:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2947:%.*]] = zext i16 [[TMP1576]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1577:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2948:%.*]] = zext i16 [[TMP1577]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2949:%.*]] = icmp eq i32 [[CONV2947]], [[CONV2948]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2949]], label [[IF_THEN2951:%.*]], label [[IF_ELSE2952:%.*]]
// SIMD-ONLY0:       if.then2951:
// SIMD-ONLY0-NEXT:    [[TMP1578:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1578]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2953:%.*]]
// SIMD-ONLY0:       if.else2952:
// SIMD-ONLY0-NEXT:    [[TMP1579:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1579]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2953]]
// SIMD-ONLY0:       if.end2953:
// SIMD-ONLY0-NEXT:    [[TMP1580:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2954:%.*]] = zext i16 [[TMP1580]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1581:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2955:%.*]] = zext i16 [[TMP1581]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2956:%.*]] = icmp eq i32 [[CONV2954]], [[CONV2955]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2956]], label [[IF_THEN2958:%.*]], label [[IF_ELSE2959:%.*]]
// SIMD-ONLY0:       if.then2958:
// SIMD-ONLY0-NEXT:    [[TMP1582:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1582]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2960:%.*]]
// SIMD-ONLY0:       if.else2959:
// SIMD-ONLY0-NEXT:    [[TMP1583:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1583]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2960]]
// SIMD-ONLY0:       if.end2960:
// SIMD-ONLY0-NEXT:    [[TMP1584:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2961:%.*]] = zext i16 [[TMP1584]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1585:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2962:%.*]] = zext i16 [[TMP1585]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2963:%.*]] = icmp eq i32 [[CONV2961]], [[CONV2962]]
// SIMD-ONLY0-NEXT:    [[CONV2964:%.*]] = zext i1 [[CMP2963]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2965:%.*]] = trunc i32 [[CONV2964]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2965]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1586:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2966:%.*]] = icmp ne i16 [[TMP1586]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2966]], label [[IF_THEN2967:%.*]], label [[IF_END2968:%.*]]
// SIMD-ONLY0:       if.then2967:
// SIMD-ONLY0-NEXT:    [[TMP1587:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1587]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2968]]
// SIMD-ONLY0:       if.end2968:
// SIMD-ONLY0-NEXT:    [[TMP1588:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2969:%.*]] = zext i16 [[TMP1588]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1589:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2970:%.*]] = zext i16 [[TMP1589]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2971:%.*]] = icmp eq i32 [[CONV2969]], [[CONV2970]]
// SIMD-ONLY0-NEXT:    [[CONV2972:%.*]] = zext i1 [[CMP2971]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2973:%.*]] = trunc i32 [[CONV2972]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2973]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1590:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2974:%.*]] = icmp ne i16 [[TMP1590]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2974]], label [[IF_THEN2975:%.*]], label [[IF_END2976:%.*]]
// SIMD-ONLY0:       if.then2975:
// SIMD-ONLY0-NEXT:    [[TMP1591:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1591]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2976]]
// SIMD-ONLY0:       if.end2976:
// SIMD-ONLY0-NEXT:    [[TMP1592:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2977:%.*]] = zext i16 [[TMP1592]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1593:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2978:%.*]] = zext i16 [[TMP1593]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2979:%.*]] = icmp eq i32 [[CONV2977]], [[CONV2978]]
// SIMD-ONLY0-NEXT:    [[CONV2980:%.*]] = zext i1 [[CMP2979]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2981:%.*]] = trunc i32 [[CONV2980]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2981]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1594:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2982:%.*]] = icmp ne i16 [[TMP1594]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2982]], label [[IF_THEN2983:%.*]], label [[IF_ELSE2984:%.*]]
// SIMD-ONLY0:       if.then2983:
// SIMD-ONLY0-NEXT:    [[TMP1595:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1595]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2985:%.*]]
// SIMD-ONLY0:       if.else2984:
// SIMD-ONLY0-NEXT:    [[TMP1596:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1596]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2985]]
// SIMD-ONLY0:       if.end2985:
// SIMD-ONLY0-NEXT:    [[TMP1597:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2986:%.*]] = zext i16 [[TMP1597]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1598:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2987:%.*]] = zext i16 [[TMP1598]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2988:%.*]] = icmp eq i32 [[CONV2986]], [[CONV2987]]
// SIMD-ONLY0-NEXT:    [[CONV2989:%.*]] = zext i1 [[CMP2988]] to i32
// SIMD-ONLY0-NEXT:    [[CONV2990:%.*]] = trunc i32 [[CONV2989]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV2990]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1599:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL2991:%.*]] = icmp ne i16 [[TMP1599]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL2991]], label [[IF_THEN2992:%.*]], label [[IF_ELSE2993:%.*]]
// SIMD-ONLY0:       if.then2992:
// SIMD-ONLY0-NEXT:    [[TMP1600:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1600]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2994:%.*]]
// SIMD-ONLY0:       if.else2993:
// SIMD-ONLY0-NEXT:    [[TMP1601:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1601]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END2994]]
// SIMD-ONLY0:       if.end2994:
// SIMD-ONLY0-NEXT:    [[TMP1602:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1602]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1603:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2995:%.*]] = zext i16 [[TMP1603]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1604:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV2996:%.*]] = zext i16 [[TMP1604]] to i32
// SIMD-ONLY0-NEXT:    [[CMP2997:%.*]] = icmp sgt i32 [[CONV2995]], [[CONV2996]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP2997]], label [[IF_THEN2999:%.*]], label [[IF_END3000:%.*]]
// SIMD-ONLY0:       if.then2999:
// SIMD-ONLY0-NEXT:    [[TMP1605:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1605]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3000]]
// SIMD-ONLY0:       if.end3000:
// SIMD-ONLY0-NEXT:    [[TMP1606:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1606]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1607:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3001:%.*]] = zext i16 [[TMP1607]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1608:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3002:%.*]] = zext i16 [[TMP1608]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3003:%.*]] = icmp sgt i32 [[CONV3001]], [[CONV3002]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3003]], label [[IF_THEN3005:%.*]], label [[IF_END3006:%.*]]
// SIMD-ONLY0:       if.then3005:
// SIMD-ONLY0-NEXT:    [[TMP1609:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1609]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3006]]
// SIMD-ONLY0:       if.end3006:
// SIMD-ONLY0-NEXT:    [[TMP1610:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1610]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1611:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3007:%.*]] = zext i16 [[TMP1611]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1612:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3008:%.*]] = zext i16 [[TMP1612]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3009:%.*]] = icmp slt i32 [[CONV3007]], [[CONV3008]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3009]], label [[IF_THEN3011:%.*]], label [[IF_END3012:%.*]]
// SIMD-ONLY0:       if.then3011:
// SIMD-ONLY0-NEXT:    [[TMP1613:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1613]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3012]]
// SIMD-ONLY0:       if.end3012:
// SIMD-ONLY0-NEXT:    [[TMP1614:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1614]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1615:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3013:%.*]] = zext i16 [[TMP1615]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1616:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3014:%.*]] = zext i16 [[TMP1616]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3015:%.*]] = icmp slt i32 [[CONV3013]], [[CONV3014]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3015]], label [[IF_THEN3017:%.*]], label [[IF_END3018:%.*]]
// SIMD-ONLY0:       if.then3017:
// SIMD-ONLY0-NEXT:    [[TMP1617:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1617]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3018]]
// SIMD-ONLY0:       if.end3018:
// SIMD-ONLY0-NEXT:    [[TMP1618:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1618]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1619:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3019:%.*]] = zext i16 [[TMP1619]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1620:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3020:%.*]] = zext i16 [[TMP1620]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3021:%.*]] = icmp eq i32 [[CONV3019]], [[CONV3020]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3021]], label [[IF_THEN3023:%.*]], label [[IF_END3024:%.*]]
// SIMD-ONLY0:       if.then3023:
// SIMD-ONLY0-NEXT:    [[TMP1621:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1621]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3024]]
// SIMD-ONLY0:       if.end3024:
// SIMD-ONLY0-NEXT:    [[TMP1622:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1622]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1623:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3025:%.*]] = zext i16 [[TMP1623]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1624:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3026:%.*]] = zext i16 [[TMP1624]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3027:%.*]] = icmp eq i32 [[CONV3025]], [[CONV3026]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3027]], label [[IF_THEN3029:%.*]], label [[IF_END3030:%.*]]
// SIMD-ONLY0:       if.then3029:
// SIMD-ONLY0-NEXT:    [[TMP1625:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1625]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3030]]
// SIMD-ONLY0:       if.end3030:
// SIMD-ONLY0-NEXT:    [[TMP1626:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3031:%.*]] = zext i16 [[TMP1626]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1627:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3032:%.*]] = zext i16 [[TMP1627]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3033:%.*]] = icmp sgt i32 [[CONV3031]], [[CONV3032]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3033]], label [[IF_THEN3035:%.*]], label [[IF_END3036:%.*]]
// SIMD-ONLY0:       if.then3035:
// SIMD-ONLY0-NEXT:    [[TMP1628:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1628]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3036]]
// SIMD-ONLY0:       if.end3036:
// SIMD-ONLY0-NEXT:    [[TMP1629:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1629]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1630:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3037:%.*]] = zext i16 [[TMP1630]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1631:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3038:%.*]] = zext i16 [[TMP1631]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3039:%.*]] = icmp sgt i32 [[CONV3037]], [[CONV3038]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3039]], label [[IF_THEN3041:%.*]], label [[IF_END3042:%.*]]
// SIMD-ONLY0:       if.then3041:
// SIMD-ONLY0-NEXT:    [[TMP1632:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1632]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3042]]
// SIMD-ONLY0:       if.end3042:
// SIMD-ONLY0-NEXT:    [[TMP1633:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1633]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1634:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3043:%.*]] = zext i16 [[TMP1634]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1635:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3044:%.*]] = zext i16 [[TMP1635]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3045:%.*]] = icmp slt i32 [[CONV3043]], [[CONV3044]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3045]], label [[IF_THEN3047:%.*]], label [[IF_END3048:%.*]]
// SIMD-ONLY0:       if.then3047:
// SIMD-ONLY0-NEXT:    [[TMP1636:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1636]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3048]]
// SIMD-ONLY0:       if.end3048:
// SIMD-ONLY0-NEXT:    [[TMP1637:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1637]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1638:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3049:%.*]] = zext i16 [[TMP1638]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1639:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3050:%.*]] = zext i16 [[TMP1639]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3051:%.*]] = icmp slt i32 [[CONV3049]], [[CONV3050]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3051]], label [[IF_THEN3053:%.*]], label [[IF_END3054:%.*]]
// SIMD-ONLY0:       if.then3053:
// SIMD-ONLY0-NEXT:    [[TMP1640:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1640]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3054]]
// SIMD-ONLY0:       if.end3054:
// SIMD-ONLY0-NEXT:    [[TMP1641:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1641]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1642:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3055:%.*]] = zext i16 [[TMP1642]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1643:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3056:%.*]] = zext i16 [[TMP1643]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3057:%.*]] = icmp eq i32 [[CONV3055]], [[CONV3056]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3057]], label [[IF_THEN3059:%.*]], label [[IF_END3060:%.*]]
// SIMD-ONLY0:       if.then3059:
// SIMD-ONLY0-NEXT:    [[TMP1644:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1644]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3060]]
// SIMD-ONLY0:       if.end3060:
// SIMD-ONLY0-NEXT:    [[TMP1645:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1645]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1646:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3061:%.*]] = zext i16 [[TMP1646]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1647:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3062:%.*]] = zext i16 [[TMP1647]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3063:%.*]] = icmp eq i32 [[CONV3061]], [[CONV3062]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3063]], label [[IF_THEN3065:%.*]], label [[IF_END3066:%.*]]
// SIMD-ONLY0:       if.then3065:
// SIMD-ONLY0-NEXT:    [[TMP1648:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1648]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3066]]
// SIMD-ONLY0:       if.end3066:
// SIMD-ONLY0-NEXT:    [[TMP1649:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1649]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1650:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3067:%.*]] = zext i16 [[TMP1650]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1651:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3068:%.*]] = zext i16 [[TMP1651]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3069:%.*]] = icmp eq i32 [[CONV3067]], [[CONV3068]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3069]], label [[IF_THEN3071:%.*]], label [[IF_ELSE3072:%.*]]
// SIMD-ONLY0:       if.then3071:
// SIMD-ONLY0-NEXT:    [[TMP1652:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1652]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3073:%.*]]
// SIMD-ONLY0:       if.else3072:
// SIMD-ONLY0-NEXT:    [[TMP1653:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1653]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3073]]
// SIMD-ONLY0:       if.end3073:
// SIMD-ONLY0-NEXT:    [[TMP1654:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3074:%.*]] = zext i16 [[TMP1654]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1655:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3075:%.*]] = zext i16 [[TMP1655]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3076:%.*]] = icmp eq i32 [[CONV3074]], [[CONV3075]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3076]], label [[IF_THEN3078:%.*]], label [[IF_ELSE3079:%.*]]
// SIMD-ONLY0:       if.then3078:
// SIMD-ONLY0-NEXT:    [[TMP1656:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1656]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3080:%.*]]
// SIMD-ONLY0:       if.else3079:
// SIMD-ONLY0-NEXT:    [[TMP1657:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1657]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3080]]
// SIMD-ONLY0:       if.end3080:
// SIMD-ONLY0-NEXT:    [[TMP1658:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3081:%.*]] = zext i16 [[TMP1658]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1659:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3082:%.*]] = zext i16 [[TMP1659]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3083:%.*]] = icmp eq i32 [[CONV3081]], [[CONV3082]]
// SIMD-ONLY0-NEXT:    [[CONV3084:%.*]] = zext i1 [[CMP3083]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3085:%.*]] = trunc i32 [[CONV3084]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3085]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1660:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3086:%.*]] = icmp ne i16 [[TMP1660]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3086]], label [[IF_THEN3087:%.*]], label [[IF_END3088:%.*]]
// SIMD-ONLY0:       if.then3087:
// SIMD-ONLY0-NEXT:    [[TMP1661:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1661]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3088]]
// SIMD-ONLY0:       if.end3088:
// SIMD-ONLY0-NEXT:    [[TMP1662:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3089:%.*]] = zext i16 [[TMP1662]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1663:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3090:%.*]] = zext i16 [[TMP1663]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3091:%.*]] = icmp eq i32 [[CONV3089]], [[CONV3090]]
// SIMD-ONLY0-NEXT:    [[CONV3092:%.*]] = zext i1 [[CMP3091]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3093:%.*]] = trunc i32 [[CONV3092]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3093]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1664:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3094:%.*]] = icmp ne i16 [[TMP1664]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3094]], label [[IF_THEN3095:%.*]], label [[IF_END3096:%.*]]
// SIMD-ONLY0:       if.then3095:
// SIMD-ONLY0-NEXT:    [[TMP1665:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1665]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3096]]
// SIMD-ONLY0:       if.end3096:
// SIMD-ONLY0-NEXT:    [[TMP1666:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3097:%.*]] = zext i16 [[TMP1666]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1667:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3098:%.*]] = zext i16 [[TMP1667]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3099:%.*]] = icmp eq i32 [[CONV3097]], [[CONV3098]]
// SIMD-ONLY0-NEXT:    [[CONV3100:%.*]] = zext i1 [[CMP3099]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3101:%.*]] = trunc i32 [[CONV3100]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3101]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1668:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3102:%.*]] = icmp ne i16 [[TMP1668]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3102]], label [[IF_THEN3103:%.*]], label [[IF_ELSE3104:%.*]]
// SIMD-ONLY0:       if.then3103:
// SIMD-ONLY0-NEXT:    [[TMP1669:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1669]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3105:%.*]]
// SIMD-ONLY0:       if.else3104:
// SIMD-ONLY0-NEXT:    [[TMP1670:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1670]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3105]]
// SIMD-ONLY0:       if.end3105:
// SIMD-ONLY0-NEXT:    [[TMP1671:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3106:%.*]] = zext i16 [[TMP1671]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1672:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3107:%.*]] = zext i16 [[TMP1672]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3108:%.*]] = icmp eq i32 [[CONV3106]], [[CONV3107]]
// SIMD-ONLY0-NEXT:    [[CONV3109:%.*]] = zext i1 [[CMP3108]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3110:%.*]] = trunc i32 [[CONV3109]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3110]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1673:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3111:%.*]] = icmp ne i16 [[TMP1673]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3111]], label [[IF_THEN3112:%.*]], label [[IF_ELSE3113:%.*]]
// SIMD-ONLY0:       if.then3112:
// SIMD-ONLY0-NEXT:    [[TMP1674:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1674]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3114:%.*]]
// SIMD-ONLY0:       if.else3113:
// SIMD-ONLY0-NEXT:    [[TMP1675:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1675]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3114]]
// SIMD-ONLY0:       if.end3114:
// SIMD-ONLY0-NEXT:    [[TMP1676:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1676]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1677:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3115:%.*]] = zext i16 [[TMP1677]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1678:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3116:%.*]] = zext i16 [[TMP1678]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3117:%.*]] = icmp sgt i32 [[CONV3115]], [[CONV3116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3117]], label [[IF_THEN3119:%.*]], label [[IF_END3120:%.*]]
// SIMD-ONLY0:       if.then3119:
// SIMD-ONLY0-NEXT:    [[TMP1679:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1679]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3120]]
// SIMD-ONLY0:       if.end3120:
// SIMD-ONLY0-NEXT:    [[TMP1680:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1680]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1681:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3121:%.*]] = zext i16 [[TMP1681]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1682:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3122:%.*]] = zext i16 [[TMP1682]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3123:%.*]] = icmp sgt i32 [[CONV3121]], [[CONV3122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3123]], label [[IF_THEN3125:%.*]], label [[IF_END3126:%.*]]
// SIMD-ONLY0:       if.then3125:
// SIMD-ONLY0-NEXT:    [[TMP1683:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1683]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3126]]
// SIMD-ONLY0:       if.end3126:
// SIMD-ONLY0-NEXT:    [[TMP1684:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1684]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1685:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3127:%.*]] = zext i16 [[TMP1685]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1686:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3128:%.*]] = zext i16 [[TMP1686]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3129:%.*]] = icmp slt i32 [[CONV3127]], [[CONV3128]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3129]], label [[IF_THEN3131:%.*]], label [[IF_END3132:%.*]]
// SIMD-ONLY0:       if.then3131:
// SIMD-ONLY0-NEXT:    [[TMP1687:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1687]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3132]]
// SIMD-ONLY0:       if.end3132:
// SIMD-ONLY0-NEXT:    [[TMP1688:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1688]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1689:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3133:%.*]] = zext i16 [[TMP1689]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1690:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3134:%.*]] = zext i16 [[TMP1690]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3135:%.*]] = icmp slt i32 [[CONV3133]], [[CONV3134]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3135]], label [[IF_THEN3137:%.*]], label [[IF_END3138:%.*]]
// SIMD-ONLY0:       if.then3137:
// SIMD-ONLY0-NEXT:    [[TMP1691:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1691]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3138]]
// SIMD-ONLY0:       if.end3138:
// SIMD-ONLY0-NEXT:    [[TMP1692:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1692]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1693:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3139:%.*]] = zext i16 [[TMP1693]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1694:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3140:%.*]] = zext i16 [[TMP1694]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3141:%.*]] = icmp eq i32 [[CONV3139]], [[CONV3140]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3141]], label [[IF_THEN3143:%.*]], label [[IF_END3144:%.*]]
// SIMD-ONLY0:       if.then3143:
// SIMD-ONLY0-NEXT:    [[TMP1695:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1695]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3144]]
// SIMD-ONLY0:       if.end3144:
// SIMD-ONLY0-NEXT:    [[TMP1696:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1696]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1697:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3145:%.*]] = zext i16 [[TMP1697]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1698:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3146:%.*]] = zext i16 [[TMP1698]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3147:%.*]] = icmp eq i32 [[CONV3145]], [[CONV3146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3147]], label [[IF_THEN3149:%.*]], label [[IF_END3150:%.*]]
// SIMD-ONLY0:       if.then3149:
// SIMD-ONLY0-NEXT:    [[TMP1699:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1699]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3150]]
// SIMD-ONLY0:       if.end3150:
// SIMD-ONLY0-NEXT:    [[TMP1700:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3151:%.*]] = zext i16 [[TMP1700]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1701:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3152:%.*]] = zext i16 [[TMP1701]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3153:%.*]] = icmp sgt i32 [[CONV3151]], [[CONV3152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3153]], label [[IF_THEN3155:%.*]], label [[IF_END3156:%.*]]
// SIMD-ONLY0:       if.then3155:
// SIMD-ONLY0-NEXT:    [[TMP1702:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1702]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3156]]
// SIMD-ONLY0:       if.end3156:
// SIMD-ONLY0-NEXT:    [[TMP1703:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1703]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1704:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3157:%.*]] = zext i16 [[TMP1704]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1705:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3158:%.*]] = zext i16 [[TMP1705]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3159:%.*]] = icmp sgt i32 [[CONV3157]], [[CONV3158]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3159]], label [[IF_THEN3161:%.*]], label [[IF_END3162:%.*]]
// SIMD-ONLY0:       if.then3161:
// SIMD-ONLY0-NEXT:    [[TMP1706:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1706]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3162]]
// SIMD-ONLY0:       if.end3162:
// SIMD-ONLY0-NEXT:    [[TMP1707:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1707]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1708:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3163:%.*]] = zext i16 [[TMP1708]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1709:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3164:%.*]] = zext i16 [[TMP1709]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3165:%.*]] = icmp slt i32 [[CONV3163]], [[CONV3164]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3165]], label [[IF_THEN3167:%.*]], label [[IF_END3168:%.*]]
// SIMD-ONLY0:       if.then3167:
// SIMD-ONLY0-NEXT:    [[TMP1710:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1710]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3168]]
// SIMD-ONLY0:       if.end3168:
// SIMD-ONLY0-NEXT:    [[TMP1711:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1711]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1712:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3169:%.*]] = zext i16 [[TMP1712]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1713:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3170:%.*]] = zext i16 [[TMP1713]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3171:%.*]] = icmp slt i32 [[CONV3169]], [[CONV3170]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3171]], label [[IF_THEN3173:%.*]], label [[IF_END3174:%.*]]
// SIMD-ONLY0:       if.then3173:
// SIMD-ONLY0-NEXT:    [[TMP1714:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1714]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3174]]
// SIMD-ONLY0:       if.end3174:
// SIMD-ONLY0-NEXT:    [[TMP1715:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1715]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1716:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3175:%.*]] = zext i16 [[TMP1716]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1717:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3176:%.*]] = zext i16 [[TMP1717]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3177:%.*]] = icmp eq i32 [[CONV3175]], [[CONV3176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3177]], label [[IF_THEN3179:%.*]], label [[IF_END3180:%.*]]
// SIMD-ONLY0:       if.then3179:
// SIMD-ONLY0-NEXT:    [[TMP1718:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1718]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3180]]
// SIMD-ONLY0:       if.end3180:
// SIMD-ONLY0-NEXT:    [[TMP1719:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1719]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1720:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3181:%.*]] = zext i16 [[TMP1720]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1721:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3182:%.*]] = zext i16 [[TMP1721]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3183:%.*]] = icmp eq i32 [[CONV3181]], [[CONV3182]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3183]], label [[IF_THEN3185:%.*]], label [[IF_END3186:%.*]]
// SIMD-ONLY0:       if.then3185:
// SIMD-ONLY0-NEXT:    [[TMP1722:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1722]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3186]]
// SIMD-ONLY0:       if.end3186:
// SIMD-ONLY0-NEXT:    [[TMP1723:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1723]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1724:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3187:%.*]] = zext i16 [[TMP1724]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1725:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3188:%.*]] = zext i16 [[TMP1725]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3189:%.*]] = icmp eq i32 [[CONV3187]], [[CONV3188]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3189]], label [[IF_THEN3191:%.*]], label [[IF_ELSE3192:%.*]]
// SIMD-ONLY0:       if.then3191:
// SIMD-ONLY0-NEXT:    [[TMP1726:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1726]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3193:%.*]]
// SIMD-ONLY0:       if.else3192:
// SIMD-ONLY0-NEXT:    [[TMP1727:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1727]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3193]]
// SIMD-ONLY0:       if.end3193:
// SIMD-ONLY0-NEXT:    [[TMP1728:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3194:%.*]] = zext i16 [[TMP1728]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1729:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3195:%.*]] = zext i16 [[TMP1729]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3196:%.*]] = icmp eq i32 [[CONV3194]], [[CONV3195]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3196]], label [[IF_THEN3198:%.*]], label [[IF_ELSE3199:%.*]]
// SIMD-ONLY0:       if.then3198:
// SIMD-ONLY0-NEXT:    [[TMP1730:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1730]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3200:%.*]]
// SIMD-ONLY0:       if.else3199:
// SIMD-ONLY0-NEXT:    [[TMP1731:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1731]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3200]]
// SIMD-ONLY0:       if.end3200:
// SIMD-ONLY0-NEXT:    [[TMP1732:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3201:%.*]] = zext i16 [[TMP1732]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1733:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3202:%.*]] = zext i16 [[TMP1733]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3203:%.*]] = icmp eq i32 [[CONV3201]], [[CONV3202]]
// SIMD-ONLY0-NEXT:    [[CONV3204:%.*]] = zext i1 [[CMP3203]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3205:%.*]] = trunc i32 [[CONV3204]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3205]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1734:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3206:%.*]] = icmp ne i16 [[TMP1734]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3206]], label [[IF_THEN3207:%.*]], label [[IF_END3208:%.*]]
// SIMD-ONLY0:       if.then3207:
// SIMD-ONLY0-NEXT:    [[TMP1735:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1735]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3208]]
// SIMD-ONLY0:       if.end3208:
// SIMD-ONLY0-NEXT:    [[TMP1736:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3209:%.*]] = zext i16 [[TMP1736]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1737:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3210:%.*]] = zext i16 [[TMP1737]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3211:%.*]] = icmp eq i32 [[CONV3209]], [[CONV3210]]
// SIMD-ONLY0-NEXT:    [[CONV3212:%.*]] = zext i1 [[CMP3211]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3213:%.*]] = trunc i32 [[CONV3212]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3213]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1738:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3214:%.*]] = icmp ne i16 [[TMP1738]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3214]], label [[IF_THEN3215:%.*]], label [[IF_END3216:%.*]]
// SIMD-ONLY0:       if.then3215:
// SIMD-ONLY0-NEXT:    [[TMP1739:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1739]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3216]]
// SIMD-ONLY0:       if.end3216:
// SIMD-ONLY0-NEXT:    [[TMP1740:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3217:%.*]] = zext i16 [[TMP1740]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1741:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3218:%.*]] = zext i16 [[TMP1741]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3219:%.*]] = icmp eq i32 [[CONV3217]], [[CONV3218]]
// SIMD-ONLY0-NEXT:    [[CONV3220:%.*]] = zext i1 [[CMP3219]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3221:%.*]] = trunc i32 [[CONV3220]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3221]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1742:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3222:%.*]] = icmp ne i16 [[TMP1742]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3222]], label [[IF_THEN3223:%.*]], label [[IF_ELSE3224:%.*]]
// SIMD-ONLY0:       if.then3223:
// SIMD-ONLY0-NEXT:    [[TMP1743:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1743]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3225:%.*]]
// SIMD-ONLY0:       if.else3224:
// SIMD-ONLY0-NEXT:    [[TMP1744:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1744]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3225]]
// SIMD-ONLY0:       if.end3225:
// SIMD-ONLY0-NEXT:    [[TMP1745:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3226:%.*]] = zext i16 [[TMP1745]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1746:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3227:%.*]] = zext i16 [[TMP1746]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3228:%.*]] = icmp eq i32 [[CONV3226]], [[CONV3227]]
// SIMD-ONLY0-NEXT:    [[CONV3229:%.*]] = zext i1 [[CMP3228]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3230:%.*]] = trunc i32 [[CONV3229]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3230]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1747:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3231:%.*]] = icmp ne i16 [[TMP1747]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3231]], label [[IF_THEN3232:%.*]], label [[IF_ELSE3233:%.*]]
// SIMD-ONLY0:       if.then3232:
// SIMD-ONLY0-NEXT:    [[TMP1748:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1748]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3234:%.*]]
// SIMD-ONLY0:       if.else3233:
// SIMD-ONLY0-NEXT:    [[TMP1749:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1749]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3234]]
// SIMD-ONLY0:       if.end3234:
// SIMD-ONLY0-NEXT:    [[TMP1750:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1750]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1751:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3235:%.*]] = zext i16 [[TMP1751]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1752:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3236:%.*]] = zext i16 [[TMP1752]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3237:%.*]] = icmp sgt i32 [[CONV3235]], [[CONV3236]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3237]], label [[IF_THEN3239:%.*]], label [[IF_END3240:%.*]]
// SIMD-ONLY0:       if.then3239:
// SIMD-ONLY0-NEXT:    [[TMP1753:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1753]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3240]]
// SIMD-ONLY0:       if.end3240:
// SIMD-ONLY0-NEXT:    [[TMP1754:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1754]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1755:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3241:%.*]] = zext i16 [[TMP1755]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1756:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3242:%.*]] = zext i16 [[TMP1756]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3243:%.*]] = icmp sgt i32 [[CONV3241]], [[CONV3242]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3243]], label [[IF_THEN3245:%.*]], label [[IF_END3246:%.*]]
// SIMD-ONLY0:       if.then3245:
// SIMD-ONLY0-NEXT:    [[TMP1757:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1757]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3246]]
// SIMD-ONLY0:       if.end3246:
// SIMD-ONLY0-NEXT:    [[TMP1758:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1758]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1759:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3247:%.*]] = zext i16 [[TMP1759]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1760:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3248:%.*]] = zext i16 [[TMP1760]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3249:%.*]] = icmp slt i32 [[CONV3247]], [[CONV3248]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3249]], label [[IF_THEN3251:%.*]], label [[IF_END3252:%.*]]
// SIMD-ONLY0:       if.then3251:
// SIMD-ONLY0-NEXT:    [[TMP1761:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1761]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3252]]
// SIMD-ONLY0:       if.end3252:
// SIMD-ONLY0-NEXT:    [[TMP1762:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1762]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1763:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3253:%.*]] = zext i16 [[TMP1763]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1764:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3254:%.*]] = zext i16 [[TMP1764]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3255:%.*]] = icmp slt i32 [[CONV3253]], [[CONV3254]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3255]], label [[IF_THEN3257:%.*]], label [[IF_END3258:%.*]]
// SIMD-ONLY0:       if.then3257:
// SIMD-ONLY0-NEXT:    [[TMP1765:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1765]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3258]]
// SIMD-ONLY0:       if.end3258:
// SIMD-ONLY0-NEXT:    [[TMP1766:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1766]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1767:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3259:%.*]] = zext i16 [[TMP1767]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1768:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3260:%.*]] = zext i16 [[TMP1768]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3261:%.*]] = icmp eq i32 [[CONV3259]], [[CONV3260]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3261]], label [[IF_THEN3263:%.*]], label [[IF_END3264:%.*]]
// SIMD-ONLY0:       if.then3263:
// SIMD-ONLY0-NEXT:    [[TMP1769:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1769]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3264]]
// SIMD-ONLY0:       if.end3264:
// SIMD-ONLY0-NEXT:    [[TMP1770:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1770]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1771:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3265:%.*]] = zext i16 [[TMP1771]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1772:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3266:%.*]] = zext i16 [[TMP1772]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3267:%.*]] = icmp eq i32 [[CONV3265]], [[CONV3266]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3267]], label [[IF_THEN3269:%.*]], label [[IF_END3270:%.*]]
// SIMD-ONLY0:       if.then3269:
// SIMD-ONLY0-NEXT:    [[TMP1773:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1773]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3270]]
// SIMD-ONLY0:       if.end3270:
// SIMD-ONLY0-NEXT:    [[TMP1774:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3271:%.*]] = zext i16 [[TMP1774]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1775:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3272:%.*]] = zext i16 [[TMP1775]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3273:%.*]] = icmp sgt i32 [[CONV3271]], [[CONV3272]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3273]], label [[IF_THEN3275:%.*]], label [[IF_END3276:%.*]]
// SIMD-ONLY0:       if.then3275:
// SIMD-ONLY0-NEXT:    [[TMP1776:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1776]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3276]]
// SIMD-ONLY0:       if.end3276:
// SIMD-ONLY0-NEXT:    [[TMP1777:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1777]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1778:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3277:%.*]] = zext i16 [[TMP1778]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1779:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3278:%.*]] = zext i16 [[TMP1779]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3279:%.*]] = icmp sgt i32 [[CONV3277]], [[CONV3278]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3279]], label [[IF_THEN3281:%.*]], label [[IF_END3282:%.*]]
// SIMD-ONLY0:       if.then3281:
// SIMD-ONLY0-NEXT:    [[TMP1780:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1780]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3282]]
// SIMD-ONLY0:       if.end3282:
// SIMD-ONLY0-NEXT:    [[TMP1781:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1781]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1782:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3283:%.*]] = zext i16 [[TMP1782]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1783:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3284:%.*]] = zext i16 [[TMP1783]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3285:%.*]] = icmp slt i32 [[CONV3283]], [[CONV3284]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3285]], label [[IF_THEN3287:%.*]], label [[IF_END3288:%.*]]
// SIMD-ONLY0:       if.then3287:
// SIMD-ONLY0-NEXT:    [[TMP1784:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1784]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3288]]
// SIMD-ONLY0:       if.end3288:
// SIMD-ONLY0-NEXT:    [[TMP1785:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1785]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1786:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3289:%.*]] = zext i16 [[TMP1786]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1787:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3290:%.*]] = zext i16 [[TMP1787]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3291:%.*]] = icmp slt i32 [[CONV3289]], [[CONV3290]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3291]], label [[IF_THEN3293:%.*]], label [[IF_END3294:%.*]]
// SIMD-ONLY0:       if.then3293:
// SIMD-ONLY0-NEXT:    [[TMP1788:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1788]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3294]]
// SIMD-ONLY0:       if.end3294:
// SIMD-ONLY0-NEXT:    [[TMP1789:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1789]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1790:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3295:%.*]] = zext i16 [[TMP1790]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1791:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3296:%.*]] = zext i16 [[TMP1791]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3297:%.*]] = icmp eq i32 [[CONV3295]], [[CONV3296]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3297]], label [[IF_THEN3299:%.*]], label [[IF_END3300:%.*]]
// SIMD-ONLY0:       if.then3299:
// SIMD-ONLY0-NEXT:    [[TMP1792:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1792]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3300]]
// SIMD-ONLY0:       if.end3300:
// SIMD-ONLY0-NEXT:    [[TMP1793:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1793]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1794:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3301:%.*]] = zext i16 [[TMP1794]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1795:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3302:%.*]] = zext i16 [[TMP1795]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3303:%.*]] = icmp eq i32 [[CONV3301]], [[CONV3302]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3303]], label [[IF_THEN3305:%.*]], label [[IF_END3306:%.*]]
// SIMD-ONLY0:       if.then3305:
// SIMD-ONLY0-NEXT:    [[TMP1796:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1796]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3306]]
// SIMD-ONLY0:       if.end3306:
// SIMD-ONLY0-NEXT:    [[TMP1797:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1797]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1798:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3307:%.*]] = zext i16 [[TMP1798]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1799:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3308:%.*]] = zext i16 [[TMP1799]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3309:%.*]] = icmp eq i32 [[CONV3307]], [[CONV3308]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3309]], label [[IF_THEN3311:%.*]], label [[IF_ELSE3312:%.*]]
// SIMD-ONLY0:       if.then3311:
// SIMD-ONLY0-NEXT:    [[TMP1800:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1800]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3313:%.*]]
// SIMD-ONLY0:       if.else3312:
// SIMD-ONLY0-NEXT:    [[TMP1801:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1801]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3313]]
// SIMD-ONLY0:       if.end3313:
// SIMD-ONLY0-NEXT:    [[TMP1802:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3314:%.*]] = zext i16 [[TMP1802]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1803:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3315:%.*]] = zext i16 [[TMP1803]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3316:%.*]] = icmp eq i32 [[CONV3314]], [[CONV3315]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3316]], label [[IF_THEN3318:%.*]], label [[IF_ELSE3319:%.*]]
// SIMD-ONLY0:       if.then3318:
// SIMD-ONLY0-NEXT:    [[TMP1804:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1804]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3320:%.*]]
// SIMD-ONLY0:       if.else3319:
// SIMD-ONLY0-NEXT:    [[TMP1805:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1805]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3320]]
// SIMD-ONLY0:       if.end3320:
// SIMD-ONLY0-NEXT:    [[TMP1806:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3321:%.*]] = zext i16 [[TMP1806]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1807:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3322:%.*]] = zext i16 [[TMP1807]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3323:%.*]] = icmp eq i32 [[CONV3321]], [[CONV3322]]
// SIMD-ONLY0-NEXT:    [[CONV3324:%.*]] = zext i1 [[CMP3323]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3325:%.*]] = trunc i32 [[CONV3324]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3325]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1808:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3326:%.*]] = icmp ne i16 [[TMP1808]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3326]], label [[IF_THEN3327:%.*]], label [[IF_END3328:%.*]]
// SIMD-ONLY0:       if.then3327:
// SIMD-ONLY0-NEXT:    [[TMP1809:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1809]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3328]]
// SIMD-ONLY0:       if.end3328:
// SIMD-ONLY0-NEXT:    [[TMP1810:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3329:%.*]] = zext i16 [[TMP1810]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1811:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3330:%.*]] = zext i16 [[TMP1811]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3331:%.*]] = icmp eq i32 [[CONV3329]], [[CONV3330]]
// SIMD-ONLY0-NEXT:    [[CONV3332:%.*]] = zext i1 [[CMP3331]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3333:%.*]] = trunc i32 [[CONV3332]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3333]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1812:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3334:%.*]] = icmp ne i16 [[TMP1812]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3334]], label [[IF_THEN3335:%.*]], label [[IF_END3336:%.*]]
// SIMD-ONLY0:       if.then3335:
// SIMD-ONLY0-NEXT:    [[TMP1813:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1813]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3336]]
// SIMD-ONLY0:       if.end3336:
// SIMD-ONLY0-NEXT:    [[TMP1814:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3337:%.*]] = zext i16 [[TMP1814]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1815:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3338:%.*]] = zext i16 [[TMP1815]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3339:%.*]] = icmp eq i32 [[CONV3337]], [[CONV3338]]
// SIMD-ONLY0-NEXT:    [[CONV3340:%.*]] = zext i1 [[CMP3339]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3341:%.*]] = trunc i32 [[CONV3340]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3341]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1816:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3342:%.*]] = icmp ne i16 [[TMP1816]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3342]], label [[IF_THEN3343:%.*]], label [[IF_ELSE3344:%.*]]
// SIMD-ONLY0:       if.then3343:
// SIMD-ONLY0-NEXT:    [[TMP1817:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1817]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3345:%.*]]
// SIMD-ONLY0:       if.else3344:
// SIMD-ONLY0-NEXT:    [[TMP1818:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1818]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3345]]
// SIMD-ONLY0:       if.end3345:
// SIMD-ONLY0-NEXT:    [[TMP1819:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3346:%.*]] = zext i16 [[TMP1819]] to i32
// SIMD-ONLY0-NEXT:    [[TMP1820:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3347:%.*]] = zext i16 [[TMP1820]] to i32
// SIMD-ONLY0-NEXT:    [[CMP3348:%.*]] = icmp eq i32 [[CONV3346]], [[CONV3347]]
// SIMD-ONLY0-NEXT:    [[CONV3349:%.*]] = zext i1 [[CMP3348]] to i32
// SIMD-ONLY0-NEXT:    [[CONV3350:%.*]] = trunc i32 [[CONV3349]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV3350]], ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1821:%.*]] = load i16, ptr [[USR]], align 2
// SIMD-ONLY0-NEXT:    [[TOBOOL3351:%.*]] = icmp ne i16 [[TMP1821]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3351]], label [[IF_THEN3352:%.*]], label [[IF_ELSE3353:%.*]]
// SIMD-ONLY0:       if.then3352:
// SIMD-ONLY0-NEXT:    [[TMP1822:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1822]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3354:%.*]]
// SIMD-ONLY0:       if.else3353:
// SIMD-ONLY0-NEXT:    [[TMP1823:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP1823]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    br label [[IF_END3354]]
// SIMD-ONLY0:       if.end3354:
// SIMD-ONLY0-NEXT:    [[TMP1824:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1824]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1825:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1826:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3355:%.*]] = icmp sgt i32 [[TMP1825]], [[TMP1826]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3355]], label [[IF_THEN3357:%.*]], label [[IF_END3358:%.*]]
// SIMD-ONLY0:       if.then3357:
// SIMD-ONLY0-NEXT:    [[TMP1827:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1827]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3358]]
// SIMD-ONLY0:       if.end3358:
// SIMD-ONLY0-NEXT:    [[TMP1828:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1828]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1829:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1830:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3359:%.*]] = icmp sgt i32 [[TMP1829]], [[TMP1830]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3359]], label [[IF_THEN3361:%.*]], label [[IF_END3362:%.*]]
// SIMD-ONLY0:       if.then3361:
// SIMD-ONLY0-NEXT:    [[TMP1831:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1831]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3362]]
// SIMD-ONLY0:       if.end3362:
// SIMD-ONLY0-NEXT:    [[TMP1832:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1832]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1833:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1834:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3363:%.*]] = icmp slt i32 [[TMP1833]], [[TMP1834]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3363]], label [[IF_THEN3365:%.*]], label [[IF_END3366:%.*]]
// SIMD-ONLY0:       if.then3365:
// SIMD-ONLY0-NEXT:    [[TMP1835:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1835]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3366]]
// SIMD-ONLY0:       if.end3366:
// SIMD-ONLY0-NEXT:    [[TMP1836:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1836]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1837:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1838:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3367:%.*]] = icmp slt i32 [[TMP1837]], [[TMP1838]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3367]], label [[IF_THEN3369:%.*]], label [[IF_END3370:%.*]]
// SIMD-ONLY0:       if.then3369:
// SIMD-ONLY0-NEXT:    [[TMP1839:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1839]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3370]]
// SIMD-ONLY0:       if.end3370:
// SIMD-ONLY0-NEXT:    [[TMP1840:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1840]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1841:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1842:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3371:%.*]] = icmp eq i32 [[TMP1841]], [[TMP1842]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3371]], label [[IF_THEN3373:%.*]], label [[IF_END3374:%.*]]
// SIMD-ONLY0:       if.then3373:
// SIMD-ONLY0-NEXT:    [[TMP1843:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1843]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3374]]
// SIMD-ONLY0:       if.end3374:
// SIMD-ONLY0-NEXT:    [[TMP1844:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1844]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1845:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1846:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3375:%.*]] = icmp eq i32 [[TMP1845]], [[TMP1846]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3375]], label [[IF_THEN3377:%.*]], label [[IF_END3378:%.*]]
// SIMD-ONLY0:       if.then3377:
// SIMD-ONLY0-NEXT:    [[TMP1847:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1847]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3378]]
// SIMD-ONLY0:       if.end3378:
// SIMD-ONLY0-NEXT:    [[TMP1848:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1849:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3379:%.*]] = icmp sgt i32 [[TMP1848]], [[TMP1849]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3379]], label [[IF_THEN3381:%.*]], label [[IF_END3382:%.*]]
// SIMD-ONLY0:       if.then3381:
// SIMD-ONLY0-NEXT:    [[TMP1850:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1850]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3382]]
// SIMD-ONLY0:       if.end3382:
// SIMD-ONLY0-NEXT:    [[TMP1851:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1851]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1852:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1853:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3383:%.*]] = icmp sgt i32 [[TMP1852]], [[TMP1853]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3383]], label [[IF_THEN3385:%.*]], label [[IF_END3386:%.*]]
// SIMD-ONLY0:       if.then3385:
// SIMD-ONLY0-NEXT:    [[TMP1854:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1854]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3386]]
// SIMD-ONLY0:       if.end3386:
// SIMD-ONLY0-NEXT:    [[TMP1855:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1855]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1856:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1857:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3387:%.*]] = icmp slt i32 [[TMP1856]], [[TMP1857]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3387]], label [[IF_THEN3389:%.*]], label [[IF_END3390:%.*]]
// SIMD-ONLY0:       if.then3389:
// SIMD-ONLY0-NEXT:    [[TMP1858:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1858]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3390]]
// SIMD-ONLY0:       if.end3390:
// SIMD-ONLY0-NEXT:    [[TMP1859:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1859]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1860:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1861:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3391:%.*]] = icmp slt i32 [[TMP1860]], [[TMP1861]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3391]], label [[IF_THEN3393:%.*]], label [[IF_END3394:%.*]]
// SIMD-ONLY0:       if.then3393:
// SIMD-ONLY0-NEXT:    [[TMP1862:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1862]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3394]]
// SIMD-ONLY0:       if.end3394:
// SIMD-ONLY0-NEXT:    [[TMP1863:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1863]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1864:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1865:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3395:%.*]] = icmp eq i32 [[TMP1864]], [[TMP1865]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3395]], label [[IF_THEN3397:%.*]], label [[IF_END3398:%.*]]
// SIMD-ONLY0:       if.then3397:
// SIMD-ONLY0-NEXT:    [[TMP1866:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1866]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3398]]
// SIMD-ONLY0:       if.end3398:
// SIMD-ONLY0-NEXT:    [[TMP1867:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1867]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1868:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1869:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3399:%.*]] = icmp eq i32 [[TMP1868]], [[TMP1869]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3399]], label [[IF_THEN3401:%.*]], label [[IF_END3402:%.*]]
// SIMD-ONLY0:       if.then3401:
// SIMD-ONLY0-NEXT:    [[TMP1870:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1870]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3402]]
// SIMD-ONLY0:       if.end3402:
// SIMD-ONLY0-NEXT:    [[TMP1871:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1871]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1872:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1873:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3403:%.*]] = icmp eq i32 [[TMP1872]], [[TMP1873]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3403]], label [[IF_THEN3405:%.*]], label [[IF_ELSE3406:%.*]]
// SIMD-ONLY0:       if.then3405:
// SIMD-ONLY0-NEXT:    [[TMP1874:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1874]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3407:%.*]]
// SIMD-ONLY0:       if.else3406:
// SIMD-ONLY0-NEXT:    [[TMP1875:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1875]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3407]]
// SIMD-ONLY0:       if.end3407:
// SIMD-ONLY0-NEXT:    [[TMP1876:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1877:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3408:%.*]] = icmp eq i32 [[TMP1876]], [[TMP1877]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3408]], label [[IF_THEN3410:%.*]], label [[IF_ELSE3411:%.*]]
// SIMD-ONLY0:       if.then3410:
// SIMD-ONLY0-NEXT:    [[TMP1878:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1878]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3412:%.*]]
// SIMD-ONLY0:       if.else3411:
// SIMD-ONLY0-NEXT:    [[TMP1879:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1879]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3412]]
// SIMD-ONLY0:       if.end3412:
// SIMD-ONLY0-NEXT:    [[TMP1880:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1881:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3413:%.*]] = icmp eq i32 [[TMP1880]], [[TMP1881]]
// SIMD-ONLY0-NEXT:    [[CONV3414:%.*]] = zext i1 [[CMP3413]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3414]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1882:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3415:%.*]] = icmp ne i32 [[TMP1882]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3415]], label [[IF_THEN3416:%.*]], label [[IF_END3417:%.*]]
// SIMD-ONLY0:       if.then3416:
// SIMD-ONLY0-NEXT:    [[TMP1883:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1883]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3417]]
// SIMD-ONLY0:       if.end3417:
// SIMD-ONLY0-NEXT:    [[TMP1884:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1885:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3418:%.*]] = icmp eq i32 [[TMP1884]], [[TMP1885]]
// SIMD-ONLY0-NEXT:    [[CONV3419:%.*]] = zext i1 [[CMP3418]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3419]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1886:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3420:%.*]] = icmp ne i32 [[TMP1886]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3420]], label [[IF_THEN3421:%.*]], label [[IF_END3422:%.*]]
// SIMD-ONLY0:       if.then3421:
// SIMD-ONLY0-NEXT:    [[TMP1887:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1887]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3422]]
// SIMD-ONLY0:       if.end3422:
// SIMD-ONLY0-NEXT:    [[TMP1888:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1889:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3423:%.*]] = icmp eq i32 [[TMP1888]], [[TMP1889]]
// SIMD-ONLY0-NEXT:    [[CONV3424:%.*]] = zext i1 [[CMP3423]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3424]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1890:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3425:%.*]] = icmp ne i32 [[TMP1890]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3425]], label [[IF_THEN3426:%.*]], label [[IF_ELSE3427:%.*]]
// SIMD-ONLY0:       if.then3426:
// SIMD-ONLY0-NEXT:    [[TMP1891:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1891]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3428:%.*]]
// SIMD-ONLY0:       if.else3427:
// SIMD-ONLY0-NEXT:    [[TMP1892:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1892]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3428]]
// SIMD-ONLY0:       if.end3428:
// SIMD-ONLY0-NEXT:    [[TMP1893:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1894:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3429:%.*]] = icmp eq i32 [[TMP1893]], [[TMP1894]]
// SIMD-ONLY0-NEXT:    [[CONV3430:%.*]] = zext i1 [[CMP3429]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3430]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1895:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3431:%.*]] = icmp ne i32 [[TMP1895]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3431]], label [[IF_THEN3432:%.*]], label [[IF_ELSE3433:%.*]]
// SIMD-ONLY0:       if.then3432:
// SIMD-ONLY0-NEXT:    [[TMP1896:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1896]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3434:%.*]]
// SIMD-ONLY0:       if.else3433:
// SIMD-ONLY0-NEXT:    [[TMP1897:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1897]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3434]]
// SIMD-ONLY0:       if.end3434:
// SIMD-ONLY0-NEXT:    [[TMP1898:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1898]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1899:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1900:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3435:%.*]] = icmp sgt i32 [[TMP1899]], [[TMP1900]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3435]], label [[IF_THEN3437:%.*]], label [[IF_END3438:%.*]]
// SIMD-ONLY0:       if.then3437:
// SIMD-ONLY0-NEXT:    [[TMP1901:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1901]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3438]]
// SIMD-ONLY0:       if.end3438:
// SIMD-ONLY0-NEXT:    [[TMP1902:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1902]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1903:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1904:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3439:%.*]] = icmp sgt i32 [[TMP1903]], [[TMP1904]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3439]], label [[IF_THEN3441:%.*]], label [[IF_END3442:%.*]]
// SIMD-ONLY0:       if.then3441:
// SIMD-ONLY0-NEXT:    [[TMP1905:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1905]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3442]]
// SIMD-ONLY0:       if.end3442:
// SIMD-ONLY0-NEXT:    [[TMP1906:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1906]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1907:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1908:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3443:%.*]] = icmp slt i32 [[TMP1907]], [[TMP1908]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3443]], label [[IF_THEN3445:%.*]], label [[IF_END3446:%.*]]
// SIMD-ONLY0:       if.then3445:
// SIMD-ONLY0-NEXT:    [[TMP1909:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1909]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3446]]
// SIMD-ONLY0:       if.end3446:
// SIMD-ONLY0-NEXT:    [[TMP1910:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1910]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1911:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1912:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3447:%.*]] = icmp slt i32 [[TMP1911]], [[TMP1912]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3447]], label [[IF_THEN3449:%.*]], label [[IF_END3450:%.*]]
// SIMD-ONLY0:       if.then3449:
// SIMD-ONLY0-NEXT:    [[TMP1913:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1913]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3450]]
// SIMD-ONLY0:       if.end3450:
// SIMD-ONLY0-NEXT:    [[TMP1914:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1914]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1915:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1916:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3451:%.*]] = icmp eq i32 [[TMP1915]], [[TMP1916]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3451]], label [[IF_THEN3453:%.*]], label [[IF_END3454:%.*]]
// SIMD-ONLY0:       if.then3453:
// SIMD-ONLY0-NEXT:    [[TMP1917:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1917]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3454]]
// SIMD-ONLY0:       if.end3454:
// SIMD-ONLY0-NEXT:    [[TMP1918:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1918]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1919:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1920:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3455:%.*]] = icmp eq i32 [[TMP1919]], [[TMP1920]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3455]], label [[IF_THEN3457:%.*]], label [[IF_END3458:%.*]]
// SIMD-ONLY0:       if.then3457:
// SIMD-ONLY0-NEXT:    [[TMP1921:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1921]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3458]]
// SIMD-ONLY0:       if.end3458:
// SIMD-ONLY0-NEXT:    [[TMP1922:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1923:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3459:%.*]] = icmp sgt i32 [[TMP1922]], [[TMP1923]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3459]], label [[IF_THEN3461:%.*]], label [[IF_END3462:%.*]]
// SIMD-ONLY0:       if.then3461:
// SIMD-ONLY0-NEXT:    [[TMP1924:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1924]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3462]]
// SIMD-ONLY0:       if.end3462:
// SIMD-ONLY0-NEXT:    [[TMP1925:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1925]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1926:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1927:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3463:%.*]] = icmp sgt i32 [[TMP1926]], [[TMP1927]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3463]], label [[IF_THEN3465:%.*]], label [[IF_END3466:%.*]]
// SIMD-ONLY0:       if.then3465:
// SIMD-ONLY0-NEXT:    [[TMP1928:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1928]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3466]]
// SIMD-ONLY0:       if.end3466:
// SIMD-ONLY0-NEXT:    [[TMP1929:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1929]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1930:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1931:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3467:%.*]] = icmp slt i32 [[TMP1930]], [[TMP1931]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3467]], label [[IF_THEN3469:%.*]], label [[IF_END3470:%.*]]
// SIMD-ONLY0:       if.then3469:
// SIMD-ONLY0-NEXT:    [[TMP1932:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1932]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3470]]
// SIMD-ONLY0:       if.end3470:
// SIMD-ONLY0-NEXT:    [[TMP1933:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1933]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1934:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1935:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3471:%.*]] = icmp slt i32 [[TMP1934]], [[TMP1935]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3471]], label [[IF_THEN3473:%.*]], label [[IF_END3474:%.*]]
// SIMD-ONLY0:       if.then3473:
// SIMD-ONLY0-NEXT:    [[TMP1936:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1936]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3474]]
// SIMD-ONLY0:       if.end3474:
// SIMD-ONLY0-NEXT:    [[TMP1937:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1937]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1938:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1939:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3475:%.*]] = icmp eq i32 [[TMP1938]], [[TMP1939]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3475]], label [[IF_THEN3477:%.*]], label [[IF_END3478:%.*]]
// SIMD-ONLY0:       if.then3477:
// SIMD-ONLY0-NEXT:    [[TMP1940:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1940]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3478]]
// SIMD-ONLY0:       if.end3478:
// SIMD-ONLY0-NEXT:    [[TMP1941:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1941]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1942:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1943:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3479:%.*]] = icmp eq i32 [[TMP1942]], [[TMP1943]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3479]], label [[IF_THEN3481:%.*]], label [[IF_END3482:%.*]]
// SIMD-ONLY0:       if.then3481:
// SIMD-ONLY0-NEXT:    [[TMP1944:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1944]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3482]]
// SIMD-ONLY0:       if.end3482:
// SIMD-ONLY0-NEXT:    [[TMP1945:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1945]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1946:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1947:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3483:%.*]] = icmp eq i32 [[TMP1946]], [[TMP1947]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3483]], label [[IF_THEN3485:%.*]], label [[IF_ELSE3486:%.*]]
// SIMD-ONLY0:       if.then3485:
// SIMD-ONLY0-NEXT:    [[TMP1948:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1948]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3487:%.*]]
// SIMD-ONLY0:       if.else3486:
// SIMD-ONLY0-NEXT:    [[TMP1949:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1949]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3487]]
// SIMD-ONLY0:       if.end3487:
// SIMD-ONLY0-NEXT:    [[TMP1950:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1951:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3488:%.*]] = icmp eq i32 [[TMP1950]], [[TMP1951]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3488]], label [[IF_THEN3490:%.*]], label [[IF_ELSE3491:%.*]]
// SIMD-ONLY0:       if.then3490:
// SIMD-ONLY0-NEXT:    [[TMP1952:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1952]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3492:%.*]]
// SIMD-ONLY0:       if.else3491:
// SIMD-ONLY0-NEXT:    [[TMP1953:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1953]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3492]]
// SIMD-ONLY0:       if.end3492:
// SIMD-ONLY0-NEXT:    [[TMP1954:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1955:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3493:%.*]] = icmp eq i32 [[TMP1954]], [[TMP1955]]
// SIMD-ONLY0-NEXT:    [[CONV3494:%.*]] = zext i1 [[CMP3493]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3494]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1956:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3495:%.*]] = icmp ne i32 [[TMP1956]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3495]], label [[IF_THEN3496:%.*]], label [[IF_END3497:%.*]]
// SIMD-ONLY0:       if.then3496:
// SIMD-ONLY0-NEXT:    [[TMP1957:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1957]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3497]]
// SIMD-ONLY0:       if.end3497:
// SIMD-ONLY0-NEXT:    [[TMP1958:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1959:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3498:%.*]] = icmp eq i32 [[TMP1958]], [[TMP1959]]
// SIMD-ONLY0-NEXT:    [[CONV3499:%.*]] = zext i1 [[CMP3498]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3499]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1960:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3500:%.*]] = icmp ne i32 [[TMP1960]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3500]], label [[IF_THEN3501:%.*]], label [[IF_END3502:%.*]]
// SIMD-ONLY0:       if.then3501:
// SIMD-ONLY0-NEXT:    [[TMP1961:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1961]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3502]]
// SIMD-ONLY0:       if.end3502:
// SIMD-ONLY0-NEXT:    [[TMP1962:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1963:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3503:%.*]] = icmp eq i32 [[TMP1962]], [[TMP1963]]
// SIMD-ONLY0-NEXT:    [[CONV3504:%.*]] = zext i1 [[CMP3503]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3504]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1964:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3505:%.*]] = icmp ne i32 [[TMP1964]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3505]], label [[IF_THEN3506:%.*]], label [[IF_ELSE3507:%.*]]
// SIMD-ONLY0:       if.then3506:
// SIMD-ONLY0-NEXT:    [[TMP1965:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1965]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3508:%.*]]
// SIMD-ONLY0:       if.else3507:
// SIMD-ONLY0-NEXT:    [[TMP1966:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1966]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3508]]
// SIMD-ONLY0:       if.end3508:
// SIMD-ONLY0-NEXT:    [[TMP1967:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1968:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3509:%.*]] = icmp eq i32 [[TMP1967]], [[TMP1968]]
// SIMD-ONLY0-NEXT:    [[CONV3510:%.*]] = zext i1 [[CMP3509]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3510]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1969:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3511:%.*]] = icmp ne i32 [[TMP1969]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3511]], label [[IF_THEN3512:%.*]], label [[IF_ELSE3513:%.*]]
// SIMD-ONLY0:       if.then3512:
// SIMD-ONLY0-NEXT:    [[TMP1970:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1970]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3514:%.*]]
// SIMD-ONLY0:       if.else3513:
// SIMD-ONLY0-NEXT:    [[TMP1971:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1971]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3514]]
// SIMD-ONLY0:       if.end3514:
// SIMD-ONLY0-NEXT:    [[TMP1972:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1972]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1973:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1974:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3515:%.*]] = icmp sgt i32 [[TMP1973]], [[TMP1974]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3515]], label [[IF_THEN3517:%.*]], label [[IF_END3518:%.*]]
// SIMD-ONLY0:       if.then3517:
// SIMD-ONLY0-NEXT:    [[TMP1975:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1975]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3518]]
// SIMD-ONLY0:       if.end3518:
// SIMD-ONLY0-NEXT:    [[TMP1976:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1976]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1977:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1978:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3519:%.*]] = icmp sgt i32 [[TMP1977]], [[TMP1978]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3519]], label [[IF_THEN3521:%.*]], label [[IF_END3522:%.*]]
// SIMD-ONLY0:       if.then3521:
// SIMD-ONLY0-NEXT:    [[TMP1979:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1979]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3522]]
// SIMD-ONLY0:       if.end3522:
// SIMD-ONLY0-NEXT:    [[TMP1980:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1980]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1981:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1982:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3523:%.*]] = icmp slt i32 [[TMP1981]], [[TMP1982]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3523]], label [[IF_THEN3525:%.*]], label [[IF_END3526:%.*]]
// SIMD-ONLY0:       if.then3525:
// SIMD-ONLY0-NEXT:    [[TMP1983:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1983]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3526]]
// SIMD-ONLY0:       if.end3526:
// SIMD-ONLY0-NEXT:    [[TMP1984:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1984]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1985:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1986:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3527:%.*]] = icmp slt i32 [[TMP1985]], [[TMP1986]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3527]], label [[IF_THEN3529:%.*]], label [[IF_END3530:%.*]]
// SIMD-ONLY0:       if.then3529:
// SIMD-ONLY0-NEXT:    [[TMP1987:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1987]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3530]]
// SIMD-ONLY0:       if.end3530:
// SIMD-ONLY0-NEXT:    [[TMP1988:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1988]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1989:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1990:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3531:%.*]] = icmp eq i32 [[TMP1989]], [[TMP1990]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3531]], label [[IF_THEN3533:%.*]], label [[IF_END3534:%.*]]
// SIMD-ONLY0:       if.then3533:
// SIMD-ONLY0-NEXT:    [[TMP1991:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1991]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3534]]
// SIMD-ONLY0:       if.end3534:
// SIMD-ONLY0-NEXT:    [[TMP1992:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1992]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1993:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1994:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3535:%.*]] = icmp eq i32 [[TMP1993]], [[TMP1994]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3535]], label [[IF_THEN3537:%.*]], label [[IF_END3538:%.*]]
// SIMD-ONLY0:       if.then3537:
// SIMD-ONLY0-NEXT:    [[TMP1995:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1995]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3538]]
// SIMD-ONLY0:       if.end3538:
// SIMD-ONLY0-NEXT:    [[TMP1996:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1997:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3539:%.*]] = icmp sgt i32 [[TMP1996]], [[TMP1997]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3539]], label [[IF_THEN3541:%.*]], label [[IF_END3542:%.*]]
// SIMD-ONLY0:       if.then3541:
// SIMD-ONLY0-NEXT:    [[TMP1998:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1998]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3542]]
// SIMD-ONLY0:       if.end3542:
// SIMD-ONLY0-NEXT:    [[TMP1999:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP1999]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2000:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2001:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3543:%.*]] = icmp sgt i32 [[TMP2000]], [[TMP2001]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3543]], label [[IF_THEN3545:%.*]], label [[IF_END3546:%.*]]
// SIMD-ONLY0:       if.then3545:
// SIMD-ONLY0-NEXT:    [[TMP2002:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2002]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3546]]
// SIMD-ONLY0:       if.end3546:
// SIMD-ONLY0-NEXT:    [[TMP2003:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2003]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2004:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2005:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3547:%.*]] = icmp slt i32 [[TMP2004]], [[TMP2005]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3547]], label [[IF_THEN3549:%.*]], label [[IF_END3550:%.*]]
// SIMD-ONLY0:       if.then3549:
// SIMD-ONLY0-NEXT:    [[TMP2006:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2006]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3550]]
// SIMD-ONLY0:       if.end3550:
// SIMD-ONLY0-NEXT:    [[TMP2007:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2007]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2008:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2009:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3551:%.*]] = icmp slt i32 [[TMP2008]], [[TMP2009]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3551]], label [[IF_THEN3553:%.*]], label [[IF_END3554:%.*]]
// SIMD-ONLY0:       if.then3553:
// SIMD-ONLY0-NEXT:    [[TMP2010:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2010]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3554]]
// SIMD-ONLY0:       if.end3554:
// SIMD-ONLY0-NEXT:    [[TMP2011:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2011]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2012:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2013:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3555:%.*]] = icmp eq i32 [[TMP2012]], [[TMP2013]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3555]], label [[IF_THEN3557:%.*]], label [[IF_END3558:%.*]]
// SIMD-ONLY0:       if.then3557:
// SIMD-ONLY0-NEXT:    [[TMP2014:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2014]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3558]]
// SIMD-ONLY0:       if.end3558:
// SIMD-ONLY0-NEXT:    [[TMP2015:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2015]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2016:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2017:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3559:%.*]] = icmp eq i32 [[TMP2016]], [[TMP2017]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3559]], label [[IF_THEN3561:%.*]], label [[IF_END3562:%.*]]
// SIMD-ONLY0:       if.then3561:
// SIMD-ONLY0-NEXT:    [[TMP2018:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2018]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3562]]
// SIMD-ONLY0:       if.end3562:
// SIMD-ONLY0-NEXT:    [[TMP2019:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2019]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2020:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2021:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3563:%.*]] = icmp eq i32 [[TMP2020]], [[TMP2021]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3563]], label [[IF_THEN3565:%.*]], label [[IF_ELSE3566:%.*]]
// SIMD-ONLY0:       if.then3565:
// SIMD-ONLY0-NEXT:    [[TMP2022:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2022]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3567:%.*]]
// SIMD-ONLY0:       if.else3566:
// SIMD-ONLY0-NEXT:    [[TMP2023:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2023]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3567]]
// SIMD-ONLY0:       if.end3567:
// SIMD-ONLY0-NEXT:    [[TMP2024:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2025:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3568:%.*]] = icmp eq i32 [[TMP2024]], [[TMP2025]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3568]], label [[IF_THEN3570:%.*]], label [[IF_ELSE3571:%.*]]
// SIMD-ONLY0:       if.then3570:
// SIMD-ONLY0-NEXT:    [[TMP2026:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2026]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3572:%.*]]
// SIMD-ONLY0:       if.else3571:
// SIMD-ONLY0-NEXT:    [[TMP2027:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2027]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3572]]
// SIMD-ONLY0:       if.end3572:
// SIMD-ONLY0-NEXT:    [[TMP2028:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2029:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3573:%.*]] = icmp eq i32 [[TMP2028]], [[TMP2029]]
// SIMD-ONLY0-NEXT:    [[CONV3574:%.*]] = zext i1 [[CMP3573]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3574]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2030:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3575:%.*]] = icmp ne i32 [[TMP2030]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3575]], label [[IF_THEN3576:%.*]], label [[IF_END3577:%.*]]
// SIMD-ONLY0:       if.then3576:
// SIMD-ONLY0-NEXT:    [[TMP2031:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2031]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3577]]
// SIMD-ONLY0:       if.end3577:
// SIMD-ONLY0-NEXT:    [[TMP2032:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2033:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3578:%.*]] = icmp eq i32 [[TMP2032]], [[TMP2033]]
// SIMD-ONLY0-NEXT:    [[CONV3579:%.*]] = zext i1 [[CMP3578]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3579]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2034:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3580:%.*]] = icmp ne i32 [[TMP2034]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3580]], label [[IF_THEN3581:%.*]], label [[IF_END3582:%.*]]
// SIMD-ONLY0:       if.then3581:
// SIMD-ONLY0-NEXT:    [[TMP2035:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2035]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3582]]
// SIMD-ONLY0:       if.end3582:
// SIMD-ONLY0-NEXT:    [[TMP2036:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2037:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3583:%.*]] = icmp eq i32 [[TMP2036]], [[TMP2037]]
// SIMD-ONLY0-NEXT:    [[CONV3584:%.*]] = zext i1 [[CMP3583]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3584]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2038:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3585:%.*]] = icmp ne i32 [[TMP2038]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3585]], label [[IF_THEN3586:%.*]], label [[IF_ELSE3587:%.*]]
// SIMD-ONLY0:       if.then3586:
// SIMD-ONLY0-NEXT:    [[TMP2039:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2039]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3588:%.*]]
// SIMD-ONLY0:       if.else3587:
// SIMD-ONLY0-NEXT:    [[TMP2040:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2040]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3588]]
// SIMD-ONLY0:       if.end3588:
// SIMD-ONLY0-NEXT:    [[TMP2041:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2042:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3589:%.*]] = icmp eq i32 [[TMP2041]], [[TMP2042]]
// SIMD-ONLY0-NEXT:    [[CONV3590:%.*]] = zext i1 [[CMP3589]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3590]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2043:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3591:%.*]] = icmp ne i32 [[TMP2043]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3591]], label [[IF_THEN3592:%.*]], label [[IF_ELSE3593:%.*]]
// SIMD-ONLY0:       if.then3592:
// SIMD-ONLY0-NEXT:    [[TMP2044:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2044]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3594:%.*]]
// SIMD-ONLY0:       if.else3593:
// SIMD-ONLY0-NEXT:    [[TMP2045:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2045]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3594]]
// SIMD-ONLY0:       if.end3594:
// SIMD-ONLY0-NEXT:    [[TMP2046:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2046]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2047:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2048:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3595:%.*]] = icmp sgt i32 [[TMP2047]], [[TMP2048]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3595]], label [[IF_THEN3597:%.*]], label [[IF_END3598:%.*]]
// SIMD-ONLY0:       if.then3597:
// SIMD-ONLY0-NEXT:    [[TMP2049:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2049]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3598]]
// SIMD-ONLY0:       if.end3598:
// SIMD-ONLY0-NEXT:    [[TMP2050:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2050]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2051:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2052:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3599:%.*]] = icmp sgt i32 [[TMP2051]], [[TMP2052]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3599]], label [[IF_THEN3601:%.*]], label [[IF_END3602:%.*]]
// SIMD-ONLY0:       if.then3601:
// SIMD-ONLY0-NEXT:    [[TMP2053:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2053]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3602]]
// SIMD-ONLY0:       if.end3602:
// SIMD-ONLY0-NEXT:    [[TMP2054:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2054]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2055:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2056:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3603:%.*]] = icmp slt i32 [[TMP2055]], [[TMP2056]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3603]], label [[IF_THEN3605:%.*]], label [[IF_END3606:%.*]]
// SIMD-ONLY0:       if.then3605:
// SIMD-ONLY0-NEXT:    [[TMP2057:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2057]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3606]]
// SIMD-ONLY0:       if.end3606:
// SIMD-ONLY0-NEXT:    [[TMP2058:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2058]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2059:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2060:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3607:%.*]] = icmp slt i32 [[TMP2059]], [[TMP2060]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3607]], label [[IF_THEN3609:%.*]], label [[IF_END3610:%.*]]
// SIMD-ONLY0:       if.then3609:
// SIMD-ONLY0-NEXT:    [[TMP2061:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2061]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3610]]
// SIMD-ONLY0:       if.end3610:
// SIMD-ONLY0-NEXT:    [[TMP2062:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2062]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2063:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2064:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3611:%.*]] = icmp eq i32 [[TMP2063]], [[TMP2064]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3611]], label [[IF_THEN3613:%.*]], label [[IF_END3614:%.*]]
// SIMD-ONLY0:       if.then3613:
// SIMD-ONLY0-NEXT:    [[TMP2065:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2065]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3614]]
// SIMD-ONLY0:       if.end3614:
// SIMD-ONLY0-NEXT:    [[TMP2066:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2066]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2067:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2068:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3615:%.*]] = icmp eq i32 [[TMP2067]], [[TMP2068]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3615]], label [[IF_THEN3617:%.*]], label [[IF_END3618:%.*]]
// SIMD-ONLY0:       if.then3617:
// SIMD-ONLY0-NEXT:    [[TMP2069:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2069]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3618]]
// SIMD-ONLY0:       if.end3618:
// SIMD-ONLY0-NEXT:    [[TMP2070:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2071:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3619:%.*]] = icmp sgt i32 [[TMP2070]], [[TMP2071]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3619]], label [[IF_THEN3621:%.*]], label [[IF_END3622:%.*]]
// SIMD-ONLY0:       if.then3621:
// SIMD-ONLY0-NEXT:    [[TMP2072:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2072]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3622]]
// SIMD-ONLY0:       if.end3622:
// SIMD-ONLY0-NEXT:    [[TMP2073:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2073]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2074:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2075:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3623:%.*]] = icmp sgt i32 [[TMP2074]], [[TMP2075]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3623]], label [[IF_THEN3625:%.*]], label [[IF_END3626:%.*]]
// SIMD-ONLY0:       if.then3625:
// SIMD-ONLY0-NEXT:    [[TMP2076:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2076]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3626]]
// SIMD-ONLY0:       if.end3626:
// SIMD-ONLY0-NEXT:    [[TMP2077:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2077]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2078:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2079:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3627:%.*]] = icmp slt i32 [[TMP2078]], [[TMP2079]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3627]], label [[IF_THEN3629:%.*]], label [[IF_END3630:%.*]]
// SIMD-ONLY0:       if.then3629:
// SIMD-ONLY0-NEXT:    [[TMP2080:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2080]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3630]]
// SIMD-ONLY0:       if.end3630:
// SIMD-ONLY0-NEXT:    [[TMP2081:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2081]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2082:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2083:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3631:%.*]] = icmp slt i32 [[TMP2082]], [[TMP2083]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3631]], label [[IF_THEN3633:%.*]], label [[IF_END3634:%.*]]
// SIMD-ONLY0:       if.then3633:
// SIMD-ONLY0-NEXT:    [[TMP2084:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2084]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3634]]
// SIMD-ONLY0:       if.end3634:
// SIMD-ONLY0-NEXT:    [[TMP2085:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2085]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2086:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2087:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3635:%.*]] = icmp eq i32 [[TMP2086]], [[TMP2087]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3635]], label [[IF_THEN3637:%.*]], label [[IF_END3638:%.*]]
// SIMD-ONLY0:       if.then3637:
// SIMD-ONLY0-NEXT:    [[TMP2088:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2088]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3638]]
// SIMD-ONLY0:       if.end3638:
// SIMD-ONLY0-NEXT:    [[TMP2089:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2089]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2090:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2091:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3639:%.*]] = icmp eq i32 [[TMP2090]], [[TMP2091]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3639]], label [[IF_THEN3641:%.*]], label [[IF_END3642:%.*]]
// SIMD-ONLY0:       if.then3641:
// SIMD-ONLY0-NEXT:    [[TMP2092:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2092]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3642]]
// SIMD-ONLY0:       if.end3642:
// SIMD-ONLY0-NEXT:    [[TMP2093:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2093]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2094:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2095:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3643:%.*]] = icmp eq i32 [[TMP2094]], [[TMP2095]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3643]], label [[IF_THEN3645:%.*]], label [[IF_ELSE3646:%.*]]
// SIMD-ONLY0:       if.then3645:
// SIMD-ONLY0-NEXT:    [[TMP2096:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2096]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3647:%.*]]
// SIMD-ONLY0:       if.else3646:
// SIMD-ONLY0-NEXT:    [[TMP2097:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2097]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3647]]
// SIMD-ONLY0:       if.end3647:
// SIMD-ONLY0-NEXT:    [[TMP2098:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2099:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3648:%.*]] = icmp eq i32 [[TMP2098]], [[TMP2099]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3648]], label [[IF_THEN3650:%.*]], label [[IF_ELSE3651:%.*]]
// SIMD-ONLY0:       if.then3650:
// SIMD-ONLY0-NEXT:    [[TMP2100:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2100]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3652:%.*]]
// SIMD-ONLY0:       if.else3651:
// SIMD-ONLY0-NEXT:    [[TMP2101:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2101]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3652]]
// SIMD-ONLY0:       if.end3652:
// SIMD-ONLY0-NEXT:    [[TMP2102:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2103:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3653:%.*]] = icmp eq i32 [[TMP2102]], [[TMP2103]]
// SIMD-ONLY0-NEXT:    [[CONV3654:%.*]] = zext i1 [[CMP3653]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3654]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2104:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3655:%.*]] = icmp ne i32 [[TMP2104]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3655]], label [[IF_THEN3656:%.*]], label [[IF_END3657:%.*]]
// SIMD-ONLY0:       if.then3656:
// SIMD-ONLY0-NEXT:    [[TMP2105:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2105]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3657]]
// SIMD-ONLY0:       if.end3657:
// SIMD-ONLY0-NEXT:    [[TMP2106:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2107:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3658:%.*]] = icmp eq i32 [[TMP2106]], [[TMP2107]]
// SIMD-ONLY0-NEXT:    [[CONV3659:%.*]] = zext i1 [[CMP3658]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3659]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2108:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3660:%.*]] = icmp ne i32 [[TMP2108]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3660]], label [[IF_THEN3661:%.*]], label [[IF_END3662:%.*]]
// SIMD-ONLY0:       if.then3661:
// SIMD-ONLY0-NEXT:    [[TMP2109:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2109]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3662]]
// SIMD-ONLY0:       if.end3662:
// SIMD-ONLY0-NEXT:    [[TMP2110:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2111:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3663:%.*]] = icmp eq i32 [[TMP2110]], [[TMP2111]]
// SIMD-ONLY0-NEXT:    [[CONV3664:%.*]] = zext i1 [[CMP3663]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3664]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2112:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3665:%.*]] = icmp ne i32 [[TMP2112]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3665]], label [[IF_THEN3666:%.*]], label [[IF_ELSE3667:%.*]]
// SIMD-ONLY0:       if.then3666:
// SIMD-ONLY0-NEXT:    [[TMP2113:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2113]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3668:%.*]]
// SIMD-ONLY0:       if.else3667:
// SIMD-ONLY0-NEXT:    [[TMP2114:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2114]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3668]]
// SIMD-ONLY0:       if.end3668:
// SIMD-ONLY0-NEXT:    [[TMP2115:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2116:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3669:%.*]] = icmp eq i32 [[TMP2115]], [[TMP2116]]
// SIMD-ONLY0-NEXT:    [[CONV3670:%.*]] = zext i1 [[CMP3669]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3670]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2117:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3671:%.*]] = icmp ne i32 [[TMP2117]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3671]], label [[IF_THEN3672:%.*]], label [[IF_ELSE3673:%.*]]
// SIMD-ONLY0:       if.then3672:
// SIMD-ONLY0-NEXT:    [[TMP2118:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2118]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3674:%.*]]
// SIMD-ONLY0:       if.else3673:
// SIMD-ONLY0-NEXT:    [[TMP2119:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2119]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3674]]
// SIMD-ONLY0:       if.end3674:
// SIMD-ONLY0-NEXT:    [[TMP2120:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2120]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2121:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2122:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3675:%.*]] = icmp sgt i32 [[TMP2121]], [[TMP2122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3675]], label [[IF_THEN3677:%.*]], label [[IF_END3678:%.*]]
// SIMD-ONLY0:       if.then3677:
// SIMD-ONLY0-NEXT:    [[TMP2123:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2123]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3678]]
// SIMD-ONLY0:       if.end3678:
// SIMD-ONLY0-NEXT:    [[TMP2124:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2124]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2125:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2126:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3679:%.*]] = icmp sgt i32 [[TMP2125]], [[TMP2126]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3679]], label [[IF_THEN3681:%.*]], label [[IF_END3682:%.*]]
// SIMD-ONLY0:       if.then3681:
// SIMD-ONLY0-NEXT:    [[TMP2127:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2127]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3682]]
// SIMD-ONLY0:       if.end3682:
// SIMD-ONLY0-NEXT:    [[TMP2128:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2128]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2129:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2130:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3683:%.*]] = icmp slt i32 [[TMP2129]], [[TMP2130]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3683]], label [[IF_THEN3685:%.*]], label [[IF_END3686:%.*]]
// SIMD-ONLY0:       if.then3685:
// SIMD-ONLY0-NEXT:    [[TMP2131:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2131]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3686]]
// SIMD-ONLY0:       if.end3686:
// SIMD-ONLY0-NEXT:    [[TMP2132:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2132]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2133:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2134:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3687:%.*]] = icmp slt i32 [[TMP2133]], [[TMP2134]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3687]], label [[IF_THEN3689:%.*]], label [[IF_END3690:%.*]]
// SIMD-ONLY0:       if.then3689:
// SIMD-ONLY0-NEXT:    [[TMP2135:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2135]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3690]]
// SIMD-ONLY0:       if.end3690:
// SIMD-ONLY0-NEXT:    [[TMP2136:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2136]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2137:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2138:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3691:%.*]] = icmp eq i32 [[TMP2137]], [[TMP2138]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3691]], label [[IF_THEN3693:%.*]], label [[IF_END3694:%.*]]
// SIMD-ONLY0:       if.then3693:
// SIMD-ONLY0-NEXT:    [[TMP2139:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2139]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3694]]
// SIMD-ONLY0:       if.end3694:
// SIMD-ONLY0-NEXT:    [[TMP2140:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2140]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2141:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2142:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3695:%.*]] = icmp eq i32 [[TMP2141]], [[TMP2142]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3695]], label [[IF_THEN3697:%.*]], label [[IF_END3698:%.*]]
// SIMD-ONLY0:       if.then3697:
// SIMD-ONLY0-NEXT:    [[TMP2143:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2143]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3698]]
// SIMD-ONLY0:       if.end3698:
// SIMD-ONLY0-NEXT:    [[TMP2144:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2145:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3699:%.*]] = icmp sgt i32 [[TMP2144]], [[TMP2145]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3699]], label [[IF_THEN3701:%.*]], label [[IF_END3702:%.*]]
// SIMD-ONLY0:       if.then3701:
// SIMD-ONLY0-NEXT:    [[TMP2146:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2146]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3702]]
// SIMD-ONLY0:       if.end3702:
// SIMD-ONLY0-NEXT:    [[TMP2147:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2147]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2148:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2149:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3703:%.*]] = icmp sgt i32 [[TMP2148]], [[TMP2149]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3703]], label [[IF_THEN3705:%.*]], label [[IF_END3706:%.*]]
// SIMD-ONLY0:       if.then3705:
// SIMD-ONLY0-NEXT:    [[TMP2150:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2150]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3706]]
// SIMD-ONLY0:       if.end3706:
// SIMD-ONLY0-NEXT:    [[TMP2151:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2151]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2152:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2153:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3707:%.*]] = icmp slt i32 [[TMP2152]], [[TMP2153]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3707]], label [[IF_THEN3709:%.*]], label [[IF_END3710:%.*]]
// SIMD-ONLY0:       if.then3709:
// SIMD-ONLY0-NEXT:    [[TMP2154:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2154]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3710]]
// SIMD-ONLY0:       if.end3710:
// SIMD-ONLY0-NEXT:    [[TMP2155:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2155]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2156:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2157:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3711:%.*]] = icmp slt i32 [[TMP2156]], [[TMP2157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3711]], label [[IF_THEN3713:%.*]], label [[IF_END3714:%.*]]
// SIMD-ONLY0:       if.then3713:
// SIMD-ONLY0-NEXT:    [[TMP2158:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2158]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3714]]
// SIMD-ONLY0:       if.end3714:
// SIMD-ONLY0-NEXT:    [[TMP2159:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2159]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2160:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2161:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3715:%.*]] = icmp eq i32 [[TMP2160]], [[TMP2161]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3715]], label [[IF_THEN3717:%.*]], label [[IF_END3718:%.*]]
// SIMD-ONLY0:       if.then3717:
// SIMD-ONLY0-NEXT:    [[TMP2162:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2162]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3718]]
// SIMD-ONLY0:       if.end3718:
// SIMD-ONLY0-NEXT:    [[TMP2163:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2163]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2164:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2165:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3719:%.*]] = icmp eq i32 [[TMP2164]], [[TMP2165]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3719]], label [[IF_THEN3721:%.*]], label [[IF_END3722:%.*]]
// SIMD-ONLY0:       if.then3721:
// SIMD-ONLY0-NEXT:    [[TMP2166:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2166]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3722]]
// SIMD-ONLY0:       if.end3722:
// SIMD-ONLY0-NEXT:    [[TMP2167:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2167]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2168:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2169:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3723:%.*]] = icmp eq i32 [[TMP2168]], [[TMP2169]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3723]], label [[IF_THEN3725:%.*]], label [[IF_ELSE3726:%.*]]
// SIMD-ONLY0:       if.then3725:
// SIMD-ONLY0-NEXT:    [[TMP2170:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2170]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3727:%.*]]
// SIMD-ONLY0:       if.else3726:
// SIMD-ONLY0-NEXT:    [[TMP2171:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2171]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3727]]
// SIMD-ONLY0:       if.end3727:
// SIMD-ONLY0-NEXT:    [[TMP2172:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2173:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3728:%.*]] = icmp eq i32 [[TMP2172]], [[TMP2173]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3728]], label [[IF_THEN3730:%.*]], label [[IF_ELSE3731:%.*]]
// SIMD-ONLY0:       if.then3730:
// SIMD-ONLY0-NEXT:    [[TMP2174:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2174]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3732:%.*]]
// SIMD-ONLY0:       if.else3731:
// SIMD-ONLY0-NEXT:    [[TMP2175:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2175]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3732]]
// SIMD-ONLY0:       if.end3732:
// SIMD-ONLY0-NEXT:    [[TMP2176:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2177:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3733:%.*]] = icmp eq i32 [[TMP2176]], [[TMP2177]]
// SIMD-ONLY0-NEXT:    [[CONV3734:%.*]] = zext i1 [[CMP3733]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3734]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2178:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3735:%.*]] = icmp ne i32 [[TMP2178]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3735]], label [[IF_THEN3736:%.*]], label [[IF_END3737:%.*]]
// SIMD-ONLY0:       if.then3736:
// SIMD-ONLY0-NEXT:    [[TMP2179:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2179]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3737]]
// SIMD-ONLY0:       if.end3737:
// SIMD-ONLY0-NEXT:    [[TMP2180:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2181:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3738:%.*]] = icmp eq i32 [[TMP2180]], [[TMP2181]]
// SIMD-ONLY0-NEXT:    [[CONV3739:%.*]] = zext i1 [[CMP3738]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3739]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2182:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3740:%.*]] = icmp ne i32 [[TMP2182]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3740]], label [[IF_THEN3741:%.*]], label [[IF_END3742:%.*]]
// SIMD-ONLY0:       if.then3741:
// SIMD-ONLY0-NEXT:    [[TMP2183:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2183]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3742]]
// SIMD-ONLY0:       if.end3742:
// SIMD-ONLY0-NEXT:    [[TMP2184:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2185:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3743:%.*]] = icmp eq i32 [[TMP2184]], [[TMP2185]]
// SIMD-ONLY0-NEXT:    [[CONV3744:%.*]] = zext i1 [[CMP3743]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3744]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2186:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3745:%.*]] = icmp ne i32 [[TMP2186]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3745]], label [[IF_THEN3746:%.*]], label [[IF_ELSE3747:%.*]]
// SIMD-ONLY0:       if.then3746:
// SIMD-ONLY0-NEXT:    [[TMP2187:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2187]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3748:%.*]]
// SIMD-ONLY0:       if.else3747:
// SIMD-ONLY0-NEXT:    [[TMP2188:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2188]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3748]]
// SIMD-ONLY0:       if.end3748:
// SIMD-ONLY0-NEXT:    [[TMP2189:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2190:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3749:%.*]] = icmp eq i32 [[TMP2189]], [[TMP2190]]
// SIMD-ONLY0-NEXT:    [[CONV3750:%.*]] = zext i1 [[CMP3749]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3750]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2191:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3751:%.*]] = icmp ne i32 [[TMP2191]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3751]], label [[IF_THEN3752:%.*]], label [[IF_ELSE3753:%.*]]
// SIMD-ONLY0:       if.then3752:
// SIMD-ONLY0-NEXT:    [[TMP2192:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2192]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3754:%.*]]
// SIMD-ONLY0:       if.else3753:
// SIMD-ONLY0-NEXT:    [[TMP2193:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2193]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3754]]
// SIMD-ONLY0:       if.end3754:
// SIMD-ONLY0-NEXT:    [[TMP2194:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2194]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2195:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2196:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3755:%.*]] = icmp sgt i32 [[TMP2195]], [[TMP2196]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3755]], label [[IF_THEN3757:%.*]], label [[IF_END3758:%.*]]
// SIMD-ONLY0:       if.then3757:
// SIMD-ONLY0-NEXT:    [[TMP2197:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2197]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3758]]
// SIMD-ONLY0:       if.end3758:
// SIMD-ONLY0-NEXT:    [[TMP2198:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2198]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2199:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2200:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3759:%.*]] = icmp sgt i32 [[TMP2199]], [[TMP2200]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3759]], label [[IF_THEN3761:%.*]], label [[IF_END3762:%.*]]
// SIMD-ONLY0:       if.then3761:
// SIMD-ONLY0-NEXT:    [[TMP2201:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2201]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3762]]
// SIMD-ONLY0:       if.end3762:
// SIMD-ONLY0-NEXT:    [[TMP2202:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2202]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2203:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2204:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3763:%.*]] = icmp slt i32 [[TMP2203]], [[TMP2204]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3763]], label [[IF_THEN3765:%.*]], label [[IF_END3766:%.*]]
// SIMD-ONLY0:       if.then3765:
// SIMD-ONLY0-NEXT:    [[TMP2205:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2205]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3766]]
// SIMD-ONLY0:       if.end3766:
// SIMD-ONLY0-NEXT:    [[TMP2206:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2206]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2207:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2208:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3767:%.*]] = icmp slt i32 [[TMP2207]], [[TMP2208]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3767]], label [[IF_THEN3769:%.*]], label [[IF_END3770:%.*]]
// SIMD-ONLY0:       if.then3769:
// SIMD-ONLY0-NEXT:    [[TMP2209:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2209]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3770]]
// SIMD-ONLY0:       if.end3770:
// SIMD-ONLY0-NEXT:    [[TMP2210:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2210]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2211:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2212:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3771:%.*]] = icmp eq i32 [[TMP2211]], [[TMP2212]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3771]], label [[IF_THEN3773:%.*]], label [[IF_END3774:%.*]]
// SIMD-ONLY0:       if.then3773:
// SIMD-ONLY0-NEXT:    [[TMP2213:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2213]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3774]]
// SIMD-ONLY0:       if.end3774:
// SIMD-ONLY0-NEXT:    [[TMP2214:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2214]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2215:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2216:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3775:%.*]] = icmp eq i32 [[TMP2215]], [[TMP2216]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3775]], label [[IF_THEN3777:%.*]], label [[IF_END3778:%.*]]
// SIMD-ONLY0:       if.then3777:
// SIMD-ONLY0-NEXT:    [[TMP2217:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2217]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3778]]
// SIMD-ONLY0:       if.end3778:
// SIMD-ONLY0-NEXT:    [[TMP2218:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2219:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3779:%.*]] = icmp sgt i32 [[TMP2218]], [[TMP2219]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3779]], label [[IF_THEN3781:%.*]], label [[IF_END3782:%.*]]
// SIMD-ONLY0:       if.then3781:
// SIMD-ONLY0-NEXT:    [[TMP2220:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2220]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3782]]
// SIMD-ONLY0:       if.end3782:
// SIMD-ONLY0-NEXT:    [[TMP2221:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2221]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2222:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2223:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3783:%.*]] = icmp sgt i32 [[TMP2222]], [[TMP2223]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3783]], label [[IF_THEN3785:%.*]], label [[IF_END3786:%.*]]
// SIMD-ONLY0:       if.then3785:
// SIMD-ONLY0-NEXT:    [[TMP2224:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2224]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3786]]
// SIMD-ONLY0:       if.end3786:
// SIMD-ONLY0-NEXT:    [[TMP2225:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2225]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2226:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2227:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3787:%.*]] = icmp slt i32 [[TMP2226]], [[TMP2227]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3787]], label [[IF_THEN3789:%.*]], label [[IF_END3790:%.*]]
// SIMD-ONLY0:       if.then3789:
// SIMD-ONLY0-NEXT:    [[TMP2228:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2228]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3790]]
// SIMD-ONLY0:       if.end3790:
// SIMD-ONLY0-NEXT:    [[TMP2229:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2229]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2230:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2231:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3791:%.*]] = icmp slt i32 [[TMP2230]], [[TMP2231]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3791]], label [[IF_THEN3793:%.*]], label [[IF_END3794:%.*]]
// SIMD-ONLY0:       if.then3793:
// SIMD-ONLY0-NEXT:    [[TMP2232:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2232]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3794]]
// SIMD-ONLY0:       if.end3794:
// SIMD-ONLY0-NEXT:    [[TMP2233:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2233]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2234:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2235:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3795:%.*]] = icmp eq i32 [[TMP2234]], [[TMP2235]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3795]], label [[IF_THEN3797:%.*]], label [[IF_END3798:%.*]]
// SIMD-ONLY0:       if.then3797:
// SIMD-ONLY0-NEXT:    [[TMP2236:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2236]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3798]]
// SIMD-ONLY0:       if.end3798:
// SIMD-ONLY0-NEXT:    [[TMP2237:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2237]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2238:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2239:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3799:%.*]] = icmp eq i32 [[TMP2238]], [[TMP2239]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3799]], label [[IF_THEN3801:%.*]], label [[IF_END3802:%.*]]
// SIMD-ONLY0:       if.then3801:
// SIMD-ONLY0-NEXT:    [[TMP2240:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2240]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3802]]
// SIMD-ONLY0:       if.end3802:
// SIMD-ONLY0-NEXT:    [[TMP2241:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2241]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2242:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2243:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3803:%.*]] = icmp eq i32 [[TMP2242]], [[TMP2243]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3803]], label [[IF_THEN3805:%.*]], label [[IF_ELSE3806:%.*]]
// SIMD-ONLY0:       if.then3805:
// SIMD-ONLY0-NEXT:    [[TMP2244:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2244]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3807:%.*]]
// SIMD-ONLY0:       if.else3806:
// SIMD-ONLY0-NEXT:    [[TMP2245:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2245]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3807]]
// SIMD-ONLY0:       if.end3807:
// SIMD-ONLY0-NEXT:    [[TMP2246:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2247:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3808:%.*]] = icmp eq i32 [[TMP2246]], [[TMP2247]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3808]], label [[IF_THEN3810:%.*]], label [[IF_ELSE3811:%.*]]
// SIMD-ONLY0:       if.then3810:
// SIMD-ONLY0-NEXT:    [[TMP2248:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2248]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3812:%.*]]
// SIMD-ONLY0:       if.else3811:
// SIMD-ONLY0-NEXT:    [[TMP2249:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2249]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3812]]
// SIMD-ONLY0:       if.end3812:
// SIMD-ONLY0-NEXT:    [[TMP2250:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2251:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3813:%.*]] = icmp eq i32 [[TMP2250]], [[TMP2251]]
// SIMD-ONLY0-NEXT:    [[CONV3814:%.*]] = zext i1 [[CMP3813]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3814]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2252:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3815:%.*]] = icmp ne i32 [[TMP2252]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3815]], label [[IF_THEN3816:%.*]], label [[IF_END3817:%.*]]
// SIMD-ONLY0:       if.then3816:
// SIMD-ONLY0-NEXT:    [[TMP2253:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2253]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3817]]
// SIMD-ONLY0:       if.end3817:
// SIMD-ONLY0-NEXT:    [[TMP2254:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2255:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3818:%.*]] = icmp eq i32 [[TMP2254]], [[TMP2255]]
// SIMD-ONLY0-NEXT:    [[CONV3819:%.*]] = zext i1 [[CMP3818]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3819]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2256:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3820:%.*]] = icmp ne i32 [[TMP2256]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3820]], label [[IF_THEN3821:%.*]], label [[IF_END3822:%.*]]
// SIMD-ONLY0:       if.then3821:
// SIMD-ONLY0-NEXT:    [[TMP2257:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2257]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3822]]
// SIMD-ONLY0:       if.end3822:
// SIMD-ONLY0-NEXT:    [[TMP2258:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2259:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3823:%.*]] = icmp eq i32 [[TMP2258]], [[TMP2259]]
// SIMD-ONLY0-NEXT:    [[CONV3824:%.*]] = zext i1 [[CMP3823]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3824]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2260:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3825:%.*]] = icmp ne i32 [[TMP2260]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3825]], label [[IF_THEN3826:%.*]], label [[IF_ELSE3827:%.*]]
// SIMD-ONLY0:       if.then3826:
// SIMD-ONLY0-NEXT:    [[TMP2261:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2261]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3828:%.*]]
// SIMD-ONLY0:       if.else3827:
// SIMD-ONLY0-NEXT:    [[TMP2262:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2262]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3828]]
// SIMD-ONLY0:       if.end3828:
// SIMD-ONLY0-NEXT:    [[TMP2263:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2264:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3829:%.*]] = icmp eq i32 [[TMP2263]], [[TMP2264]]
// SIMD-ONLY0-NEXT:    [[CONV3830:%.*]] = zext i1 [[CMP3829]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3830]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2265:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3831:%.*]] = icmp ne i32 [[TMP2265]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3831]], label [[IF_THEN3832:%.*]], label [[IF_ELSE3833:%.*]]
// SIMD-ONLY0:       if.then3832:
// SIMD-ONLY0-NEXT:    [[TMP2266:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2266]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3834:%.*]]
// SIMD-ONLY0:       if.else3833:
// SIMD-ONLY0-NEXT:    [[TMP2267:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2267]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3834]]
// SIMD-ONLY0:       if.end3834:
// SIMD-ONLY0-NEXT:    [[TMP2268:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2268]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2269:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2270:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3835:%.*]] = icmp ugt i32 [[TMP2269]], [[TMP2270]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3835]], label [[IF_THEN3837:%.*]], label [[IF_END3838:%.*]]
// SIMD-ONLY0:       if.then3837:
// SIMD-ONLY0-NEXT:    [[TMP2271:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2271]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3838]]
// SIMD-ONLY0:       if.end3838:
// SIMD-ONLY0-NEXT:    [[TMP2272:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2272]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2273:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2274:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3839:%.*]] = icmp ugt i32 [[TMP2273]], [[TMP2274]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3839]], label [[IF_THEN3841:%.*]], label [[IF_END3842:%.*]]
// SIMD-ONLY0:       if.then3841:
// SIMD-ONLY0-NEXT:    [[TMP2275:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2275]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3842]]
// SIMD-ONLY0:       if.end3842:
// SIMD-ONLY0-NEXT:    [[TMP2276:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2276]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2277:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2278:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3843:%.*]] = icmp ult i32 [[TMP2277]], [[TMP2278]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3843]], label [[IF_THEN3845:%.*]], label [[IF_END3846:%.*]]
// SIMD-ONLY0:       if.then3845:
// SIMD-ONLY0-NEXT:    [[TMP2279:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2279]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3846]]
// SIMD-ONLY0:       if.end3846:
// SIMD-ONLY0-NEXT:    [[TMP2280:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2280]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2281:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2282:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3847:%.*]] = icmp ult i32 [[TMP2281]], [[TMP2282]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3847]], label [[IF_THEN3849:%.*]], label [[IF_END3850:%.*]]
// SIMD-ONLY0:       if.then3849:
// SIMD-ONLY0-NEXT:    [[TMP2283:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2283]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3850]]
// SIMD-ONLY0:       if.end3850:
// SIMD-ONLY0-NEXT:    [[TMP2284:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2284]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2285:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2286:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3851:%.*]] = icmp eq i32 [[TMP2285]], [[TMP2286]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3851]], label [[IF_THEN3853:%.*]], label [[IF_END3854:%.*]]
// SIMD-ONLY0:       if.then3853:
// SIMD-ONLY0-NEXT:    [[TMP2287:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2287]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3854]]
// SIMD-ONLY0:       if.end3854:
// SIMD-ONLY0-NEXT:    [[TMP2288:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2288]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2289:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2290:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3855:%.*]] = icmp eq i32 [[TMP2289]], [[TMP2290]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3855]], label [[IF_THEN3857:%.*]], label [[IF_END3858:%.*]]
// SIMD-ONLY0:       if.then3857:
// SIMD-ONLY0-NEXT:    [[TMP2291:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2291]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3858]]
// SIMD-ONLY0:       if.end3858:
// SIMD-ONLY0-NEXT:    [[TMP2292:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2293:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3859:%.*]] = icmp ugt i32 [[TMP2292]], [[TMP2293]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3859]], label [[IF_THEN3861:%.*]], label [[IF_END3862:%.*]]
// SIMD-ONLY0:       if.then3861:
// SIMD-ONLY0-NEXT:    [[TMP2294:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2294]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3862]]
// SIMD-ONLY0:       if.end3862:
// SIMD-ONLY0-NEXT:    [[TMP2295:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2295]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2296:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2297:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3863:%.*]] = icmp ugt i32 [[TMP2296]], [[TMP2297]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3863]], label [[IF_THEN3865:%.*]], label [[IF_END3866:%.*]]
// SIMD-ONLY0:       if.then3865:
// SIMD-ONLY0-NEXT:    [[TMP2298:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2298]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3866]]
// SIMD-ONLY0:       if.end3866:
// SIMD-ONLY0-NEXT:    [[TMP2299:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2299]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2300:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2301:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3867:%.*]] = icmp ult i32 [[TMP2300]], [[TMP2301]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3867]], label [[IF_THEN3869:%.*]], label [[IF_END3870:%.*]]
// SIMD-ONLY0:       if.then3869:
// SIMD-ONLY0-NEXT:    [[TMP2302:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2302]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3870]]
// SIMD-ONLY0:       if.end3870:
// SIMD-ONLY0-NEXT:    [[TMP2303:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2303]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2304:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2305:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3871:%.*]] = icmp ult i32 [[TMP2304]], [[TMP2305]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3871]], label [[IF_THEN3873:%.*]], label [[IF_END3874:%.*]]
// SIMD-ONLY0:       if.then3873:
// SIMD-ONLY0-NEXT:    [[TMP2306:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2306]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3874]]
// SIMD-ONLY0:       if.end3874:
// SIMD-ONLY0-NEXT:    [[TMP2307:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2307]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2308:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2309:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3875:%.*]] = icmp eq i32 [[TMP2308]], [[TMP2309]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3875]], label [[IF_THEN3877:%.*]], label [[IF_END3878:%.*]]
// SIMD-ONLY0:       if.then3877:
// SIMD-ONLY0-NEXT:    [[TMP2310:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2310]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3878]]
// SIMD-ONLY0:       if.end3878:
// SIMD-ONLY0-NEXT:    [[TMP2311:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2311]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2312:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2313:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3879:%.*]] = icmp eq i32 [[TMP2312]], [[TMP2313]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3879]], label [[IF_THEN3881:%.*]], label [[IF_END3882:%.*]]
// SIMD-ONLY0:       if.then3881:
// SIMD-ONLY0-NEXT:    [[TMP2314:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2314]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3882]]
// SIMD-ONLY0:       if.end3882:
// SIMD-ONLY0-NEXT:    [[TMP2315:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2315]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2316:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2317:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3883:%.*]] = icmp eq i32 [[TMP2316]], [[TMP2317]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3883]], label [[IF_THEN3885:%.*]], label [[IF_ELSE3886:%.*]]
// SIMD-ONLY0:       if.then3885:
// SIMD-ONLY0-NEXT:    [[TMP2318:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2318]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3887:%.*]]
// SIMD-ONLY0:       if.else3886:
// SIMD-ONLY0-NEXT:    [[TMP2319:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2319]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3887]]
// SIMD-ONLY0:       if.end3887:
// SIMD-ONLY0-NEXT:    [[TMP2320:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2321:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3888:%.*]] = icmp eq i32 [[TMP2320]], [[TMP2321]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3888]], label [[IF_THEN3890:%.*]], label [[IF_ELSE3891:%.*]]
// SIMD-ONLY0:       if.then3890:
// SIMD-ONLY0-NEXT:    [[TMP2322:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2322]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3892:%.*]]
// SIMD-ONLY0:       if.else3891:
// SIMD-ONLY0-NEXT:    [[TMP2323:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2323]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3892]]
// SIMD-ONLY0:       if.end3892:
// SIMD-ONLY0-NEXT:    [[TMP2324:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2325:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3893:%.*]] = icmp eq i32 [[TMP2324]], [[TMP2325]]
// SIMD-ONLY0-NEXT:    [[CONV3894:%.*]] = zext i1 [[CMP3893]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3894]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2326:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3895:%.*]] = icmp ne i32 [[TMP2326]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3895]], label [[IF_THEN3896:%.*]], label [[IF_END3897:%.*]]
// SIMD-ONLY0:       if.then3896:
// SIMD-ONLY0-NEXT:    [[TMP2327:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2327]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3897]]
// SIMD-ONLY0:       if.end3897:
// SIMD-ONLY0-NEXT:    [[TMP2328:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2329:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3898:%.*]] = icmp eq i32 [[TMP2328]], [[TMP2329]]
// SIMD-ONLY0-NEXT:    [[CONV3899:%.*]] = zext i1 [[CMP3898]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3899]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2330:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3900:%.*]] = icmp ne i32 [[TMP2330]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3900]], label [[IF_THEN3901:%.*]], label [[IF_END3902:%.*]]
// SIMD-ONLY0:       if.then3901:
// SIMD-ONLY0-NEXT:    [[TMP2331:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2331]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3902]]
// SIMD-ONLY0:       if.end3902:
// SIMD-ONLY0-NEXT:    [[TMP2332:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2333:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3903:%.*]] = icmp eq i32 [[TMP2332]], [[TMP2333]]
// SIMD-ONLY0-NEXT:    [[CONV3904:%.*]] = zext i1 [[CMP3903]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3904]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2334:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3905:%.*]] = icmp ne i32 [[TMP2334]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3905]], label [[IF_THEN3906:%.*]], label [[IF_ELSE3907:%.*]]
// SIMD-ONLY0:       if.then3906:
// SIMD-ONLY0-NEXT:    [[TMP2335:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2335]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3908:%.*]]
// SIMD-ONLY0:       if.else3907:
// SIMD-ONLY0-NEXT:    [[TMP2336:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2336]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3908]]
// SIMD-ONLY0:       if.end3908:
// SIMD-ONLY0-NEXT:    [[TMP2337:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2338:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3909:%.*]] = icmp eq i32 [[TMP2337]], [[TMP2338]]
// SIMD-ONLY0-NEXT:    [[CONV3910:%.*]] = zext i1 [[CMP3909]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3910]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2339:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3911:%.*]] = icmp ne i32 [[TMP2339]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3911]], label [[IF_THEN3912:%.*]], label [[IF_ELSE3913:%.*]]
// SIMD-ONLY0:       if.then3912:
// SIMD-ONLY0-NEXT:    [[TMP2340:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2340]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3914:%.*]]
// SIMD-ONLY0:       if.else3913:
// SIMD-ONLY0-NEXT:    [[TMP2341:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2341]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3914]]
// SIMD-ONLY0:       if.end3914:
// SIMD-ONLY0-NEXT:    [[TMP2342:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2342]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2343:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2344:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3915:%.*]] = icmp ugt i32 [[TMP2343]], [[TMP2344]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3915]], label [[IF_THEN3917:%.*]], label [[IF_END3918:%.*]]
// SIMD-ONLY0:       if.then3917:
// SIMD-ONLY0-NEXT:    [[TMP2345:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2345]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3918]]
// SIMD-ONLY0:       if.end3918:
// SIMD-ONLY0-NEXT:    [[TMP2346:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2346]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2347:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2348:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3919:%.*]] = icmp ugt i32 [[TMP2347]], [[TMP2348]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3919]], label [[IF_THEN3921:%.*]], label [[IF_END3922:%.*]]
// SIMD-ONLY0:       if.then3921:
// SIMD-ONLY0-NEXT:    [[TMP2349:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2349]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3922]]
// SIMD-ONLY0:       if.end3922:
// SIMD-ONLY0-NEXT:    [[TMP2350:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2350]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2351:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2352:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3923:%.*]] = icmp ult i32 [[TMP2351]], [[TMP2352]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3923]], label [[IF_THEN3925:%.*]], label [[IF_END3926:%.*]]
// SIMD-ONLY0:       if.then3925:
// SIMD-ONLY0-NEXT:    [[TMP2353:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2353]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3926]]
// SIMD-ONLY0:       if.end3926:
// SIMD-ONLY0-NEXT:    [[TMP2354:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2354]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2355:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2356:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3927:%.*]] = icmp ult i32 [[TMP2355]], [[TMP2356]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3927]], label [[IF_THEN3929:%.*]], label [[IF_END3930:%.*]]
// SIMD-ONLY0:       if.then3929:
// SIMD-ONLY0-NEXT:    [[TMP2357:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2357]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3930]]
// SIMD-ONLY0:       if.end3930:
// SIMD-ONLY0-NEXT:    [[TMP2358:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2358]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2359:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2360:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3931:%.*]] = icmp eq i32 [[TMP2359]], [[TMP2360]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3931]], label [[IF_THEN3933:%.*]], label [[IF_END3934:%.*]]
// SIMD-ONLY0:       if.then3933:
// SIMD-ONLY0-NEXT:    [[TMP2361:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2361]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3934]]
// SIMD-ONLY0:       if.end3934:
// SIMD-ONLY0-NEXT:    [[TMP2362:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2362]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2363:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2364:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3935:%.*]] = icmp eq i32 [[TMP2363]], [[TMP2364]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3935]], label [[IF_THEN3937:%.*]], label [[IF_END3938:%.*]]
// SIMD-ONLY0:       if.then3937:
// SIMD-ONLY0-NEXT:    [[TMP2365:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2365]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3938]]
// SIMD-ONLY0:       if.end3938:
// SIMD-ONLY0-NEXT:    [[TMP2366:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2367:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3939:%.*]] = icmp ugt i32 [[TMP2366]], [[TMP2367]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3939]], label [[IF_THEN3941:%.*]], label [[IF_END3942:%.*]]
// SIMD-ONLY0:       if.then3941:
// SIMD-ONLY0-NEXT:    [[TMP2368:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2368]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3942]]
// SIMD-ONLY0:       if.end3942:
// SIMD-ONLY0-NEXT:    [[TMP2369:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2369]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2370:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2371:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3943:%.*]] = icmp ugt i32 [[TMP2370]], [[TMP2371]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3943]], label [[IF_THEN3945:%.*]], label [[IF_END3946:%.*]]
// SIMD-ONLY0:       if.then3945:
// SIMD-ONLY0-NEXT:    [[TMP2372:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2372]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3946]]
// SIMD-ONLY0:       if.end3946:
// SIMD-ONLY0-NEXT:    [[TMP2373:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2373]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2374:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2375:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3947:%.*]] = icmp ult i32 [[TMP2374]], [[TMP2375]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3947]], label [[IF_THEN3949:%.*]], label [[IF_END3950:%.*]]
// SIMD-ONLY0:       if.then3949:
// SIMD-ONLY0-NEXT:    [[TMP2376:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2376]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3950]]
// SIMD-ONLY0:       if.end3950:
// SIMD-ONLY0-NEXT:    [[TMP2377:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2377]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2378:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2379:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3951:%.*]] = icmp ult i32 [[TMP2378]], [[TMP2379]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3951]], label [[IF_THEN3953:%.*]], label [[IF_END3954:%.*]]
// SIMD-ONLY0:       if.then3953:
// SIMD-ONLY0-NEXT:    [[TMP2380:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2380]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3954]]
// SIMD-ONLY0:       if.end3954:
// SIMD-ONLY0-NEXT:    [[TMP2381:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2381]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2382:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2383:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3955:%.*]] = icmp eq i32 [[TMP2382]], [[TMP2383]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3955]], label [[IF_THEN3957:%.*]], label [[IF_END3958:%.*]]
// SIMD-ONLY0:       if.then3957:
// SIMD-ONLY0-NEXT:    [[TMP2384:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2384]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3958]]
// SIMD-ONLY0:       if.end3958:
// SIMD-ONLY0-NEXT:    [[TMP2385:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2385]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2386:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2387:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3959:%.*]] = icmp eq i32 [[TMP2386]], [[TMP2387]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3959]], label [[IF_THEN3961:%.*]], label [[IF_END3962:%.*]]
// SIMD-ONLY0:       if.then3961:
// SIMD-ONLY0-NEXT:    [[TMP2388:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2388]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3962]]
// SIMD-ONLY0:       if.end3962:
// SIMD-ONLY0-NEXT:    [[TMP2389:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2389]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2390:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2391:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3963:%.*]] = icmp eq i32 [[TMP2390]], [[TMP2391]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3963]], label [[IF_THEN3965:%.*]], label [[IF_ELSE3966:%.*]]
// SIMD-ONLY0:       if.then3965:
// SIMD-ONLY0-NEXT:    [[TMP2392:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2392]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3967:%.*]]
// SIMD-ONLY0:       if.else3966:
// SIMD-ONLY0-NEXT:    [[TMP2393:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2393]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3967]]
// SIMD-ONLY0:       if.end3967:
// SIMD-ONLY0-NEXT:    [[TMP2394:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2395:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3968:%.*]] = icmp eq i32 [[TMP2394]], [[TMP2395]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3968]], label [[IF_THEN3970:%.*]], label [[IF_ELSE3971:%.*]]
// SIMD-ONLY0:       if.then3970:
// SIMD-ONLY0-NEXT:    [[TMP2396:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2396]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3972:%.*]]
// SIMD-ONLY0:       if.else3971:
// SIMD-ONLY0-NEXT:    [[TMP2397:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2397]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3972]]
// SIMD-ONLY0:       if.end3972:
// SIMD-ONLY0-NEXT:    [[TMP2398:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2399:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3973:%.*]] = icmp eq i32 [[TMP2398]], [[TMP2399]]
// SIMD-ONLY0-NEXT:    [[CONV3974:%.*]] = zext i1 [[CMP3973]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3974]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2400:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3975:%.*]] = icmp ne i32 [[TMP2400]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3975]], label [[IF_THEN3976:%.*]], label [[IF_END3977:%.*]]
// SIMD-ONLY0:       if.then3976:
// SIMD-ONLY0-NEXT:    [[TMP2401:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2401]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3977]]
// SIMD-ONLY0:       if.end3977:
// SIMD-ONLY0-NEXT:    [[TMP2402:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2403:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3978:%.*]] = icmp eq i32 [[TMP2402]], [[TMP2403]]
// SIMD-ONLY0-NEXT:    [[CONV3979:%.*]] = zext i1 [[CMP3978]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3979]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2404:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3980:%.*]] = icmp ne i32 [[TMP2404]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3980]], label [[IF_THEN3981:%.*]], label [[IF_END3982:%.*]]
// SIMD-ONLY0:       if.then3981:
// SIMD-ONLY0-NEXT:    [[TMP2405:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2405]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3982]]
// SIMD-ONLY0:       if.end3982:
// SIMD-ONLY0-NEXT:    [[TMP2406:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2407:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3983:%.*]] = icmp eq i32 [[TMP2406]], [[TMP2407]]
// SIMD-ONLY0-NEXT:    [[CONV3984:%.*]] = zext i1 [[CMP3983]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3984]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2408:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3985:%.*]] = icmp ne i32 [[TMP2408]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3985]], label [[IF_THEN3986:%.*]], label [[IF_ELSE3987:%.*]]
// SIMD-ONLY0:       if.then3986:
// SIMD-ONLY0-NEXT:    [[TMP2409:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2409]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3988:%.*]]
// SIMD-ONLY0:       if.else3987:
// SIMD-ONLY0-NEXT:    [[TMP2410:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2410]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3988]]
// SIMD-ONLY0:       if.end3988:
// SIMD-ONLY0-NEXT:    [[TMP2411:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2412:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3989:%.*]] = icmp eq i32 [[TMP2411]], [[TMP2412]]
// SIMD-ONLY0-NEXT:    [[CONV3990:%.*]] = zext i1 [[CMP3989]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV3990]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2413:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL3991:%.*]] = icmp ne i32 [[TMP2413]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL3991]], label [[IF_THEN3992:%.*]], label [[IF_ELSE3993:%.*]]
// SIMD-ONLY0:       if.then3992:
// SIMD-ONLY0-NEXT:    [[TMP2414:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2414]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3994:%.*]]
// SIMD-ONLY0:       if.else3993:
// SIMD-ONLY0-NEXT:    [[TMP2415:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2415]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3994]]
// SIMD-ONLY0:       if.end3994:
// SIMD-ONLY0-NEXT:    [[TMP2416:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2416]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2417:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2418:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3995:%.*]] = icmp ugt i32 [[TMP2417]], [[TMP2418]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3995]], label [[IF_THEN3997:%.*]], label [[IF_END3998:%.*]]
// SIMD-ONLY0:       if.then3997:
// SIMD-ONLY0-NEXT:    [[TMP2419:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2419]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END3998]]
// SIMD-ONLY0:       if.end3998:
// SIMD-ONLY0-NEXT:    [[TMP2420:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2420]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2421:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2422:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP3999:%.*]] = icmp ugt i32 [[TMP2421]], [[TMP2422]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP3999]], label [[IF_THEN4001:%.*]], label [[IF_END4002:%.*]]
// SIMD-ONLY0:       if.then4001:
// SIMD-ONLY0-NEXT:    [[TMP2423:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2423]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4002]]
// SIMD-ONLY0:       if.end4002:
// SIMD-ONLY0-NEXT:    [[TMP2424:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2424]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2425:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2426:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4003:%.*]] = icmp ult i32 [[TMP2425]], [[TMP2426]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4003]], label [[IF_THEN4005:%.*]], label [[IF_END4006:%.*]]
// SIMD-ONLY0:       if.then4005:
// SIMD-ONLY0-NEXT:    [[TMP2427:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2427]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4006]]
// SIMD-ONLY0:       if.end4006:
// SIMD-ONLY0-NEXT:    [[TMP2428:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2428]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2429:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2430:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4007:%.*]] = icmp ult i32 [[TMP2429]], [[TMP2430]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4007]], label [[IF_THEN4009:%.*]], label [[IF_END4010:%.*]]
// SIMD-ONLY0:       if.then4009:
// SIMD-ONLY0-NEXT:    [[TMP2431:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2431]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4010]]
// SIMD-ONLY0:       if.end4010:
// SIMD-ONLY0-NEXT:    [[TMP2432:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2432]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2433:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2434:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4011:%.*]] = icmp eq i32 [[TMP2433]], [[TMP2434]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4011]], label [[IF_THEN4013:%.*]], label [[IF_END4014:%.*]]
// SIMD-ONLY0:       if.then4013:
// SIMD-ONLY0-NEXT:    [[TMP2435:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2435]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4014]]
// SIMD-ONLY0:       if.end4014:
// SIMD-ONLY0-NEXT:    [[TMP2436:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2436]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2437:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2438:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4015:%.*]] = icmp eq i32 [[TMP2437]], [[TMP2438]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4015]], label [[IF_THEN4017:%.*]], label [[IF_END4018:%.*]]
// SIMD-ONLY0:       if.then4017:
// SIMD-ONLY0-NEXT:    [[TMP2439:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2439]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4018]]
// SIMD-ONLY0:       if.end4018:
// SIMD-ONLY0-NEXT:    [[TMP2440:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2441:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4019:%.*]] = icmp ugt i32 [[TMP2440]], [[TMP2441]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4019]], label [[IF_THEN4021:%.*]], label [[IF_END4022:%.*]]
// SIMD-ONLY0:       if.then4021:
// SIMD-ONLY0-NEXT:    [[TMP2442:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2442]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4022]]
// SIMD-ONLY0:       if.end4022:
// SIMD-ONLY0-NEXT:    [[TMP2443:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2443]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2444:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2445:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4023:%.*]] = icmp ugt i32 [[TMP2444]], [[TMP2445]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4023]], label [[IF_THEN4025:%.*]], label [[IF_END4026:%.*]]
// SIMD-ONLY0:       if.then4025:
// SIMD-ONLY0-NEXT:    [[TMP2446:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2446]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4026]]
// SIMD-ONLY0:       if.end4026:
// SIMD-ONLY0-NEXT:    [[TMP2447:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2447]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2448:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2449:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4027:%.*]] = icmp ult i32 [[TMP2448]], [[TMP2449]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4027]], label [[IF_THEN4029:%.*]], label [[IF_END4030:%.*]]
// SIMD-ONLY0:       if.then4029:
// SIMD-ONLY0-NEXT:    [[TMP2450:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2450]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4030]]
// SIMD-ONLY0:       if.end4030:
// SIMD-ONLY0-NEXT:    [[TMP2451:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2451]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2452:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2453:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4031:%.*]] = icmp ult i32 [[TMP2452]], [[TMP2453]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4031]], label [[IF_THEN4033:%.*]], label [[IF_END4034:%.*]]
// SIMD-ONLY0:       if.then4033:
// SIMD-ONLY0-NEXT:    [[TMP2454:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2454]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4034]]
// SIMD-ONLY0:       if.end4034:
// SIMD-ONLY0-NEXT:    [[TMP2455:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2455]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2456:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2457:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4035:%.*]] = icmp eq i32 [[TMP2456]], [[TMP2457]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4035]], label [[IF_THEN4037:%.*]], label [[IF_END4038:%.*]]
// SIMD-ONLY0:       if.then4037:
// SIMD-ONLY0-NEXT:    [[TMP2458:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2458]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4038]]
// SIMD-ONLY0:       if.end4038:
// SIMD-ONLY0-NEXT:    [[TMP2459:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2459]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2460:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2461:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4039:%.*]] = icmp eq i32 [[TMP2460]], [[TMP2461]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4039]], label [[IF_THEN4041:%.*]], label [[IF_END4042:%.*]]
// SIMD-ONLY0:       if.then4041:
// SIMD-ONLY0-NEXT:    [[TMP2462:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2462]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4042]]
// SIMD-ONLY0:       if.end4042:
// SIMD-ONLY0-NEXT:    [[TMP2463:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2463]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2464:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2465:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4043:%.*]] = icmp eq i32 [[TMP2464]], [[TMP2465]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4043]], label [[IF_THEN4045:%.*]], label [[IF_ELSE4046:%.*]]
// SIMD-ONLY0:       if.then4045:
// SIMD-ONLY0-NEXT:    [[TMP2466:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2466]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4047:%.*]]
// SIMD-ONLY0:       if.else4046:
// SIMD-ONLY0-NEXT:    [[TMP2467:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2467]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4047]]
// SIMD-ONLY0:       if.end4047:
// SIMD-ONLY0-NEXT:    [[TMP2468:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2469:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4048:%.*]] = icmp eq i32 [[TMP2468]], [[TMP2469]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4048]], label [[IF_THEN4050:%.*]], label [[IF_ELSE4051:%.*]]
// SIMD-ONLY0:       if.then4050:
// SIMD-ONLY0-NEXT:    [[TMP2470:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2470]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4052:%.*]]
// SIMD-ONLY0:       if.else4051:
// SIMD-ONLY0-NEXT:    [[TMP2471:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2471]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4052]]
// SIMD-ONLY0:       if.end4052:
// SIMD-ONLY0-NEXT:    [[TMP2472:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2473:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4053:%.*]] = icmp eq i32 [[TMP2472]], [[TMP2473]]
// SIMD-ONLY0-NEXT:    [[CONV4054:%.*]] = zext i1 [[CMP4053]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4054]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2474:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4055:%.*]] = icmp ne i32 [[TMP2474]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4055]], label [[IF_THEN4056:%.*]], label [[IF_END4057:%.*]]
// SIMD-ONLY0:       if.then4056:
// SIMD-ONLY0-NEXT:    [[TMP2475:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2475]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4057]]
// SIMD-ONLY0:       if.end4057:
// SIMD-ONLY0-NEXT:    [[TMP2476:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2477:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4058:%.*]] = icmp eq i32 [[TMP2476]], [[TMP2477]]
// SIMD-ONLY0-NEXT:    [[CONV4059:%.*]] = zext i1 [[CMP4058]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4059]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2478:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4060:%.*]] = icmp ne i32 [[TMP2478]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4060]], label [[IF_THEN4061:%.*]], label [[IF_END4062:%.*]]
// SIMD-ONLY0:       if.then4061:
// SIMD-ONLY0-NEXT:    [[TMP2479:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2479]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4062]]
// SIMD-ONLY0:       if.end4062:
// SIMD-ONLY0-NEXT:    [[TMP2480:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2481:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4063:%.*]] = icmp eq i32 [[TMP2480]], [[TMP2481]]
// SIMD-ONLY0-NEXT:    [[CONV4064:%.*]] = zext i1 [[CMP4063]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4064]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2482:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4065:%.*]] = icmp ne i32 [[TMP2482]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4065]], label [[IF_THEN4066:%.*]], label [[IF_ELSE4067:%.*]]
// SIMD-ONLY0:       if.then4066:
// SIMD-ONLY0-NEXT:    [[TMP2483:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2483]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4068:%.*]]
// SIMD-ONLY0:       if.else4067:
// SIMD-ONLY0-NEXT:    [[TMP2484:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2484]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4068]]
// SIMD-ONLY0:       if.end4068:
// SIMD-ONLY0-NEXT:    [[TMP2485:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2486:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4069:%.*]] = icmp eq i32 [[TMP2485]], [[TMP2486]]
// SIMD-ONLY0-NEXT:    [[CONV4070:%.*]] = zext i1 [[CMP4069]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4070]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2487:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4071:%.*]] = icmp ne i32 [[TMP2487]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4071]], label [[IF_THEN4072:%.*]], label [[IF_ELSE4073:%.*]]
// SIMD-ONLY0:       if.then4072:
// SIMD-ONLY0-NEXT:    [[TMP2488:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2488]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4074:%.*]]
// SIMD-ONLY0:       if.else4073:
// SIMD-ONLY0-NEXT:    [[TMP2489:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2489]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4074]]
// SIMD-ONLY0:       if.end4074:
// SIMD-ONLY0-NEXT:    [[TMP2490:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2490]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2491:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2492:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4075:%.*]] = icmp ugt i32 [[TMP2491]], [[TMP2492]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4075]], label [[IF_THEN4077:%.*]], label [[IF_END4078:%.*]]
// SIMD-ONLY0:       if.then4077:
// SIMD-ONLY0-NEXT:    [[TMP2493:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2493]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4078]]
// SIMD-ONLY0:       if.end4078:
// SIMD-ONLY0-NEXT:    [[TMP2494:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2494]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2495:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2496:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4079:%.*]] = icmp ugt i32 [[TMP2495]], [[TMP2496]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4079]], label [[IF_THEN4081:%.*]], label [[IF_END4082:%.*]]
// SIMD-ONLY0:       if.then4081:
// SIMD-ONLY0-NEXT:    [[TMP2497:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2497]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4082]]
// SIMD-ONLY0:       if.end4082:
// SIMD-ONLY0-NEXT:    [[TMP2498:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2498]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2499:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2500:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4083:%.*]] = icmp ult i32 [[TMP2499]], [[TMP2500]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4083]], label [[IF_THEN4085:%.*]], label [[IF_END4086:%.*]]
// SIMD-ONLY0:       if.then4085:
// SIMD-ONLY0-NEXT:    [[TMP2501:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2501]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4086]]
// SIMD-ONLY0:       if.end4086:
// SIMD-ONLY0-NEXT:    [[TMP2502:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2502]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2503:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2504:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4087:%.*]] = icmp ult i32 [[TMP2503]], [[TMP2504]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4087]], label [[IF_THEN4089:%.*]], label [[IF_END4090:%.*]]
// SIMD-ONLY0:       if.then4089:
// SIMD-ONLY0-NEXT:    [[TMP2505:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2505]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4090]]
// SIMD-ONLY0:       if.end4090:
// SIMD-ONLY0-NEXT:    [[TMP2506:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2506]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2507:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2508:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4091:%.*]] = icmp eq i32 [[TMP2507]], [[TMP2508]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4091]], label [[IF_THEN4093:%.*]], label [[IF_END4094:%.*]]
// SIMD-ONLY0:       if.then4093:
// SIMD-ONLY0-NEXT:    [[TMP2509:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2509]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4094]]
// SIMD-ONLY0:       if.end4094:
// SIMD-ONLY0-NEXT:    [[TMP2510:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2510]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2511:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2512:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4095:%.*]] = icmp eq i32 [[TMP2511]], [[TMP2512]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4095]], label [[IF_THEN4097:%.*]], label [[IF_END4098:%.*]]
// SIMD-ONLY0:       if.then4097:
// SIMD-ONLY0-NEXT:    [[TMP2513:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2513]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4098]]
// SIMD-ONLY0:       if.end4098:
// SIMD-ONLY0-NEXT:    [[TMP2514:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2515:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4099:%.*]] = icmp ugt i32 [[TMP2514]], [[TMP2515]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4099]], label [[IF_THEN4101:%.*]], label [[IF_END4102:%.*]]
// SIMD-ONLY0:       if.then4101:
// SIMD-ONLY0-NEXT:    [[TMP2516:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2516]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4102]]
// SIMD-ONLY0:       if.end4102:
// SIMD-ONLY0-NEXT:    [[TMP2517:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2517]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2518:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2519:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4103:%.*]] = icmp ugt i32 [[TMP2518]], [[TMP2519]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4103]], label [[IF_THEN4105:%.*]], label [[IF_END4106:%.*]]
// SIMD-ONLY0:       if.then4105:
// SIMD-ONLY0-NEXT:    [[TMP2520:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2520]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4106]]
// SIMD-ONLY0:       if.end4106:
// SIMD-ONLY0-NEXT:    [[TMP2521:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2521]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2522:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2523:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4107:%.*]] = icmp ult i32 [[TMP2522]], [[TMP2523]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4107]], label [[IF_THEN4109:%.*]], label [[IF_END4110:%.*]]
// SIMD-ONLY0:       if.then4109:
// SIMD-ONLY0-NEXT:    [[TMP2524:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2524]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4110]]
// SIMD-ONLY0:       if.end4110:
// SIMD-ONLY0-NEXT:    [[TMP2525:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2525]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2526:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2527:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4111:%.*]] = icmp ult i32 [[TMP2526]], [[TMP2527]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4111]], label [[IF_THEN4113:%.*]], label [[IF_END4114:%.*]]
// SIMD-ONLY0:       if.then4113:
// SIMD-ONLY0-NEXT:    [[TMP2528:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2528]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4114]]
// SIMD-ONLY0:       if.end4114:
// SIMD-ONLY0-NEXT:    [[TMP2529:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2529]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2530:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2531:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4115:%.*]] = icmp eq i32 [[TMP2530]], [[TMP2531]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4115]], label [[IF_THEN4117:%.*]], label [[IF_END4118:%.*]]
// SIMD-ONLY0:       if.then4117:
// SIMD-ONLY0-NEXT:    [[TMP2532:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2532]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4118]]
// SIMD-ONLY0:       if.end4118:
// SIMD-ONLY0-NEXT:    [[TMP2533:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2533]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2534:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2535:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4119:%.*]] = icmp eq i32 [[TMP2534]], [[TMP2535]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4119]], label [[IF_THEN4121:%.*]], label [[IF_END4122:%.*]]
// SIMD-ONLY0:       if.then4121:
// SIMD-ONLY0-NEXT:    [[TMP2536:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2536]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4122]]
// SIMD-ONLY0:       if.end4122:
// SIMD-ONLY0-NEXT:    [[TMP2537:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2537]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2538:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2539:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4123:%.*]] = icmp eq i32 [[TMP2538]], [[TMP2539]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4123]], label [[IF_THEN4125:%.*]], label [[IF_ELSE4126:%.*]]
// SIMD-ONLY0:       if.then4125:
// SIMD-ONLY0-NEXT:    [[TMP2540:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2540]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4127:%.*]]
// SIMD-ONLY0:       if.else4126:
// SIMD-ONLY0-NEXT:    [[TMP2541:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2541]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4127]]
// SIMD-ONLY0:       if.end4127:
// SIMD-ONLY0-NEXT:    [[TMP2542:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2543:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4128:%.*]] = icmp eq i32 [[TMP2542]], [[TMP2543]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4128]], label [[IF_THEN4130:%.*]], label [[IF_ELSE4131:%.*]]
// SIMD-ONLY0:       if.then4130:
// SIMD-ONLY0-NEXT:    [[TMP2544:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2544]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4132:%.*]]
// SIMD-ONLY0:       if.else4131:
// SIMD-ONLY0-NEXT:    [[TMP2545:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2545]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4132]]
// SIMD-ONLY0:       if.end4132:
// SIMD-ONLY0-NEXT:    [[TMP2546:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2547:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4133:%.*]] = icmp eq i32 [[TMP2546]], [[TMP2547]]
// SIMD-ONLY0-NEXT:    [[CONV4134:%.*]] = zext i1 [[CMP4133]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4134]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2548:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4135:%.*]] = icmp ne i32 [[TMP2548]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4135]], label [[IF_THEN4136:%.*]], label [[IF_END4137:%.*]]
// SIMD-ONLY0:       if.then4136:
// SIMD-ONLY0-NEXT:    [[TMP2549:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2549]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4137]]
// SIMD-ONLY0:       if.end4137:
// SIMD-ONLY0-NEXT:    [[TMP2550:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2551:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4138:%.*]] = icmp eq i32 [[TMP2550]], [[TMP2551]]
// SIMD-ONLY0-NEXT:    [[CONV4139:%.*]] = zext i1 [[CMP4138]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4139]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2552:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4140:%.*]] = icmp ne i32 [[TMP2552]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4140]], label [[IF_THEN4141:%.*]], label [[IF_END4142:%.*]]
// SIMD-ONLY0:       if.then4141:
// SIMD-ONLY0-NEXT:    [[TMP2553:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2553]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4142]]
// SIMD-ONLY0:       if.end4142:
// SIMD-ONLY0-NEXT:    [[TMP2554:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2555:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4143:%.*]] = icmp eq i32 [[TMP2554]], [[TMP2555]]
// SIMD-ONLY0-NEXT:    [[CONV4144:%.*]] = zext i1 [[CMP4143]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4144]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2556:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4145:%.*]] = icmp ne i32 [[TMP2556]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4145]], label [[IF_THEN4146:%.*]], label [[IF_ELSE4147:%.*]]
// SIMD-ONLY0:       if.then4146:
// SIMD-ONLY0-NEXT:    [[TMP2557:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2557]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4148:%.*]]
// SIMD-ONLY0:       if.else4147:
// SIMD-ONLY0-NEXT:    [[TMP2558:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2558]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4148]]
// SIMD-ONLY0:       if.end4148:
// SIMD-ONLY0-NEXT:    [[TMP2559:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2560:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4149:%.*]] = icmp eq i32 [[TMP2559]], [[TMP2560]]
// SIMD-ONLY0-NEXT:    [[CONV4150:%.*]] = zext i1 [[CMP4149]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4150]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2561:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4151:%.*]] = icmp ne i32 [[TMP2561]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4151]], label [[IF_THEN4152:%.*]], label [[IF_ELSE4153:%.*]]
// SIMD-ONLY0:       if.then4152:
// SIMD-ONLY0-NEXT:    [[TMP2562:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2562]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4154:%.*]]
// SIMD-ONLY0:       if.else4153:
// SIMD-ONLY0-NEXT:    [[TMP2563:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2563]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4154]]
// SIMD-ONLY0:       if.end4154:
// SIMD-ONLY0-NEXT:    [[TMP2564:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2564]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2565:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2566:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4155:%.*]] = icmp ugt i32 [[TMP2565]], [[TMP2566]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4155]], label [[IF_THEN4157:%.*]], label [[IF_END4158:%.*]]
// SIMD-ONLY0:       if.then4157:
// SIMD-ONLY0-NEXT:    [[TMP2567:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2567]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4158]]
// SIMD-ONLY0:       if.end4158:
// SIMD-ONLY0-NEXT:    [[TMP2568:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2568]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2569:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2570:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4159:%.*]] = icmp ugt i32 [[TMP2569]], [[TMP2570]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4159]], label [[IF_THEN4161:%.*]], label [[IF_END4162:%.*]]
// SIMD-ONLY0:       if.then4161:
// SIMD-ONLY0-NEXT:    [[TMP2571:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2571]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4162]]
// SIMD-ONLY0:       if.end4162:
// SIMD-ONLY0-NEXT:    [[TMP2572:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2572]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2573:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2574:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4163:%.*]] = icmp ult i32 [[TMP2573]], [[TMP2574]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4163]], label [[IF_THEN4165:%.*]], label [[IF_END4166:%.*]]
// SIMD-ONLY0:       if.then4165:
// SIMD-ONLY0-NEXT:    [[TMP2575:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2575]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4166]]
// SIMD-ONLY0:       if.end4166:
// SIMD-ONLY0-NEXT:    [[TMP2576:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2576]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2577:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2578:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4167:%.*]] = icmp ult i32 [[TMP2577]], [[TMP2578]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4167]], label [[IF_THEN4169:%.*]], label [[IF_END4170:%.*]]
// SIMD-ONLY0:       if.then4169:
// SIMD-ONLY0-NEXT:    [[TMP2579:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2579]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4170]]
// SIMD-ONLY0:       if.end4170:
// SIMD-ONLY0-NEXT:    [[TMP2580:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2580]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2581:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2582:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4171:%.*]] = icmp eq i32 [[TMP2581]], [[TMP2582]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4171]], label [[IF_THEN4173:%.*]], label [[IF_END4174:%.*]]
// SIMD-ONLY0:       if.then4173:
// SIMD-ONLY0-NEXT:    [[TMP2583:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2583]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4174]]
// SIMD-ONLY0:       if.end4174:
// SIMD-ONLY0-NEXT:    [[TMP2584:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2584]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2585:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2586:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4175:%.*]] = icmp eq i32 [[TMP2585]], [[TMP2586]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4175]], label [[IF_THEN4177:%.*]], label [[IF_END4178:%.*]]
// SIMD-ONLY0:       if.then4177:
// SIMD-ONLY0-NEXT:    [[TMP2587:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2587]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4178]]
// SIMD-ONLY0:       if.end4178:
// SIMD-ONLY0-NEXT:    [[TMP2588:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2589:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4179:%.*]] = icmp ugt i32 [[TMP2588]], [[TMP2589]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4179]], label [[IF_THEN4181:%.*]], label [[IF_END4182:%.*]]
// SIMD-ONLY0:       if.then4181:
// SIMD-ONLY0-NEXT:    [[TMP2590:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2590]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4182]]
// SIMD-ONLY0:       if.end4182:
// SIMD-ONLY0-NEXT:    [[TMP2591:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2591]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2592:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2593:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4183:%.*]] = icmp ugt i32 [[TMP2592]], [[TMP2593]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4183]], label [[IF_THEN4185:%.*]], label [[IF_END4186:%.*]]
// SIMD-ONLY0:       if.then4185:
// SIMD-ONLY0-NEXT:    [[TMP2594:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2594]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4186]]
// SIMD-ONLY0:       if.end4186:
// SIMD-ONLY0-NEXT:    [[TMP2595:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2595]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2596:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2597:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4187:%.*]] = icmp ult i32 [[TMP2596]], [[TMP2597]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4187]], label [[IF_THEN4189:%.*]], label [[IF_END4190:%.*]]
// SIMD-ONLY0:       if.then4189:
// SIMD-ONLY0-NEXT:    [[TMP2598:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2598]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4190]]
// SIMD-ONLY0:       if.end4190:
// SIMD-ONLY0-NEXT:    [[TMP2599:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2599]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2600:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2601:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4191:%.*]] = icmp ult i32 [[TMP2600]], [[TMP2601]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4191]], label [[IF_THEN4193:%.*]], label [[IF_END4194:%.*]]
// SIMD-ONLY0:       if.then4193:
// SIMD-ONLY0-NEXT:    [[TMP2602:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2602]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4194]]
// SIMD-ONLY0:       if.end4194:
// SIMD-ONLY0-NEXT:    [[TMP2603:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2603]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2604:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2605:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4195:%.*]] = icmp eq i32 [[TMP2604]], [[TMP2605]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4195]], label [[IF_THEN4197:%.*]], label [[IF_END4198:%.*]]
// SIMD-ONLY0:       if.then4197:
// SIMD-ONLY0-NEXT:    [[TMP2606:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2606]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4198]]
// SIMD-ONLY0:       if.end4198:
// SIMD-ONLY0-NEXT:    [[TMP2607:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2607]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2608:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2609:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4199:%.*]] = icmp eq i32 [[TMP2608]], [[TMP2609]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4199]], label [[IF_THEN4201:%.*]], label [[IF_END4202:%.*]]
// SIMD-ONLY0:       if.then4201:
// SIMD-ONLY0-NEXT:    [[TMP2610:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2610]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4202]]
// SIMD-ONLY0:       if.end4202:
// SIMD-ONLY0-NEXT:    [[TMP2611:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2611]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2612:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2613:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4203:%.*]] = icmp eq i32 [[TMP2612]], [[TMP2613]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4203]], label [[IF_THEN4205:%.*]], label [[IF_ELSE4206:%.*]]
// SIMD-ONLY0:       if.then4205:
// SIMD-ONLY0-NEXT:    [[TMP2614:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2614]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4207:%.*]]
// SIMD-ONLY0:       if.else4206:
// SIMD-ONLY0-NEXT:    [[TMP2615:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2615]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4207]]
// SIMD-ONLY0:       if.end4207:
// SIMD-ONLY0-NEXT:    [[TMP2616:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2617:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4208:%.*]] = icmp eq i32 [[TMP2616]], [[TMP2617]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4208]], label [[IF_THEN4210:%.*]], label [[IF_ELSE4211:%.*]]
// SIMD-ONLY0:       if.then4210:
// SIMD-ONLY0-NEXT:    [[TMP2618:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2618]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4212:%.*]]
// SIMD-ONLY0:       if.else4211:
// SIMD-ONLY0-NEXT:    [[TMP2619:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2619]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4212]]
// SIMD-ONLY0:       if.end4212:
// SIMD-ONLY0-NEXT:    [[TMP2620:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2621:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4213:%.*]] = icmp eq i32 [[TMP2620]], [[TMP2621]]
// SIMD-ONLY0-NEXT:    [[CONV4214:%.*]] = zext i1 [[CMP4213]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4214]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2622:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4215:%.*]] = icmp ne i32 [[TMP2622]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4215]], label [[IF_THEN4216:%.*]], label [[IF_END4217:%.*]]
// SIMD-ONLY0:       if.then4216:
// SIMD-ONLY0-NEXT:    [[TMP2623:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2623]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4217]]
// SIMD-ONLY0:       if.end4217:
// SIMD-ONLY0-NEXT:    [[TMP2624:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2625:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4218:%.*]] = icmp eq i32 [[TMP2624]], [[TMP2625]]
// SIMD-ONLY0-NEXT:    [[CONV4219:%.*]] = zext i1 [[CMP4218]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4219]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2626:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4220:%.*]] = icmp ne i32 [[TMP2626]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4220]], label [[IF_THEN4221:%.*]], label [[IF_END4222:%.*]]
// SIMD-ONLY0:       if.then4221:
// SIMD-ONLY0-NEXT:    [[TMP2627:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2627]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4222]]
// SIMD-ONLY0:       if.end4222:
// SIMD-ONLY0-NEXT:    [[TMP2628:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2629:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4223:%.*]] = icmp eq i32 [[TMP2628]], [[TMP2629]]
// SIMD-ONLY0-NEXT:    [[CONV4224:%.*]] = zext i1 [[CMP4223]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4224]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2630:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4225:%.*]] = icmp ne i32 [[TMP2630]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4225]], label [[IF_THEN4226:%.*]], label [[IF_ELSE4227:%.*]]
// SIMD-ONLY0:       if.then4226:
// SIMD-ONLY0-NEXT:    [[TMP2631:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2631]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4228:%.*]]
// SIMD-ONLY0:       if.else4227:
// SIMD-ONLY0-NEXT:    [[TMP2632:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2632]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4228]]
// SIMD-ONLY0:       if.end4228:
// SIMD-ONLY0-NEXT:    [[TMP2633:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2634:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4229:%.*]] = icmp eq i32 [[TMP2633]], [[TMP2634]]
// SIMD-ONLY0-NEXT:    [[CONV4230:%.*]] = zext i1 [[CMP4229]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4230]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2635:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4231:%.*]] = icmp ne i32 [[TMP2635]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4231]], label [[IF_THEN4232:%.*]], label [[IF_ELSE4233:%.*]]
// SIMD-ONLY0:       if.then4232:
// SIMD-ONLY0-NEXT:    [[TMP2636:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2636]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4234:%.*]]
// SIMD-ONLY0:       if.else4233:
// SIMD-ONLY0-NEXT:    [[TMP2637:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2637]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4234]]
// SIMD-ONLY0:       if.end4234:
// SIMD-ONLY0-NEXT:    [[TMP2638:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2638]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2639:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2640:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4235:%.*]] = icmp ugt i32 [[TMP2639]], [[TMP2640]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4235]], label [[IF_THEN4237:%.*]], label [[IF_END4238:%.*]]
// SIMD-ONLY0:       if.then4237:
// SIMD-ONLY0-NEXT:    [[TMP2641:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2641]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4238]]
// SIMD-ONLY0:       if.end4238:
// SIMD-ONLY0-NEXT:    [[TMP2642:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2642]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2643:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2644:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4239:%.*]] = icmp ugt i32 [[TMP2643]], [[TMP2644]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4239]], label [[IF_THEN4241:%.*]], label [[IF_END4242:%.*]]
// SIMD-ONLY0:       if.then4241:
// SIMD-ONLY0-NEXT:    [[TMP2645:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2645]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4242]]
// SIMD-ONLY0:       if.end4242:
// SIMD-ONLY0-NEXT:    [[TMP2646:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2646]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2647:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2648:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4243:%.*]] = icmp ult i32 [[TMP2647]], [[TMP2648]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4243]], label [[IF_THEN4245:%.*]], label [[IF_END4246:%.*]]
// SIMD-ONLY0:       if.then4245:
// SIMD-ONLY0-NEXT:    [[TMP2649:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2649]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4246]]
// SIMD-ONLY0:       if.end4246:
// SIMD-ONLY0-NEXT:    [[TMP2650:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2650]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2651:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2652:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4247:%.*]] = icmp ult i32 [[TMP2651]], [[TMP2652]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4247]], label [[IF_THEN4249:%.*]], label [[IF_END4250:%.*]]
// SIMD-ONLY0:       if.then4249:
// SIMD-ONLY0-NEXT:    [[TMP2653:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2653]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4250]]
// SIMD-ONLY0:       if.end4250:
// SIMD-ONLY0-NEXT:    [[TMP2654:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2654]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2655:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2656:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4251:%.*]] = icmp eq i32 [[TMP2655]], [[TMP2656]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4251]], label [[IF_THEN4253:%.*]], label [[IF_END4254:%.*]]
// SIMD-ONLY0:       if.then4253:
// SIMD-ONLY0-NEXT:    [[TMP2657:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2657]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4254]]
// SIMD-ONLY0:       if.end4254:
// SIMD-ONLY0-NEXT:    [[TMP2658:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2658]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2659:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2660:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4255:%.*]] = icmp eq i32 [[TMP2659]], [[TMP2660]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4255]], label [[IF_THEN4257:%.*]], label [[IF_END4258:%.*]]
// SIMD-ONLY0:       if.then4257:
// SIMD-ONLY0-NEXT:    [[TMP2661:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2661]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4258]]
// SIMD-ONLY0:       if.end4258:
// SIMD-ONLY0-NEXT:    [[TMP2662:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2663:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4259:%.*]] = icmp ugt i32 [[TMP2662]], [[TMP2663]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4259]], label [[IF_THEN4261:%.*]], label [[IF_END4262:%.*]]
// SIMD-ONLY0:       if.then4261:
// SIMD-ONLY0-NEXT:    [[TMP2664:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2664]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4262]]
// SIMD-ONLY0:       if.end4262:
// SIMD-ONLY0-NEXT:    [[TMP2665:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2665]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2666:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2667:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4263:%.*]] = icmp ugt i32 [[TMP2666]], [[TMP2667]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4263]], label [[IF_THEN4265:%.*]], label [[IF_END4266:%.*]]
// SIMD-ONLY0:       if.then4265:
// SIMD-ONLY0-NEXT:    [[TMP2668:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2668]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4266]]
// SIMD-ONLY0:       if.end4266:
// SIMD-ONLY0-NEXT:    [[TMP2669:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2669]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2670:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2671:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4267:%.*]] = icmp ult i32 [[TMP2670]], [[TMP2671]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4267]], label [[IF_THEN4269:%.*]], label [[IF_END4270:%.*]]
// SIMD-ONLY0:       if.then4269:
// SIMD-ONLY0-NEXT:    [[TMP2672:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2672]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4270]]
// SIMD-ONLY0:       if.end4270:
// SIMD-ONLY0-NEXT:    [[TMP2673:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2673]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2674:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2675:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4271:%.*]] = icmp ult i32 [[TMP2674]], [[TMP2675]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4271]], label [[IF_THEN4273:%.*]], label [[IF_END4274:%.*]]
// SIMD-ONLY0:       if.then4273:
// SIMD-ONLY0-NEXT:    [[TMP2676:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2676]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4274]]
// SIMD-ONLY0:       if.end4274:
// SIMD-ONLY0-NEXT:    [[TMP2677:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2677]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2678:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2679:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4275:%.*]] = icmp eq i32 [[TMP2678]], [[TMP2679]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4275]], label [[IF_THEN4277:%.*]], label [[IF_END4278:%.*]]
// SIMD-ONLY0:       if.then4277:
// SIMD-ONLY0-NEXT:    [[TMP2680:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2680]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4278]]
// SIMD-ONLY0:       if.end4278:
// SIMD-ONLY0-NEXT:    [[TMP2681:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2681]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2682:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2683:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4279:%.*]] = icmp eq i32 [[TMP2682]], [[TMP2683]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4279]], label [[IF_THEN4281:%.*]], label [[IF_END4282:%.*]]
// SIMD-ONLY0:       if.then4281:
// SIMD-ONLY0-NEXT:    [[TMP2684:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2684]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4282]]
// SIMD-ONLY0:       if.end4282:
// SIMD-ONLY0-NEXT:    [[TMP2685:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2685]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2686:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2687:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4283:%.*]] = icmp eq i32 [[TMP2686]], [[TMP2687]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4283]], label [[IF_THEN4285:%.*]], label [[IF_ELSE4286:%.*]]
// SIMD-ONLY0:       if.then4285:
// SIMD-ONLY0-NEXT:    [[TMP2688:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2688]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4287:%.*]]
// SIMD-ONLY0:       if.else4286:
// SIMD-ONLY0-NEXT:    [[TMP2689:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2689]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4287]]
// SIMD-ONLY0:       if.end4287:
// SIMD-ONLY0-NEXT:    [[TMP2690:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2691:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4288:%.*]] = icmp eq i32 [[TMP2690]], [[TMP2691]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4288]], label [[IF_THEN4290:%.*]], label [[IF_ELSE4291:%.*]]
// SIMD-ONLY0:       if.then4290:
// SIMD-ONLY0-NEXT:    [[TMP2692:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2692]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4292:%.*]]
// SIMD-ONLY0:       if.else4291:
// SIMD-ONLY0-NEXT:    [[TMP2693:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2693]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4292]]
// SIMD-ONLY0:       if.end4292:
// SIMD-ONLY0-NEXT:    [[TMP2694:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2695:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4293:%.*]] = icmp eq i32 [[TMP2694]], [[TMP2695]]
// SIMD-ONLY0-NEXT:    [[CONV4294:%.*]] = zext i1 [[CMP4293]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4294]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2696:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4295:%.*]] = icmp ne i32 [[TMP2696]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4295]], label [[IF_THEN4296:%.*]], label [[IF_END4297:%.*]]
// SIMD-ONLY0:       if.then4296:
// SIMD-ONLY0-NEXT:    [[TMP2697:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2697]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4297]]
// SIMD-ONLY0:       if.end4297:
// SIMD-ONLY0-NEXT:    [[TMP2698:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2699:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4298:%.*]] = icmp eq i32 [[TMP2698]], [[TMP2699]]
// SIMD-ONLY0-NEXT:    [[CONV4299:%.*]] = zext i1 [[CMP4298]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4299]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2700:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4300:%.*]] = icmp ne i32 [[TMP2700]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4300]], label [[IF_THEN4301:%.*]], label [[IF_END4302:%.*]]
// SIMD-ONLY0:       if.then4301:
// SIMD-ONLY0-NEXT:    [[TMP2701:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2701]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4302]]
// SIMD-ONLY0:       if.end4302:
// SIMD-ONLY0-NEXT:    [[TMP2702:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2703:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4303:%.*]] = icmp eq i32 [[TMP2702]], [[TMP2703]]
// SIMD-ONLY0-NEXT:    [[CONV4304:%.*]] = zext i1 [[CMP4303]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4304]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2704:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4305:%.*]] = icmp ne i32 [[TMP2704]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4305]], label [[IF_THEN4306:%.*]], label [[IF_ELSE4307:%.*]]
// SIMD-ONLY0:       if.then4306:
// SIMD-ONLY0-NEXT:    [[TMP2705:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2705]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4308:%.*]]
// SIMD-ONLY0:       if.else4307:
// SIMD-ONLY0-NEXT:    [[TMP2706:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2706]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4308]]
// SIMD-ONLY0:       if.end4308:
// SIMD-ONLY0-NEXT:    [[TMP2707:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2708:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP4309:%.*]] = icmp eq i32 [[TMP2707]], [[TMP2708]]
// SIMD-ONLY0-NEXT:    [[CONV4310:%.*]] = zext i1 [[CMP4309]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV4310]], ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2709:%.*]] = load i32, ptr [[UIR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL4311:%.*]] = icmp ne i32 [[TMP2709]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4311]], label [[IF_THEN4312:%.*]], label [[IF_ELSE4313:%.*]]
// SIMD-ONLY0:       if.then4312:
// SIMD-ONLY0-NEXT:    [[TMP2710:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2710]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4314:%.*]]
// SIMD-ONLY0:       if.else4313:
// SIMD-ONLY0-NEXT:    [[TMP2711:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP2711]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END4314]]
// SIMD-ONLY0:       if.end4314:
// SIMD-ONLY0-NEXT:    [[TMP2712:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2712]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2713:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2714:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4315:%.*]] = icmp sgt i64 [[TMP2713]], [[TMP2714]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4315]], label [[IF_THEN4317:%.*]], label [[IF_END4318:%.*]]
// SIMD-ONLY0:       if.then4317:
// SIMD-ONLY0-NEXT:    [[TMP2715:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2715]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4318]]
// SIMD-ONLY0:       if.end4318:
// SIMD-ONLY0-NEXT:    [[TMP2716:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2716]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2717:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2718:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4319:%.*]] = icmp sgt i64 [[TMP2717]], [[TMP2718]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4319]], label [[IF_THEN4321:%.*]], label [[IF_END4322:%.*]]
// SIMD-ONLY0:       if.then4321:
// SIMD-ONLY0-NEXT:    [[TMP2719:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2719]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4322]]
// SIMD-ONLY0:       if.end4322:
// SIMD-ONLY0-NEXT:    [[TMP2720:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2720]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2721:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2722:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4323:%.*]] = icmp slt i64 [[TMP2721]], [[TMP2722]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4323]], label [[IF_THEN4325:%.*]], label [[IF_END4326:%.*]]
// SIMD-ONLY0:       if.then4325:
// SIMD-ONLY0-NEXT:    [[TMP2723:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2723]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4326]]
// SIMD-ONLY0:       if.end4326:
// SIMD-ONLY0-NEXT:    [[TMP2724:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2724]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2725:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2726:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4327:%.*]] = icmp slt i64 [[TMP2725]], [[TMP2726]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4327]], label [[IF_THEN4329:%.*]], label [[IF_END4330:%.*]]
// SIMD-ONLY0:       if.then4329:
// SIMD-ONLY0-NEXT:    [[TMP2727:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2727]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4330]]
// SIMD-ONLY0:       if.end4330:
// SIMD-ONLY0-NEXT:    [[TMP2728:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2728]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2729:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2730:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4331:%.*]] = icmp eq i64 [[TMP2729]], [[TMP2730]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4331]], label [[IF_THEN4333:%.*]], label [[IF_END4334:%.*]]
// SIMD-ONLY0:       if.then4333:
// SIMD-ONLY0-NEXT:    [[TMP2731:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2731]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4334]]
// SIMD-ONLY0:       if.end4334:
// SIMD-ONLY0-NEXT:    [[TMP2732:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2732]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2733:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2734:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4335:%.*]] = icmp eq i64 [[TMP2733]], [[TMP2734]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4335]], label [[IF_THEN4337:%.*]], label [[IF_END4338:%.*]]
// SIMD-ONLY0:       if.then4337:
// SIMD-ONLY0-NEXT:    [[TMP2735:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2735]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4338]]
// SIMD-ONLY0:       if.end4338:
// SIMD-ONLY0-NEXT:    [[TMP2736:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2737:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4339:%.*]] = icmp sgt i64 [[TMP2736]], [[TMP2737]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4339]], label [[IF_THEN4341:%.*]], label [[IF_END4342:%.*]]
// SIMD-ONLY0:       if.then4341:
// SIMD-ONLY0-NEXT:    [[TMP2738:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2738]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4342]]
// SIMD-ONLY0:       if.end4342:
// SIMD-ONLY0-NEXT:    [[TMP2739:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2739]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2740:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2741:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4343:%.*]] = icmp sgt i64 [[TMP2740]], [[TMP2741]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4343]], label [[IF_THEN4345:%.*]], label [[IF_END4346:%.*]]
// SIMD-ONLY0:       if.then4345:
// SIMD-ONLY0-NEXT:    [[TMP2742:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2742]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4346]]
// SIMD-ONLY0:       if.end4346:
// SIMD-ONLY0-NEXT:    [[TMP2743:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2743]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2744:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2745:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4347:%.*]] = icmp slt i64 [[TMP2744]], [[TMP2745]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4347]], label [[IF_THEN4349:%.*]], label [[IF_END4350:%.*]]
// SIMD-ONLY0:       if.then4349:
// SIMD-ONLY0-NEXT:    [[TMP2746:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2746]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4350]]
// SIMD-ONLY0:       if.end4350:
// SIMD-ONLY0-NEXT:    [[TMP2747:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2747]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2748:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2749:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4351:%.*]] = icmp slt i64 [[TMP2748]], [[TMP2749]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4351]], label [[IF_THEN4353:%.*]], label [[IF_END4354:%.*]]
// SIMD-ONLY0:       if.then4353:
// SIMD-ONLY0-NEXT:    [[TMP2750:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2750]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4354]]
// SIMD-ONLY0:       if.end4354:
// SIMD-ONLY0-NEXT:    [[TMP2751:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2751]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2752:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2753:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4355:%.*]] = icmp eq i64 [[TMP2752]], [[TMP2753]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4355]], label [[IF_THEN4357:%.*]], label [[IF_END4358:%.*]]
// SIMD-ONLY0:       if.then4357:
// SIMD-ONLY0-NEXT:    [[TMP2754:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2754]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4358]]
// SIMD-ONLY0:       if.end4358:
// SIMD-ONLY0-NEXT:    [[TMP2755:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2755]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2756:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2757:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4359:%.*]] = icmp eq i64 [[TMP2756]], [[TMP2757]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4359]], label [[IF_THEN4361:%.*]], label [[IF_END4362:%.*]]
// SIMD-ONLY0:       if.then4361:
// SIMD-ONLY0-NEXT:    [[TMP2758:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2758]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4362]]
// SIMD-ONLY0:       if.end4362:
// SIMD-ONLY0-NEXT:    [[TMP2759:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2759]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2760:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2761:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4363:%.*]] = icmp eq i64 [[TMP2760]], [[TMP2761]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4363]], label [[IF_THEN4365:%.*]], label [[IF_ELSE4366:%.*]]
// SIMD-ONLY0:       if.then4365:
// SIMD-ONLY0-NEXT:    [[TMP2762:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2762]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4367:%.*]]
// SIMD-ONLY0:       if.else4366:
// SIMD-ONLY0-NEXT:    [[TMP2763:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2763]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4367]]
// SIMD-ONLY0:       if.end4367:
// SIMD-ONLY0-NEXT:    [[TMP2764:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2765:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4368:%.*]] = icmp eq i64 [[TMP2764]], [[TMP2765]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4368]], label [[IF_THEN4370:%.*]], label [[IF_ELSE4371:%.*]]
// SIMD-ONLY0:       if.then4370:
// SIMD-ONLY0-NEXT:    [[TMP2766:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2766]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4372:%.*]]
// SIMD-ONLY0:       if.else4371:
// SIMD-ONLY0-NEXT:    [[TMP2767:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2767]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4372]]
// SIMD-ONLY0:       if.end4372:
// SIMD-ONLY0-NEXT:    [[TMP2768:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2769:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4373:%.*]] = icmp eq i64 [[TMP2768]], [[TMP2769]]
// SIMD-ONLY0-NEXT:    [[CONV4374:%.*]] = zext i1 [[CMP4373]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4375:%.*]] = sext i32 [[CONV4374]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4375]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2770:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4376:%.*]] = icmp ne i64 [[TMP2770]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4376]], label [[IF_THEN4377:%.*]], label [[IF_END4378:%.*]]
// SIMD-ONLY0:       if.then4377:
// SIMD-ONLY0-NEXT:    [[TMP2771:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2771]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4378]]
// SIMD-ONLY0:       if.end4378:
// SIMD-ONLY0-NEXT:    [[TMP2772:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2773:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4379:%.*]] = icmp eq i64 [[TMP2772]], [[TMP2773]]
// SIMD-ONLY0-NEXT:    [[CONV4380:%.*]] = zext i1 [[CMP4379]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4381:%.*]] = sext i32 [[CONV4380]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4381]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2774:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4382:%.*]] = icmp ne i64 [[TMP2774]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4382]], label [[IF_THEN4383:%.*]], label [[IF_END4384:%.*]]
// SIMD-ONLY0:       if.then4383:
// SIMD-ONLY0-NEXT:    [[TMP2775:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2775]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4384]]
// SIMD-ONLY0:       if.end4384:
// SIMD-ONLY0-NEXT:    [[TMP2776:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2777:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4385:%.*]] = icmp eq i64 [[TMP2776]], [[TMP2777]]
// SIMD-ONLY0-NEXT:    [[CONV4386:%.*]] = zext i1 [[CMP4385]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4387:%.*]] = sext i32 [[CONV4386]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4387]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2778:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4388:%.*]] = icmp ne i64 [[TMP2778]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4388]], label [[IF_THEN4389:%.*]], label [[IF_ELSE4390:%.*]]
// SIMD-ONLY0:       if.then4389:
// SIMD-ONLY0-NEXT:    [[TMP2779:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2779]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4391:%.*]]
// SIMD-ONLY0:       if.else4390:
// SIMD-ONLY0-NEXT:    [[TMP2780:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2780]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4391]]
// SIMD-ONLY0:       if.end4391:
// SIMD-ONLY0-NEXT:    [[TMP2781:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2782:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4392:%.*]] = icmp eq i64 [[TMP2781]], [[TMP2782]]
// SIMD-ONLY0-NEXT:    [[CONV4393:%.*]] = zext i1 [[CMP4392]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4394:%.*]] = sext i32 [[CONV4393]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4394]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2783:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4395:%.*]] = icmp ne i64 [[TMP2783]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4395]], label [[IF_THEN4396:%.*]], label [[IF_ELSE4397:%.*]]
// SIMD-ONLY0:       if.then4396:
// SIMD-ONLY0-NEXT:    [[TMP2784:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2784]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4398:%.*]]
// SIMD-ONLY0:       if.else4397:
// SIMD-ONLY0-NEXT:    [[TMP2785:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2785]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4398]]
// SIMD-ONLY0:       if.end4398:
// SIMD-ONLY0-NEXT:    [[TMP2786:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2786]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2787:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2788:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4399:%.*]] = icmp sgt i64 [[TMP2787]], [[TMP2788]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4399]], label [[IF_THEN4401:%.*]], label [[IF_END4402:%.*]]
// SIMD-ONLY0:       if.then4401:
// SIMD-ONLY0-NEXT:    [[TMP2789:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2789]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4402]]
// SIMD-ONLY0:       if.end4402:
// SIMD-ONLY0-NEXT:    [[TMP2790:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2790]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2791:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2792:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4403:%.*]] = icmp sgt i64 [[TMP2791]], [[TMP2792]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4403]], label [[IF_THEN4405:%.*]], label [[IF_END4406:%.*]]
// SIMD-ONLY0:       if.then4405:
// SIMD-ONLY0-NEXT:    [[TMP2793:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2793]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4406]]
// SIMD-ONLY0:       if.end4406:
// SIMD-ONLY0-NEXT:    [[TMP2794:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2794]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2795:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2796:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4407:%.*]] = icmp slt i64 [[TMP2795]], [[TMP2796]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4407]], label [[IF_THEN4409:%.*]], label [[IF_END4410:%.*]]
// SIMD-ONLY0:       if.then4409:
// SIMD-ONLY0-NEXT:    [[TMP2797:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2797]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4410]]
// SIMD-ONLY0:       if.end4410:
// SIMD-ONLY0-NEXT:    [[TMP2798:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2798]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2799:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2800:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4411:%.*]] = icmp slt i64 [[TMP2799]], [[TMP2800]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4411]], label [[IF_THEN4413:%.*]], label [[IF_END4414:%.*]]
// SIMD-ONLY0:       if.then4413:
// SIMD-ONLY0-NEXT:    [[TMP2801:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2801]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4414]]
// SIMD-ONLY0:       if.end4414:
// SIMD-ONLY0-NEXT:    [[TMP2802:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2802]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2803:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2804:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4415:%.*]] = icmp eq i64 [[TMP2803]], [[TMP2804]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4415]], label [[IF_THEN4417:%.*]], label [[IF_END4418:%.*]]
// SIMD-ONLY0:       if.then4417:
// SIMD-ONLY0-NEXT:    [[TMP2805:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2805]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4418]]
// SIMD-ONLY0:       if.end4418:
// SIMD-ONLY0-NEXT:    [[TMP2806:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2806]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2807:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2808:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4419:%.*]] = icmp eq i64 [[TMP2807]], [[TMP2808]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4419]], label [[IF_THEN4421:%.*]], label [[IF_END4422:%.*]]
// SIMD-ONLY0:       if.then4421:
// SIMD-ONLY0-NEXT:    [[TMP2809:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2809]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4422]]
// SIMD-ONLY0:       if.end4422:
// SIMD-ONLY0-NEXT:    [[TMP2810:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2811:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4423:%.*]] = icmp sgt i64 [[TMP2810]], [[TMP2811]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4423]], label [[IF_THEN4425:%.*]], label [[IF_END4426:%.*]]
// SIMD-ONLY0:       if.then4425:
// SIMD-ONLY0-NEXT:    [[TMP2812:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2812]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4426]]
// SIMD-ONLY0:       if.end4426:
// SIMD-ONLY0-NEXT:    [[TMP2813:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2813]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2814:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2815:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4427:%.*]] = icmp sgt i64 [[TMP2814]], [[TMP2815]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4427]], label [[IF_THEN4429:%.*]], label [[IF_END4430:%.*]]
// SIMD-ONLY0:       if.then4429:
// SIMD-ONLY0-NEXT:    [[TMP2816:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2816]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4430]]
// SIMD-ONLY0:       if.end4430:
// SIMD-ONLY0-NEXT:    [[TMP2817:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2817]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2818:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2819:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4431:%.*]] = icmp slt i64 [[TMP2818]], [[TMP2819]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4431]], label [[IF_THEN4433:%.*]], label [[IF_END4434:%.*]]
// SIMD-ONLY0:       if.then4433:
// SIMD-ONLY0-NEXT:    [[TMP2820:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2820]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4434]]
// SIMD-ONLY0:       if.end4434:
// SIMD-ONLY0-NEXT:    [[TMP2821:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2821]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2822:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2823:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4435:%.*]] = icmp slt i64 [[TMP2822]], [[TMP2823]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4435]], label [[IF_THEN4437:%.*]], label [[IF_END4438:%.*]]
// SIMD-ONLY0:       if.then4437:
// SIMD-ONLY0-NEXT:    [[TMP2824:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2824]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4438]]
// SIMD-ONLY0:       if.end4438:
// SIMD-ONLY0-NEXT:    [[TMP2825:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2825]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2826:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2827:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4439:%.*]] = icmp eq i64 [[TMP2826]], [[TMP2827]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4439]], label [[IF_THEN4441:%.*]], label [[IF_END4442:%.*]]
// SIMD-ONLY0:       if.then4441:
// SIMD-ONLY0-NEXT:    [[TMP2828:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2828]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4442]]
// SIMD-ONLY0:       if.end4442:
// SIMD-ONLY0-NEXT:    [[TMP2829:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2829]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2830:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2831:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4443:%.*]] = icmp eq i64 [[TMP2830]], [[TMP2831]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4443]], label [[IF_THEN4445:%.*]], label [[IF_END4446:%.*]]
// SIMD-ONLY0:       if.then4445:
// SIMD-ONLY0-NEXT:    [[TMP2832:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2832]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4446]]
// SIMD-ONLY0:       if.end4446:
// SIMD-ONLY0-NEXT:    [[TMP2833:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2833]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2834:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2835:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4447:%.*]] = icmp eq i64 [[TMP2834]], [[TMP2835]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4447]], label [[IF_THEN4449:%.*]], label [[IF_ELSE4450:%.*]]
// SIMD-ONLY0:       if.then4449:
// SIMD-ONLY0-NEXT:    [[TMP2836:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2836]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4451:%.*]]
// SIMD-ONLY0:       if.else4450:
// SIMD-ONLY0-NEXT:    [[TMP2837:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2837]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4451]]
// SIMD-ONLY0:       if.end4451:
// SIMD-ONLY0-NEXT:    [[TMP2838:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2839:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4452:%.*]] = icmp eq i64 [[TMP2838]], [[TMP2839]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4452]], label [[IF_THEN4454:%.*]], label [[IF_ELSE4455:%.*]]
// SIMD-ONLY0:       if.then4454:
// SIMD-ONLY0-NEXT:    [[TMP2840:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2840]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4456:%.*]]
// SIMD-ONLY0:       if.else4455:
// SIMD-ONLY0-NEXT:    [[TMP2841:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2841]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4456]]
// SIMD-ONLY0:       if.end4456:
// SIMD-ONLY0-NEXT:    [[TMP2842:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2843:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4457:%.*]] = icmp eq i64 [[TMP2842]], [[TMP2843]]
// SIMD-ONLY0-NEXT:    [[CONV4458:%.*]] = zext i1 [[CMP4457]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4459:%.*]] = sext i32 [[CONV4458]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4459]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2844:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4460:%.*]] = icmp ne i64 [[TMP2844]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4460]], label [[IF_THEN4461:%.*]], label [[IF_END4462:%.*]]
// SIMD-ONLY0:       if.then4461:
// SIMD-ONLY0-NEXT:    [[TMP2845:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2845]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4462]]
// SIMD-ONLY0:       if.end4462:
// SIMD-ONLY0-NEXT:    [[TMP2846:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2847:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4463:%.*]] = icmp eq i64 [[TMP2846]], [[TMP2847]]
// SIMD-ONLY0-NEXT:    [[CONV4464:%.*]] = zext i1 [[CMP4463]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4465:%.*]] = sext i32 [[CONV4464]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4465]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2848:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4466:%.*]] = icmp ne i64 [[TMP2848]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4466]], label [[IF_THEN4467:%.*]], label [[IF_END4468:%.*]]
// SIMD-ONLY0:       if.then4467:
// SIMD-ONLY0-NEXT:    [[TMP2849:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2849]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4468]]
// SIMD-ONLY0:       if.end4468:
// SIMD-ONLY0-NEXT:    [[TMP2850:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2851:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4469:%.*]] = icmp eq i64 [[TMP2850]], [[TMP2851]]
// SIMD-ONLY0-NEXT:    [[CONV4470:%.*]] = zext i1 [[CMP4469]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4471:%.*]] = sext i32 [[CONV4470]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4471]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2852:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4472:%.*]] = icmp ne i64 [[TMP2852]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4472]], label [[IF_THEN4473:%.*]], label [[IF_ELSE4474:%.*]]
// SIMD-ONLY0:       if.then4473:
// SIMD-ONLY0-NEXT:    [[TMP2853:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2853]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4475:%.*]]
// SIMD-ONLY0:       if.else4474:
// SIMD-ONLY0-NEXT:    [[TMP2854:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2854]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4475]]
// SIMD-ONLY0:       if.end4475:
// SIMD-ONLY0-NEXT:    [[TMP2855:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2856:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4476:%.*]] = icmp eq i64 [[TMP2855]], [[TMP2856]]
// SIMD-ONLY0-NEXT:    [[CONV4477:%.*]] = zext i1 [[CMP4476]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4478:%.*]] = sext i32 [[CONV4477]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4478]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2857:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4479:%.*]] = icmp ne i64 [[TMP2857]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4479]], label [[IF_THEN4480:%.*]], label [[IF_ELSE4481:%.*]]
// SIMD-ONLY0:       if.then4480:
// SIMD-ONLY0-NEXT:    [[TMP2858:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2858]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4482:%.*]]
// SIMD-ONLY0:       if.else4481:
// SIMD-ONLY0-NEXT:    [[TMP2859:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2859]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4482]]
// SIMD-ONLY0:       if.end4482:
// SIMD-ONLY0-NEXT:    [[TMP2860:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2860]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2861:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2862:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4483:%.*]] = icmp sgt i64 [[TMP2861]], [[TMP2862]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4483]], label [[IF_THEN4485:%.*]], label [[IF_END4486:%.*]]
// SIMD-ONLY0:       if.then4485:
// SIMD-ONLY0-NEXT:    [[TMP2863:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2863]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4486]]
// SIMD-ONLY0:       if.end4486:
// SIMD-ONLY0-NEXT:    [[TMP2864:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2864]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2865:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2866:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4487:%.*]] = icmp sgt i64 [[TMP2865]], [[TMP2866]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4487]], label [[IF_THEN4489:%.*]], label [[IF_END4490:%.*]]
// SIMD-ONLY0:       if.then4489:
// SIMD-ONLY0-NEXT:    [[TMP2867:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2867]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4490]]
// SIMD-ONLY0:       if.end4490:
// SIMD-ONLY0-NEXT:    [[TMP2868:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2868]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2869:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2870:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4491:%.*]] = icmp slt i64 [[TMP2869]], [[TMP2870]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4491]], label [[IF_THEN4493:%.*]], label [[IF_END4494:%.*]]
// SIMD-ONLY0:       if.then4493:
// SIMD-ONLY0-NEXT:    [[TMP2871:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2871]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4494]]
// SIMD-ONLY0:       if.end4494:
// SIMD-ONLY0-NEXT:    [[TMP2872:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2872]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2873:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2874:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4495:%.*]] = icmp slt i64 [[TMP2873]], [[TMP2874]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4495]], label [[IF_THEN4497:%.*]], label [[IF_END4498:%.*]]
// SIMD-ONLY0:       if.then4497:
// SIMD-ONLY0-NEXT:    [[TMP2875:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2875]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4498]]
// SIMD-ONLY0:       if.end4498:
// SIMD-ONLY0-NEXT:    [[TMP2876:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2876]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2877:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2878:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4499:%.*]] = icmp eq i64 [[TMP2877]], [[TMP2878]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4499]], label [[IF_THEN4501:%.*]], label [[IF_END4502:%.*]]
// SIMD-ONLY0:       if.then4501:
// SIMD-ONLY0-NEXT:    [[TMP2879:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2879]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4502]]
// SIMD-ONLY0:       if.end4502:
// SIMD-ONLY0-NEXT:    [[TMP2880:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2880]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2881:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2882:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4503:%.*]] = icmp eq i64 [[TMP2881]], [[TMP2882]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4503]], label [[IF_THEN4505:%.*]], label [[IF_END4506:%.*]]
// SIMD-ONLY0:       if.then4505:
// SIMD-ONLY0-NEXT:    [[TMP2883:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2883]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4506]]
// SIMD-ONLY0:       if.end4506:
// SIMD-ONLY0-NEXT:    [[TMP2884:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2885:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4507:%.*]] = icmp sgt i64 [[TMP2884]], [[TMP2885]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4507]], label [[IF_THEN4509:%.*]], label [[IF_END4510:%.*]]
// SIMD-ONLY0:       if.then4509:
// SIMD-ONLY0-NEXT:    [[TMP2886:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2886]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4510]]
// SIMD-ONLY0:       if.end4510:
// SIMD-ONLY0-NEXT:    [[TMP2887:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2887]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2888:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2889:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4511:%.*]] = icmp sgt i64 [[TMP2888]], [[TMP2889]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4511]], label [[IF_THEN4513:%.*]], label [[IF_END4514:%.*]]
// SIMD-ONLY0:       if.then4513:
// SIMD-ONLY0-NEXT:    [[TMP2890:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2890]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4514]]
// SIMD-ONLY0:       if.end4514:
// SIMD-ONLY0-NEXT:    [[TMP2891:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2891]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2892:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2893:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4515:%.*]] = icmp slt i64 [[TMP2892]], [[TMP2893]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4515]], label [[IF_THEN4517:%.*]], label [[IF_END4518:%.*]]
// SIMD-ONLY0:       if.then4517:
// SIMD-ONLY0-NEXT:    [[TMP2894:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2894]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4518]]
// SIMD-ONLY0:       if.end4518:
// SIMD-ONLY0-NEXT:    [[TMP2895:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2895]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2896:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2897:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4519:%.*]] = icmp slt i64 [[TMP2896]], [[TMP2897]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4519]], label [[IF_THEN4521:%.*]], label [[IF_END4522:%.*]]
// SIMD-ONLY0:       if.then4521:
// SIMD-ONLY0-NEXT:    [[TMP2898:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2898]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4522]]
// SIMD-ONLY0:       if.end4522:
// SIMD-ONLY0-NEXT:    [[TMP2899:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2899]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2900:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2901:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4523:%.*]] = icmp eq i64 [[TMP2900]], [[TMP2901]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4523]], label [[IF_THEN4525:%.*]], label [[IF_END4526:%.*]]
// SIMD-ONLY0:       if.then4525:
// SIMD-ONLY0-NEXT:    [[TMP2902:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2902]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4526]]
// SIMD-ONLY0:       if.end4526:
// SIMD-ONLY0-NEXT:    [[TMP2903:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2903]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2904:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2905:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4527:%.*]] = icmp eq i64 [[TMP2904]], [[TMP2905]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4527]], label [[IF_THEN4529:%.*]], label [[IF_END4530:%.*]]
// SIMD-ONLY0:       if.then4529:
// SIMD-ONLY0-NEXT:    [[TMP2906:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2906]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4530]]
// SIMD-ONLY0:       if.end4530:
// SIMD-ONLY0-NEXT:    [[TMP2907:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2907]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2908:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2909:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4531:%.*]] = icmp eq i64 [[TMP2908]], [[TMP2909]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4531]], label [[IF_THEN4533:%.*]], label [[IF_ELSE4534:%.*]]
// SIMD-ONLY0:       if.then4533:
// SIMD-ONLY0-NEXT:    [[TMP2910:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2910]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4535:%.*]]
// SIMD-ONLY0:       if.else4534:
// SIMD-ONLY0-NEXT:    [[TMP2911:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2911]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4535]]
// SIMD-ONLY0:       if.end4535:
// SIMD-ONLY0-NEXT:    [[TMP2912:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2913:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4536:%.*]] = icmp eq i64 [[TMP2912]], [[TMP2913]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4536]], label [[IF_THEN4538:%.*]], label [[IF_ELSE4539:%.*]]
// SIMD-ONLY0:       if.then4538:
// SIMD-ONLY0-NEXT:    [[TMP2914:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2914]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4540:%.*]]
// SIMD-ONLY0:       if.else4539:
// SIMD-ONLY0-NEXT:    [[TMP2915:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2915]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4540]]
// SIMD-ONLY0:       if.end4540:
// SIMD-ONLY0-NEXT:    [[TMP2916:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2917:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4541:%.*]] = icmp eq i64 [[TMP2916]], [[TMP2917]]
// SIMD-ONLY0-NEXT:    [[CONV4542:%.*]] = zext i1 [[CMP4541]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4543:%.*]] = sext i32 [[CONV4542]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4543]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2918:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4544:%.*]] = icmp ne i64 [[TMP2918]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4544]], label [[IF_THEN4545:%.*]], label [[IF_END4546:%.*]]
// SIMD-ONLY0:       if.then4545:
// SIMD-ONLY0-NEXT:    [[TMP2919:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2919]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4546]]
// SIMD-ONLY0:       if.end4546:
// SIMD-ONLY0-NEXT:    [[TMP2920:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2921:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4547:%.*]] = icmp eq i64 [[TMP2920]], [[TMP2921]]
// SIMD-ONLY0-NEXT:    [[CONV4548:%.*]] = zext i1 [[CMP4547]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4549:%.*]] = sext i32 [[CONV4548]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4549]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2922:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4550:%.*]] = icmp ne i64 [[TMP2922]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4550]], label [[IF_THEN4551:%.*]], label [[IF_END4552:%.*]]
// SIMD-ONLY0:       if.then4551:
// SIMD-ONLY0-NEXT:    [[TMP2923:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2923]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4552]]
// SIMD-ONLY0:       if.end4552:
// SIMD-ONLY0-NEXT:    [[TMP2924:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2925:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4553:%.*]] = icmp eq i64 [[TMP2924]], [[TMP2925]]
// SIMD-ONLY0-NEXT:    [[CONV4554:%.*]] = zext i1 [[CMP4553]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4555:%.*]] = sext i32 [[CONV4554]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4555]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2926:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4556:%.*]] = icmp ne i64 [[TMP2926]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4556]], label [[IF_THEN4557:%.*]], label [[IF_ELSE4558:%.*]]
// SIMD-ONLY0:       if.then4557:
// SIMD-ONLY0-NEXT:    [[TMP2927:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2927]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4559:%.*]]
// SIMD-ONLY0:       if.else4558:
// SIMD-ONLY0-NEXT:    [[TMP2928:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2928]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4559]]
// SIMD-ONLY0:       if.end4559:
// SIMD-ONLY0-NEXT:    [[TMP2929:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2930:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4560:%.*]] = icmp eq i64 [[TMP2929]], [[TMP2930]]
// SIMD-ONLY0-NEXT:    [[CONV4561:%.*]] = zext i1 [[CMP4560]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4562:%.*]] = sext i32 [[CONV4561]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4562]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2931:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4563:%.*]] = icmp ne i64 [[TMP2931]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4563]], label [[IF_THEN4564:%.*]], label [[IF_ELSE4565:%.*]]
// SIMD-ONLY0:       if.then4564:
// SIMD-ONLY0-NEXT:    [[TMP2932:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2932]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4566:%.*]]
// SIMD-ONLY0:       if.else4565:
// SIMD-ONLY0-NEXT:    [[TMP2933:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2933]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4566]]
// SIMD-ONLY0:       if.end4566:
// SIMD-ONLY0-NEXT:    [[TMP2934:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2934]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2935:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2936:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4567:%.*]] = icmp sgt i64 [[TMP2935]], [[TMP2936]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4567]], label [[IF_THEN4569:%.*]], label [[IF_END4570:%.*]]
// SIMD-ONLY0:       if.then4569:
// SIMD-ONLY0-NEXT:    [[TMP2937:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2937]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4570]]
// SIMD-ONLY0:       if.end4570:
// SIMD-ONLY0-NEXT:    [[TMP2938:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2938]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2939:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2940:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4571:%.*]] = icmp sgt i64 [[TMP2939]], [[TMP2940]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4571]], label [[IF_THEN4573:%.*]], label [[IF_END4574:%.*]]
// SIMD-ONLY0:       if.then4573:
// SIMD-ONLY0-NEXT:    [[TMP2941:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2941]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4574]]
// SIMD-ONLY0:       if.end4574:
// SIMD-ONLY0-NEXT:    [[TMP2942:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2942]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2943:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2944:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4575:%.*]] = icmp slt i64 [[TMP2943]], [[TMP2944]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4575]], label [[IF_THEN4577:%.*]], label [[IF_END4578:%.*]]
// SIMD-ONLY0:       if.then4577:
// SIMD-ONLY0-NEXT:    [[TMP2945:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2945]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4578]]
// SIMD-ONLY0:       if.end4578:
// SIMD-ONLY0-NEXT:    [[TMP2946:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2946]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2947:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2948:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4579:%.*]] = icmp slt i64 [[TMP2947]], [[TMP2948]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4579]], label [[IF_THEN4581:%.*]], label [[IF_END4582:%.*]]
// SIMD-ONLY0:       if.then4581:
// SIMD-ONLY0-NEXT:    [[TMP2949:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2949]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4582]]
// SIMD-ONLY0:       if.end4582:
// SIMD-ONLY0-NEXT:    [[TMP2950:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2950]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2951:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2952:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4583:%.*]] = icmp eq i64 [[TMP2951]], [[TMP2952]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4583]], label [[IF_THEN4585:%.*]], label [[IF_END4586:%.*]]
// SIMD-ONLY0:       if.then4585:
// SIMD-ONLY0-NEXT:    [[TMP2953:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2953]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4586]]
// SIMD-ONLY0:       if.end4586:
// SIMD-ONLY0-NEXT:    [[TMP2954:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2954]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2955:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2956:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4587:%.*]] = icmp eq i64 [[TMP2955]], [[TMP2956]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4587]], label [[IF_THEN4589:%.*]], label [[IF_END4590:%.*]]
// SIMD-ONLY0:       if.then4589:
// SIMD-ONLY0-NEXT:    [[TMP2957:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2957]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4590]]
// SIMD-ONLY0:       if.end4590:
// SIMD-ONLY0-NEXT:    [[TMP2958:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2959:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4591:%.*]] = icmp sgt i64 [[TMP2958]], [[TMP2959]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4591]], label [[IF_THEN4593:%.*]], label [[IF_END4594:%.*]]
// SIMD-ONLY0:       if.then4593:
// SIMD-ONLY0-NEXT:    [[TMP2960:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2960]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4594]]
// SIMD-ONLY0:       if.end4594:
// SIMD-ONLY0-NEXT:    [[TMP2961:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2961]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2962:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2963:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4595:%.*]] = icmp sgt i64 [[TMP2962]], [[TMP2963]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4595]], label [[IF_THEN4597:%.*]], label [[IF_END4598:%.*]]
// SIMD-ONLY0:       if.then4597:
// SIMD-ONLY0-NEXT:    [[TMP2964:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2964]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4598]]
// SIMD-ONLY0:       if.end4598:
// SIMD-ONLY0-NEXT:    [[TMP2965:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2965]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2966:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2967:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4599:%.*]] = icmp slt i64 [[TMP2966]], [[TMP2967]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4599]], label [[IF_THEN4601:%.*]], label [[IF_END4602:%.*]]
// SIMD-ONLY0:       if.then4601:
// SIMD-ONLY0-NEXT:    [[TMP2968:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2968]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4602]]
// SIMD-ONLY0:       if.end4602:
// SIMD-ONLY0-NEXT:    [[TMP2969:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2969]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2970:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2971:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4603:%.*]] = icmp slt i64 [[TMP2970]], [[TMP2971]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4603]], label [[IF_THEN4605:%.*]], label [[IF_END4606:%.*]]
// SIMD-ONLY0:       if.then4605:
// SIMD-ONLY0-NEXT:    [[TMP2972:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2972]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4606]]
// SIMD-ONLY0:       if.end4606:
// SIMD-ONLY0-NEXT:    [[TMP2973:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2973]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2974:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2975:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4607:%.*]] = icmp eq i64 [[TMP2974]], [[TMP2975]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4607]], label [[IF_THEN4609:%.*]], label [[IF_END4610:%.*]]
// SIMD-ONLY0:       if.then4609:
// SIMD-ONLY0-NEXT:    [[TMP2976:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2976]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4610]]
// SIMD-ONLY0:       if.end4610:
// SIMD-ONLY0-NEXT:    [[TMP2977:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2977]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2978:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2979:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4611:%.*]] = icmp eq i64 [[TMP2978]], [[TMP2979]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4611]], label [[IF_THEN4613:%.*]], label [[IF_END4614:%.*]]
// SIMD-ONLY0:       if.then4613:
// SIMD-ONLY0-NEXT:    [[TMP2980:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2980]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4614]]
// SIMD-ONLY0:       if.end4614:
// SIMD-ONLY0-NEXT:    [[TMP2981:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2981]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2982:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2983:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4615:%.*]] = icmp eq i64 [[TMP2982]], [[TMP2983]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4615]], label [[IF_THEN4617:%.*]], label [[IF_ELSE4618:%.*]]
// SIMD-ONLY0:       if.then4617:
// SIMD-ONLY0-NEXT:    [[TMP2984:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2984]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4619:%.*]]
// SIMD-ONLY0:       if.else4618:
// SIMD-ONLY0-NEXT:    [[TMP2985:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2985]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4619]]
// SIMD-ONLY0:       if.end4619:
// SIMD-ONLY0-NEXT:    [[TMP2986:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2987:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4620:%.*]] = icmp eq i64 [[TMP2986]], [[TMP2987]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4620]], label [[IF_THEN4622:%.*]], label [[IF_ELSE4623:%.*]]
// SIMD-ONLY0:       if.then4622:
// SIMD-ONLY0-NEXT:    [[TMP2988:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2988]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4624:%.*]]
// SIMD-ONLY0:       if.else4623:
// SIMD-ONLY0-NEXT:    [[TMP2989:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2989]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4624]]
// SIMD-ONLY0:       if.end4624:
// SIMD-ONLY0-NEXT:    [[TMP2990:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2991:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4625:%.*]] = icmp eq i64 [[TMP2990]], [[TMP2991]]
// SIMD-ONLY0-NEXT:    [[CONV4626:%.*]] = zext i1 [[CMP4625]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4627:%.*]] = sext i32 [[CONV4626]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4627]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2992:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4628:%.*]] = icmp ne i64 [[TMP2992]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4628]], label [[IF_THEN4629:%.*]], label [[IF_END4630:%.*]]
// SIMD-ONLY0:       if.then4629:
// SIMD-ONLY0-NEXT:    [[TMP2993:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2993]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4630]]
// SIMD-ONLY0:       if.end4630:
// SIMD-ONLY0-NEXT:    [[TMP2994:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2995:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4631:%.*]] = icmp eq i64 [[TMP2994]], [[TMP2995]]
// SIMD-ONLY0-NEXT:    [[CONV4632:%.*]] = zext i1 [[CMP4631]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4633:%.*]] = sext i32 [[CONV4632]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4633]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2996:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4634:%.*]] = icmp ne i64 [[TMP2996]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4634]], label [[IF_THEN4635:%.*]], label [[IF_END4636:%.*]]
// SIMD-ONLY0:       if.then4635:
// SIMD-ONLY0-NEXT:    [[TMP2997:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP2997]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4636]]
// SIMD-ONLY0:       if.end4636:
// SIMD-ONLY0-NEXT:    [[TMP2998:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2999:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4637:%.*]] = icmp eq i64 [[TMP2998]], [[TMP2999]]
// SIMD-ONLY0-NEXT:    [[CONV4638:%.*]] = zext i1 [[CMP4637]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4639:%.*]] = sext i32 [[CONV4638]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4639]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3000:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4640:%.*]] = icmp ne i64 [[TMP3000]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4640]], label [[IF_THEN4641:%.*]], label [[IF_ELSE4642:%.*]]
// SIMD-ONLY0:       if.then4641:
// SIMD-ONLY0-NEXT:    [[TMP3001:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3001]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4643:%.*]]
// SIMD-ONLY0:       if.else4642:
// SIMD-ONLY0-NEXT:    [[TMP3002:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3002]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4643]]
// SIMD-ONLY0:       if.end4643:
// SIMD-ONLY0-NEXT:    [[TMP3003:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3004:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4644:%.*]] = icmp eq i64 [[TMP3003]], [[TMP3004]]
// SIMD-ONLY0-NEXT:    [[CONV4645:%.*]] = zext i1 [[CMP4644]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4646:%.*]] = sext i32 [[CONV4645]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4646]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3005:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4647:%.*]] = icmp ne i64 [[TMP3005]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4647]], label [[IF_THEN4648:%.*]], label [[IF_ELSE4649:%.*]]
// SIMD-ONLY0:       if.then4648:
// SIMD-ONLY0-NEXT:    [[TMP3006:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3006]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4650:%.*]]
// SIMD-ONLY0:       if.else4649:
// SIMD-ONLY0-NEXT:    [[TMP3007:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3007]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4650]]
// SIMD-ONLY0:       if.end4650:
// SIMD-ONLY0-NEXT:    [[TMP3008:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3008]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3009:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3010:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4651:%.*]] = icmp sgt i64 [[TMP3009]], [[TMP3010]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4651]], label [[IF_THEN4653:%.*]], label [[IF_END4654:%.*]]
// SIMD-ONLY0:       if.then4653:
// SIMD-ONLY0-NEXT:    [[TMP3011:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3011]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4654]]
// SIMD-ONLY0:       if.end4654:
// SIMD-ONLY0-NEXT:    [[TMP3012:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3012]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3013:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3014:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4655:%.*]] = icmp sgt i64 [[TMP3013]], [[TMP3014]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4655]], label [[IF_THEN4657:%.*]], label [[IF_END4658:%.*]]
// SIMD-ONLY0:       if.then4657:
// SIMD-ONLY0-NEXT:    [[TMP3015:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3015]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4658]]
// SIMD-ONLY0:       if.end4658:
// SIMD-ONLY0-NEXT:    [[TMP3016:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3016]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3017:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3018:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4659:%.*]] = icmp slt i64 [[TMP3017]], [[TMP3018]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4659]], label [[IF_THEN4661:%.*]], label [[IF_END4662:%.*]]
// SIMD-ONLY0:       if.then4661:
// SIMD-ONLY0-NEXT:    [[TMP3019:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3019]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4662]]
// SIMD-ONLY0:       if.end4662:
// SIMD-ONLY0-NEXT:    [[TMP3020:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3020]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3021:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3022:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4663:%.*]] = icmp slt i64 [[TMP3021]], [[TMP3022]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4663]], label [[IF_THEN4665:%.*]], label [[IF_END4666:%.*]]
// SIMD-ONLY0:       if.then4665:
// SIMD-ONLY0-NEXT:    [[TMP3023:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3023]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4666]]
// SIMD-ONLY0:       if.end4666:
// SIMD-ONLY0-NEXT:    [[TMP3024:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3024]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3025:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3026:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4667:%.*]] = icmp eq i64 [[TMP3025]], [[TMP3026]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4667]], label [[IF_THEN4669:%.*]], label [[IF_END4670:%.*]]
// SIMD-ONLY0:       if.then4669:
// SIMD-ONLY0-NEXT:    [[TMP3027:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3027]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4670]]
// SIMD-ONLY0:       if.end4670:
// SIMD-ONLY0-NEXT:    [[TMP3028:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3028]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3029:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3030:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4671:%.*]] = icmp eq i64 [[TMP3029]], [[TMP3030]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4671]], label [[IF_THEN4673:%.*]], label [[IF_END4674:%.*]]
// SIMD-ONLY0:       if.then4673:
// SIMD-ONLY0-NEXT:    [[TMP3031:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3031]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4674]]
// SIMD-ONLY0:       if.end4674:
// SIMD-ONLY0-NEXT:    [[TMP3032:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3033:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4675:%.*]] = icmp sgt i64 [[TMP3032]], [[TMP3033]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4675]], label [[IF_THEN4677:%.*]], label [[IF_END4678:%.*]]
// SIMD-ONLY0:       if.then4677:
// SIMD-ONLY0-NEXT:    [[TMP3034:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3034]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4678]]
// SIMD-ONLY0:       if.end4678:
// SIMD-ONLY0-NEXT:    [[TMP3035:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3035]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3036:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3037:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4679:%.*]] = icmp sgt i64 [[TMP3036]], [[TMP3037]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4679]], label [[IF_THEN4681:%.*]], label [[IF_END4682:%.*]]
// SIMD-ONLY0:       if.then4681:
// SIMD-ONLY0-NEXT:    [[TMP3038:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3038]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4682]]
// SIMD-ONLY0:       if.end4682:
// SIMD-ONLY0-NEXT:    [[TMP3039:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3039]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3040:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3041:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4683:%.*]] = icmp slt i64 [[TMP3040]], [[TMP3041]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4683]], label [[IF_THEN4685:%.*]], label [[IF_END4686:%.*]]
// SIMD-ONLY0:       if.then4685:
// SIMD-ONLY0-NEXT:    [[TMP3042:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3042]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4686]]
// SIMD-ONLY0:       if.end4686:
// SIMD-ONLY0-NEXT:    [[TMP3043:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3043]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3044:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3045:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4687:%.*]] = icmp slt i64 [[TMP3044]], [[TMP3045]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4687]], label [[IF_THEN4689:%.*]], label [[IF_END4690:%.*]]
// SIMD-ONLY0:       if.then4689:
// SIMD-ONLY0-NEXT:    [[TMP3046:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3046]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4690]]
// SIMD-ONLY0:       if.end4690:
// SIMD-ONLY0-NEXT:    [[TMP3047:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3047]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3048:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3049:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4691:%.*]] = icmp eq i64 [[TMP3048]], [[TMP3049]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4691]], label [[IF_THEN4693:%.*]], label [[IF_END4694:%.*]]
// SIMD-ONLY0:       if.then4693:
// SIMD-ONLY0-NEXT:    [[TMP3050:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3050]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4694]]
// SIMD-ONLY0:       if.end4694:
// SIMD-ONLY0-NEXT:    [[TMP3051:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3051]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3052:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3053:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4695:%.*]] = icmp eq i64 [[TMP3052]], [[TMP3053]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4695]], label [[IF_THEN4697:%.*]], label [[IF_END4698:%.*]]
// SIMD-ONLY0:       if.then4697:
// SIMD-ONLY0-NEXT:    [[TMP3054:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3054]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4698]]
// SIMD-ONLY0:       if.end4698:
// SIMD-ONLY0-NEXT:    [[TMP3055:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3055]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3056:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3057:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4699:%.*]] = icmp eq i64 [[TMP3056]], [[TMP3057]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4699]], label [[IF_THEN4701:%.*]], label [[IF_ELSE4702:%.*]]
// SIMD-ONLY0:       if.then4701:
// SIMD-ONLY0-NEXT:    [[TMP3058:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3058]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4703:%.*]]
// SIMD-ONLY0:       if.else4702:
// SIMD-ONLY0-NEXT:    [[TMP3059:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3059]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4703]]
// SIMD-ONLY0:       if.end4703:
// SIMD-ONLY0-NEXT:    [[TMP3060:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3061:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4704:%.*]] = icmp eq i64 [[TMP3060]], [[TMP3061]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4704]], label [[IF_THEN4706:%.*]], label [[IF_ELSE4707:%.*]]
// SIMD-ONLY0:       if.then4706:
// SIMD-ONLY0-NEXT:    [[TMP3062:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3062]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4708:%.*]]
// SIMD-ONLY0:       if.else4707:
// SIMD-ONLY0-NEXT:    [[TMP3063:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3063]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4708]]
// SIMD-ONLY0:       if.end4708:
// SIMD-ONLY0-NEXT:    [[TMP3064:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3065:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4709:%.*]] = icmp eq i64 [[TMP3064]], [[TMP3065]]
// SIMD-ONLY0-NEXT:    [[CONV4710:%.*]] = zext i1 [[CMP4709]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4711:%.*]] = sext i32 [[CONV4710]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4711]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3066:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4712:%.*]] = icmp ne i64 [[TMP3066]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4712]], label [[IF_THEN4713:%.*]], label [[IF_END4714:%.*]]
// SIMD-ONLY0:       if.then4713:
// SIMD-ONLY0-NEXT:    [[TMP3067:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3067]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4714]]
// SIMD-ONLY0:       if.end4714:
// SIMD-ONLY0-NEXT:    [[TMP3068:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3069:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4715:%.*]] = icmp eq i64 [[TMP3068]], [[TMP3069]]
// SIMD-ONLY0-NEXT:    [[CONV4716:%.*]] = zext i1 [[CMP4715]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4717:%.*]] = sext i32 [[CONV4716]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4717]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3070:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4718:%.*]] = icmp ne i64 [[TMP3070]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4718]], label [[IF_THEN4719:%.*]], label [[IF_END4720:%.*]]
// SIMD-ONLY0:       if.then4719:
// SIMD-ONLY0-NEXT:    [[TMP3071:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3071]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4720]]
// SIMD-ONLY0:       if.end4720:
// SIMD-ONLY0-NEXT:    [[TMP3072:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3073:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4721:%.*]] = icmp eq i64 [[TMP3072]], [[TMP3073]]
// SIMD-ONLY0-NEXT:    [[CONV4722:%.*]] = zext i1 [[CMP4721]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4723:%.*]] = sext i32 [[CONV4722]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4723]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3074:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4724:%.*]] = icmp ne i64 [[TMP3074]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4724]], label [[IF_THEN4725:%.*]], label [[IF_ELSE4726:%.*]]
// SIMD-ONLY0:       if.then4725:
// SIMD-ONLY0-NEXT:    [[TMP3075:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3075]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4727:%.*]]
// SIMD-ONLY0:       if.else4726:
// SIMD-ONLY0-NEXT:    [[TMP3076:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3076]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4727]]
// SIMD-ONLY0:       if.end4727:
// SIMD-ONLY0-NEXT:    [[TMP3077:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3078:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4728:%.*]] = icmp eq i64 [[TMP3077]], [[TMP3078]]
// SIMD-ONLY0-NEXT:    [[CONV4729:%.*]] = zext i1 [[CMP4728]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4730:%.*]] = sext i32 [[CONV4729]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4730]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3079:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4731:%.*]] = icmp ne i64 [[TMP3079]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4731]], label [[IF_THEN4732:%.*]], label [[IF_ELSE4733:%.*]]
// SIMD-ONLY0:       if.then4732:
// SIMD-ONLY0-NEXT:    [[TMP3080:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3080]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4734:%.*]]
// SIMD-ONLY0:       if.else4733:
// SIMD-ONLY0-NEXT:    [[TMP3081:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3081]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4734]]
// SIMD-ONLY0:       if.end4734:
// SIMD-ONLY0-NEXT:    [[TMP3082:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3082]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3083:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3084:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4735:%.*]] = icmp sgt i64 [[TMP3083]], [[TMP3084]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4735]], label [[IF_THEN4737:%.*]], label [[IF_END4738:%.*]]
// SIMD-ONLY0:       if.then4737:
// SIMD-ONLY0-NEXT:    [[TMP3085:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3085]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4738]]
// SIMD-ONLY0:       if.end4738:
// SIMD-ONLY0-NEXT:    [[TMP3086:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3086]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3087:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3088:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4739:%.*]] = icmp sgt i64 [[TMP3087]], [[TMP3088]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4739]], label [[IF_THEN4741:%.*]], label [[IF_END4742:%.*]]
// SIMD-ONLY0:       if.then4741:
// SIMD-ONLY0-NEXT:    [[TMP3089:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3089]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4742]]
// SIMD-ONLY0:       if.end4742:
// SIMD-ONLY0-NEXT:    [[TMP3090:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3090]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3091:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3092:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4743:%.*]] = icmp slt i64 [[TMP3091]], [[TMP3092]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4743]], label [[IF_THEN4745:%.*]], label [[IF_END4746:%.*]]
// SIMD-ONLY0:       if.then4745:
// SIMD-ONLY0-NEXT:    [[TMP3093:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3093]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4746]]
// SIMD-ONLY0:       if.end4746:
// SIMD-ONLY0-NEXT:    [[TMP3094:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3094]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3095:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3096:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4747:%.*]] = icmp slt i64 [[TMP3095]], [[TMP3096]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4747]], label [[IF_THEN4749:%.*]], label [[IF_END4750:%.*]]
// SIMD-ONLY0:       if.then4749:
// SIMD-ONLY0-NEXT:    [[TMP3097:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3097]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4750]]
// SIMD-ONLY0:       if.end4750:
// SIMD-ONLY0-NEXT:    [[TMP3098:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3098]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3099:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3100:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4751:%.*]] = icmp eq i64 [[TMP3099]], [[TMP3100]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4751]], label [[IF_THEN4753:%.*]], label [[IF_END4754:%.*]]
// SIMD-ONLY0:       if.then4753:
// SIMD-ONLY0-NEXT:    [[TMP3101:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3101]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4754]]
// SIMD-ONLY0:       if.end4754:
// SIMD-ONLY0-NEXT:    [[TMP3102:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3102]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3103:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3104:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4755:%.*]] = icmp eq i64 [[TMP3103]], [[TMP3104]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4755]], label [[IF_THEN4757:%.*]], label [[IF_END4758:%.*]]
// SIMD-ONLY0:       if.then4757:
// SIMD-ONLY0-NEXT:    [[TMP3105:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3105]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4758]]
// SIMD-ONLY0:       if.end4758:
// SIMD-ONLY0-NEXT:    [[TMP3106:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3107:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4759:%.*]] = icmp sgt i64 [[TMP3106]], [[TMP3107]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4759]], label [[IF_THEN4761:%.*]], label [[IF_END4762:%.*]]
// SIMD-ONLY0:       if.then4761:
// SIMD-ONLY0-NEXT:    [[TMP3108:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3108]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4762]]
// SIMD-ONLY0:       if.end4762:
// SIMD-ONLY0-NEXT:    [[TMP3109:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3109]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3110:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3111:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4763:%.*]] = icmp sgt i64 [[TMP3110]], [[TMP3111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4763]], label [[IF_THEN4765:%.*]], label [[IF_END4766:%.*]]
// SIMD-ONLY0:       if.then4765:
// SIMD-ONLY0-NEXT:    [[TMP3112:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3112]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4766]]
// SIMD-ONLY0:       if.end4766:
// SIMD-ONLY0-NEXT:    [[TMP3113:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3113]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3114:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3115:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4767:%.*]] = icmp slt i64 [[TMP3114]], [[TMP3115]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4767]], label [[IF_THEN4769:%.*]], label [[IF_END4770:%.*]]
// SIMD-ONLY0:       if.then4769:
// SIMD-ONLY0-NEXT:    [[TMP3116:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3116]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4770]]
// SIMD-ONLY0:       if.end4770:
// SIMD-ONLY0-NEXT:    [[TMP3117:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3117]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3118:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3119:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4771:%.*]] = icmp slt i64 [[TMP3118]], [[TMP3119]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4771]], label [[IF_THEN4773:%.*]], label [[IF_END4774:%.*]]
// SIMD-ONLY0:       if.then4773:
// SIMD-ONLY0-NEXT:    [[TMP3120:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3120]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4774]]
// SIMD-ONLY0:       if.end4774:
// SIMD-ONLY0-NEXT:    [[TMP3121:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3121]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3122:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3123:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4775:%.*]] = icmp eq i64 [[TMP3122]], [[TMP3123]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4775]], label [[IF_THEN4777:%.*]], label [[IF_END4778:%.*]]
// SIMD-ONLY0:       if.then4777:
// SIMD-ONLY0-NEXT:    [[TMP3124:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3124]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4778]]
// SIMD-ONLY0:       if.end4778:
// SIMD-ONLY0-NEXT:    [[TMP3125:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3125]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3126:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3127:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4779:%.*]] = icmp eq i64 [[TMP3126]], [[TMP3127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4779]], label [[IF_THEN4781:%.*]], label [[IF_END4782:%.*]]
// SIMD-ONLY0:       if.then4781:
// SIMD-ONLY0-NEXT:    [[TMP3128:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3128]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4782]]
// SIMD-ONLY0:       if.end4782:
// SIMD-ONLY0-NEXT:    [[TMP3129:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3129]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3130:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3131:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4783:%.*]] = icmp eq i64 [[TMP3130]], [[TMP3131]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4783]], label [[IF_THEN4785:%.*]], label [[IF_ELSE4786:%.*]]
// SIMD-ONLY0:       if.then4785:
// SIMD-ONLY0-NEXT:    [[TMP3132:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3132]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4787:%.*]]
// SIMD-ONLY0:       if.else4786:
// SIMD-ONLY0-NEXT:    [[TMP3133:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3133]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4787]]
// SIMD-ONLY0:       if.end4787:
// SIMD-ONLY0-NEXT:    [[TMP3134:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3135:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4788:%.*]] = icmp eq i64 [[TMP3134]], [[TMP3135]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4788]], label [[IF_THEN4790:%.*]], label [[IF_ELSE4791:%.*]]
// SIMD-ONLY0:       if.then4790:
// SIMD-ONLY0-NEXT:    [[TMP3136:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3136]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4792:%.*]]
// SIMD-ONLY0:       if.else4791:
// SIMD-ONLY0-NEXT:    [[TMP3137:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3137]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4792]]
// SIMD-ONLY0:       if.end4792:
// SIMD-ONLY0-NEXT:    [[TMP3138:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3139:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4793:%.*]] = icmp eq i64 [[TMP3138]], [[TMP3139]]
// SIMD-ONLY0-NEXT:    [[CONV4794:%.*]] = zext i1 [[CMP4793]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4795:%.*]] = sext i32 [[CONV4794]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4795]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3140:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4796:%.*]] = icmp ne i64 [[TMP3140]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4796]], label [[IF_THEN4797:%.*]], label [[IF_END4798:%.*]]
// SIMD-ONLY0:       if.then4797:
// SIMD-ONLY0-NEXT:    [[TMP3141:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3141]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4798]]
// SIMD-ONLY0:       if.end4798:
// SIMD-ONLY0-NEXT:    [[TMP3142:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3143:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4799:%.*]] = icmp eq i64 [[TMP3142]], [[TMP3143]]
// SIMD-ONLY0-NEXT:    [[CONV4800:%.*]] = zext i1 [[CMP4799]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4801:%.*]] = sext i32 [[CONV4800]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4801]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3144:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4802:%.*]] = icmp ne i64 [[TMP3144]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4802]], label [[IF_THEN4803:%.*]], label [[IF_END4804:%.*]]
// SIMD-ONLY0:       if.then4803:
// SIMD-ONLY0-NEXT:    [[TMP3145:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3145]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4804]]
// SIMD-ONLY0:       if.end4804:
// SIMD-ONLY0-NEXT:    [[TMP3146:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3147:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4805:%.*]] = icmp eq i64 [[TMP3146]], [[TMP3147]]
// SIMD-ONLY0-NEXT:    [[CONV4806:%.*]] = zext i1 [[CMP4805]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4807:%.*]] = sext i32 [[CONV4806]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4807]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3148:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4808:%.*]] = icmp ne i64 [[TMP3148]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4808]], label [[IF_THEN4809:%.*]], label [[IF_ELSE4810:%.*]]
// SIMD-ONLY0:       if.then4809:
// SIMD-ONLY0-NEXT:    [[TMP3149:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3149]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4811:%.*]]
// SIMD-ONLY0:       if.else4810:
// SIMD-ONLY0-NEXT:    [[TMP3150:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3150]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4811]]
// SIMD-ONLY0:       if.end4811:
// SIMD-ONLY0-NEXT:    [[TMP3151:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3152:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4812:%.*]] = icmp eq i64 [[TMP3151]], [[TMP3152]]
// SIMD-ONLY0-NEXT:    [[CONV4813:%.*]] = zext i1 [[CMP4812]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4814:%.*]] = sext i32 [[CONV4813]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4814]], ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3153:%.*]] = load i64, ptr [[LR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4815:%.*]] = icmp ne i64 [[TMP3153]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4815]], label [[IF_THEN4816:%.*]], label [[IF_ELSE4817:%.*]]
// SIMD-ONLY0:       if.then4816:
// SIMD-ONLY0-NEXT:    [[TMP3154:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3154]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4818:%.*]]
// SIMD-ONLY0:       if.else4817:
// SIMD-ONLY0-NEXT:    [[TMP3155:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3155]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4818]]
// SIMD-ONLY0:       if.end4818:
// SIMD-ONLY0-NEXT:    [[TMP3156:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3156]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3157:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3158:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4819:%.*]] = icmp ugt i64 [[TMP3157]], [[TMP3158]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4819]], label [[IF_THEN4821:%.*]], label [[IF_END4822:%.*]]
// SIMD-ONLY0:       if.then4821:
// SIMD-ONLY0-NEXT:    [[TMP3159:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3159]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4822]]
// SIMD-ONLY0:       if.end4822:
// SIMD-ONLY0-NEXT:    [[TMP3160:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3160]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3161:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3162:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4823:%.*]] = icmp ugt i64 [[TMP3161]], [[TMP3162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4823]], label [[IF_THEN4825:%.*]], label [[IF_END4826:%.*]]
// SIMD-ONLY0:       if.then4825:
// SIMD-ONLY0-NEXT:    [[TMP3163:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3163]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4826]]
// SIMD-ONLY0:       if.end4826:
// SIMD-ONLY0-NEXT:    [[TMP3164:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3164]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3165:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3166:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4827:%.*]] = icmp ult i64 [[TMP3165]], [[TMP3166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4827]], label [[IF_THEN4829:%.*]], label [[IF_END4830:%.*]]
// SIMD-ONLY0:       if.then4829:
// SIMD-ONLY0-NEXT:    [[TMP3167:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3167]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4830]]
// SIMD-ONLY0:       if.end4830:
// SIMD-ONLY0-NEXT:    [[TMP3168:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3168]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3169:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3170:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4831:%.*]] = icmp ult i64 [[TMP3169]], [[TMP3170]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4831]], label [[IF_THEN4833:%.*]], label [[IF_END4834:%.*]]
// SIMD-ONLY0:       if.then4833:
// SIMD-ONLY0-NEXT:    [[TMP3171:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3171]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4834]]
// SIMD-ONLY0:       if.end4834:
// SIMD-ONLY0-NEXT:    [[TMP3172:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3172]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3173:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3174:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4835:%.*]] = icmp eq i64 [[TMP3173]], [[TMP3174]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4835]], label [[IF_THEN4837:%.*]], label [[IF_END4838:%.*]]
// SIMD-ONLY0:       if.then4837:
// SIMD-ONLY0-NEXT:    [[TMP3175:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3175]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4838]]
// SIMD-ONLY0:       if.end4838:
// SIMD-ONLY0-NEXT:    [[TMP3176:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3176]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3177:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3178:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4839:%.*]] = icmp eq i64 [[TMP3177]], [[TMP3178]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4839]], label [[IF_THEN4841:%.*]], label [[IF_END4842:%.*]]
// SIMD-ONLY0:       if.then4841:
// SIMD-ONLY0-NEXT:    [[TMP3179:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3179]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4842]]
// SIMD-ONLY0:       if.end4842:
// SIMD-ONLY0-NEXT:    [[TMP3180:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3181:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4843:%.*]] = icmp ugt i64 [[TMP3180]], [[TMP3181]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4843]], label [[IF_THEN4845:%.*]], label [[IF_END4846:%.*]]
// SIMD-ONLY0:       if.then4845:
// SIMD-ONLY0-NEXT:    [[TMP3182:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3182]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4846]]
// SIMD-ONLY0:       if.end4846:
// SIMD-ONLY0-NEXT:    [[TMP3183:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3183]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3184:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3185:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4847:%.*]] = icmp ugt i64 [[TMP3184]], [[TMP3185]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4847]], label [[IF_THEN4849:%.*]], label [[IF_END4850:%.*]]
// SIMD-ONLY0:       if.then4849:
// SIMD-ONLY0-NEXT:    [[TMP3186:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3186]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4850]]
// SIMD-ONLY0:       if.end4850:
// SIMD-ONLY0-NEXT:    [[TMP3187:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3187]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3188:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3189:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4851:%.*]] = icmp ult i64 [[TMP3188]], [[TMP3189]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4851]], label [[IF_THEN4853:%.*]], label [[IF_END4854:%.*]]
// SIMD-ONLY0:       if.then4853:
// SIMD-ONLY0-NEXT:    [[TMP3190:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3190]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4854]]
// SIMD-ONLY0:       if.end4854:
// SIMD-ONLY0-NEXT:    [[TMP3191:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3191]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3192:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3193:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4855:%.*]] = icmp ult i64 [[TMP3192]], [[TMP3193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4855]], label [[IF_THEN4857:%.*]], label [[IF_END4858:%.*]]
// SIMD-ONLY0:       if.then4857:
// SIMD-ONLY0-NEXT:    [[TMP3194:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3194]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4858]]
// SIMD-ONLY0:       if.end4858:
// SIMD-ONLY0-NEXT:    [[TMP3195:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3195]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3196:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3197:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4859:%.*]] = icmp eq i64 [[TMP3196]], [[TMP3197]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4859]], label [[IF_THEN4861:%.*]], label [[IF_END4862:%.*]]
// SIMD-ONLY0:       if.then4861:
// SIMD-ONLY0-NEXT:    [[TMP3198:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3198]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4862]]
// SIMD-ONLY0:       if.end4862:
// SIMD-ONLY0-NEXT:    [[TMP3199:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3199]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3200:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3201:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4863:%.*]] = icmp eq i64 [[TMP3200]], [[TMP3201]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4863]], label [[IF_THEN4865:%.*]], label [[IF_END4866:%.*]]
// SIMD-ONLY0:       if.then4865:
// SIMD-ONLY0-NEXT:    [[TMP3202:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3202]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4866]]
// SIMD-ONLY0:       if.end4866:
// SIMD-ONLY0-NEXT:    [[TMP3203:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3203]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3204:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3205:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4867:%.*]] = icmp eq i64 [[TMP3204]], [[TMP3205]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4867]], label [[IF_THEN4869:%.*]], label [[IF_ELSE4870:%.*]]
// SIMD-ONLY0:       if.then4869:
// SIMD-ONLY0-NEXT:    [[TMP3206:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3206]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4871:%.*]]
// SIMD-ONLY0:       if.else4870:
// SIMD-ONLY0-NEXT:    [[TMP3207:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3207]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4871]]
// SIMD-ONLY0:       if.end4871:
// SIMD-ONLY0-NEXT:    [[TMP3208:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3209:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4872:%.*]] = icmp eq i64 [[TMP3208]], [[TMP3209]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4872]], label [[IF_THEN4874:%.*]], label [[IF_ELSE4875:%.*]]
// SIMD-ONLY0:       if.then4874:
// SIMD-ONLY0-NEXT:    [[TMP3210:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3210]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4876:%.*]]
// SIMD-ONLY0:       if.else4875:
// SIMD-ONLY0-NEXT:    [[TMP3211:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3211]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4876]]
// SIMD-ONLY0:       if.end4876:
// SIMD-ONLY0-NEXT:    [[TMP3212:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3213:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4877:%.*]] = icmp eq i64 [[TMP3212]], [[TMP3213]]
// SIMD-ONLY0-NEXT:    [[CONV4878:%.*]] = zext i1 [[CMP4877]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4879:%.*]] = sext i32 [[CONV4878]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4879]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3214:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4880:%.*]] = icmp ne i64 [[TMP3214]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4880]], label [[IF_THEN4881:%.*]], label [[IF_END4882:%.*]]
// SIMD-ONLY0:       if.then4881:
// SIMD-ONLY0-NEXT:    [[TMP3215:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3215]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4882]]
// SIMD-ONLY0:       if.end4882:
// SIMD-ONLY0-NEXT:    [[TMP3216:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3217:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4883:%.*]] = icmp eq i64 [[TMP3216]], [[TMP3217]]
// SIMD-ONLY0-NEXT:    [[CONV4884:%.*]] = zext i1 [[CMP4883]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4885:%.*]] = sext i32 [[CONV4884]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4885]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3218:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4886:%.*]] = icmp ne i64 [[TMP3218]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4886]], label [[IF_THEN4887:%.*]], label [[IF_END4888:%.*]]
// SIMD-ONLY0:       if.then4887:
// SIMD-ONLY0-NEXT:    [[TMP3219:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3219]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4888]]
// SIMD-ONLY0:       if.end4888:
// SIMD-ONLY0-NEXT:    [[TMP3220:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3221:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4889:%.*]] = icmp eq i64 [[TMP3220]], [[TMP3221]]
// SIMD-ONLY0-NEXT:    [[CONV4890:%.*]] = zext i1 [[CMP4889]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4891:%.*]] = sext i32 [[CONV4890]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4891]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3222:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4892:%.*]] = icmp ne i64 [[TMP3222]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4892]], label [[IF_THEN4893:%.*]], label [[IF_ELSE4894:%.*]]
// SIMD-ONLY0:       if.then4893:
// SIMD-ONLY0-NEXT:    [[TMP3223:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3223]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4895:%.*]]
// SIMD-ONLY0:       if.else4894:
// SIMD-ONLY0-NEXT:    [[TMP3224:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3224]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4895]]
// SIMD-ONLY0:       if.end4895:
// SIMD-ONLY0-NEXT:    [[TMP3225:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3226:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4896:%.*]] = icmp eq i64 [[TMP3225]], [[TMP3226]]
// SIMD-ONLY0-NEXT:    [[CONV4897:%.*]] = zext i1 [[CMP4896]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4898:%.*]] = sext i32 [[CONV4897]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4898]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3227:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4899:%.*]] = icmp ne i64 [[TMP3227]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4899]], label [[IF_THEN4900:%.*]], label [[IF_ELSE4901:%.*]]
// SIMD-ONLY0:       if.then4900:
// SIMD-ONLY0-NEXT:    [[TMP3228:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3228]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4902:%.*]]
// SIMD-ONLY0:       if.else4901:
// SIMD-ONLY0-NEXT:    [[TMP3229:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3229]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4902]]
// SIMD-ONLY0:       if.end4902:
// SIMD-ONLY0-NEXT:    [[TMP3230:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3230]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3231:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3232:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4903:%.*]] = icmp ugt i64 [[TMP3231]], [[TMP3232]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4903]], label [[IF_THEN4905:%.*]], label [[IF_END4906:%.*]]
// SIMD-ONLY0:       if.then4905:
// SIMD-ONLY0-NEXT:    [[TMP3233:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3233]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4906]]
// SIMD-ONLY0:       if.end4906:
// SIMD-ONLY0-NEXT:    [[TMP3234:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3234]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3235:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3236:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4907:%.*]] = icmp ugt i64 [[TMP3235]], [[TMP3236]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4907]], label [[IF_THEN4909:%.*]], label [[IF_END4910:%.*]]
// SIMD-ONLY0:       if.then4909:
// SIMD-ONLY0-NEXT:    [[TMP3237:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3237]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4910]]
// SIMD-ONLY0:       if.end4910:
// SIMD-ONLY0-NEXT:    [[TMP3238:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3238]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3239:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3240:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4911:%.*]] = icmp ult i64 [[TMP3239]], [[TMP3240]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4911]], label [[IF_THEN4913:%.*]], label [[IF_END4914:%.*]]
// SIMD-ONLY0:       if.then4913:
// SIMD-ONLY0-NEXT:    [[TMP3241:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3241]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4914]]
// SIMD-ONLY0:       if.end4914:
// SIMD-ONLY0-NEXT:    [[TMP3242:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3242]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3243:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3244:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4915:%.*]] = icmp ult i64 [[TMP3243]], [[TMP3244]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4915]], label [[IF_THEN4917:%.*]], label [[IF_END4918:%.*]]
// SIMD-ONLY0:       if.then4917:
// SIMD-ONLY0-NEXT:    [[TMP3245:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3245]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4918]]
// SIMD-ONLY0:       if.end4918:
// SIMD-ONLY0-NEXT:    [[TMP3246:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3246]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3247:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3248:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4919:%.*]] = icmp eq i64 [[TMP3247]], [[TMP3248]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4919]], label [[IF_THEN4921:%.*]], label [[IF_END4922:%.*]]
// SIMD-ONLY0:       if.then4921:
// SIMD-ONLY0-NEXT:    [[TMP3249:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3249]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4922]]
// SIMD-ONLY0:       if.end4922:
// SIMD-ONLY0-NEXT:    [[TMP3250:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3250]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3251:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3252:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4923:%.*]] = icmp eq i64 [[TMP3251]], [[TMP3252]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4923]], label [[IF_THEN4925:%.*]], label [[IF_END4926:%.*]]
// SIMD-ONLY0:       if.then4925:
// SIMD-ONLY0-NEXT:    [[TMP3253:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3253]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4926]]
// SIMD-ONLY0:       if.end4926:
// SIMD-ONLY0-NEXT:    [[TMP3254:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3255:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4927:%.*]] = icmp ugt i64 [[TMP3254]], [[TMP3255]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4927]], label [[IF_THEN4929:%.*]], label [[IF_END4930:%.*]]
// SIMD-ONLY0:       if.then4929:
// SIMD-ONLY0-NEXT:    [[TMP3256:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3256]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4930]]
// SIMD-ONLY0:       if.end4930:
// SIMD-ONLY0-NEXT:    [[TMP3257:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3257]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3258:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3259:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4931:%.*]] = icmp ugt i64 [[TMP3258]], [[TMP3259]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4931]], label [[IF_THEN4933:%.*]], label [[IF_END4934:%.*]]
// SIMD-ONLY0:       if.then4933:
// SIMD-ONLY0-NEXT:    [[TMP3260:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3260]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4934]]
// SIMD-ONLY0:       if.end4934:
// SIMD-ONLY0-NEXT:    [[TMP3261:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3261]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3262:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3263:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4935:%.*]] = icmp ult i64 [[TMP3262]], [[TMP3263]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4935]], label [[IF_THEN4937:%.*]], label [[IF_END4938:%.*]]
// SIMD-ONLY0:       if.then4937:
// SIMD-ONLY0-NEXT:    [[TMP3264:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3264]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4938]]
// SIMD-ONLY0:       if.end4938:
// SIMD-ONLY0-NEXT:    [[TMP3265:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3265]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3266:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3267:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4939:%.*]] = icmp ult i64 [[TMP3266]], [[TMP3267]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4939]], label [[IF_THEN4941:%.*]], label [[IF_END4942:%.*]]
// SIMD-ONLY0:       if.then4941:
// SIMD-ONLY0-NEXT:    [[TMP3268:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3268]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4942]]
// SIMD-ONLY0:       if.end4942:
// SIMD-ONLY0-NEXT:    [[TMP3269:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3269]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3270:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3271:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4943:%.*]] = icmp eq i64 [[TMP3270]], [[TMP3271]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4943]], label [[IF_THEN4945:%.*]], label [[IF_END4946:%.*]]
// SIMD-ONLY0:       if.then4945:
// SIMD-ONLY0-NEXT:    [[TMP3272:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3272]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4946]]
// SIMD-ONLY0:       if.end4946:
// SIMD-ONLY0-NEXT:    [[TMP3273:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3273]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3274:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3275:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4947:%.*]] = icmp eq i64 [[TMP3274]], [[TMP3275]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4947]], label [[IF_THEN4949:%.*]], label [[IF_END4950:%.*]]
// SIMD-ONLY0:       if.then4949:
// SIMD-ONLY0-NEXT:    [[TMP3276:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3276]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4950]]
// SIMD-ONLY0:       if.end4950:
// SIMD-ONLY0-NEXT:    [[TMP3277:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3277]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3278:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3279:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4951:%.*]] = icmp eq i64 [[TMP3278]], [[TMP3279]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4951]], label [[IF_THEN4953:%.*]], label [[IF_ELSE4954:%.*]]
// SIMD-ONLY0:       if.then4953:
// SIMD-ONLY0-NEXT:    [[TMP3280:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3280]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4955:%.*]]
// SIMD-ONLY0:       if.else4954:
// SIMD-ONLY0-NEXT:    [[TMP3281:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3281]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4955]]
// SIMD-ONLY0:       if.end4955:
// SIMD-ONLY0-NEXT:    [[TMP3282:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3283:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4956:%.*]] = icmp eq i64 [[TMP3282]], [[TMP3283]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4956]], label [[IF_THEN4958:%.*]], label [[IF_ELSE4959:%.*]]
// SIMD-ONLY0:       if.then4958:
// SIMD-ONLY0-NEXT:    [[TMP3284:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3284]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4960:%.*]]
// SIMD-ONLY0:       if.else4959:
// SIMD-ONLY0-NEXT:    [[TMP3285:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3285]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4960]]
// SIMD-ONLY0:       if.end4960:
// SIMD-ONLY0-NEXT:    [[TMP3286:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3287:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4961:%.*]] = icmp eq i64 [[TMP3286]], [[TMP3287]]
// SIMD-ONLY0-NEXT:    [[CONV4962:%.*]] = zext i1 [[CMP4961]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4963:%.*]] = sext i32 [[CONV4962]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4963]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3288:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4964:%.*]] = icmp ne i64 [[TMP3288]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4964]], label [[IF_THEN4965:%.*]], label [[IF_END4966:%.*]]
// SIMD-ONLY0:       if.then4965:
// SIMD-ONLY0-NEXT:    [[TMP3289:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3289]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4966]]
// SIMD-ONLY0:       if.end4966:
// SIMD-ONLY0-NEXT:    [[TMP3290:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3291:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4967:%.*]] = icmp eq i64 [[TMP3290]], [[TMP3291]]
// SIMD-ONLY0-NEXT:    [[CONV4968:%.*]] = zext i1 [[CMP4967]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4969:%.*]] = sext i32 [[CONV4968]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4969]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3292:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4970:%.*]] = icmp ne i64 [[TMP3292]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4970]], label [[IF_THEN4971:%.*]], label [[IF_END4972:%.*]]
// SIMD-ONLY0:       if.then4971:
// SIMD-ONLY0-NEXT:    [[TMP3293:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3293]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4972]]
// SIMD-ONLY0:       if.end4972:
// SIMD-ONLY0-NEXT:    [[TMP3294:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3295:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4973:%.*]] = icmp eq i64 [[TMP3294]], [[TMP3295]]
// SIMD-ONLY0-NEXT:    [[CONV4974:%.*]] = zext i1 [[CMP4973]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4975:%.*]] = sext i32 [[CONV4974]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4975]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3296:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4976:%.*]] = icmp ne i64 [[TMP3296]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4976]], label [[IF_THEN4977:%.*]], label [[IF_ELSE4978:%.*]]
// SIMD-ONLY0:       if.then4977:
// SIMD-ONLY0-NEXT:    [[TMP3297:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3297]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4979:%.*]]
// SIMD-ONLY0:       if.else4978:
// SIMD-ONLY0-NEXT:    [[TMP3298:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3298]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4979]]
// SIMD-ONLY0:       if.end4979:
// SIMD-ONLY0-NEXT:    [[TMP3299:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3300:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4980:%.*]] = icmp eq i64 [[TMP3299]], [[TMP3300]]
// SIMD-ONLY0-NEXT:    [[CONV4981:%.*]] = zext i1 [[CMP4980]] to i32
// SIMD-ONLY0-NEXT:    [[CONV4982:%.*]] = sext i32 [[CONV4981]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV4982]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3301:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL4983:%.*]] = icmp ne i64 [[TMP3301]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL4983]], label [[IF_THEN4984:%.*]], label [[IF_ELSE4985:%.*]]
// SIMD-ONLY0:       if.then4984:
// SIMD-ONLY0-NEXT:    [[TMP3302:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3302]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4986:%.*]]
// SIMD-ONLY0:       if.else4985:
// SIMD-ONLY0-NEXT:    [[TMP3303:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3303]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4986]]
// SIMD-ONLY0:       if.end4986:
// SIMD-ONLY0-NEXT:    [[TMP3304:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3304]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3305:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3306:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4987:%.*]] = icmp ugt i64 [[TMP3305]], [[TMP3306]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4987]], label [[IF_THEN4989:%.*]], label [[IF_END4990:%.*]]
// SIMD-ONLY0:       if.then4989:
// SIMD-ONLY0-NEXT:    [[TMP3307:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3307]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4990]]
// SIMD-ONLY0:       if.end4990:
// SIMD-ONLY0-NEXT:    [[TMP3308:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3308]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3309:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3310:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4991:%.*]] = icmp ugt i64 [[TMP3309]], [[TMP3310]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4991]], label [[IF_THEN4993:%.*]], label [[IF_END4994:%.*]]
// SIMD-ONLY0:       if.then4993:
// SIMD-ONLY0-NEXT:    [[TMP3311:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3311]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4994]]
// SIMD-ONLY0:       if.end4994:
// SIMD-ONLY0-NEXT:    [[TMP3312:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3312]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3313:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3314:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4995:%.*]] = icmp ult i64 [[TMP3313]], [[TMP3314]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4995]], label [[IF_THEN4997:%.*]], label [[IF_END4998:%.*]]
// SIMD-ONLY0:       if.then4997:
// SIMD-ONLY0-NEXT:    [[TMP3315:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3315]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4998]]
// SIMD-ONLY0:       if.end4998:
// SIMD-ONLY0-NEXT:    [[TMP3316:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3316]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3317:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3318:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP4999:%.*]] = icmp ult i64 [[TMP3317]], [[TMP3318]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP4999]], label [[IF_THEN5001:%.*]], label [[IF_END5002:%.*]]
// SIMD-ONLY0:       if.then5001:
// SIMD-ONLY0-NEXT:    [[TMP3319:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3319]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5002]]
// SIMD-ONLY0:       if.end5002:
// SIMD-ONLY0-NEXT:    [[TMP3320:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3320]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3321:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3322:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5003:%.*]] = icmp eq i64 [[TMP3321]], [[TMP3322]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5003]], label [[IF_THEN5005:%.*]], label [[IF_END5006:%.*]]
// SIMD-ONLY0:       if.then5005:
// SIMD-ONLY0-NEXT:    [[TMP3323:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3323]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5006]]
// SIMD-ONLY0:       if.end5006:
// SIMD-ONLY0-NEXT:    [[TMP3324:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3324]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3325:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3326:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5007:%.*]] = icmp eq i64 [[TMP3325]], [[TMP3326]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5007]], label [[IF_THEN5009:%.*]], label [[IF_END5010:%.*]]
// SIMD-ONLY0:       if.then5009:
// SIMD-ONLY0-NEXT:    [[TMP3327:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3327]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5010]]
// SIMD-ONLY0:       if.end5010:
// SIMD-ONLY0-NEXT:    [[TMP3328:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3329:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5011:%.*]] = icmp ugt i64 [[TMP3328]], [[TMP3329]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5011]], label [[IF_THEN5013:%.*]], label [[IF_END5014:%.*]]
// SIMD-ONLY0:       if.then5013:
// SIMD-ONLY0-NEXT:    [[TMP3330:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3330]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5014]]
// SIMD-ONLY0:       if.end5014:
// SIMD-ONLY0-NEXT:    [[TMP3331:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3331]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3332:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3333:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5015:%.*]] = icmp ugt i64 [[TMP3332]], [[TMP3333]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5015]], label [[IF_THEN5017:%.*]], label [[IF_END5018:%.*]]
// SIMD-ONLY0:       if.then5017:
// SIMD-ONLY0-NEXT:    [[TMP3334:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3334]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5018]]
// SIMD-ONLY0:       if.end5018:
// SIMD-ONLY0-NEXT:    [[TMP3335:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3335]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3336:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3337:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5019:%.*]] = icmp ult i64 [[TMP3336]], [[TMP3337]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5019]], label [[IF_THEN5021:%.*]], label [[IF_END5022:%.*]]
// SIMD-ONLY0:       if.then5021:
// SIMD-ONLY0-NEXT:    [[TMP3338:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3338]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5022]]
// SIMD-ONLY0:       if.end5022:
// SIMD-ONLY0-NEXT:    [[TMP3339:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3339]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3340:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3341:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5023:%.*]] = icmp ult i64 [[TMP3340]], [[TMP3341]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5023]], label [[IF_THEN5025:%.*]], label [[IF_END5026:%.*]]
// SIMD-ONLY0:       if.then5025:
// SIMD-ONLY0-NEXT:    [[TMP3342:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3342]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5026]]
// SIMD-ONLY0:       if.end5026:
// SIMD-ONLY0-NEXT:    [[TMP3343:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3343]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3344:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3345:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5027:%.*]] = icmp eq i64 [[TMP3344]], [[TMP3345]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5027]], label [[IF_THEN5029:%.*]], label [[IF_END5030:%.*]]
// SIMD-ONLY0:       if.then5029:
// SIMD-ONLY0-NEXT:    [[TMP3346:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3346]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5030]]
// SIMD-ONLY0:       if.end5030:
// SIMD-ONLY0-NEXT:    [[TMP3347:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3347]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3348:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3349:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5031:%.*]] = icmp eq i64 [[TMP3348]], [[TMP3349]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5031]], label [[IF_THEN5033:%.*]], label [[IF_END5034:%.*]]
// SIMD-ONLY0:       if.then5033:
// SIMD-ONLY0-NEXT:    [[TMP3350:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3350]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5034]]
// SIMD-ONLY0:       if.end5034:
// SIMD-ONLY0-NEXT:    [[TMP3351:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3351]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3352:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3353:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5035:%.*]] = icmp eq i64 [[TMP3352]], [[TMP3353]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5035]], label [[IF_THEN5037:%.*]], label [[IF_ELSE5038:%.*]]
// SIMD-ONLY0:       if.then5037:
// SIMD-ONLY0-NEXT:    [[TMP3354:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3354]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5039:%.*]]
// SIMD-ONLY0:       if.else5038:
// SIMD-ONLY0-NEXT:    [[TMP3355:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3355]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5039]]
// SIMD-ONLY0:       if.end5039:
// SIMD-ONLY0-NEXT:    [[TMP3356:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3357:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5040:%.*]] = icmp eq i64 [[TMP3356]], [[TMP3357]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5040]], label [[IF_THEN5042:%.*]], label [[IF_ELSE5043:%.*]]
// SIMD-ONLY0:       if.then5042:
// SIMD-ONLY0-NEXT:    [[TMP3358:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3358]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5044:%.*]]
// SIMD-ONLY0:       if.else5043:
// SIMD-ONLY0-NEXT:    [[TMP3359:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3359]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5044]]
// SIMD-ONLY0:       if.end5044:
// SIMD-ONLY0-NEXT:    [[TMP3360:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3361:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5045:%.*]] = icmp eq i64 [[TMP3360]], [[TMP3361]]
// SIMD-ONLY0-NEXT:    [[CONV5046:%.*]] = zext i1 [[CMP5045]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5047:%.*]] = sext i32 [[CONV5046]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5047]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3362:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5048:%.*]] = icmp ne i64 [[TMP3362]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5048]], label [[IF_THEN5049:%.*]], label [[IF_END5050:%.*]]
// SIMD-ONLY0:       if.then5049:
// SIMD-ONLY0-NEXT:    [[TMP3363:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3363]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5050]]
// SIMD-ONLY0:       if.end5050:
// SIMD-ONLY0-NEXT:    [[TMP3364:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3365:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5051:%.*]] = icmp eq i64 [[TMP3364]], [[TMP3365]]
// SIMD-ONLY0-NEXT:    [[CONV5052:%.*]] = zext i1 [[CMP5051]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5053:%.*]] = sext i32 [[CONV5052]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5053]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3366:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5054:%.*]] = icmp ne i64 [[TMP3366]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5054]], label [[IF_THEN5055:%.*]], label [[IF_END5056:%.*]]
// SIMD-ONLY0:       if.then5055:
// SIMD-ONLY0-NEXT:    [[TMP3367:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3367]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5056]]
// SIMD-ONLY0:       if.end5056:
// SIMD-ONLY0-NEXT:    [[TMP3368:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3369:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5057:%.*]] = icmp eq i64 [[TMP3368]], [[TMP3369]]
// SIMD-ONLY0-NEXT:    [[CONV5058:%.*]] = zext i1 [[CMP5057]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5059:%.*]] = sext i32 [[CONV5058]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5059]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3370:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5060:%.*]] = icmp ne i64 [[TMP3370]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5060]], label [[IF_THEN5061:%.*]], label [[IF_ELSE5062:%.*]]
// SIMD-ONLY0:       if.then5061:
// SIMD-ONLY0-NEXT:    [[TMP3371:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3371]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5063:%.*]]
// SIMD-ONLY0:       if.else5062:
// SIMD-ONLY0-NEXT:    [[TMP3372:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3372]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5063]]
// SIMD-ONLY0:       if.end5063:
// SIMD-ONLY0-NEXT:    [[TMP3373:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3374:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5064:%.*]] = icmp eq i64 [[TMP3373]], [[TMP3374]]
// SIMD-ONLY0-NEXT:    [[CONV5065:%.*]] = zext i1 [[CMP5064]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5066:%.*]] = sext i32 [[CONV5065]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5066]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3375:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5067:%.*]] = icmp ne i64 [[TMP3375]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5067]], label [[IF_THEN5068:%.*]], label [[IF_ELSE5069:%.*]]
// SIMD-ONLY0:       if.then5068:
// SIMD-ONLY0-NEXT:    [[TMP3376:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3376]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5070:%.*]]
// SIMD-ONLY0:       if.else5069:
// SIMD-ONLY0-NEXT:    [[TMP3377:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3377]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5070]]
// SIMD-ONLY0:       if.end5070:
// SIMD-ONLY0-NEXT:    [[TMP3378:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3378]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3379:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3380:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5071:%.*]] = icmp ugt i64 [[TMP3379]], [[TMP3380]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5071]], label [[IF_THEN5073:%.*]], label [[IF_END5074:%.*]]
// SIMD-ONLY0:       if.then5073:
// SIMD-ONLY0-NEXT:    [[TMP3381:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3381]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5074]]
// SIMD-ONLY0:       if.end5074:
// SIMD-ONLY0-NEXT:    [[TMP3382:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3382]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3383:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3384:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5075:%.*]] = icmp ugt i64 [[TMP3383]], [[TMP3384]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5075]], label [[IF_THEN5077:%.*]], label [[IF_END5078:%.*]]
// SIMD-ONLY0:       if.then5077:
// SIMD-ONLY0-NEXT:    [[TMP3385:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3385]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5078]]
// SIMD-ONLY0:       if.end5078:
// SIMD-ONLY0-NEXT:    [[TMP3386:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3386]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3387:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3388:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5079:%.*]] = icmp ult i64 [[TMP3387]], [[TMP3388]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5079]], label [[IF_THEN5081:%.*]], label [[IF_END5082:%.*]]
// SIMD-ONLY0:       if.then5081:
// SIMD-ONLY0-NEXT:    [[TMP3389:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3389]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5082]]
// SIMD-ONLY0:       if.end5082:
// SIMD-ONLY0-NEXT:    [[TMP3390:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3390]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3391:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3392:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5083:%.*]] = icmp ult i64 [[TMP3391]], [[TMP3392]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5083]], label [[IF_THEN5085:%.*]], label [[IF_END5086:%.*]]
// SIMD-ONLY0:       if.then5085:
// SIMD-ONLY0-NEXT:    [[TMP3393:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3393]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5086]]
// SIMD-ONLY0:       if.end5086:
// SIMD-ONLY0-NEXT:    [[TMP3394:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3394]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3395:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3396:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5087:%.*]] = icmp eq i64 [[TMP3395]], [[TMP3396]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5087]], label [[IF_THEN5089:%.*]], label [[IF_END5090:%.*]]
// SIMD-ONLY0:       if.then5089:
// SIMD-ONLY0-NEXT:    [[TMP3397:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3397]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5090]]
// SIMD-ONLY0:       if.end5090:
// SIMD-ONLY0-NEXT:    [[TMP3398:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3398]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3399:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3400:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5091:%.*]] = icmp eq i64 [[TMP3399]], [[TMP3400]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5091]], label [[IF_THEN5093:%.*]], label [[IF_END5094:%.*]]
// SIMD-ONLY0:       if.then5093:
// SIMD-ONLY0-NEXT:    [[TMP3401:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3401]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5094]]
// SIMD-ONLY0:       if.end5094:
// SIMD-ONLY0-NEXT:    [[TMP3402:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3403:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5095:%.*]] = icmp ugt i64 [[TMP3402]], [[TMP3403]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5095]], label [[IF_THEN5097:%.*]], label [[IF_END5098:%.*]]
// SIMD-ONLY0:       if.then5097:
// SIMD-ONLY0-NEXT:    [[TMP3404:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3404]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5098]]
// SIMD-ONLY0:       if.end5098:
// SIMD-ONLY0-NEXT:    [[TMP3405:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3405]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3406:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3407:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5099:%.*]] = icmp ugt i64 [[TMP3406]], [[TMP3407]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5099]], label [[IF_THEN5101:%.*]], label [[IF_END5102:%.*]]
// SIMD-ONLY0:       if.then5101:
// SIMD-ONLY0-NEXT:    [[TMP3408:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3408]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5102]]
// SIMD-ONLY0:       if.end5102:
// SIMD-ONLY0-NEXT:    [[TMP3409:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3409]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3410:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3411:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5103:%.*]] = icmp ult i64 [[TMP3410]], [[TMP3411]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5103]], label [[IF_THEN5105:%.*]], label [[IF_END5106:%.*]]
// SIMD-ONLY0:       if.then5105:
// SIMD-ONLY0-NEXT:    [[TMP3412:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3412]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5106]]
// SIMD-ONLY0:       if.end5106:
// SIMD-ONLY0-NEXT:    [[TMP3413:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3413]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3414:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3415:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5107:%.*]] = icmp ult i64 [[TMP3414]], [[TMP3415]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5107]], label [[IF_THEN5109:%.*]], label [[IF_END5110:%.*]]
// SIMD-ONLY0:       if.then5109:
// SIMD-ONLY0-NEXT:    [[TMP3416:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3416]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5110]]
// SIMD-ONLY0:       if.end5110:
// SIMD-ONLY0-NEXT:    [[TMP3417:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3417]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3418:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3419:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5111:%.*]] = icmp eq i64 [[TMP3418]], [[TMP3419]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5111]], label [[IF_THEN5113:%.*]], label [[IF_END5114:%.*]]
// SIMD-ONLY0:       if.then5113:
// SIMD-ONLY0-NEXT:    [[TMP3420:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3420]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5114]]
// SIMD-ONLY0:       if.end5114:
// SIMD-ONLY0-NEXT:    [[TMP3421:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3421]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3422:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3423:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5115:%.*]] = icmp eq i64 [[TMP3422]], [[TMP3423]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5115]], label [[IF_THEN5117:%.*]], label [[IF_END5118:%.*]]
// SIMD-ONLY0:       if.then5117:
// SIMD-ONLY0-NEXT:    [[TMP3424:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3424]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5118]]
// SIMD-ONLY0:       if.end5118:
// SIMD-ONLY0-NEXT:    [[TMP3425:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3425]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3426:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3427:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5119:%.*]] = icmp eq i64 [[TMP3426]], [[TMP3427]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5119]], label [[IF_THEN5121:%.*]], label [[IF_ELSE5122:%.*]]
// SIMD-ONLY0:       if.then5121:
// SIMD-ONLY0-NEXT:    [[TMP3428:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3428]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5123:%.*]]
// SIMD-ONLY0:       if.else5122:
// SIMD-ONLY0-NEXT:    [[TMP3429:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3429]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5123]]
// SIMD-ONLY0:       if.end5123:
// SIMD-ONLY0-NEXT:    [[TMP3430:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3431:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5124:%.*]] = icmp eq i64 [[TMP3430]], [[TMP3431]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5124]], label [[IF_THEN5126:%.*]], label [[IF_ELSE5127:%.*]]
// SIMD-ONLY0:       if.then5126:
// SIMD-ONLY0-NEXT:    [[TMP3432:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3432]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5128:%.*]]
// SIMD-ONLY0:       if.else5127:
// SIMD-ONLY0-NEXT:    [[TMP3433:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3433]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5128]]
// SIMD-ONLY0:       if.end5128:
// SIMD-ONLY0-NEXT:    [[TMP3434:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3435:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5129:%.*]] = icmp eq i64 [[TMP3434]], [[TMP3435]]
// SIMD-ONLY0-NEXT:    [[CONV5130:%.*]] = zext i1 [[CMP5129]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5131:%.*]] = sext i32 [[CONV5130]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5131]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3436:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5132:%.*]] = icmp ne i64 [[TMP3436]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5132]], label [[IF_THEN5133:%.*]], label [[IF_END5134:%.*]]
// SIMD-ONLY0:       if.then5133:
// SIMD-ONLY0-NEXT:    [[TMP3437:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3437]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5134]]
// SIMD-ONLY0:       if.end5134:
// SIMD-ONLY0-NEXT:    [[TMP3438:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3439:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5135:%.*]] = icmp eq i64 [[TMP3438]], [[TMP3439]]
// SIMD-ONLY0-NEXT:    [[CONV5136:%.*]] = zext i1 [[CMP5135]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5137:%.*]] = sext i32 [[CONV5136]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5137]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3440:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5138:%.*]] = icmp ne i64 [[TMP3440]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5138]], label [[IF_THEN5139:%.*]], label [[IF_END5140:%.*]]
// SIMD-ONLY0:       if.then5139:
// SIMD-ONLY0-NEXT:    [[TMP3441:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3441]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5140]]
// SIMD-ONLY0:       if.end5140:
// SIMD-ONLY0-NEXT:    [[TMP3442:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3443:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5141:%.*]] = icmp eq i64 [[TMP3442]], [[TMP3443]]
// SIMD-ONLY0-NEXT:    [[CONV5142:%.*]] = zext i1 [[CMP5141]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5143:%.*]] = sext i32 [[CONV5142]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5143]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3444:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5144:%.*]] = icmp ne i64 [[TMP3444]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5144]], label [[IF_THEN5145:%.*]], label [[IF_ELSE5146:%.*]]
// SIMD-ONLY0:       if.then5145:
// SIMD-ONLY0-NEXT:    [[TMP3445:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3445]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5147:%.*]]
// SIMD-ONLY0:       if.else5146:
// SIMD-ONLY0-NEXT:    [[TMP3446:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3446]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5147]]
// SIMD-ONLY0:       if.end5147:
// SIMD-ONLY0-NEXT:    [[TMP3447:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3448:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5148:%.*]] = icmp eq i64 [[TMP3447]], [[TMP3448]]
// SIMD-ONLY0-NEXT:    [[CONV5149:%.*]] = zext i1 [[CMP5148]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5150:%.*]] = sext i32 [[CONV5149]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5150]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3449:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5151:%.*]] = icmp ne i64 [[TMP3449]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5151]], label [[IF_THEN5152:%.*]], label [[IF_ELSE5153:%.*]]
// SIMD-ONLY0:       if.then5152:
// SIMD-ONLY0-NEXT:    [[TMP3450:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3450]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5154:%.*]]
// SIMD-ONLY0:       if.else5153:
// SIMD-ONLY0-NEXT:    [[TMP3451:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3451]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5154]]
// SIMD-ONLY0:       if.end5154:
// SIMD-ONLY0-NEXT:    [[TMP3452:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3452]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3453:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3454:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5155:%.*]] = icmp ugt i64 [[TMP3453]], [[TMP3454]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5155]], label [[IF_THEN5157:%.*]], label [[IF_END5158:%.*]]
// SIMD-ONLY0:       if.then5157:
// SIMD-ONLY0-NEXT:    [[TMP3455:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3455]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5158]]
// SIMD-ONLY0:       if.end5158:
// SIMD-ONLY0-NEXT:    [[TMP3456:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3456]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3457:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3458:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5159:%.*]] = icmp ugt i64 [[TMP3457]], [[TMP3458]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5159]], label [[IF_THEN5161:%.*]], label [[IF_END5162:%.*]]
// SIMD-ONLY0:       if.then5161:
// SIMD-ONLY0-NEXT:    [[TMP3459:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3459]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5162]]
// SIMD-ONLY0:       if.end5162:
// SIMD-ONLY0-NEXT:    [[TMP3460:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3460]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3461:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3462:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5163:%.*]] = icmp ult i64 [[TMP3461]], [[TMP3462]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5163]], label [[IF_THEN5165:%.*]], label [[IF_END5166:%.*]]
// SIMD-ONLY0:       if.then5165:
// SIMD-ONLY0-NEXT:    [[TMP3463:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3463]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5166]]
// SIMD-ONLY0:       if.end5166:
// SIMD-ONLY0-NEXT:    [[TMP3464:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3464]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3465:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3466:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5167:%.*]] = icmp ult i64 [[TMP3465]], [[TMP3466]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5167]], label [[IF_THEN5169:%.*]], label [[IF_END5170:%.*]]
// SIMD-ONLY0:       if.then5169:
// SIMD-ONLY0-NEXT:    [[TMP3467:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3467]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5170]]
// SIMD-ONLY0:       if.end5170:
// SIMD-ONLY0-NEXT:    [[TMP3468:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3468]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3469:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3470:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5171:%.*]] = icmp eq i64 [[TMP3469]], [[TMP3470]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5171]], label [[IF_THEN5173:%.*]], label [[IF_END5174:%.*]]
// SIMD-ONLY0:       if.then5173:
// SIMD-ONLY0-NEXT:    [[TMP3471:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3471]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5174]]
// SIMD-ONLY0:       if.end5174:
// SIMD-ONLY0-NEXT:    [[TMP3472:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3472]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3473:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3474:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5175:%.*]] = icmp eq i64 [[TMP3473]], [[TMP3474]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5175]], label [[IF_THEN5177:%.*]], label [[IF_END5178:%.*]]
// SIMD-ONLY0:       if.then5177:
// SIMD-ONLY0-NEXT:    [[TMP3475:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3475]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5178]]
// SIMD-ONLY0:       if.end5178:
// SIMD-ONLY0-NEXT:    [[TMP3476:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3477:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5179:%.*]] = icmp ugt i64 [[TMP3476]], [[TMP3477]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5179]], label [[IF_THEN5181:%.*]], label [[IF_END5182:%.*]]
// SIMD-ONLY0:       if.then5181:
// SIMD-ONLY0-NEXT:    [[TMP3478:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3478]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5182]]
// SIMD-ONLY0:       if.end5182:
// SIMD-ONLY0-NEXT:    [[TMP3479:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3479]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3480:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3481:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5183:%.*]] = icmp ugt i64 [[TMP3480]], [[TMP3481]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5183]], label [[IF_THEN5185:%.*]], label [[IF_END5186:%.*]]
// SIMD-ONLY0:       if.then5185:
// SIMD-ONLY0-NEXT:    [[TMP3482:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3482]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5186]]
// SIMD-ONLY0:       if.end5186:
// SIMD-ONLY0-NEXT:    [[TMP3483:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3483]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3484:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3485:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5187:%.*]] = icmp ult i64 [[TMP3484]], [[TMP3485]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5187]], label [[IF_THEN5189:%.*]], label [[IF_END5190:%.*]]
// SIMD-ONLY0:       if.then5189:
// SIMD-ONLY0-NEXT:    [[TMP3486:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3486]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5190]]
// SIMD-ONLY0:       if.end5190:
// SIMD-ONLY0-NEXT:    [[TMP3487:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3487]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3488:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3489:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5191:%.*]] = icmp ult i64 [[TMP3488]], [[TMP3489]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5191]], label [[IF_THEN5193:%.*]], label [[IF_END5194:%.*]]
// SIMD-ONLY0:       if.then5193:
// SIMD-ONLY0-NEXT:    [[TMP3490:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3490]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5194]]
// SIMD-ONLY0:       if.end5194:
// SIMD-ONLY0-NEXT:    [[TMP3491:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3491]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3492:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3493:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5195:%.*]] = icmp eq i64 [[TMP3492]], [[TMP3493]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5195]], label [[IF_THEN5197:%.*]], label [[IF_END5198:%.*]]
// SIMD-ONLY0:       if.then5197:
// SIMD-ONLY0-NEXT:    [[TMP3494:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3494]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5198]]
// SIMD-ONLY0:       if.end5198:
// SIMD-ONLY0-NEXT:    [[TMP3495:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3495]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3496:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3497:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5199:%.*]] = icmp eq i64 [[TMP3496]], [[TMP3497]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5199]], label [[IF_THEN5201:%.*]], label [[IF_END5202:%.*]]
// SIMD-ONLY0:       if.then5201:
// SIMD-ONLY0-NEXT:    [[TMP3498:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3498]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5202]]
// SIMD-ONLY0:       if.end5202:
// SIMD-ONLY0-NEXT:    [[TMP3499:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3499]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3500:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3501:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5203:%.*]] = icmp eq i64 [[TMP3500]], [[TMP3501]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5203]], label [[IF_THEN5205:%.*]], label [[IF_ELSE5206:%.*]]
// SIMD-ONLY0:       if.then5205:
// SIMD-ONLY0-NEXT:    [[TMP3502:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3502]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5207:%.*]]
// SIMD-ONLY0:       if.else5206:
// SIMD-ONLY0-NEXT:    [[TMP3503:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3503]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5207]]
// SIMD-ONLY0:       if.end5207:
// SIMD-ONLY0-NEXT:    [[TMP3504:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3505:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5208:%.*]] = icmp eq i64 [[TMP3504]], [[TMP3505]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5208]], label [[IF_THEN5210:%.*]], label [[IF_ELSE5211:%.*]]
// SIMD-ONLY0:       if.then5210:
// SIMD-ONLY0-NEXT:    [[TMP3506:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3506]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5212:%.*]]
// SIMD-ONLY0:       if.else5211:
// SIMD-ONLY0-NEXT:    [[TMP3507:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3507]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5212]]
// SIMD-ONLY0:       if.end5212:
// SIMD-ONLY0-NEXT:    [[TMP3508:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3509:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5213:%.*]] = icmp eq i64 [[TMP3508]], [[TMP3509]]
// SIMD-ONLY0-NEXT:    [[CONV5214:%.*]] = zext i1 [[CMP5213]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5215:%.*]] = sext i32 [[CONV5214]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5215]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3510:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5216:%.*]] = icmp ne i64 [[TMP3510]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5216]], label [[IF_THEN5217:%.*]], label [[IF_END5218:%.*]]
// SIMD-ONLY0:       if.then5217:
// SIMD-ONLY0-NEXT:    [[TMP3511:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3511]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5218]]
// SIMD-ONLY0:       if.end5218:
// SIMD-ONLY0-NEXT:    [[TMP3512:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3513:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5219:%.*]] = icmp eq i64 [[TMP3512]], [[TMP3513]]
// SIMD-ONLY0-NEXT:    [[CONV5220:%.*]] = zext i1 [[CMP5219]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5221:%.*]] = sext i32 [[CONV5220]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5221]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3514:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5222:%.*]] = icmp ne i64 [[TMP3514]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5222]], label [[IF_THEN5223:%.*]], label [[IF_END5224:%.*]]
// SIMD-ONLY0:       if.then5223:
// SIMD-ONLY0-NEXT:    [[TMP3515:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3515]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5224]]
// SIMD-ONLY0:       if.end5224:
// SIMD-ONLY0-NEXT:    [[TMP3516:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3517:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5225:%.*]] = icmp eq i64 [[TMP3516]], [[TMP3517]]
// SIMD-ONLY0-NEXT:    [[CONV5226:%.*]] = zext i1 [[CMP5225]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5227:%.*]] = sext i32 [[CONV5226]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5227]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3518:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5228:%.*]] = icmp ne i64 [[TMP3518]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5228]], label [[IF_THEN5229:%.*]], label [[IF_ELSE5230:%.*]]
// SIMD-ONLY0:       if.then5229:
// SIMD-ONLY0-NEXT:    [[TMP3519:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3519]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5231:%.*]]
// SIMD-ONLY0:       if.else5230:
// SIMD-ONLY0-NEXT:    [[TMP3520:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3520]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5231]]
// SIMD-ONLY0:       if.end5231:
// SIMD-ONLY0-NEXT:    [[TMP3521:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3522:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5232:%.*]] = icmp eq i64 [[TMP3521]], [[TMP3522]]
// SIMD-ONLY0-NEXT:    [[CONV5233:%.*]] = zext i1 [[CMP5232]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5234:%.*]] = sext i32 [[CONV5233]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5234]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3523:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5235:%.*]] = icmp ne i64 [[TMP3523]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5235]], label [[IF_THEN5236:%.*]], label [[IF_ELSE5237:%.*]]
// SIMD-ONLY0:       if.then5236:
// SIMD-ONLY0-NEXT:    [[TMP3524:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3524]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5238:%.*]]
// SIMD-ONLY0:       if.else5237:
// SIMD-ONLY0-NEXT:    [[TMP3525:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3525]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5238]]
// SIMD-ONLY0:       if.end5238:
// SIMD-ONLY0-NEXT:    [[TMP3526:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3526]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3527:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3528:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5239:%.*]] = icmp ugt i64 [[TMP3527]], [[TMP3528]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5239]], label [[IF_THEN5241:%.*]], label [[IF_END5242:%.*]]
// SIMD-ONLY0:       if.then5241:
// SIMD-ONLY0-NEXT:    [[TMP3529:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3529]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5242]]
// SIMD-ONLY0:       if.end5242:
// SIMD-ONLY0-NEXT:    [[TMP3530:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3530]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3531:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3532:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5243:%.*]] = icmp ugt i64 [[TMP3531]], [[TMP3532]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5243]], label [[IF_THEN5245:%.*]], label [[IF_END5246:%.*]]
// SIMD-ONLY0:       if.then5245:
// SIMD-ONLY0-NEXT:    [[TMP3533:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3533]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5246]]
// SIMD-ONLY0:       if.end5246:
// SIMD-ONLY0-NEXT:    [[TMP3534:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3534]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3535:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3536:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5247:%.*]] = icmp ult i64 [[TMP3535]], [[TMP3536]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5247]], label [[IF_THEN5249:%.*]], label [[IF_END5250:%.*]]
// SIMD-ONLY0:       if.then5249:
// SIMD-ONLY0-NEXT:    [[TMP3537:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3537]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5250]]
// SIMD-ONLY0:       if.end5250:
// SIMD-ONLY0-NEXT:    [[TMP3538:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3538]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3539:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3540:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5251:%.*]] = icmp ult i64 [[TMP3539]], [[TMP3540]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5251]], label [[IF_THEN5253:%.*]], label [[IF_END5254:%.*]]
// SIMD-ONLY0:       if.then5253:
// SIMD-ONLY0-NEXT:    [[TMP3541:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3541]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5254]]
// SIMD-ONLY0:       if.end5254:
// SIMD-ONLY0-NEXT:    [[TMP3542:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3542]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3543:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3544:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5255:%.*]] = icmp eq i64 [[TMP3543]], [[TMP3544]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5255]], label [[IF_THEN5257:%.*]], label [[IF_END5258:%.*]]
// SIMD-ONLY0:       if.then5257:
// SIMD-ONLY0-NEXT:    [[TMP3545:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3545]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5258]]
// SIMD-ONLY0:       if.end5258:
// SIMD-ONLY0-NEXT:    [[TMP3546:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3546]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3547:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3548:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5259:%.*]] = icmp eq i64 [[TMP3547]], [[TMP3548]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5259]], label [[IF_THEN5261:%.*]], label [[IF_END5262:%.*]]
// SIMD-ONLY0:       if.then5261:
// SIMD-ONLY0-NEXT:    [[TMP3549:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3549]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5262]]
// SIMD-ONLY0:       if.end5262:
// SIMD-ONLY0-NEXT:    [[TMP3550:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3551:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5263:%.*]] = icmp ugt i64 [[TMP3550]], [[TMP3551]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5263]], label [[IF_THEN5265:%.*]], label [[IF_END5266:%.*]]
// SIMD-ONLY0:       if.then5265:
// SIMD-ONLY0-NEXT:    [[TMP3552:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3552]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5266]]
// SIMD-ONLY0:       if.end5266:
// SIMD-ONLY0-NEXT:    [[TMP3553:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3553]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3554:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3555:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5267:%.*]] = icmp ugt i64 [[TMP3554]], [[TMP3555]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5267]], label [[IF_THEN5269:%.*]], label [[IF_END5270:%.*]]
// SIMD-ONLY0:       if.then5269:
// SIMD-ONLY0-NEXT:    [[TMP3556:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3556]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5270]]
// SIMD-ONLY0:       if.end5270:
// SIMD-ONLY0-NEXT:    [[TMP3557:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3557]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3558:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3559:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5271:%.*]] = icmp ult i64 [[TMP3558]], [[TMP3559]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5271]], label [[IF_THEN5273:%.*]], label [[IF_END5274:%.*]]
// SIMD-ONLY0:       if.then5273:
// SIMD-ONLY0-NEXT:    [[TMP3560:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3560]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5274]]
// SIMD-ONLY0:       if.end5274:
// SIMD-ONLY0-NEXT:    [[TMP3561:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3561]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3562:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3563:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5275:%.*]] = icmp ult i64 [[TMP3562]], [[TMP3563]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5275]], label [[IF_THEN5277:%.*]], label [[IF_END5278:%.*]]
// SIMD-ONLY0:       if.then5277:
// SIMD-ONLY0-NEXT:    [[TMP3564:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3564]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5278]]
// SIMD-ONLY0:       if.end5278:
// SIMD-ONLY0-NEXT:    [[TMP3565:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3565]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3566:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3567:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5279:%.*]] = icmp eq i64 [[TMP3566]], [[TMP3567]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5279]], label [[IF_THEN5281:%.*]], label [[IF_END5282:%.*]]
// SIMD-ONLY0:       if.then5281:
// SIMD-ONLY0-NEXT:    [[TMP3568:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3568]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5282]]
// SIMD-ONLY0:       if.end5282:
// SIMD-ONLY0-NEXT:    [[TMP3569:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3569]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3570:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3571:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5283:%.*]] = icmp eq i64 [[TMP3570]], [[TMP3571]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5283]], label [[IF_THEN5285:%.*]], label [[IF_END5286:%.*]]
// SIMD-ONLY0:       if.then5285:
// SIMD-ONLY0-NEXT:    [[TMP3572:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3572]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5286]]
// SIMD-ONLY0:       if.end5286:
// SIMD-ONLY0-NEXT:    [[TMP3573:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3573]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3574:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3575:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5287:%.*]] = icmp eq i64 [[TMP3574]], [[TMP3575]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5287]], label [[IF_THEN5289:%.*]], label [[IF_ELSE5290:%.*]]
// SIMD-ONLY0:       if.then5289:
// SIMD-ONLY0-NEXT:    [[TMP3576:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3576]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5291:%.*]]
// SIMD-ONLY0:       if.else5290:
// SIMD-ONLY0-NEXT:    [[TMP3577:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3577]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5291]]
// SIMD-ONLY0:       if.end5291:
// SIMD-ONLY0-NEXT:    [[TMP3578:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3579:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5292:%.*]] = icmp eq i64 [[TMP3578]], [[TMP3579]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5292]], label [[IF_THEN5294:%.*]], label [[IF_ELSE5295:%.*]]
// SIMD-ONLY0:       if.then5294:
// SIMD-ONLY0-NEXT:    [[TMP3580:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3580]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5296:%.*]]
// SIMD-ONLY0:       if.else5295:
// SIMD-ONLY0-NEXT:    [[TMP3581:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3581]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5296]]
// SIMD-ONLY0:       if.end5296:
// SIMD-ONLY0-NEXT:    [[TMP3582:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3583:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5297:%.*]] = icmp eq i64 [[TMP3582]], [[TMP3583]]
// SIMD-ONLY0-NEXT:    [[CONV5298:%.*]] = zext i1 [[CMP5297]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5299:%.*]] = sext i32 [[CONV5298]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5299]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3584:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5300:%.*]] = icmp ne i64 [[TMP3584]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5300]], label [[IF_THEN5301:%.*]], label [[IF_END5302:%.*]]
// SIMD-ONLY0:       if.then5301:
// SIMD-ONLY0-NEXT:    [[TMP3585:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3585]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5302]]
// SIMD-ONLY0:       if.end5302:
// SIMD-ONLY0-NEXT:    [[TMP3586:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3587:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5303:%.*]] = icmp eq i64 [[TMP3586]], [[TMP3587]]
// SIMD-ONLY0-NEXT:    [[CONV5304:%.*]] = zext i1 [[CMP5303]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5305:%.*]] = sext i32 [[CONV5304]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5305]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3588:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5306:%.*]] = icmp ne i64 [[TMP3588]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5306]], label [[IF_THEN5307:%.*]], label [[IF_END5308:%.*]]
// SIMD-ONLY0:       if.then5307:
// SIMD-ONLY0-NEXT:    [[TMP3589:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3589]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5308]]
// SIMD-ONLY0:       if.end5308:
// SIMD-ONLY0-NEXT:    [[TMP3590:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3591:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5309:%.*]] = icmp eq i64 [[TMP3590]], [[TMP3591]]
// SIMD-ONLY0-NEXT:    [[CONV5310:%.*]] = zext i1 [[CMP5309]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5311:%.*]] = sext i32 [[CONV5310]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5311]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3592:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5312:%.*]] = icmp ne i64 [[TMP3592]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5312]], label [[IF_THEN5313:%.*]], label [[IF_ELSE5314:%.*]]
// SIMD-ONLY0:       if.then5313:
// SIMD-ONLY0-NEXT:    [[TMP3593:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3593]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5315:%.*]]
// SIMD-ONLY0:       if.else5314:
// SIMD-ONLY0-NEXT:    [[TMP3594:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3594]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5315]]
// SIMD-ONLY0:       if.end5315:
// SIMD-ONLY0-NEXT:    [[TMP3595:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3596:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5316:%.*]] = icmp eq i64 [[TMP3595]], [[TMP3596]]
// SIMD-ONLY0-NEXT:    [[CONV5317:%.*]] = zext i1 [[CMP5316]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5318:%.*]] = sext i32 [[CONV5317]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5318]], ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3597:%.*]] = load i64, ptr [[ULR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5319:%.*]] = icmp ne i64 [[TMP3597]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5319]], label [[IF_THEN5320:%.*]], label [[IF_ELSE5321:%.*]]
// SIMD-ONLY0:       if.then5320:
// SIMD-ONLY0-NEXT:    [[TMP3598:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3598]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5322:%.*]]
// SIMD-ONLY0:       if.else5321:
// SIMD-ONLY0-NEXT:    [[TMP3599:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3599]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5322]]
// SIMD-ONLY0:       if.end5322:
// SIMD-ONLY0-NEXT:    [[TMP3600:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3600]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3601:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3602:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5323:%.*]] = icmp sgt i64 [[TMP3601]], [[TMP3602]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5323]], label [[IF_THEN5325:%.*]], label [[IF_END5326:%.*]]
// SIMD-ONLY0:       if.then5325:
// SIMD-ONLY0-NEXT:    [[TMP3603:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3603]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5326]]
// SIMD-ONLY0:       if.end5326:
// SIMD-ONLY0-NEXT:    [[TMP3604:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3604]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3605:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3606:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5327:%.*]] = icmp sgt i64 [[TMP3605]], [[TMP3606]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5327]], label [[IF_THEN5329:%.*]], label [[IF_END5330:%.*]]
// SIMD-ONLY0:       if.then5329:
// SIMD-ONLY0-NEXT:    [[TMP3607:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3607]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5330]]
// SIMD-ONLY0:       if.end5330:
// SIMD-ONLY0-NEXT:    [[TMP3608:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3608]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3609:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3610:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5331:%.*]] = icmp slt i64 [[TMP3609]], [[TMP3610]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5331]], label [[IF_THEN5333:%.*]], label [[IF_END5334:%.*]]
// SIMD-ONLY0:       if.then5333:
// SIMD-ONLY0-NEXT:    [[TMP3611:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3611]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5334]]
// SIMD-ONLY0:       if.end5334:
// SIMD-ONLY0-NEXT:    [[TMP3612:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3612]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3613:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3614:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5335:%.*]] = icmp slt i64 [[TMP3613]], [[TMP3614]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5335]], label [[IF_THEN5337:%.*]], label [[IF_END5338:%.*]]
// SIMD-ONLY0:       if.then5337:
// SIMD-ONLY0-NEXT:    [[TMP3615:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3615]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5338]]
// SIMD-ONLY0:       if.end5338:
// SIMD-ONLY0-NEXT:    [[TMP3616:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3616]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3617:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3618:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5339:%.*]] = icmp eq i64 [[TMP3617]], [[TMP3618]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5339]], label [[IF_THEN5341:%.*]], label [[IF_END5342:%.*]]
// SIMD-ONLY0:       if.then5341:
// SIMD-ONLY0-NEXT:    [[TMP3619:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3619]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5342]]
// SIMD-ONLY0:       if.end5342:
// SIMD-ONLY0-NEXT:    [[TMP3620:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3620]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3621:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3622:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5343:%.*]] = icmp eq i64 [[TMP3621]], [[TMP3622]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5343]], label [[IF_THEN5345:%.*]], label [[IF_END5346:%.*]]
// SIMD-ONLY0:       if.then5345:
// SIMD-ONLY0-NEXT:    [[TMP3623:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3623]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5346]]
// SIMD-ONLY0:       if.end5346:
// SIMD-ONLY0-NEXT:    [[TMP3624:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3625:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5347:%.*]] = icmp sgt i64 [[TMP3624]], [[TMP3625]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5347]], label [[IF_THEN5349:%.*]], label [[IF_END5350:%.*]]
// SIMD-ONLY0:       if.then5349:
// SIMD-ONLY0-NEXT:    [[TMP3626:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3626]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5350]]
// SIMD-ONLY0:       if.end5350:
// SIMD-ONLY0-NEXT:    [[TMP3627:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3627]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3628:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3629:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5351:%.*]] = icmp sgt i64 [[TMP3628]], [[TMP3629]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5351]], label [[IF_THEN5353:%.*]], label [[IF_END5354:%.*]]
// SIMD-ONLY0:       if.then5353:
// SIMD-ONLY0-NEXT:    [[TMP3630:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3630]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5354]]
// SIMD-ONLY0:       if.end5354:
// SIMD-ONLY0-NEXT:    [[TMP3631:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3631]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3632:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3633:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5355:%.*]] = icmp slt i64 [[TMP3632]], [[TMP3633]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5355]], label [[IF_THEN5357:%.*]], label [[IF_END5358:%.*]]
// SIMD-ONLY0:       if.then5357:
// SIMD-ONLY0-NEXT:    [[TMP3634:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3634]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5358]]
// SIMD-ONLY0:       if.end5358:
// SIMD-ONLY0-NEXT:    [[TMP3635:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3635]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3636:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3637:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5359:%.*]] = icmp slt i64 [[TMP3636]], [[TMP3637]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5359]], label [[IF_THEN5361:%.*]], label [[IF_END5362:%.*]]
// SIMD-ONLY0:       if.then5361:
// SIMD-ONLY0-NEXT:    [[TMP3638:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3638]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5362]]
// SIMD-ONLY0:       if.end5362:
// SIMD-ONLY0-NEXT:    [[TMP3639:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3639]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3640:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3641:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5363:%.*]] = icmp eq i64 [[TMP3640]], [[TMP3641]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5363]], label [[IF_THEN5365:%.*]], label [[IF_END5366:%.*]]
// SIMD-ONLY0:       if.then5365:
// SIMD-ONLY0-NEXT:    [[TMP3642:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3642]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5366]]
// SIMD-ONLY0:       if.end5366:
// SIMD-ONLY0-NEXT:    [[TMP3643:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3643]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3644:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3645:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5367:%.*]] = icmp eq i64 [[TMP3644]], [[TMP3645]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5367]], label [[IF_THEN5369:%.*]], label [[IF_END5370:%.*]]
// SIMD-ONLY0:       if.then5369:
// SIMD-ONLY0-NEXT:    [[TMP3646:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3646]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5370]]
// SIMD-ONLY0:       if.end5370:
// SIMD-ONLY0-NEXT:    [[TMP3647:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3647]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3648:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3649:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5371:%.*]] = icmp eq i64 [[TMP3648]], [[TMP3649]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5371]], label [[IF_THEN5373:%.*]], label [[IF_ELSE5374:%.*]]
// SIMD-ONLY0:       if.then5373:
// SIMD-ONLY0-NEXT:    [[TMP3650:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3650]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5375:%.*]]
// SIMD-ONLY0:       if.else5374:
// SIMD-ONLY0-NEXT:    [[TMP3651:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3651]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5375]]
// SIMD-ONLY0:       if.end5375:
// SIMD-ONLY0-NEXT:    [[TMP3652:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3653:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5376:%.*]] = icmp eq i64 [[TMP3652]], [[TMP3653]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5376]], label [[IF_THEN5378:%.*]], label [[IF_ELSE5379:%.*]]
// SIMD-ONLY0:       if.then5378:
// SIMD-ONLY0-NEXT:    [[TMP3654:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3654]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5380:%.*]]
// SIMD-ONLY0:       if.else5379:
// SIMD-ONLY0-NEXT:    [[TMP3655:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3655]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5380]]
// SIMD-ONLY0:       if.end5380:
// SIMD-ONLY0-NEXT:    [[TMP3656:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3657:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5381:%.*]] = icmp eq i64 [[TMP3656]], [[TMP3657]]
// SIMD-ONLY0-NEXT:    [[CONV5382:%.*]] = zext i1 [[CMP5381]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5383:%.*]] = sext i32 [[CONV5382]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5383]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3658:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5384:%.*]] = icmp ne i64 [[TMP3658]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5384]], label [[IF_THEN5385:%.*]], label [[IF_END5386:%.*]]
// SIMD-ONLY0:       if.then5385:
// SIMD-ONLY0-NEXT:    [[TMP3659:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3659]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5386]]
// SIMD-ONLY0:       if.end5386:
// SIMD-ONLY0-NEXT:    [[TMP3660:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3661:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5387:%.*]] = icmp eq i64 [[TMP3660]], [[TMP3661]]
// SIMD-ONLY0-NEXT:    [[CONV5388:%.*]] = zext i1 [[CMP5387]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5389:%.*]] = sext i32 [[CONV5388]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5389]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3662:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5390:%.*]] = icmp ne i64 [[TMP3662]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5390]], label [[IF_THEN5391:%.*]], label [[IF_END5392:%.*]]
// SIMD-ONLY0:       if.then5391:
// SIMD-ONLY0-NEXT:    [[TMP3663:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3663]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5392]]
// SIMD-ONLY0:       if.end5392:
// SIMD-ONLY0-NEXT:    [[TMP3664:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3665:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5393:%.*]] = icmp eq i64 [[TMP3664]], [[TMP3665]]
// SIMD-ONLY0-NEXT:    [[CONV5394:%.*]] = zext i1 [[CMP5393]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5395:%.*]] = sext i32 [[CONV5394]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5395]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3666:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5396:%.*]] = icmp ne i64 [[TMP3666]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5396]], label [[IF_THEN5397:%.*]], label [[IF_ELSE5398:%.*]]
// SIMD-ONLY0:       if.then5397:
// SIMD-ONLY0-NEXT:    [[TMP3667:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3667]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5399:%.*]]
// SIMD-ONLY0:       if.else5398:
// SIMD-ONLY0-NEXT:    [[TMP3668:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3668]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5399]]
// SIMD-ONLY0:       if.end5399:
// SIMD-ONLY0-NEXT:    [[TMP3669:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3670:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5400:%.*]] = icmp eq i64 [[TMP3669]], [[TMP3670]]
// SIMD-ONLY0-NEXT:    [[CONV5401:%.*]] = zext i1 [[CMP5400]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5402:%.*]] = sext i32 [[CONV5401]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5402]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3671:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5403:%.*]] = icmp ne i64 [[TMP3671]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5403]], label [[IF_THEN5404:%.*]], label [[IF_ELSE5405:%.*]]
// SIMD-ONLY0:       if.then5404:
// SIMD-ONLY0-NEXT:    [[TMP3672:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3672]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5406:%.*]]
// SIMD-ONLY0:       if.else5405:
// SIMD-ONLY0-NEXT:    [[TMP3673:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3673]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5406]]
// SIMD-ONLY0:       if.end5406:
// SIMD-ONLY0-NEXT:    [[TMP3674:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3674]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3675:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3676:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5407:%.*]] = icmp sgt i64 [[TMP3675]], [[TMP3676]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5407]], label [[IF_THEN5409:%.*]], label [[IF_END5410:%.*]]
// SIMD-ONLY0:       if.then5409:
// SIMD-ONLY0-NEXT:    [[TMP3677:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3677]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5410]]
// SIMD-ONLY0:       if.end5410:
// SIMD-ONLY0-NEXT:    [[TMP3678:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3678]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3679:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3680:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5411:%.*]] = icmp sgt i64 [[TMP3679]], [[TMP3680]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5411]], label [[IF_THEN5413:%.*]], label [[IF_END5414:%.*]]
// SIMD-ONLY0:       if.then5413:
// SIMD-ONLY0-NEXT:    [[TMP3681:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3681]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5414]]
// SIMD-ONLY0:       if.end5414:
// SIMD-ONLY0-NEXT:    [[TMP3682:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3682]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3683:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3684:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5415:%.*]] = icmp slt i64 [[TMP3683]], [[TMP3684]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5415]], label [[IF_THEN5417:%.*]], label [[IF_END5418:%.*]]
// SIMD-ONLY0:       if.then5417:
// SIMD-ONLY0-NEXT:    [[TMP3685:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3685]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5418]]
// SIMD-ONLY0:       if.end5418:
// SIMD-ONLY0-NEXT:    [[TMP3686:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3686]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3687:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3688:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5419:%.*]] = icmp slt i64 [[TMP3687]], [[TMP3688]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5419]], label [[IF_THEN5421:%.*]], label [[IF_END5422:%.*]]
// SIMD-ONLY0:       if.then5421:
// SIMD-ONLY0-NEXT:    [[TMP3689:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3689]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5422]]
// SIMD-ONLY0:       if.end5422:
// SIMD-ONLY0-NEXT:    [[TMP3690:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3690]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3691:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3692:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5423:%.*]] = icmp eq i64 [[TMP3691]], [[TMP3692]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5423]], label [[IF_THEN5425:%.*]], label [[IF_END5426:%.*]]
// SIMD-ONLY0:       if.then5425:
// SIMD-ONLY0-NEXT:    [[TMP3693:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3693]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5426]]
// SIMD-ONLY0:       if.end5426:
// SIMD-ONLY0-NEXT:    [[TMP3694:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3694]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3695:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3696:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5427:%.*]] = icmp eq i64 [[TMP3695]], [[TMP3696]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5427]], label [[IF_THEN5429:%.*]], label [[IF_END5430:%.*]]
// SIMD-ONLY0:       if.then5429:
// SIMD-ONLY0-NEXT:    [[TMP3697:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3697]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5430]]
// SIMD-ONLY0:       if.end5430:
// SIMD-ONLY0-NEXT:    [[TMP3698:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3699:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5431:%.*]] = icmp sgt i64 [[TMP3698]], [[TMP3699]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5431]], label [[IF_THEN5433:%.*]], label [[IF_END5434:%.*]]
// SIMD-ONLY0:       if.then5433:
// SIMD-ONLY0-NEXT:    [[TMP3700:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3700]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5434]]
// SIMD-ONLY0:       if.end5434:
// SIMD-ONLY0-NEXT:    [[TMP3701:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3701]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3702:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3703:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5435:%.*]] = icmp sgt i64 [[TMP3702]], [[TMP3703]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5435]], label [[IF_THEN5437:%.*]], label [[IF_END5438:%.*]]
// SIMD-ONLY0:       if.then5437:
// SIMD-ONLY0-NEXT:    [[TMP3704:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3704]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5438]]
// SIMD-ONLY0:       if.end5438:
// SIMD-ONLY0-NEXT:    [[TMP3705:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3705]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3706:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3707:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5439:%.*]] = icmp slt i64 [[TMP3706]], [[TMP3707]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5439]], label [[IF_THEN5441:%.*]], label [[IF_END5442:%.*]]
// SIMD-ONLY0:       if.then5441:
// SIMD-ONLY0-NEXT:    [[TMP3708:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3708]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5442]]
// SIMD-ONLY0:       if.end5442:
// SIMD-ONLY0-NEXT:    [[TMP3709:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3709]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3710:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3711:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5443:%.*]] = icmp slt i64 [[TMP3710]], [[TMP3711]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5443]], label [[IF_THEN5445:%.*]], label [[IF_END5446:%.*]]
// SIMD-ONLY0:       if.then5445:
// SIMD-ONLY0-NEXT:    [[TMP3712:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3712]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5446]]
// SIMD-ONLY0:       if.end5446:
// SIMD-ONLY0-NEXT:    [[TMP3713:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3713]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3714:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3715:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5447:%.*]] = icmp eq i64 [[TMP3714]], [[TMP3715]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5447]], label [[IF_THEN5449:%.*]], label [[IF_END5450:%.*]]
// SIMD-ONLY0:       if.then5449:
// SIMD-ONLY0-NEXT:    [[TMP3716:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3716]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5450]]
// SIMD-ONLY0:       if.end5450:
// SIMD-ONLY0-NEXT:    [[TMP3717:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3717]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3718:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3719:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5451:%.*]] = icmp eq i64 [[TMP3718]], [[TMP3719]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5451]], label [[IF_THEN5453:%.*]], label [[IF_END5454:%.*]]
// SIMD-ONLY0:       if.then5453:
// SIMD-ONLY0-NEXT:    [[TMP3720:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3720]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5454]]
// SIMD-ONLY0:       if.end5454:
// SIMD-ONLY0-NEXT:    [[TMP3721:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3721]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3722:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3723:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5455:%.*]] = icmp eq i64 [[TMP3722]], [[TMP3723]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5455]], label [[IF_THEN5457:%.*]], label [[IF_ELSE5458:%.*]]
// SIMD-ONLY0:       if.then5457:
// SIMD-ONLY0-NEXT:    [[TMP3724:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3724]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5459:%.*]]
// SIMD-ONLY0:       if.else5458:
// SIMD-ONLY0-NEXT:    [[TMP3725:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3725]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5459]]
// SIMD-ONLY0:       if.end5459:
// SIMD-ONLY0-NEXT:    [[TMP3726:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3727:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5460:%.*]] = icmp eq i64 [[TMP3726]], [[TMP3727]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5460]], label [[IF_THEN5462:%.*]], label [[IF_ELSE5463:%.*]]
// SIMD-ONLY0:       if.then5462:
// SIMD-ONLY0-NEXT:    [[TMP3728:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3728]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5464:%.*]]
// SIMD-ONLY0:       if.else5463:
// SIMD-ONLY0-NEXT:    [[TMP3729:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3729]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5464]]
// SIMD-ONLY0:       if.end5464:
// SIMD-ONLY0-NEXT:    [[TMP3730:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3731:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5465:%.*]] = icmp eq i64 [[TMP3730]], [[TMP3731]]
// SIMD-ONLY0-NEXT:    [[CONV5466:%.*]] = zext i1 [[CMP5465]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5467:%.*]] = sext i32 [[CONV5466]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5467]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3732:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5468:%.*]] = icmp ne i64 [[TMP3732]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5468]], label [[IF_THEN5469:%.*]], label [[IF_END5470:%.*]]
// SIMD-ONLY0:       if.then5469:
// SIMD-ONLY0-NEXT:    [[TMP3733:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3733]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5470]]
// SIMD-ONLY0:       if.end5470:
// SIMD-ONLY0-NEXT:    [[TMP3734:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3735:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5471:%.*]] = icmp eq i64 [[TMP3734]], [[TMP3735]]
// SIMD-ONLY0-NEXT:    [[CONV5472:%.*]] = zext i1 [[CMP5471]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5473:%.*]] = sext i32 [[CONV5472]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5473]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3736:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5474:%.*]] = icmp ne i64 [[TMP3736]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5474]], label [[IF_THEN5475:%.*]], label [[IF_END5476:%.*]]
// SIMD-ONLY0:       if.then5475:
// SIMD-ONLY0-NEXT:    [[TMP3737:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3737]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5476]]
// SIMD-ONLY0:       if.end5476:
// SIMD-ONLY0-NEXT:    [[TMP3738:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3739:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5477:%.*]] = icmp eq i64 [[TMP3738]], [[TMP3739]]
// SIMD-ONLY0-NEXT:    [[CONV5478:%.*]] = zext i1 [[CMP5477]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5479:%.*]] = sext i32 [[CONV5478]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5479]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3740:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5480:%.*]] = icmp ne i64 [[TMP3740]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5480]], label [[IF_THEN5481:%.*]], label [[IF_ELSE5482:%.*]]
// SIMD-ONLY0:       if.then5481:
// SIMD-ONLY0-NEXT:    [[TMP3741:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3741]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5483:%.*]]
// SIMD-ONLY0:       if.else5482:
// SIMD-ONLY0-NEXT:    [[TMP3742:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3742]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5483]]
// SIMD-ONLY0:       if.end5483:
// SIMD-ONLY0-NEXT:    [[TMP3743:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3744:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5484:%.*]] = icmp eq i64 [[TMP3743]], [[TMP3744]]
// SIMD-ONLY0-NEXT:    [[CONV5485:%.*]] = zext i1 [[CMP5484]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5486:%.*]] = sext i32 [[CONV5485]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5486]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3745:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5487:%.*]] = icmp ne i64 [[TMP3745]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5487]], label [[IF_THEN5488:%.*]], label [[IF_ELSE5489:%.*]]
// SIMD-ONLY0:       if.then5488:
// SIMD-ONLY0-NEXT:    [[TMP3746:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3746]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5490:%.*]]
// SIMD-ONLY0:       if.else5489:
// SIMD-ONLY0-NEXT:    [[TMP3747:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3747]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5490]]
// SIMD-ONLY0:       if.end5490:
// SIMD-ONLY0-NEXT:    [[TMP3748:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3748]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3749:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3750:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5491:%.*]] = icmp sgt i64 [[TMP3749]], [[TMP3750]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5491]], label [[IF_THEN5493:%.*]], label [[IF_END5494:%.*]]
// SIMD-ONLY0:       if.then5493:
// SIMD-ONLY0-NEXT:    [[TMP3751:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3751]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5494]]
// SIMD-ONLY0:       if.end5494:
// SIMD-ONLY0-NEXT:    [[TMP3752:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3752]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3753:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3754:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5495:%.*]] = icmp sgt i64 [[TMP3753]], [[TMP3754]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5495]], label [[IF_THEN5497:%.*]], label [[IF_END5498:%.*]]
// SIMD-ONLY0:       if.then5497:
// SIMD-ONLY0-NEXT:    [[TMP3755:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3755]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5498]]
// SIMD-ONLY0:       if.end5498:
// SIMD-ONLY0-NEXT:    [[TMP3756:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3756]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3757:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3758:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5499:%.*]] = icmp slt i64 [[TMP3757]], [[TMP3758]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5499]], label [[IF_THEN5501:%.*]], label [[IF_END5502:%.*]]
// SIMD-ONLY0:       if.then5501:
// SIMD-ONLY0-NEXT:    [[TMP3759:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3759]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5502]]
// SIMD-ONLY0:       if.end5502:
// SIMD-ONLY0-NEXT:    [[TMP3760:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3760]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3761:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3762:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5503:%.*]] = icmp slt i64 [[TMP3761]], [[TMP3762]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5503]], label [[IF_THEN5505:%.*]], label [[IF_END5506:%.*]]
// SIMD-ONLY0:       if.then5505:
// SIMD-ONLY0-NEXT:    [[TMP3763:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3763]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5506]]
// SIMD-ONLY0:       if.end5506:
// SIMD-ONLY0-NEXT:    [[TMP3764:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3764]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3765:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3766:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5507:%.*]] = icmp eq i64 [[TMP3765]], [[TMP3766]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5507]], label [[IF_THEN5509:%.*]], label [[IF_END5510:%.*]]
// SIMD-ONLY0:       if.then5509:
// SIMD-ONLY0-NEXT:    [[TMP3767:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3767]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5510]]
// SIMD-ONLY0:       if.end5510:
// SIMD-ONLY0-NEXT:    [[TMP3768:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3768]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3769:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3770:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5511:%.*]] = icmp eq i64 [[TMP3769]], [[TMP3770]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5511]], label [[IF_THEN5513:%.*]], label [[IF_END5514:%.*]]
// SIMD-ONLY0:       if.then5513:
// SIMD-ONLY0-NEXT:    [[TMP3771:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3771]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5514]]
// SIMD-ONLY0:       if.end5514:
// SIMD-ONLY0-NEXT:    [[TMP3772:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3773:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5515:%.*]] = icmp sgt i64 [[TMP3772]], [[TMP3773]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5515]], label [[IF_THEN5517:%.*]], label [[IF_END5518:%.*]]
// SIMD-ONLY0:       if.then5517:
// SIMD-ONLY0-NEXT:    [[TMP3774:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3774]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5518]]
// SIMD-ONLY0:       if.end5518:
// SIMD-ONLY0-NEXT:    [[TMP3775:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3775]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3776:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3777:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5519:%.*]] = icmp sgt i64 [[TMP3776]], [[TMP3777]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5519]], label [[IF_THEN5521:%.*]], label [[IF_END5522:%.*]]
// SIMD-ONLY0:       if.then5521:
// SIMD-ONLY0-NEXT:    [[TMP3778:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3778]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5522]]
// SIMD-ONLY0:       if.end5522:
// SIMD-ONLY0-NEXT:    [[TMP3779:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3779]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3780:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3781:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5523:%.*]] = icmp slt i64 [[TMP3780]], [[TMP3781]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5523]], label [[IF_THEN5525:%.*]], label [[IF_END5526:%.*]]
// SIMD-ONLY0:       if.then5525:
// SIMD-ONLY0-NEXT:    [[TMP3782:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3782]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5526]]
// SIMD-ONLY0:       if.end5526:
// SIMD-ONLY0-NEXT:    [[TMP3783:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3783]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3784:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3785:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5527:%.*]] = icmp slt i64 [[TMP3784]], [[TMP3785]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5527]], label [[IF_THEN5529:%.*]], label [[IF_END5530:%.*]]
// SIMD-ONLY0:       if.then5529:
// SIMD-ONLY0-NEXT:    [[TMP3786:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3786]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5530]]
// SIMD-ONLY0:       if.end5530:
// SIMD-ONLY0-NEXT:    [[TMP3787:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3787]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3788:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3789:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5531:%.*]] = icmp eq i64 [[TMP3788]], [[TMP3789]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5531]], label [[IF_THEN5533:%.*]], label [[IF_END5534:%.*]]
// SIMD-ONLY0:       if.then5533:
// SIMD-ONLY0-NEXT:    [[TMP3790:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3790]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5534]]
// SIMD-ONLY0:       if.end5534:
// SIMD-ONLY0-NEXT:    [[TMP3791:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3791]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3792:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3793:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5535:%.*]] = icmp eq i64 [[TMP3792]], [[TMP3793]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5535]], label [[IF_THEN5537:%.*]], label [[IF_END5538:%.*]]
// SIMD-ONLY0:       if.then5537:
// SIMD-ONLY0-NEXT:    [[TMP3794:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3794]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5538]]
// SIMD-ONLY0:       if.end5538:
// SIMD-ONLY0-NEXT:    [[TMP3795:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3795]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3796:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3797:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5539:%.*]] = icmp eq i64 [[TMP3796]], [[TMP3797]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5539]], label [[IF_THEN5541:%.*]], label [[IF_ELSE5542:%.*]]
// SIMD-ONLY0:       if.then5541:
// SIMD-ONLY0-NEXT:    [[TMP3798:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3798]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5543:%.*]]
// SIMD-ONLY0:       if.else5542:
// SIMD-ONLY0-NEXT:    [[TMP3799:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3799]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5543]]
// SIMD-ONLY0:       if.end5543:
// SIMD-ONLY0-NEXT:    [[TMP3800:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3801:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5544:%.*]] = icmp eq i64 [[TMP3800]], [[TMP3801]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5544]], label [[IF_THEN5546:%.*]], label [[IF_ELSE5547:%.*]]
// SIMD-ONLY0:       if.then5546:
// SIMD-ONLY0-NEXT:    [[TMP3802:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3802]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5548:%.*]]
// SIMD-ONLY0:       if.else5547:
// SIMD-ONLY0-NEXT:    [[TMP3803:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3803]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5548]]
// SIMD-ONLY0:       if.end5548:
// SIMD-ONLY0-NEXT:    [[TMP3804:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3805:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5549:%.*]] = icmp eq i64 [[TMP3804]], [[TMP3805]]
// SIMD-ONLY0-NEXT:    [[CONV5550:%.*]] = zext i1 [[CMP5549]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5551:%.*]] = sext i32 [[CONV5550]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5551]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3806:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5552:%.*]] = icmp ne i64 [[TMP3806]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5552]], label [[IF_THEN5553:%.*]], label [[IF_END5554:%.*]]
// SIMD-ONLY0:       if.then5553:
// SIMD-ONLY0-NEXT:    [[TMP3807:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3807]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5554]]
// SIMD-ONLY0:       if.end5554:
// SIMD-ONLY0-NEXT:    [[TMP3808:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3809:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5555:%.*]] = icmp eq i64 [[TMP3808]], [[TMP3809]]
// SIMD-ONLY0-NEXT:    [[CONV5556:%.*]] = zext i1 [[CMP5555]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5557:%.*]] = sext i32 [[CONV5556]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5557]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3810:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5558:%.*]] = icmp ne i64 [[TMP3810]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5558]], label [[IF_THEN5559:%.*]], label [[IF_END5560:%.*]]
// SIMD-ONLY0:       if.then5559:
// SIMD-ONLY0-NEXT:    [[TMP3811:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3811]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5560]]
// SIMD-ONLY0:       if.end5560:
// SIMD-ONLY0-NEXT:    [[TMP3812:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3813:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5561:%.*]] = icmp eq i64 [[TMP3812]], [[TMP3813]]
// SIMD-ONLY0-NEXT:    [[CONV5562:%.*]] = zext i1 [[CMP5561]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5563:%.*]] = sext i32 [[CONV5562]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5563]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3814:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5564:%.*]] = icmp ne i64 [[TMP3814]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5564]], label [[IF_THEN5565:%.*]], label [[IF_ELSE5566:%.*]]
// SIMD-ONLY0:       if.then5565:
// SIMD-ONLY0-NEXT:    [[TMP3815:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3815]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5567:%.*]]
// SIMD-ONLY0:       if.else5566:
// SIMD-ONLY0-NEXT:    [[TMP3816:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3816]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5567]]
// SIMD-ONLY0:       if.end5567:
// SIMD-ONLY0-NEXT:    [[TMP3817:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3818:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5568:%.*]] = icmp eq i64 [[TMP3817]], [[TMP3818]]
// SIMD-ONLY0-NEXT:    [[CONV5569:%.*]] = zext i1 [[CMP5568]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5570:%.*]] = sext i32 [[CONV5569]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5570]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3819:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5571:%.*]] = icmp ne i64 [[TMP3819]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5571]], label [[IF_THEN5572:%.*]], label [[IF_ELSE5573:%.*]]
// SIMD-ONLY0:       if.then5572:
// SIMD-ONLY0-NEXT:    [[TMP3820:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3820]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5574:%.*]]
// SIMD-ONLY0:       if.else5573:
// SIMD-ONLY0-NEXT:    [[TMP3821:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3821]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5574]]
// SIMD-ONLY0:       if.end5574:
// SIMD-ONLY0-NEXT:    [[TMP3822:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3822]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3823:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3824:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5575:%.*]] = icmp sgt i64 [[TMP3823]], [[TMP3824]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5575]], label [[IF_THEN5577:%.*]], label [[IF_END5578:%.*]]
// SIMD-ONLY0:       if.then5577:
// SIMD-ONLY0-NEXT:    [[TMP3825:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3825]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5578]]
// SIMD-ONLY0:       if.end5578:
// SIMD-ONLY0-NEXT:    [[TMP3826:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3826]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3827:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3828:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5579:%.*]] = icmp sgt i64 [[TMP3827]], [[TMP3828]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5579]], label [[IF_THEN5581:%.*]], label [[IF_END5582:%.*]]
// SIMD-ONLY0:       if.then5581:
// SIMD-ONLY0-NEXT:    [[TMP3829:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3829]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5582]]
// SIMD-ONLY0:       if.end5582:
// SIMD-ONLY0-NEXT:    [[TMP3830:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3830]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3831:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3832:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5583:%.*]] = icmp slt i64 [[TMP3831]], [[TMP3832]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5583]], label [[IF_THEN5585:%.*]], label [[IF_END5586:%.*]]
// SIMD-ONLY0:       if.then5585:
// SIMD-ONLY0-NEXT:    [[TMP3833:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3833]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5586]]
// SIMD-ONLY0:       if.end5586:
// SIMD-ONLY0-NEXT:    [[TMP3834:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3834]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3835:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3836:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5587:%.*]] = icmp slt i64 [[TMP3835]], [[TMP3836]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5587]], label [[IF_THEN5589:%.*]], label [[IF_END5590:%.*]]
// SIMD-ONLY0:       if.then5589:
// SIMD-ONLY0-NEXT:    [[TMP3837:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3837]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5590]]
// SIMD-ONLY0:       if.end5590:
// SIMD-ONLY0-NEXT:    [[TMP3838:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3838]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3839:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3840:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5591:%.*]] = icmp eq i64 [[TMP3839]], [[TMP3840]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5591]], label [[IF_THEN5593:%.*]], label [[IF_END5594:%.*]]
// SIMD-ONLY0:       if.then5593:
// SIMD-ONLY0-NEXT:    [[TMP3841:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3841]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5594]]
// SIMD-ONLY0:       if.end5594:
// SIMD-ONLY0-NEXT:    [[TMP3842:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3842]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3843:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3844:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5595:%.*]] = icmp eq i64 [[TMP3843]], [[TMP3844]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5595]], label [[IF_THEN5597:%.*]], label [[IF_END5598:%.*]]
// SIMD-ONLY0:       if.then5597:
// SIMD-ONLY0-NEXT:    [[TMP3845:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3845]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5598]]
// SIMD-ONLY0:       if.end5598:
// SIMD-ONLY0-NEXT:    [[TMP3846:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3847:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5599:%.*]] = icmp sgt i64 [[TMP3846]], [[TMP3847]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5599]], label [[IF_THEN5601:%.*]], label [[IF_END5602:%.*]]
// SIMD-ONLY0:       if.then5601:
// SIMD-ONLY0-NEXT:    [[TMP3848:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3848]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5602]]
// SIMD-ONLY0:       if.end5602:
// SIMD-ONLY0-NEXT:    [[TMP3849:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3849]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3850:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3851:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5603:%.*]] = icmp sgt i64 [[TMP3850]], [[TMP3851]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5603]], label [[IF_THEN5605:%.*]], label [[IF_END5606:%.*]]
// SIMD-ONLY0:       if.then5605:
// SIMD-ONLY0-NEXT:    [[TMP3852:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3852]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5606]]
// SIMD-ONLY0:       if.end5606:
// SIMD-ONLY0-NEXT:    [[TMP3853:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3853]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3854:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3855:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5607:%.*]] = icmp slt i64 [[TMP3854]], [[TMP3855]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5607]], label [[IF_THEN5609:%.*]], label [[IF_END5610:%.*]]
// SIMD-ONLY0:       if.then5609:
// SIMD-ONLY0-NEXT:    [[TMP3856:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3856]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5610]]
// SIMD-ONLY0:       if.end5610:
// SIMD-ONLY0-NEXT:    [[TMP3857:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3857]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3858:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3859:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5611:%.*]] = icmp slt i64 [[TMP3858]], [[TMP3859]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5611]], label [[IF_THEN5613:%.*]], label [[IF_END5614:%.*]]
// SIMD-ONLY0:       if.then5613:
// SIMD-ONLY0-NEXT:    [[TMP3860:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3860]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5614]]
// SIMD-ONLY0:       if.end5614:
// SIMD-ONLY0-NEXT:    [[TMP3861:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3861]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3862:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3863:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5615:%.*]] = icmp eq i64 [[TMP3862]], [[TMP3863]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5615]], label [[IF_THEN5617:%.*]], label [[IF_END5618:%.*]]
// SIMD-ONLY0:       if.then5617:
// SIMD-ONLY0-NEXT:    [[TMP3864:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3864]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5618]]
// SIMD-ONLY0:       if.end5618:
// SIMD-ONLY0-NEXT:    [[TMP3865:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3865]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3866:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3867:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5619:%.*]] = icmp eq i64 [[TMP3866]], [[TMP3867]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5619]], label [[IF_THEN5621:%.*]], label [[IF_END5622:%.*]]
// SIMD-ONLY0:       if.then5621:
// SIMD-ONLY0-NEXT:    [[TMP3868:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3868]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5622]]
// SIMD-ONLY0:       if.end5622:
// SIMD-ONLY0-NEXT:    [[TMP3869:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3869]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3870:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3871:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5623:%.*]] = icmp eq i64 [[TMP3870]], [[TMP3871]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5623]], label [[IF_THEN5625:%.*]], label [[IF_ELSE5626:%.*]]
// SIMD-ONLY0:       if.then5625:
// SIMD-ONLY0-NEXT:    [[TMP3872:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3872]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5627:%.*]]
// SIMD-ONLY0:       if.else5626:
// SIMD-ONLY0-NEXT:    [[TMP3873:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3873]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5627]]
// SIMD-ONLY0:       if.end5627:
// SIMD-ONLY0-NEXT:    [[TMP3874:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3875:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5628:%.*]] = icmp eq i64 [[TMP3874]], [[TMP3875]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5628]], label [[IF_THEN5630:%.*]], label [[IF_ELSE5631:%.*]]
// SIMD-ONLY0:       if.then5630:
// SIMD-ONLY0-NEXT:    [[TMP3876:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3876]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5632:%.*]]
// SIMD-ONLY0:       if.else5631:
// SIMD-ONLY0-NEXT:    [[TMP3877:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3877]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5632]]
// SIMD-ONLY0:       if.end5632:
// SIMD-ONLY0-NEXT:    [[TMP3878:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3879:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5633:%.*]] = icmp eq i64 [[TMP3878]], [[TMP3879]]
// SIMD-ONLY0-NEXT:    [[CONV5634:%.*]] = zext i1 [[CMP5633]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5635:%.*]] = sext i32 [[CONV5634]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5635]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3880:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5636:%.*]] = icmp ne i64 [[TMP3880]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5636]], label [[IF_THEN5637:%.*]], label [[IF_END5638:%.*]]
// SIMD-ONLY0:       if.then5637:
// SIMD-ONLY0-NEXT:    [[TMP3881:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3881]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5638]]
// SIMD-ONLY0:       if.end5638:
// SIMD-ONLY0-NEXT:    [[TMP3882:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3883:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5639:%.*]] = icmp eq i64 [[TMP3882]], [[TMP3883]]
// SIMD-ONLY0-NEXT:    [[CONV5640:%.*]] = zext i1 [[CMP5639]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5641:%.*]] = sext i32 [[CONV5640]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5641]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3884:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5642:%.*]] = icmp ne i64 [[TMP3884]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5642]], label [[IF_THEN5643:%.*]], label [[IF_END5644:%.*]]
// SIMD-ONLY0:       if.then5643:
// SIMD-ONLY0-NEXT:    [[TMP3885:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3885]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5644]]
// SIMD-ONLY0:       if.end5644:
// SIMD-ONLY0-NEXT:    [[TMP3886:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3887:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5645:%.*]] = icmp eq i64 [[TMP3886]], [[TMP3887]]
// SIMD-ONLY0-NEXT:    [[CONV5646:%.*]] = zext i1 [[CMP5645]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5647:%.*]] = sext i32 [[CONV5646]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5647]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3888:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5648:%.*]] = icmp ne i64 [[TMP3888]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5648]], label [[IF_THEN5649:%.*]], label [[IF_ELSE5650:%.*]]
// SIMD-ONLY0:       if.then5649:
// SIMD-ONLY0-NEXT:    [[TMP3889:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3889]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5651:%.*]]
// SIMD-ONLY0:       if.else5650:
// SIMD-ONLY0-NEXT:    [[TMP3890:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3890]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5651]]
// SIMD-ONLY0:       if.end5651:
// SIMD-ONLY0-NEXT:    [[TMP3891:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3892:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5652:%.*]] = icmp eq i64 [[TMP3891]], [[TMP3892]]
// SIMD-ONLY0-NEXT:    [[CONV5653:%.*]] = zext i1 [[CMP5652]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5654:%.*]] = sext i32 [[CONV5653]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5654]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3893:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5655:%.*]] = icmp ne i64 [[TMP3893]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5655]], label [[IF_THEN5656:%.*]], label [[IF_ELSE5657:%.*]]
// SIMD-ONLY0:       if.then5656:
// SIMD-ONLY0-NEXT:    [[TMP3894:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3894]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5658:%.*]]
// SIMD-ONLY0:       if.else5657:
// SIMD-ONLY0-NEXT:    [[TMP3895:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3895]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5658]]
// SIMD-ONLY0:       if.end5658:
// SIMD-ONLY0-NEXT:    [[TMP3896:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3896]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3897:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3898:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5659:%.*]] = icmp sgt i64 [[TMP3897]], [[TMP3898]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5659]], label [[IF_THEN5661:%.*]], label [[IF_END5662:%.*]]
// SIMD-ONLY0:       if.then5661:
// SIMD-ONLY0-NEXT:    [[TMP3899:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3899]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5662]]
// SIMD-ONLY0:       if.end5662:
// SIMD-ONLY0-NEXT:    [[TMP3900:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3900]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3901:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3902:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5663:%.*]] = icmp sgt i64 [[TMP3901]], [[TMP3902]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5663]], label [[IF_THEN5665:%.*]], label [[IF_END5666:%.*]]
// SIMD-ONLY0:       if.then5665:
// SIMD-ONLY0-NEXT:    [[TMP3903:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3903]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5666]]
// SIMD-ONLY0:       if.end5666:
// SIMD-ONLY0-NEXT:    [[TMP3904:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3904]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3905:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3906:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5667:%.*]] = icmp slt i64 [[TMP3905]], [[TMP3906]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5667]], label [[IF_THEN5669:%.*]], label [[IF_END5670:%.*]]
// SIMD-ONLY0:       if.then5669:
// SIMD-ONLY0-NEXT:    [[TMP3907:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3907]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5670]]
// SIMD-ONLY0:       if.end5670:
// SIMD-ONLY0-NEXT:    [[TMP3908:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3908]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3909:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3910:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5671:%.*]] = icmp slt i64 [[TMP3909]], [[TMP3910]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5671]], label [[IF_THEN5673:%.*]], label [[IF_END5674:%.*]]
// SIMD-ONLY0:       if.then5673:
// SIMD-ONLY0-NEXT:    [[TMP3911:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3911]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5674]]
// SIMD-ONLY0:       if.end5674:
// SIMD-ONLY0-NEXT:    [[TMP3912:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3912]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3913:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3914:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5675:%.*]] = icmp eq i64 [[TMP3913]], [[TMP3914]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5675]], label [[IF_THEN5677:%.*]], label [[IF_END5678:%.*]]
// SIMD-ONLY0:       if.then5677:
// SIMD-ONLY0-NEXT:    [[TMP3915:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3915]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5678]]
// SIMD-ONLY0:       if.end5678:
// SIMD-ONLY0-NEXT:    [[TMP3916:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3916]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3917:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3918:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5679:%.*]] = icmp eq i64 [[TMP3917]], [[TMP3918]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5679]], label [[IF_THEN5681:%.*]], label [[IF_END5682:%.*]]
// SIMD-ONLY0:       if.then5681:
// SIMD-ONLY0-NEXT:    [[TMP3919:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3919]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5682]]
// SIMD-ONLY0:       if.end5682:
// SIMD-ONLY0-NEXT:    [[TMP3920:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3921:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5683:%.*]] = icmp sgt i64 [[TMP3920]], [[TMP3921]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5683]], label [[IF_THEN5685:%.*]], label [[IF_END5686:%.*]]
// SIMD-ONLY0:       if.then5685:
// SIMD-ONLY0-NEXT:    [[TMP3922:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3922]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5686]]
// SIMD-ONLY0:       if.end5686:
// SIMD-ONLY0-NEXT:    [[TMP3923:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3923]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3924:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3925:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5687:%.*]] = icmp sgt i64 [[TMP3924]], [[TMP3925]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5687]], label [[IF_THEN5689:%.*]], label [[IF_END5690:%.*]]
// SIMD-ONLY0:       if.then5689:
// SIMD-ONLY0-NEXT:    [[TMP3926:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3926]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5690]]
// SIMD-ONLY0:       if.end5690:
// SIMD-ONLY0-NEXT:    [[TMP3927:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3927]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3928:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3929:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5691:%.*]] = icmp slt i64 [[TMP3928]], [[TMP3929]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5691]], label [[IF_THEN5693:%.*]], label [[IF_END5694:%.*]]
// SIMD-ONLY0:       if.then5693:
// SIMD-ONLY0-NEXT:    [[TMP3930:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3930]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5694]]
// SIMD-ONLY0:       if.end5694:
// SIMD-ONLY0-NEXT:    [[TMP3931:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3931]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3932:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3933:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5695:%.*]] = icmp slt i64 [[TMP3932]], [[TMP3933]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5695]], label [[IF_THEN5697:%.*]], label [[IF_END5698:%.*]]
// SIMD-ONLY0:       if.then5697:
// SIMD-ONLY0-NEXT:    [[TMP3934:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3934]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5698]]
// SIMD-ONLY0:       if.end5698:
// SIMD-ONLY0-NEXT:    [[TMP3935:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3935]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3936:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3937:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5699:%.*]] = icmp eq i64 [[TMP3936]], [[TMP3937]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5699]], label [[IF_THEN5701:%.*]], label [[IF_END5702:%.*]]
// SIMD-ONLY0:       if.then5701:
// SIMD-ONLY0-NEXT:    [[TMP3938:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3938]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5702]]
// SIMD-ONLY0:       if.end5702:
// SIMD-ONLY0-NEXT:    [[TMP3939:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3939]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3940:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3941:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5703:%.*]] = icmp eq i64 [[TMP3940]], [[TMP3941]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5703]], label [[IF_THEN5705:%.*]], label [[IF_END5706:%.*]]
// SIMD-ONLY0:       if.then5705:
// SIMD-ONLY0-NEXT:    [[TMP3942:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3942]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5706]]
// SIMD-ONLY0:       if.end5706:
// SIMD-ONLY0-NEXT:    [[TMP3943:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3943]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3944:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3945:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5707:%.*]] = icmp eq i64 [[TMP3944]], [[TMP3945]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5707]], label [[IF_THEN5709:%.*]], label [[IF_ELSE5710:%.*]]
// SIMD-ONLY0:       if.then5709:
// SIMD-ONLY0-NEXT:    [[TMP3946:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3946]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5711:%.*]]
// SIMD-ONLY0:       if.else5710:
// SIMD-ONLY0-NEXT:    [[TMP3947:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3947]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5711]]
// SIMD-ONLY0:       if.end5711:
// SIMD-ONLY0-NEXT:    [[TMP3948:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3949:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5712:%.*]] = icmp eq i64 [[TMP3948]], [[TMP3949]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5712]], label [[IF_THEN5714:%.*]], label [[IF_ELSE5715:%.*]]
// SIMD-ONLY0:       if.then5714:
// SIMD-ONLY0-NEXT:    [[TMP3950:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3950]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5716:%.*]]
// SIMD-ONLY0:       if.else5715:
// SIMD-ONLY0-NEXT:    [[TMP3951:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3951]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5716]]
// SIMD-ONLY0:       if.end5716:
// SIMD-ONLY0-NEXT:    [[TMP3952:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3953:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5717:%.*]] = icmp eq i64 [[TMP3952]], [[TMP3953]]
// SIMD-ONLY0-NEXT:    [[CONV5718:%.*]] = zext i1 [[CMP5717]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5719:%.*]] = sext i32 [[CONV5718]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5719]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3954:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5720:%.*]] = icmp ne i64 [[TMP3954]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5720]], label [[IF_THEN5721:%.*]], label [[IF_END5722:%.*]]
// SIMD-ONLY0:       if.then5721:
// SIMD-ONLY0-NEXT:    [[TMP3955:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3955]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5722]]
// SIMD-ONLY0:       if.end5722:
// SIMD-ONLY0-NEXT:    [[TMP3956:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3957:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5723:%.*]] = icmp eq i64 [[TMP3956]], [[TMP3957]]
// SIMD-ONLY0-NEXT:    [[CONV5724:%.*]] = zext i1 [[CMP5723]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5725:%.*]] = sext i32 [[CONV5724]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5725]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3958:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5726:%.*]] = icmp ne i64 [[TMP3958]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5726]], label [[IF_THEN5727:%.*]], label [[IF_END5728:%.*]]
// SIMD-ONLY0:       if.then5727:
// SIMD-ONLY0-NEXT:    [[TMP3959:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3959]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5728]]
// SIMD-ONLY0:       if.end5728:
// SIMD-ONLY0-NEXT:    [[TMP3960:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3961:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5729:%.*]] = icmp eq i64 [[TMP3960]], [[TMP3961]]
// SIMD-ONLY0-NEXT:    [[CONV5730:%.*]] = zext i1 [[CMP5729]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5731:%.*]] = sext i32 [[CONV5730]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5731]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3962:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5732:%.*]] = icmp ne i64 [[TMP3962]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5732]], label [[IF_THEN5733:%.*]], label [[IF_ELSE5734:%.*]]
// SIMD-ONLY0:       if.then5733:
// SIMD-ONLY0-NEXT:    [[TMP3963:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3963]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5735:%.*]]
// SIMD-ONLY0:       if.else5734:
// SIMD-ONLY0-NEXT:    [[TMP3964:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3964]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5735]]
// SIMD-ONLY0:       if.end5735:
// SIMD-ONLY0-NEXT:    [[TMP3965:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3966:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5736:%.*]] = icmp eq i64 [[TMP3965]], [[TMP3966]]
// SIMD-ONLY0-NEXT:    [[CONV5737:%.*]] = zext i1 [[CMP5736]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5738:%.*]] = sext i32 [[CONV5737]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5738]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3967:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5739:%.*]] = icmp ne i64 [[TMP3967]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5739]], label [[IF_THEN5740:%.*]], label [[IF_ELSE5741:%.*]]
// SIMD-ONLY0:       if.then5740:
// SIMD-ONLY0-NEXT:    [[TMP3968:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3968]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5742:%.*]]
// SIMD-ONLY0:       if.else5741:
// SIMD-ONLY0-NEXT:    [[TMP3969:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3969]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5742]]
// SIMD-ONLY0:       if.end5742:
// SIMD-ONLY0-NEXT:    [[TMP3970:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3970]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3971:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3972:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5743:%.*]] = icmp sgt i64 [[TMP3971]], [[TMP3972]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5743]], label [[IF_THEN5745:%.*]], label [[IF_END5746:%.*]]
// SIMD-ONLY0:       if.then5745:
// SIMD-ONLY0-NEXT:    [[TMP3973:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3973]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5746]]
// SIMD-ONLY0:       if.end5746:
// SIMD-ONLY0-NEXT:    [[TMP3974:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3974]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3975:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3976:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5747:%.*]] = icmp sgt i64 [[TMP3975]], [[TMP3976]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5747]], label [[IF_THEN5749:%.*]], label [[IF_END5750:%.*]]
// SIMD-ONLY0:       if.then5749:
// SIMD-ONLY0-NEXT:    [[TMP3977:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3977]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5750]]
// SIMD-ONLY0:       if.end5750:
// SIMD-ONLY0-NEXT:    [[TMP3978:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3978]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3979:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3980:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5751:%.*]] = icmp slt i64 [[TMP3979]], [[TMP3980]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5751]], label [[IF_THEN5753:%.*]], label [[IF_END5754:%.*]]
// SIMD-ONLY0:       if.then5753:
// SIMD-ONLY0-NEXT:    [[TMP3981:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3981]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5754]]
// SIMD-ONLY0:       if.end5754:
// SIMD-ONLY0-NEXT:    [[TMP3982:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3982]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3983:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3984:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5755:%.*]] = icmp slt i64 [[TMP3983]], [[TMP3984]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5755]], label [[IF_THEN5757:%.*]], label [[IF_END5758:%.*]]
// SIMD-ONLY0:       if.then5757:
// SIMD-ONLY0-NEXT:    [[TMP3985:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3985]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5758]]
// SIMD-ONLY0:       if.end5758:
// SIMD-ONLY0-NEXT:    [[TMP3986:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3986]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3987:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3988:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5759:%.*]] = icmp eq i64 [[TMP3987]], [[TMP3988]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5759]], label [[IF_THEN5761:%.*]], label [[IF_END5762:%.*]]
// SIMD-ONLY0:       if.then5761:
// SIMD-ONLY0-NEXT:    [[TMP3989:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3989]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5762]]
// SIMD-ONLY0:       if.end5762:
// SIMD-ONLY0-NEXT:    [[TMP3990:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3990]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3991:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3992:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5763:%.*]] = icmp eq i64 [[TMP3991]], [[TMP3992]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5763]], label [[IF_THEN5765:%.*]], label [[IF_END5766:%.*]]
// SIMD-ONLY0:       if.then5765:
// SIMD-ONLY0-NEXT:    [[TMP3993:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3993]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5766]]
// SIMD-ONLY0:       if.end5766:
// SIMD-ONLY0-NEXT:    [[TMP3994:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3995:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5767:%.*]] = icmp sgt i64 [[TMP3994]], [[TMP3995]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5767]], label [[IF_THEN5769:%.*]], label [[IF_END5770:%.*]]
// SIMD-ONLY0:       if.then5769:
// SIMD-ONLY0-NEXT:    [[TMP3996:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3996]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5770]]
// SIMD-ONLY0:       if.end5770:
// SIMD-ONLY0-NEXT:    [[TMP3997:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP3997]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3998:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP3999:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5771:%.*]] = icmp sgt i64 [[TMP3998]], [[TMP3999]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5771]], label [[IF_THEN5773:%.*]], label [[IF_END5774:%.*]]
// SIMD-ONLY0:       if.then5773:
// SIMD-ONLY0-NEXT:    [[TMP4000:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4000]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5774]]
// SIMD-ONLY0:       if.end5774:
// SIMD-ONLY0-NEXT:    [[TMP4001:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4001]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4002:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4003:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5775:%.*]] = icmp slt i64 [[TMP4002]], [[TMP4003]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5775]], label [[IF_THEN5777:%.*]], label [[IF_END5778:%.*]]
// SIMD-ONLY0:       if.then5777:
// SIMD-ONLY0-NEXT:    [[TMP4004:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4004]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5778]]
// SIMD-ONLY0:       if.end5778:
// SIMD-ONLY0-NEXT:    [[TMP4005:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4005]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4006:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4007:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5779:%.*]] = icmp slt i64 [[TMP4006]], [[TMP4007]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5779]], label [[IF_THEN5781:%.*]], label [[IF_END5782:%.*]]
// SIMD-ONLY0:       if.then5781:
// SIMD-ONLY0-NEXT:    [[TMP4008:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4008]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5782]]
// SIMD-ONLY0:       if.end5782:
// SIMD-ONLY0-NEXT:    [[TMP4009:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4009]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4010:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4011:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5783:%.*]] = icmp eq i64 [[TMP4010]], [[TMP4011]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5783]], label [[IF_THEN5785:%.*]], label [[IF_END5786:%.*]]
// SIMD-ONLY0:       if.then5785:
// SIMD-ONLY0-NEXT:    [[TMP4012:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4012]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5786]]
// SIMD-ONLY0:       if.end5786:
// SIMD-ONLY0-NEXT:    [[TMP4013:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4013]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4014:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4015:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5787:%.*]] = icmp eq i64 [[TMP4014]], [[TMP4015]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5787]], label [[IF_THEN5789:%.*]], label [[IF_END5790:%.*]]
// SIMD-ONLY0:       if.then5789:
// SIMD-ONLY0-NEXT:    [[TMP4016:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4016]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5790]]
// SIMD-ONLY0:       if.end5790:
// SIMD-ONLY0-NEXT:    [[TMP4017:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4017]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4018:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4019:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5791:%.*]] = icmp eq i64 [[TMP4018]], [[TMP4019]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5791]], label [[IF_THEN5793:%.*]], label [[IF_ELSE5794:%.*]]
// SIMD-ONLY0:       if.then5793:
// SIMD-ONLY0-NEXT:    [[TMP4020:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4020]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5795:%.*]]
// SIMD-ONLY0:       if.else5794:
// SIMD-ONLY0-NEXT:    [[TMP4021:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4021]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5795]]
// SIMD-ONLY0:       if.end5795:
// SIMD-ONLY0-NEXT:    [[TMP4022:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4023:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5796:%.*]] = icmp eq i64 [[TMP4022]], [[TMP4023]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5796]], label [[IF_THEN5798:%.*]], label [[IF_ELSE5799:%.*]]
// SIMD-ONLY0:       if.then5798:
// SIMD-ONLY0-NEXT:    [[TMP4024:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4024]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5800:%.*]]
// SIMD-ONLY0:       if.else5799:
// SIMD-ONLY0-NEXT:    [[TMP4025:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4025]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5800]]
// SIMD-ONLY0:       if.end5800:
// SIMD-ONLY0-NEXT:    [[TMP4026:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4027:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5801:%.*]] = icmp eq i64 [[TMP4026]], [[TMP4027]]
// SIMD-ONLY0-NEXT:    [[CONV5802:%.*]] = zext i1 [[CMP5801]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5803:%.*]] = sext i32 [[CONV5802]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5803]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4028:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5804:%.*]] = icmp ne i64 [[TMP4028]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5804]], label [[IF_THEN5805:%.*]], label [[IF_END5806:%.*]]
// SIMD-ONLY0:       if.then5805:
// SIMD-ONLY0-NEXT:    [[TMP4029:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4029]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5806]]
// SIMD-ONLY0:       if.end5806:
// SIMD-ONLY0-NEXT:    [[TMP4030:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4031:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5807:%.*]] = icmp eq i64 [[TMP4030]], [[TMP4031]]
// SIMD-ONLY0-NEXT:    [[CONV5808:%.*]] = zext i1 [[CMP5807]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5809:%.*]] = sext i32 [[CONV5808]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5809]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4032:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5810:%.*]] = icmp ne i64 [[TMP4032]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5810]], label [[IF_THEN5811:%.*]], label [[IF_END5812:%.*]]
// SIMD-ONLY0:       if.then5811:
// SIMD-ONLY0-NEXT:    [[TMP4033:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4033]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5812]]
// SIMD-ONLY0:       if.end5812:
// SIMD-ONLY0-NEXT:    [[TMP4034:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4035:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5813:%.*]] = icmp eq i64 [[TMP4034]], [[TMP4035]]
// SIMD-ONLY0-NEXT:    [[CONV5814:%.*]] = zext i1 [[CMP5813]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5815:%.*]] = sext i32 [[CONV5814]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5815]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4036:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5816:%.*]] = icmp ne i64 [[TMP4036]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5816]], label [[IF_THEN5817:%.*]], label [[IF_ELSE5818:%.*]]
// SIMD-ONLY0:       if.then5817:
// SIMD-ONLY0-NEXT:    [[TMP4037:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4037]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5819:%.*]]
// SIMD-ONLY0:       if.else5818:
// SIMD-ONLY0-NEXT:    [[TMP4038:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4038]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5819]]
// SIMD-ONLY0:       if.end5819:
// SIMD-ONLY0-NEXT:    [[TMP4039:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4040:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5820:%.*]] = icmp eq i64 [[TMP4039]], [[TMP4040]]
// SIMD-ONLY0-NEXT:    [[CONV5821:%.*]] = zext i1 [[CMP5820]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5822:%.*]] = sext i32 [[CONV5821]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5822]], ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4041:%.*]] = load i64, ptr [[LLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5823:%.*]] = icmp ne i64 [[TMP4041]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5823]], label [[IF_THEN5824:%.*]], label [[IF_ELSE5825:%.*]]
// SIMD-ONLY0:       if.then5824:
// SIMD-ONLY0-NEXT:    [[TMP4042:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4042]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5826:%.*]]
// SIMD-ONLY0:       if.else5825:
// SIMD-ONLY0-NEXT:    [[TMP4043:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4043]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5826]]
// SIMD-ONLY0:       if.end5826:
// SIMD-ONLY0-NEXT:    [[TMP4044:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4044]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4045:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4046:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5827:%.*]] = icmp ugt i64 [[TMP4045]], [[TMP4046]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5827]], label [[IF_THEN5829:%.*]], label [[IF_END5830:%.*]]
// SIMD-ONLY0:       if.then5829:
// SIMD-ONLY0-NEXT:    [[TMP4047:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4047]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5830]]
// SIMD-ONLY0:       if.end5830:
// SIMD-ONLY0-NEXT:    [[TMP4048:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4048]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4049:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4050:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5831:%.*]] = icmp ugt i64 [[TMP4049]], [[TMP4050]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5831]], label [[IF_THEN5833:%.*]], label [[IF_END5834:%.*]]
// SIMD-ONLY0:       if.then5833:
// SIMD-ONLY0-NEXT:    [[TMP4051:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4051]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5834]]
// SIMD-ONLY0:       if.end5834:
// SIMD-ONLY0-NEXT:    [[TMP4052:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4052]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4053:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4054:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5835:%.*]] = icmp ult i64 [[TMP4053]], [[TMP4054]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5835]], label [[IF_THEN5837:%.*]], label [[IF_END5838:%.*]]
// SIMD-ONLY0:       if.then5837:
// SIMD-ONLY0-NEXT:    [[TMP4055:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4055]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5838]]
// SIMD-ONLY0:       if.end5838:
// SIMD-ONLY0-NEXT:    [[TMP4056:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4056]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4057:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4058:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5839:%.*]] = icmp ult i64 [[TMP4057]], [[TMP4058]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5839]], label [[IF_THEN5841:%.*]], label [[IF_END5842:%.*]]
// SIMD-ONLY0:       if.then5841:
// SIMD-ONLY0-NEXT:    [[TMP4059:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4059]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5842]]
// SIMD-ONLY0:       if.end5842:
// SIMD-ONLY0-NEXT:    [[TMP4060:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4060]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4061:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4062:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5843:%.*]] = icmp eq i64 [[TMP4061]], [[TMP4062]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5843]], label [[IF_THEN5845:%.*]], label [[IF_END5846:%.*]]
// SIMD-ONLY0:       if.then5845:
// SIMD-ONLY0-NEXT:    [[TMP4063:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4063]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5846]]
// SIMD-ONLY0:       if.end5846:
// SIMD-ONLY0-NEXT:    [[TMP4064:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4064]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4065:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4066:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5847:%.*]] = icmp eq i64 [[TMP4065]], [[TMP4066]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5847]], label [[IF_THEN5849:%.*]], label [[IF_END5850:%.*]]
// SIMD-ONLY0:       if.then5849:
// SIMD-ONLY0-NEXT:    [[TMP4067:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4067]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5850]]
// SIMD-ONLY0:       if.end5850:
// SIMD-ONLY0-NEXT:    [[TMP4068:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4069:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5851:%.*]] = icmp ugt i64 [[TMP4068]], [[TMP4069]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5851]], label [[IF_THEN5853:%.*]], label [[IF_END5854:%.*]]
// SIMD-ONLY0:       if.then5853:
// SIMD-ONLY0-NEXT:    [[TMP4070:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4070]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5854]]
// SIMD-ONLY0:       if.end5854:
// SIMD-ONLY0-NEXT:    [[TMP4071:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4071]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4072:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4073:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5855:%.*]] = icmp ugt i64 [[TMP4072]], [[TMP4073]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5855]], label [[IF_THEN5857:%.*]], label [[IF_END5858:%.*]]
// SIMD-ONLY0:       if.then5857:
// SIMD-ONLY0-NEXT:    [[TMP4074:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4074]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5858]]
// SIMD-ONLY0:       if.end5858:
// SIMD-ONLY0-NEXT:    [[TMP4075:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4075]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4076:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4077:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5859:%.*]] = icmp ult i64 [[TMP4076]], [[TMP4077]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5859]], label [[IF_THEN5861:%.*]], label [[IF_END5862:%.*]]
// SIMD-ONLY0:       if.then5861:
// SIMD-ONLY0-NEXT:    [[TMP4078:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4078]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5862]]
// SIMD-ONLY0:       if.end5862:
// SIMD-ONLY0-NEXT:    [[TMP4079:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4079]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4080:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4081:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5863:%.*]] = icmp ult i64 [[TMP4080]], [[TMP4081]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5863]], label [[IF_THEN5865:%.*]], label [[IF_END5866:%.*]]
// SIMD-ONLY0:       if.then5865:
// SIMD-ONLY0-NEXT:    [[TMP4082:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4082]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5866]]
// SIMD-ONLY0:       if.end5866:
// SIMD-ONLY0-NEXT:    [[TMP4083:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4083]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4084:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4085:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5867:%.*]] = icmp eq i64 [[TMP4084]], [[TMP4085]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5867]], label [[IF_THEN5869:%.*]], label [[IF_END5870:%.*]]
// SIMD-ONLY0:       if.then5869:
// SIMD-ONLY0-NEXT:    [[TMP4086:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4086]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5870]]
// SIMD-ONLY0:       if.end5870:
// SIMD-ONLY0-NEXT:    [[TMP4087:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4087]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4088:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4089:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5871:%.*]] = icmp eq i64 [[TMP4088]], [[TMP4089]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5871]], label [[IF_THEN5873:%.*]], label [[IF_END5874:%.*]]
// SIMD-ONLY0:       if.then5873:
// SIMD-ONLY0-NEXT:    [[TMP4090:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4090]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5874]]
// SIMD-ONLY0:       if.end5874:
// SIMD-ONLY0-NEXT:    [[TMP4091:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4091]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4092:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4093:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5875:%.*]] = icmp eq i64 [[TMP4092]], [[TMP4093]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5875]], label [[IF_THEN5877:%.*]], label [[IF_ELSE5878:%.*]]
// SIMD-ONLY0:       if.then5877:
// SIMD-ONLY0-NEXT:    [[TMP4094:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4094]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5879:%.*]]
// SIMD-ONLY0:       if.else5878:
// SIMD-ONLY0-NEXT:    [[TMP4095:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4095]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5879]]
// SIMD-ONLY0:       if.end5879:
// SIMD-ONLY0-NEXT:    [[TMP4096:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4097:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5880:%.*]] = icmp eq i64 [[TMP4096]], [[TMP4097]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5880]], label [[IF_THEN5882:%.*]], label [[IF_ELSE5883:%.*]]
// SIMD-ONLY0:       if.then5882:
// SIMD-ONLY0-NEXT:    [[TMP4098:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4098]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5884:%.*]]
// SIMD-ONLY0:       if.else5883:
// SIMD-ONLY0-NEXT:    [[TMP4099:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4099]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5884]]
// SIMD-ONLY0:       if.end5884:
// SIMD-ONLY0-NEXT:    [[TMP4100:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4101:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5885:%.*]] = icmp eq i64 [[TMP4100]], [[TMP4101]]
// SIMD-ONLY0-NEXT:    [[CONV5886:%.*]] = zext i1 [[CMP5885]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5887:%.*]] = sext i32 [[CONV5886]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5887]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4102:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5888:%.*]] = icmp ne i64 [[TMP4102]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5888]], label [[IF_THEN5889:%.*]], label [[IF_END5890:%.*]]
// SIMD-ONLY0:       if.then5889:
// SIMD-ONLY0-NEXT:    [[TMP4103:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4103]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5890]]
// SIMD-ONLY0:       if.end5890:
// SIMD-ONLY0-NEXT:    [[TMP4104:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4105:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5891:%.*]] = icmp eq i64 [[TMP4104]], [[TMP4105]]
// SIMD-ONLY0-NEXT:    [[CONV5892:%.*]] = zext i1 [[CMP5891]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5893:%.*]] = sext i32 [[CONV5892]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5893]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4106:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5894:%.*]] = icmp ne i64 [[TMP4106]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5894]], label [[IF_THEN5895:%.*]], label [[IF_END5896:%.*]]
// SIMD-ONLY0:       if.then5895:
// SIMD-ONLY0-NEXT:    [[TMP4107:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4107]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5896]]
// SIMD-ONLY0:       if.end5896:
// SIMD-ONLY0-NEXT:    [[TMP4108:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4109:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5897:%.*]] = icmp eq i64 [[TMP4108]], [[TMP4109]]
// SIMD-ONLY0-NEXT:    [[CONV5898:%.*]] = zext i1 [[CMP5897]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5899:%.*]] = sext i32 [[CONV5898]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5899]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4110:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5900:%.*]] = icmp ne i64 [[TMP4110]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5900]], label [[IF_THEN5901:%.*]], label [[IF_ELSE5902:%.*]]
// SIMD-ONLY0:       if.then5901:
// SIMD-ONLY0-NEXT:    [[TMP4111:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4111]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5903:%.*]]
// SIMD-ONLY0:       if.else5902:
// SIMD-ONLY0-NEXT:    [[TMP4112:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4112]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5903]]
// SIMD-ONLY0:       if.end5903:
// SIMD-ONLY0-NEXT:    [[TMP4113:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4114:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5904:%.*]] = icmp eq i64 [[TMP4113]], [[TMP4114]]
// SIMD-ONLY0-NEXT:    [[CONV5905:%.*]] = zext i1 [[CMP5904]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5906:%.*]] = sext i32 [[CONV5905]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5906]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4115:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5907:%.*]] = icmp ne i64 [[TMP4115]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5907]], label [[IF_THEN5908:%.*]], label [[IF_ELSE5909:%.*]]
// SIMD-ONLY0:       if.then5908:
// SIMD-ONLY0-NEXT:    [[TMP4116:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4116]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5910:%.*]]
// SIMD-ONLY0:       if.else5909:
// SIMD-ONLY0-NEXT:    [[TMP4117:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4117]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5910]]
// SIMD-ONLY0:       if.end5910:
// SIMD-ONLY0-NEXT:    [[TMP4118:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4118]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4119:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4120:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5911:%.*]] = icmp ugt i64 [[TMP4119]], [[TMP4120]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5911]], label [[IF_THEN5913:%.*]], label [[IF_END5914:%.*]]
// SIMD-ONLY0:       if.then5913:
// SIMD-ONLY0-NEXT:    [[TMP4121:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4121]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5914]]
// SIMD-ONLY0:       if.end5914:
// SIMD-ONLY0-NEXT:    [[TMP4122:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4122]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4123:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4124:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5915:%.*]] = icmp ugt i64 [[TMP4123]], [[TMP4124]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5915]], label [[IF_THEN5917:%.*]], label [[IF_END5918:%.*]]
// SIMD-ONLY0:       if.then5917:
// SIMD-ONLY0-NEXT:    [[TMP4125:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4125]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5918]]
// SIMD-ONLY0:       if.end5918:
// SIMD-ONLY0-NEXT:    [[TMP4126:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4126]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4127:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4128:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5919:%.*]] = icmp ult i64 [[TMP4127]], [[TMP4128]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5919]], label [[IF_THEN5921:%.*]], label [[IF_END5922:%.*]]
// SIMD-ONLY0:       if.then5921:
// SIMD-ONLY0-NEXT:    [[TMP4129:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4129]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5922]]
// SIMD-ONLY0:       if.end5922:
// SIMD-ONLY0-NEXT:    [[TMP4130:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4130]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4131:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4132:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5923:%.*]] = icmp ult i64 [[TMP4131]], [[TMP4132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5923]], label [[IF_THEN5925:%.*]], label [[IF_END5926:%.*]]
// SIMD-ONLY0:       if.then5925:
// SIMD-ONLY0-NEXT:    [[TMP4133:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4133]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5926]]
// SIMD-ONLY0:       if.end5926:
// SIMD-ONLY0-NEXT:    [[TMP4134:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4134]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4135:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4136:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5927:%.*]] = icmp eq i64 [[TMP4135]], [[TMP4136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5927]], label [[IF_THEN5929:%.*]], label [[IF_END5930:%.*]]
// SIMD-ONLY0:       if.then5929:
// SIMD-ONLY0-NEXT:    [[TMP4137:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4137]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5930]]
// SIMD-ONLY0:       if.end5930:
// SIMD-ONLY0-NEXT:    [[TMP4138:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4138]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4139:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4140:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5931:%.*]] = icmp eq i64 [[TMP4139]], [[TMP4140]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5931]], label [[IF_THEN5933:%.*]], label [[IF_END5934:%.*]]
// SIMD-ONLY0:       if.then5933:
// SIMD-ONLY0-NEXT:    [[TMP4141:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4141]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5934]]
// SIMD-ONLY0:       if.end5934:
// SIMD-ONLY0-NEXT:    [[TMP4142:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4143:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5935:%.*]] = icmp ugt i64 [[TMP4142]], [[TMP4143]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5935]], label [[IF_THEN5937:%.*]], label [[IF_END5938:%.*]]
// SIMD-ONLY0:       if.then5937:
// SIMD-ONLY0-NEXT:    [[TMP4144:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4144]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5938]]
// SIMD-ONLY0:       if.end5938:
// SIMD-ONLY0-NEXT:    [[TMP4145:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4145]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4146:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4147:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5939:%.*]] = icmp ugt i64 [[TMP4146]], [[TMP4147]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5939]], label [[IF_THEN5941:%.*]], label [[IF_END5942:%.*]]
// SIMD-ONLY0:       if.then5941:
// SIMD-ONLY0-NEXT:    [[TMP4148:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4148]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5942]]
// SIMD-ONLY0:       if.end5942:
// SIMD-ONLY0-NEXT:    [[TMP4149:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4149]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4150:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4151:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5943:%.*]] = icmp ult i64 [[TMP4150]], [[TMP4151]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5943]], label [[IF_THEN5945:%.*]], label [[IF_END5946:%.*]]
// SIMD-ONLY0:       if.then5945:
// SIMD-ONLY0-NEXT:    [[TMP4152:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4152]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5946]]
// SIMD-ONLY0:       if.end5946:
// SIMD-ONLY0-NEXT:    [[TMP4153:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4153]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4154:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4155:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5947:%.*]] = icmp ult i64 [[TMP4154]], [[TMP4155]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5947]], label [[IF_THEN5949:%.*]], label [[IF_END5950:%.*]]
// SIMD-ONLY0:       if.then5949:
// SIMD-ONLY0-NEXT:    [[TMP4156:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4156]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5950]]
// SIMD-ONLY0:       if.end5950:
// SIMD-ONLY0-NEXT:    [[TMP4157:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4157]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4158:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4159:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5951:%.*]] = icmp eq i64 [[TMP4158]], [[TMP4159]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5951]], label [[IF_THEN5953:%.*]], label [[IF_END5954:%.*]]
// SIMD-ONLY0:       if.then5953:
// SIMD-ONLY0-NEXT:    [[TMP4160:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4160]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5954]]
// SIMD-ONLY0:       if.end5954:
// SIMD-ONLY0-NEXT:    [[TMP4161:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4161]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4162:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4163:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5955:%.*]] = icmp eq i64 [[TMP4162]], [[TMP4163]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5955]], label [[IF_THEN5957:%.*]], label [[IF_END5958:%.*]]
// SIMD-ONLY0:       if.then5957:
// SIMD-ONLY0-NEXT:    [[TMP4164:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4164]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5958]]
// SIMD-ONLY0:       if.end5958:
// SIMD-ONLY0-NEXT:    [[TMP4165:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4165]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4166:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4167:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5959:%.*]] = icmp eq i64 [[TMP4166]], [[TMP4167]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5959]], label [[IF_THEN5961:%.*]], label [[IF_ELSE5962:%.*]]
// SIMD-ONLY0:       if.then5961:
// SIMD-ONLY0-NEXT:    [[TMP4168:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4168]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5963:%.*]]
// SIMD-ONLY0:       if.else5962:
// SIMD-ONLY0-NEXT:    [[TMP4169:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4169]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5963]]
// SIMD-ONLY0:       if.end5963:
// SIMD-ONLY0-NEXT:    [[TMP4170:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4171:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5964:%.*]] = icmp eq i64 [[TMP4170]], [[TMP4171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5964]], label [[IF_THEN5966:%.*]], label [[IF_ELSE5967:%.*]]
// SIMD-ONLY0:       if.then5966:
// SIMD-ONLY0-NEXT:    [[TMP4172:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4172]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5968:%.*]]
// SIMD-ONLY0:       if.else5967:
// SIMD-ONLY0-NEXT:    [[TMP4173:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4173]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5968]]
// SIMD-ONLY0:       if.end5968:
// SIMD-ONLY0-NEXT:    [[TMP4174:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4175:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5969:%.*]] = icmp eq i64 [[TMP4174]], [[TMP4175]]
// SIMD-ONLY0-NEXT:    [[CONV5970:%.*]] = zext i1 [[CMP5969]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5971:%.*]] = sext i32 [[CONV5970]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5971]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4176:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5972:%.*]] = icmp ne i64 [[TMP4176]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5972]], label [[IF_THEN5973:%.*]], label [[IF_END5974:%.*]]
// SIMD-ONLY0:       if.then5973:
// SIMD-ONLY0-NEXT:    [[TMP4177:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4177]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5974]]
// SIMD-ONLY0:       if.end5974:
// SIMD-ONLY0-NEXT:    [[TMP4178:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4179:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5975:%.*]] = icmp eq i64 [[TMP4178]], [[TMP4179]]
// SIMD-ONLY0-NEXT:    [[CONV5976:%.*]] = zext i1 [[CMP5975]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5977:%.*]] = sext i32 [[CONV5976]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5977]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4180:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5978:%.*]] = icmp ne i64 [[TMP4180]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5978]], label [[IF_THEN5979:%.*]], label [[IF_END5980:%.*]]
// SIMD-ONLY0:       if.then5979:
// SIMD-ONLY0-NEXT:    [[TMP4181:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4181]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5980]]
// SIMD-ONLY0:       if.end5980:
// SIMD-ONLY0-NEXT:    [[TMP4182:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4183:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5981:%.*]] = icmp eq i64 [[TMP4182]], [[TMP4183]]
// SIMD-ONLY0-NEXT:    [[CONV5982:%.*]] = zext i1 [[CMP5981]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5983:%.*]] = sext i32 [[CONV5982]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5983]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4184:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5984:%.*]] = icmp ne i64 [[TMP4184]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5984]], label [[IF_THEN5985:%.*]], label [[IF_ELSE5986:%.*]]
// SIMD-ONLY0:       if.then5985:
// SIMD-ONLY0-NEXT:    [[TMP4185:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4185]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5987:%.*]]
// SIMD-ONLY0:       if.else5986:
// SIMD-ONLY0-NEXT:    [[TMP4186:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4186]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5987]]
// SIMD-ONLY0:       if.end5987:
// SIMD-ONLY0-NEXT:    [[TMP4187:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4188:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5988:%.*]] = icmp eq i64 [[TMP4187]], [[TMP4188]]
// SIMD-ONLY0-NEXT:    [[CONV5989:%.*]] = zext i1 [[CMP5988]] to i32
// SIMD-ONLY0-NEXT:    [[CONV5990:%.*]] = sext i32 [[CONV5989]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV5990]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4189:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL5991:%.*]] = icmp ne i64 [[TMP4189]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL5991]], label [[IF_THEN5992:%.*]], label [[IF_ELSE5993:%.*]]
// SIMD-ONLY0:       if.then5992:
// SIMD-ONLY0-NEXT:    [[TMP4190:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4190]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5994:%.*]]
// SIMD-ONLY0:       if.else5993:
// SIMD-ONLY0-NEXT:    [[TMP4191:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4191]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5994]]
// SIMD-ONLY0:       if.end5994:
// SIMD-ONLY0-NEXT:    [[TMP4192:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4192]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4193:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4194:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5995:%.*]] = icmp ugt i64 [[TMP4193]], [[TMP4194]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5995]], label [[IF_THEN5997:%.*]], label [[IF_END5998:%.*]]
// SIMD-ONLY0:       if.then5997:
// SIMD-ONLY0-NEXT:    [[TMP4195:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4195]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END5998]]
// SIMD-ONLY0:       if.end5998:
// SIMD-ONLY0-NEXT:    [[TMP4196:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4196]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4197:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4198:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5999:%.*]] = icmp ugt i64 [[TMP4197]], [[TMP4198]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5999]], label [[IF_THEN6001:%.*]], label [[IF_END6002:%.*]]
// SIMD-ONLY0:       if.then6001:
// SIMD-ONLY0-NEXT:    [[TMP4199:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4199]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6002]]
// SIMD-ONLY0:       if.end6002:
// SIMD-ONLY0-NEXT:    [[TMP4200:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4200]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4201:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4202:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6003:%.*]] = icmp ult i64 [[TMP4201]], [[TMP4202]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6003]], label [[IF_THEN6005:%.*]], label [[IF_END6006:%.*]]
// SIMD-ONLY0:       if.then6005:
// SIMD-ONLY0-NEXT:    [[TMP4203:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4203]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6006]]
// SIMD-ONLY0:       if.end6006:
// SIMD-ONLY0-NEXT:    [[TMP4204:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4204]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4205:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4206:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6007:%.*]] = icmp ult i64 [[TMP4205]], [[TMP4206]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6007]], label [[IF_THEN6009:%.*]], label [[IF_END6010:%.*]]
// SIMD-ONLY0:       if.then6009:
// SIMD-ONLY0-NEXT:    [[TMP4207:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4207]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6010]]
// SIMD-ONLY0:       if.end6010:
// SIMD-ONLY0-NEXT:    [[TMP4208:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4208]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4209:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4210:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6011:%.*]] = icmp eq i64 [[TMP4209]], [[TMP4210]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6011]], label [[IF_THEN6013:%.*]], label [[IF_END6014:%.*]]
// SIMD-ONLY0:       if.then6013:
// SIMD-ONLY0-NEXT:    [[TMP4211:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4211]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6014]]
// SIMD-ONLY0:       if.end6014:
// SIMD-ONLY0-NEXT:    [[TMP4212:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4212]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4213:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4214:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6015:%.*]] = icmp eq i64 [[TMP4213]], [[TMP4214]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6015]], label [[IF_THEN6017:%.*]], label [[IF_END6018:%.*]]
// SIMD-ONLY0:       if.then6017:
// SIMD-ONLY0-NEXT:    [[TMP4215:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4215]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6018]]
// SIMD-ONLY0:       if.end6018:
// SIMD-ONLY0-NEXT:    [[TMP4216:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4217:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6019:%.*]] = icmp ugt i64 [[TMP4216]], [[TMP4217]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6019]], label [[IF_THEN6021:%.*]], label [[IF_END6022:%.*]]
// SIMD-ONLY0:       if.then6021:
// SIMD-ONLY0-NEXT:    [[TMP4218:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4218]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6022]]
// SIMD-ONLY0:       if.end6022:
// SIMD-ONLY0-NEXT:    [[TMP4219:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4219]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4220:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4221:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6023:%.*]] = icmp ugt i64 [[TMP4220]], [[TMP4221]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6023]], label [[IF_THEN6025:%.*]], label [[IF_END6026:%.*]]
// SIMD-ONLY0:       if.then6025:
// SIMD-ONLY0-NEXT:    [[TMP4222:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4222]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6026]]
// SIMD-ONLY0:       if.end6026:
// SIMD-ONLY0-NEXT:    [[TMP4223:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4223]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4224:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4225:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6027:%.*]] = icmp ult i64 [[TMP4224]], [[TMP4225]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6027]], label [[IF_THEN6029:%.*]], label [[IF_END6030:%.*]]
// SIMD-ONLY0:       if.then6029:
// SIMD-ONLY0-NEXT:    [[TMP4226:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4226]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6030]]
// SIMD-ONLY0:       if.end6030:
// SIMD-ONLY0-NEXT:    [[TMP4227:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4227]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4228:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4229:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6031:%.*]] = icmp ult i64 [[TMP4228]], [[TMP4229]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6031]], label [[IF_THEN6033:%.*]], label [[IF_END6034:%.*]]
// SIMD-ONLY0:       if.then6033:
// SIMD-ONLY0-NEXT:    [[TMP4230:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4230]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6034]]
// SIMD-ONLY0:       if.end6034:
// SIMD-ONLY0-NEXT:    [[TMP4231:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4231]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4232:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4233:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6035:%.*]] = icmp eq i64 [[TMP4232]], [[TMP4233]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6035]], label [[IF_THEN6037:%.*]], label [[IF_END6038:%.*]]
// SIMD-ONLY0:       if.then6037:
// SIMD-ONLY0-NEXT:    [[TMP4234:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4234]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6038]]
// SIMD-ONLY0:       if.end6038:
// SIMD-ONLY0-NEXT:    [[TMP4235:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4235]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4236:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4237:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6039:%.*]] = icmp eq i64 [[TMP4236]], [[TMP4237]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6039]], label [[IF_THEN6041:%.*]], label [[IF_END6042:%.*]]
// SIMD-ONLY0:       if.then6041:
// SIMD-ONLY0-NEXT:    [[TMP4238:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4238]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6042]]
// SIMD-ONLY0:       if.end6042:
// SIMD-ONLY0-NEXT:    [[TMP4239:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4239]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4240:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4241:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6043:%.*]] = icmp eq i64 [[TMP4240]], [[TMP4241]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6043]], label [[IF_THEN6045:%.*]], label [[IF_ELSE6046:%.*]]
// SIMD-ONLY0:       if.then6045:
// SIMD-ONLY0-NEXT:    [[TMP4242:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4242]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6047:%.*]]
// SIMD-ONLY0:       if.else6046:
// SIMD-ONLY0-NEXT:    [[TMP4243:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4243]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6047]]
// SIMD-ONLY0:       if.end6047:
// SIMD-ONLY0-NEXT:    [[TMP4244:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4245:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6048:%.*]] = icmp eq i64 [[TMP4244]], [[TMP4245]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6048]], label [[IF_THEN6050:%.*]], label [[IF_ELSE6051:%.*]]
// SIMD-ONLY0:       if.then6050:
// SIMD-ONLY0-NEXT:    [[TMP4246:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4246]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6052:%.*]]
// SIMD-ONLY0:       if.else6051:
// SIMD-ONLY0-NEXT:    [[TMP4247:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4247]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6052]]
// SIMD-ONLY0:       if.end6052:
// SIMD-ONLY0-NEXT:    [[TMP4248:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4249:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6053:%.*]] = icmp eq i64 [[TMP4248]], [[TMP4249]]
// SIMD-ONLY0-NEXT:    [[CONV6054:%.*]] = zext i1 [[CMP6053]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6055:%.*]] = sext i32 [[CONV6054]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6055]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4250:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6056:%.*]] = icmp ne i64 [[TMP4250]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6056]], label [[IF_THEN6057:%.*]], label [[IF_END6058:%.*]]
// SIMD-ONLY0:       if.then6057:
// SIMD-ONLY0-NEXT:    [[TMP4251:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4251]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6058]]
// SIMD-ONLY0:       if.end6058:
// SIMD-ONLY0-NEXT:    [[TMP4252:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4253:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6059:%.*]] = icmp eq i64 [[TMP4252]], [[TMP4253]]
// SIMD-ONLY0-NEXT:    [[CONV6060:%.*]] = zext i1 [[CMP6059]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6061:%.*]] = sext i32 [[CONV6060]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6061]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4254:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6062:%.*]] = icmp ne i64 [[TMP4254]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6062]], label [[IF_THEN6063:%.*]], label [[IF_END6064:%.*]]
// SIMD-ONLY0:       if.then6063:
// SIMD-ONLY0-NEXT:    [[TMP4255:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4255]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6064]]
// SIMD-ONLY0:       if.end6064:
// SIMD-ONLY0-NEXT:    [[TMP4256:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4257:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6065:%.*]] = icmp eq i64 [[TMP4256]], [[TMP4257]]
// SIMD-ONLY0-NEXT:    [[CONV6066:%.*]] = zext i1 [[CMP6065]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6067:%.*]] = sext i32 [[CONV6066]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6067]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4258:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6068:%.*]] = icmp ne i64 [[TMP4258]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6068]], label [[IF_THEN6069:%.*]], label [[IF_ELSE6070:%.*]]
// SIMD-ONLY0:       if.then6069:
// SIMD-ONLY0-NEXT:    [[TMP4259:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4259]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6071:%.*]]
// SIMD-ONLY0:       if.else6070:
// SIMD-ONLY0-NEXT:    [[TMP4260:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4260]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6071]]
// SIMD-ONLY0:       if.end6071:
// SIMD-ONLY0-NEXT:    [[TMP4261:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4262:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6072:%.*]] = icmp eq i64 [[TMP4261]], [[TMP4262]]
// SIMD-ONLY0-NEXT:    [[CONV6073:%.*]] = zext i1 [[CMP6072]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6074:%.*]] = sext i32 [[CONV6073]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6074]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4263:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6075:%.*]] = icmp ne i64 [[TMP4263]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6075]], label [[IF_THEN6076:%.*]], label [[IF_ELSE6077:%.*]]
// SIMD-ONLY0:       if.then6076:
// SIMD-ONLY0-NEXT:    [[TMP4264:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4264]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6078:%.*]]
// SIMD-ONLY0:       if.else6077:
// SIMD-ONLY0-NEXT:    [[TMP4265:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4265]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6078]]
// SIMD-ONLY0:       if.end6078:
// SIMD-ONLY0-NEXT:    [[TMP4266:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4266]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4267:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4268:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6079:%.*]] = icmp ugt i64 [[TMP4267]], [[TMP4268]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6079]], label [[IF_THEN6081:%.*]], label [[IF_END6082:%.*]]
// SIMD-ONLY0:       if.then6081:
// SIMD-ONLY0-NEXT:    [[TMP4269:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4269]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6082]]
// SIMD-ONLY0:       if.end6082:
// SIMD-ONLY0-NEXT:    [[TMP4270:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4270]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4271:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4272:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6083:%.*]] = icmp ugt i64 [[TMP4271]], [[TMP4272]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6083]], label [[IF_THEN6085:%.*]], label [[IF_END6086:%.*]]
// SIMD-ONLY0:       if.then6085:
// SIMD-ONLY0-NEXT:    [[TMP4273:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4273]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6086]]
// SIMD-ONLY0:       if.end6086:
// SIMD-ONLY0-NEXT:    [[TMP4274:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4274]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4275:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4276:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6087:%.*]] = icmp ult i64 [[TMP4275]], [[TMP4276]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6087]], label [[IF_THEN6089:%.*]], label [[IF_END6090:%.*]]
// SIMD-ONLY0:       if.then6089:
// SIMD-ONLY0-NEXT:    [[TMP4277:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4277]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6090]]
// SIMD-ONLY0:       if.end6090:
// SIMD-ONLY0-NEXT:    [[TMP4278:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4278]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4279:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4280:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6091:%.*]] = icmp ult i64 [[TMP4279]], [[TMP4280]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6091]], label [[IF_THEN6093:%.*]], label [[IF_END6094:%.*]]
// SIMD-ONLY0:       if.then6093:
// SIMD-ONLY0-NEXT:    [[TMP4281:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4281]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6094]]
// SIMD-ONLY0:       if.end6094:
// SIMD-ONLY0-NEXT:    [[TMP4282:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4282]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4283:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4284:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6095:%.*]] = icmp eq i64 [[TMP4283]], [[TMP4284]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6095]], label [[IF_THEN6097:%.*]], label [[IF_END6098:%.*]]
// SIMD-ONLY0:       if.then6097:
// SIMD-ONLY0-NEXT:    [[TMP4285:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4285]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6098]]
// SIMD-ONLY0:       if.end6098:
// SIMD-ONLY0-NEXT:    [[TMP4286:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4286]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4287:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4288:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6099:%.*]] = icmp eq i64 [[TMP4287]], [[TMP4288]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6099]], label [[IF_THEN6101:%.*]], label [[IF_END6102:%.*]]
// SIMD-ONLY0:       if.then6101:
// SIMD-ONLY0-NEXT:    [[TMP4289:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4289]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6102]]
// SIMD-ONLY0:       if.end6102:
// SIMD-ONLY0-NEXT:    [[TMP4290:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4291:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6103:%.*]] = icmp ugt i64 [[TMP4290]], [[TMP4291]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6103]], label [[IF_THEN6105:%.*]], label [[IF_END6106:%.*]]
// SIMD-ONLY0:       if.then6105:
// SIMD-ONLY0-NEXT:    [[TMP4292:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4292]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6106]]
// SIMD-ONLY0:       if.end6106:
// SIMD-ONLY0-NEXT:    [[TMP4293:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4293]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4294:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4295:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6107:%.*]] = icmp ugt i64 [[TMP4294]], [[TMP4295]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6107]], label [[IF_THEN6109:%.*]], label [[IF_END6110:%.*]]
// SIMD-ONLY0:       if.then6109:
// SIMD-ONLY0-NEXT:    [[TMP4296:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4296]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6110]]
// SIMD-ONLY0:       if.end6110:
// SIMD-ONLY0-NEXT:    [[TMP4297:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4297]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4298:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4299:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6111:%.*]] = icmp ult i64 [[TMP4298]], [[TMP4299]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6111]], label [[IF_THEN6113:%.*]], label [[IF_END6114:%.*]]
// SIMD-ONLY0:       if.then6113:
// SIMD-ONLY0-NEXT:    [[TMP4300:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4300]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6114]]
// SIMD-ONLY0:       if.end6114:
// SIMD-ONLY0-NEXT:    [[TMP4301:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4301]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4302:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4303:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6115:%.*]] = icmp ult i64 [[TMP4302]], [[TMP4303]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6115]], label [[IF_THEN6117:%.*]], label [[IF_END6118:%.*]]
// SIMD-ONLY0:       if.then6117:
// SIMD-ONLY0-NEXT:    [[TMP4304:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4304]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6118]]
// SIMD-ONLY0:       if.end6118:
// SIMD-ONLY0-NEXT:    [[TMP4305:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4305]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4306:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4307:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6119:%.*]] = icmp eq i64 [[TMP4306]], [[TMP4307]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6119]], label [[IF_THEN6121:%.*]], label [[IF_END6122:%.*]]
// SIMD-ONLY0:       if.then6121:
// SIMD-ONLY0-NEXT:    [[TMP4308:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4308]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6122]]
// SIMD-ONLY0:       if.end6122:
// SIMD-ONLY0-NEXT:    [[TMP4309:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4309]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4310:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4311:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6123:%.*]] = icmp eq i64 [[TMP4310]], [[TMP4311]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6123]], label [[IF_THEN6125:%.*]], label [[IF_END6126:%.*]]
// SIMD-ONLY0:       if.then6125:
// SIMD-ONLY0-NEXT:    [[TMP4312:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4312]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6126]]
// SIMD-ONLY0:       if.end6126:
// SIMD-ONLY0-NEXT:    [[TMP4313:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4313]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4314:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4315:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6127:%.*]] = icmp eq i64 [[TMP4314]], [[TMP4315]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6127]], label [[IF_THEN6129:%.*]], label [[IF_ELSE6130:%.*]]
// SIMD-ONLY0:       if.then6129:
// SIMD-ONLY0-NEXT:    [[TMP4316:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4316]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6131:%.*]]
// SIMD-ONLY0:       if.else6130:
// SIMD-ONLY0-NEXT:    [[TMP4317:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4317]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6131]]
// SIMD-ONLY0:       if.end6131:
// SIMD-ONLY0-NEXT:    [[TMP4318:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4319:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6132:%.*]] = icmp eq i64 [[TMP4318]], [[TMP4319]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6132]], label [[IF_THEN6134:%.*]], label [[IF_ELSE6135:%.*]]
// SIMD-ONLY0:       if.then6134:
// SIMD-ONLY0-NEXT:    [[TMP4320:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4320]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6136:%.*]]
// SIMD-ONLY0:       if.else6135:
// SIMD-ONLY0-NEXT:    [[TMP4321:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4321]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6136]]
// SIMD-ONLY0:       if.end6136:
// SIMD-ONLY0-NEXT:    [[TMP4322:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4323:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6137:%.*]] = icmp eq i64 [[TMP4322]], [[TMP4323]]
// SIMD-ONLY0-NEXT:    [[CONV6138:%.*]] = zext i1 [[CMP6137]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6139:%.*]] = sext i32 [[CONV6138]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6139]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4324:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6140:%.*]] = icmp ne i64 [[TMP4324]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6140]], label [[IF_THEN6141:%.*]], label [[IF_END6142:%.*]]
// SIMD-ONLY0:       if.then6141:
// SIMD-ONLY0-NEXT:    [[TMP4325:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4325]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6142]]
// SIMD-ONLY0:       if.end6142:
// SIMD-ONLY0-NEXT:    [[TMP4326:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4327:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6143:%.*]] = icmp eq i64 [[TMP4326]], [[TMP4327]]
// SIMD-ONLY0-NEXT:    [[CONV6144:%.*]] = zext i1 [[CMP6143]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6145:%.*]] = sext i32 [[CONV6144]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6145]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4328:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6146:%.*]] = icmp ne i64 [[TMP4328]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6146]], label [[IF_THEN6147:%.*]], label [[IF_END6148:%.*]]
// SIMD-ONLY0:       if.then6147:
// SIMD-ONLY0-NEXT:    [[TMP4329:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4329]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6148]]
// SIMD-ONLY0:       if.end6148:
// SIMD-ONLY0-NEXT:    [[TMP4330:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4331:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6149:%.*]] = icmp eq i64 [[TMP4330]], [[TMP4331]]
// SIMD-ONLY0-NEXT:    [[CONV6150:%.*]] = zext i1 [[CMP6149]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6151:%.*]] = sext i32 [[CONV6150]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6151]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4332:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6152:%.*]] = icmp ne i64 [[TMP4332]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6152]], label [[IF_THEN6153:%.*]], label [[IF_ELSE6154:%.*]]
// SIMD-ONLY0:       if.then6153:
// SIMD-ONLY0-NEXT:    [[TMP4333:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4333]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6155:%.*]]
// SIMD-ONLY0:       if.else6154:
// SIMD-ONLY0-NEXT:    [[TMP4334:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4334]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6155]]
// SIMD-ONLY0:       if.end6155:
// SIMD-ONLY0-NEXT:    [[TMP4335:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4336:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6156:%.*]] = icmp eq i64 [[TMP4335]], [[TMP4336]]
// SIMD-ONLY0-NEXT:    [[CONV6157:%.*]] = zext i1 [[CMP6156]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6158:%.*]] = sext i32 [[CONV6157]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6158]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4337:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6159:%.*]] = icmp ne i64 [[TMP4337]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6159]], label [[IF_THEN6160:%.*]], label [[IF_ELSE6161:%.*]]
// SIMD-ONLY0:       if.then6160:
// SIMD-ONLY0-NEXT:    [[TMP4338:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4338]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6162:%.*]]
// SIMD-ONLY0:       if.else6161:
// SIMD-ONLY0-NEXT:    [[TMP4339:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4339]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6162]]
// SIMD-ONLY0:       if.end6162:
// SIMD-ONLY0-NEXT:    [[TMP4340:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4340]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4341:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4342:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6163:%.*]] = icmp ugt i64 [[TMP4341]], [[TMP4342]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6163]], label [[IF_THEN6165:%.*]], label [[IF_END6166:%.*]]
// SIMD-ONLY0:       if.then6165:
// SIMD-ONLY0-NEXT:    [[TMP4343:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4343]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6166]]
// SIMD-ONLY0:       if.end6166:
// SIMD-ONLY0-NEXT:    [[TMP4344:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4344]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4345:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4346:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6167:%.*]] = icmp ugt i64 [[TMP4345]], [[TMP4346]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6167]], label [[IF_THEN6169:%.*]], label [[IF_END6170:%.*]]
// SIMD-ONLY0:       if.then6169:
// SIMD-ONLY0-NEXT:    [[TMP4347:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4347]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6170]]
// SIMD-ONLY0:       if.end6170:
// SIMD-ONLY0-NEXT:    [[TMP4348:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4348]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4349:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4350:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6171:%.*]] = icmp ult i64 [[TMP4349]], [[TMP4350]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6171]], label [[IF_THEN6173:%.*]], label [[IF_END6174:%.*]]
// SIMD-ONLY0:       if.then6173:
// SIMD-ONLY0-NEXT:    [[TMP4351:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4351]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6174]]
// SIMD-ONLY0:       if.end6174:
// SIMD-ONLY0-NEXT:    [[TMP4352:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4352]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4353:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4354:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6175:%.*]] = icmp ult i64 [[TMP4353]], [[TMP4354]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6175]], label [[IF_THEN6177:%.*]], label [[IF_END6178:%.*]]
// SIMD-ONLY0:       if.then6177:
// SIMD-ONLY0-NEXT:    [[TMP4355:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4355]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6178]]
// SIMD-ONLY0:       if.end6178:
// SIMD-ONLY0-NEXT:    [[TMP4356:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4356]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4357:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4358:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6179:%.*]] = icmp eq i64 [[TMP4357]], [[TMP4358]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6179]], label [[IF_THEN6181:%.*]], label [[IF_END6182:%.*]]
// SIMD-ONLY0:       if.then6181:
// SIMD-ONLY0-NEXT:    [[TMP4359:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4359]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6182]]
// SIMD-ONLY0:       if.end6182:
// SIMD-ONLY0-NEXT:    [[TMP4360:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4360]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4361:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4362:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6183:%.*]] = icmp eq i64 [[TMP4361]], [[TMP4362]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6183]], label [[IF_THEN6185:%.*]], label [[IF_END6186:%.*]]
// SIMD-ONLY0:       if.then6185:
// SIMD-ONLY0-NEXT:    [[TMP4363:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4363]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6186]]
// SIMD-ONLY0:       if.end6186:
// SIMD-ONLY0-NEXT:    [[TMP4364:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4365:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6187:%.*]] = icmp ugt i64 [[TMP4364]], [[TMP4365]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6187]], label [[IF_THEN6189:%.*]], label [[IF_END6190:%.*]]
// SIMD-ONLY0:       if.then6189:
// SIMD-ONLY0-NEXT:    [[TMP4366:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4366]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6190]]
// SIMD-ONLY0:       if.end6190:
// SIMD-ONLY0-NEXT:    [[TMP4367:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4367]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4368:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4369:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6191:%.*]] = icmp ugt i64 [[TMP4368]], [[TMP4369]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6191]], label [[IF_THEN6193:%.*]], label [[IF_END6194:%.*]]
// SIMD-ONLY0:       if.then6193:
// SIMD-ONLY0-NEXT:    [[TMP4370:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4370]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6194]]
// SIMD-ONLY0:       if.end6194:
// SIMD-ONLY0-NEXT:    [[TMP4371:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4371]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4372:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4373:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6195:%.*]] = icmp ult i64 [[TMP4372]], [[TMP4373]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6195]], label [[IF_THEN6197:%.*]], label [[IF_END6198:%.*]]
// SIMD-ONLY0:       if.then6197:
// SIMD-ONLY0-NEXT:    [[TMP4374:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4374]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6198]]
// SIMD-ONLY0:       if.end6198:
// SIMD-ONLY0-NEXT:    [[TMP4375:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4375]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4376:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4377:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6199:%.*]] = icmp ult i64 [[TMP4376]], [[TMP4377]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6199]], label [[IF_THEN6201:%.*]], label [[IF_END6202:%.*]]
// SIMD-ONLY0:       if.then6201:
// SIMD-ONLY0-NEXT:    [[TMP4378:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4378]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6202]]
// SIMD-ONLY0:       if.end6202:
// SIMD-ONLY0-NEXT:    [[TMP4379:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4379]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4380:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4381:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6203:%.*]] = icmp eq i64 [[TMP4380]], [[TMP4381]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6203]], label [[IF_THEN6205:%.*]], label [[IF_END6206:%.*]]
// SIMD-ONLY0:       if.then6205:
// SIMD-ONLY0-NEXT:    [[TMP4382:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4382]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6206]]
// SIMD-ONLY0:       if.end6206:
// SIMD-ONLY0-NEXT:    [[TMP4383:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4383]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4384:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4385:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6207:%.*]] = icmp eq i64 [[TMP4384]], [[TMP4385]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6207]], label [[IF_THEN6209:%.*]], label [[IF_END6210:%.*]]
// SIMD-ONLY0:       if.then6209:
// SIMD-ONLY0-NEXT:    [[TMP4386:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4386]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6210]]
// SIMD-ONLY0:       if.end6210:
// SIMD-ONLY0-NEXT:    [[TMP4387:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4387]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4388:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4389:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6211:%.*]] = icmp eq i64 [[TMP4388]], [[TMP4389]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6211]], label [[IF_THEN6213:%.*]], label [[IF_ELSE6214:%.*]]
// SIMD-ONLY0:       if.then6213:
// SIMD-ONLY0-NEXT:    [[TMP4390:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4390]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6215:%.*]]
// SIMD-ONLY0:       if.else6214:
// SIMD-ONLY0-NEXT:    [[TMP4391:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4391]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6215]]
// SIMD-ONLY0:       if.end6215:
// SIMD-ONLY0-NEXT:    [[TMP4392:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4393:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6216:%.*]] = icmp eq i64 [[TMP4392]], [[TMP4393]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6216]], label [[IF_THEN6218:%.*]], label [[IF_ELSE6219:%.*]]
// SIMD-ONLY0:       if.then6218:
// SIMD-ONLY0-NEXT:    [[TMP4394:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4394]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6220:%.*]]
// SIMD-ONLY0:       if.else6219:
// SIMD-ONLY0-NEXT:    [[TMP4395:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4395]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6220]]
// SIMD-ONLY0:       if.end6220:
// SIMD-ONLY0-NEXT:    [[TMP4396:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4397:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6221:%.*]] = icmp eq i64 [[TMP4396]], [[TMP4397]]
// SIMD-ONLY0-NEXT:    [[CONV6222:%.*]] = zext i1 [[CMP6221]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6223:%.*]] = sext i32 [[CONV6222]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6223]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4398:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6224:%.*]] = icmp ne i64 [[TMP4398]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6224]], label [[IF_THEN6225:%.*]], label [[IF_END6226:%.*]]
// SIMD-ONLY0:       if.then6225:
// SIMD-ONLY0-NEXT:    [[TMP4399:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4399]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6226]]
// SIMD-ONLY0:       if.end6226:
// SIMD-ONLY0-NEXT:    [[TMP4400:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4401:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6227:%.*]] = icmp eq i64 [[TMP4400]], [[TMP4401]]
// SIMD-ONLY0-NEXT:    [[CONV6228:%.*]] = zext i1 [[CMP6227]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6229:%.*]] = sext i32 [[CONV6228]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6229]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4402:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6230:%.*]] = icmp ne i64 [[TMP4402]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6230]], label [[IF_THEN6231:%.*]], label [[IF_END6232:%.*]]
// SIMD-ONLY0:       if.then6231:
// SIMD-ONLY0-NEXT:    [[TMP4403:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4403]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6232]]
// SIMD-ONLY0:       if.end6232:
// SIMD-ONLY0-NEXT:    [[TMP4404:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4405:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6233:%.*]] = icmp eq i64 [[TMP4404]], [[TMP4405]]
// SIMD-ONLY0-NEXT:    [[CONV6234:%.*]] = zext i1 [[CMP6233]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6235:%.*]] = sext i32 [[CONV6234]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6235]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4406:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6236:%.*]] = icmp ne i64 [[TMP4406]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6236]], label [[IF_THEN6237:%.*]], label [[IF_ELSE6238:%.*]]
// SIMD-ONLY0:       if.then6237:
// SIMD-ONLY0-NEXT:    [[TMP4407:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4407]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6239:%.*]]
// SIMD-ONLY0:       if.else6238:
// SIMD-ONLY0-NEXT:    [[TMP4408:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4408]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6239]]
// SIMD-ONLY0:       if.end6239:
// SIMD-ONLY0-NEXT:    [[TMP4409:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4410:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6240:%.*]] = icmp eq i64 [[TMP4409]], [[TMP4410]]
// SIMD-ONLY0-NEXT:    [[CONV6241:%.*]] = zext i1 [[CMP6240]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6242:%.*]] = sext i32 [[CONV6241]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6242]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4411:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6243:%.*]] = icmp ne i64 [[TMP4411]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6243]], label [[IF_THEN6244:%.*]], label [[IF_ELSE6245:%.*]]
// SIMD-ONLY0:       if.then6244:
// SIMD-ONLY0-NEXT:    [[TMP4412:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4412]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6246:%.*]]
// SIMD-ONLY0:       if.else6245:
// SIMD-ONLY0-NEXT:    [[TMP4413:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4413]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6246]]
// SIMD-ONLY0:       if.end6246:
// SIMD-ONLY0-NEXT:    [[TMP4414:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4414]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4415:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4416:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6247:%.*]] = icmp ugt i64 [[TMP4415]], [[TMP4416]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6247]], label [[IF_THEN6249:%.*]], label [[IF_END6250:%.*]]
// SIMD-ONLY0:       if.then6249:
// SIMD-ONLY0-NEXT:    [[TMP4417:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4417]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6250]]
// SIMD-ONLY0:       if.end6250:
// SIMD-ONLY0-NEXT:    [[TMP4418:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4418]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4419:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4420:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6251:%.*]] = icmp ugt i64 [[TMP4419]], [[TMP4420]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6251]], label [[IF_THEN6253:%.*]], label [[IF_END6254:%.*]]
// SIMD-ONLY0:       if.then6253:
// SIMD-ONLY0-NEXT:    [[TMP4421:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4421]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6254]]
// SIMD-ONLY0:       if.end6254:
// SIMD-ONLY0-NEXT:    [[TMP4422:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4422]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4423:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4424:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6255:%.*]] = icmp ult i64 [[TMP4423]], [[TMP4424]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6255]], label [[IF_THEN6257:%.*]], label [[IF_END6258:%.*]]
// SIMD-ONLY0:       if.then6257:
// SIMD-ONLY0-NEXT:    [[TMP4425:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4425]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6258]]
// SIMD-ONLY0:       if.end6258:
// SIMD-ONLY0-NEXT:    [[TMP4426:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4426]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4427:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4428:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6259:%.*]] = icmp ult i64 [[TMP4427]], [[TMP4428]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6259]], label [[IF_THEN6261:%.*]], label [[IF_END6262:%.*]]
// SIMD-ONLY0:       if.then6261:
// SIMD-ONLY0-NEXT:    [[TMP4429:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4429]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6262]]
// SIMD-ONLY0:       if.end6262:
// SIMD-ONLY0-NEXT:    [[TMP4430:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4430]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4431:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4432:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6263:%.*]] = icmp eq i64 [[TMP4431]], [[TMP4432]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6263]], label [[IF_THEN6265:%.*]], label [[IF_END6266:%.*]]
// SIMD-ONLY0:       if.then6265:
// SIMD-ONLY0-NEXT:    [[TMP4433:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4433]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6266]]
// SIMD-ONLY0:       if.end6266:
// SIMD-ONLY0-NEXT:    [[TMP4434:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4434]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4435:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4436:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6267:%.*]] = icmp eq i64 [[TMP4435]], [[TMP4436]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6267]], label [[IF_THEN6269:%.*]], label [[IF_END6270:%.*]]
// SIMD-ONLY0:       if.then6269:
// SIMD-ONLY0-NEXT:    [[TMP4437:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4437]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6270]]
// SIMD-ONLY0:       if.end6270:
// SIMD-ONLY0-NEXT:    [[TMP4438:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4439:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6271:%.*]] = icmp ugt i64 [[TMP4438]], [[TMP4439]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6271]], label [[IF_THEN6273:%.*]], label [[IF_END6274:%.*]]
// SIMD-ONLY0:       if.then6273:
// SIMD-ONLY0-NEXT:    [[TMP4440:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4440]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6274]]
// SIMD-ONLY0:       if.end6274:
// SIMD-ONLY0-NEXT:    [[TMP4441:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4441]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4442:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4443:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6275:%.*]] = icmp ugt i64 [[TMP4442]], [[TMP4443]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6275]], label [[IF_THEN6277:%.*]], label [[IF_END6278:%.*]]
// SIMD-ONLY0:       if.then6277:
// SIMD-ONLY0-NEXT:    [[TMP4444:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4444]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6278]]
// SIMD-ONLY0:       if.end6278:
// SIMD-ONLY0-NEXT:    [[TMP4445:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4445]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4446:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4447:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6279:%.*]] = icmp ult i64 [[TMP4446]], [[TMP4447]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6279]], label [[IF_THEN6281:%.*]], label [[IF_END6282:%.*]]
// SIMD-ONLY0:       if.then6281:
// SIMD-ONLY0-NEXT:    [[TMP4448:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4448]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6282]]
// SIMD-ONLY0:       if.end6282:
// SIMD-ONLY0-NEXT:    [[TMP4449:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4449]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4450:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4451:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6283:%.*]] = icmp ult i64 [[TMP4450]], [[TMP4451]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6283]], label [[IF_THEN6285:%.*]], label [[IF_END6286:%.*]]
// SIMD-ONLY0:       if.then6285:
// SIMD-ONLY0-NEXT:    [[TMP4452:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4452]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6286]]
// SIMD-ONLY0:       if.end6286:
// SIMD-ONLY0-NEXT:    [[TMP4453:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4453]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4454:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4455:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6287:%.*]] = icmp eq i64 [[TMP4454]], [[TMP4455]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6287]], label [[IF_THEN6289:%.*]], label [[IF_END6290:%.*]]
// SIMD-ONLY0:       if.then6289:
// SIMD-ONLY0-NEXT:    [[TMP4456:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4456]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6290]]
// SIMD-ONLY0:       if.end6290:
// SIMD-ONLY0-NEXT:    [[TMP4457:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4457]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4458:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4459:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6291:%.*]] = icmp eq i64 [[TMP4458]], [[TMP4459]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6291]], label [[IF_THEN6293:%.*]], label [[IF_END6294:%.*]]
// SIMD-ONLY0:       if.then6293:
// SIMD-ONLY0-NEXT:    [[TMP4460:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4460]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6294]]
// SIMD-ONLY0:       if.end6294:
// SIMD-ONLY0-NEXT:    [[TMP4461:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4461]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4462:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4463:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6295:%.*]] = icmp eq i64 [[TMP4462]], [[TMP4463]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6295]], label [[IF_THEN6297:%.*]], label [[IF_ELSE6298:%.*]]
// SIMD-ONLY0:       if.then6297:
// SIMD-ONLY0-NEXT:    [[TMP4464:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4464]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6299:%.*]]
// SIMD-ONLY0:       if.else6298:
// SIMD-ONLY0-NEXT:    [[TMP4465:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4465]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6299]]
// SIMD-ONLY0:       if.end6299:
// SIMD-ONLY0-NEXT:    [[TMP4466:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4467:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6300:%.*]] = icmp eq i64 [[TMP4466]], [[TMP4467]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6300]], label [[IF_THEN6302:%.*]], label [[IF_ELSE6303:%.*]]
// SIMD-ONLY0:       if.then6302:
// SIMD-ONLY0-NEXT:    [[TMP4468:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4468]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6304:%.*]]
// SIMD-ONLY0:       if.else6303:
// SIMD-ONLY0-NEXT:    [[TMP4469:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4469]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6304]]
// SIMD-ONLY0:       if.end6304:
// SIMD-ONLY0-NEXT:    [[TMP4470:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4471:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6305:%.*]] = icmp eq i64 [[TMP4470]], [[TMP4471]]
// SIMD-ONLY0-NEXT:    [[CONV6306:%.*]] = zext i1 [[CMP6305]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6307:%.*]] = sext i32 [[CONV6306]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6307]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4472:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6308:%.*]] = icmp ne i64 [[TMP4472]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6308]], label [[IF_THEN6309:%.*]], label [[IF_END6310:%.*]]
// SIMD-ONLY0:       if.then6309:
// SIMD-ONLY0-NEXT:    [[TMP4473:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4473]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6310]]
// SIMD-ONLY0:       if.end6310:
// SIMD-ONLY0-NEXT:    [[TMP4474:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4475:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6311:%.*]] = icmp eq i64 [[TMP4474]], [[TMP4475]]
// SIMD-ONLY0-NEXT:    [[CONV6312:%.*]] = zext i1 [[CMP6311]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6313:%.*]] = sext i32 [[CONV6312]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6313]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4476:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6314:%.*]] = icmp ne i64 [[TMP4476]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6314]], label [[IF_THEN6315:%.*]], label [[IF_END6316:%.*]]
// SIMD-ONLY0:       if.then6315:
// SIMD-ONLY0-NEXT:    [[TMP4477:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4477]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6316]]
// SIMD-ONLY0:       if.end6316:
// SIMD-ONLY0-NEXT:    [[TMP4478:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4479:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6317:%.*]] = icmp eq i64 [[TMP4478]], [[TMP4479]]
// SIMD-ONLY0-NEXT:    [[CONV6318:%.*]] = zext i1 [[CMP6317]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6319:%.*]] = sext i32 [[CONV6318]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6319]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4480:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6320:%.*]] = icmp ne i64 [[TMP4480]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6320]], label [[IF_THEN6321:%.*]], label [[IF_ELSE6322:%.*]]
// SIMD-ONLY0:       if.then6321:
// SIMD-ONLY0-NEXT:    [[TMP4481:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4481]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6323:%.*]]
// SIMD-ONLY0:       if.else6322:
// SIMD-ONLY0-NEXT:    [[TMP4482:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4482]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6323]]
// SIMD-ONLY0:       if.end6323:
// SIMD-ONLY0-NEXT:    [[TMP4483:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4484:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6324:%.*]] = icmp eq i64 [[TMP4483]], [[TMP4484]]
// SIMD-ONLY0-NEXT:    [[CONV6325:%.*]] = zext i1 [[CMP6324]] to i32
// SIMD-ONLY0-NEXT:    [[CONV6326:%.*]] = sext i32 [[CONV6325]] to i64
// SIMD-ONLY0-NEXT:    store i64 [[CONV6326]], ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4485:%.*]] = load i64, ptr [[ULLR]], align 8
// SIMD-ONLY0-NEXT:    [[TOBOOL6327:%.*]] = icmp ne i64 [[TMP4485]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6327]], label [[IF_THEN6328:%.*]], label [[IF_ELSE6329:%.*]]
// SIMD-ONLY0:       if.then6328:
// SIMD-ONLY0-NEXT:    [[TMP4486:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4486]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6330:%.*]]
// SIMD-ONLY0:       if.else6329:
// SIMD-ONLY0-NEXT:    [[TMP4487:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP4487]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6330]]
// SIMD-ONLY0:       if.end6330:
// SIMD-ONLY0-NEXT:    [[TMP4488:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4488]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4489:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4490:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6331:%.*]] = fcmp ogt float [[TMP4489]], [[TMP4490]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6331]], label [[IF_THEN6333:%.*]], label [[IF_END6334:%.*]]
// SIMD-ONLY0:       if.then6333:
// SIMD-ONLY0-NEXT:    [[TMP4491:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4491]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6334]]
// SIMD-ONLY0:       if.end6334:
// SIMD-ONLY0-NEXT:    [[TMP4492:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4492]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4493:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4494:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6335:%.*]] = fcmp ogt float [[TMP4493]], [[TMP4494]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6335]], label [[IF_THEN6337:%.*]], label [[IF_END6338:%.*]]
// SIMD-ONLY0:       if.then6337:
// SIMD-ONLY0-NEXT:    [[TMP4495:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4495]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6338]]
// SIMD-ONLY0:       if.end6338:
// SIMD-ONLY0-NEXT:    [[TMP4496:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4496]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4497:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4498:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6339:%.*]] = fcmp olt float [[TMP4497]], [[TMP4498]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6339]], label [[IF_THEN6341:%.*]], label [[IF_END6342:%.*]]
// SIMD-ONLY0:       if.then6341:
// SIMD-ONLY0-NEXT:    [[TMP4499:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4499]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6342]]
// SIMD-ONLY0:       if.end6342:
// SIMD-ONLY0-NEXT:    [[TMP4500:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4500]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4501:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4502:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6343:%.*]] = fcmp olt float [[TMP4501]], [[TMP4502]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6343]], label [[IF_THEN6345:%.*]], label [[IF_END6346:%.*]]
// SIMD-ONLY0:       if.then6345:
// SIMD-ONLY0-NEXT:    [[TMP4503:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4503]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6346]]
// SIMD-ONLY0:       if.end6346:
// SIMD-ONLY0-NEXT:    [[TMP4504:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4504]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4505:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4506:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6347:%.*]] = fcmp oeq float [[TMP4505]], [[TMP4506]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6347]], label [[IF_THEN6349:%.*]], label [[IF_END6350:%.*]]
// SIMD-ONLY0:       if.then6349:
// SIMD-ONLY0-NEXT:    [[TMP4507:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4507]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6350]]
// SIMD-ONLY0:       if.end6350:
// SIMD-ONLY0-NEXT:    [[TMP4508:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4508]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4509:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4510:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6351:%.*]] = fcmp oeq float [[TMP4509]], [[TMP4510]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6351]], label [[IF_THEN6353:%.*]], label [[IF_END6354:%.*]]
// SIMD-ONLY0:       if.then6353:
// SIMD-ONLY0-NEXT:    [[TMP4511:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4511]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6354]]
// SIMD-ONLY0:       if.end6354:
// SIMD-ONLY0-NEXT:    [[TMP4512:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4513:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6355:%.*]] = fcmp ogt float [[TMP4512]], [[TMP4513]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6355]], label [[IF_THEN6357:%.*]], label [[IF_END6358:%.*]]
// SIMD-ONLY0:       if.then6357:
// SIMD-ONLY0-NEXT:    [[TMP4514:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4514]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6358]]
// SIMD-ONLY0:       if.end6358:
// SIMD-ONLY0-NEXT:    [[TMP4515:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4515]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4516:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4517:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6359:%.*]] = fcmp ogt float [[TMP4516]], [[TMP4517]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6359]], label [[IF_THEN6361:%.*]], label [[IF_END6362:%.*]]
// SIMD-ONLY0:       if.then6361:
// SIMD-ONLY0-NEXT:    [[TMP4518:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4518]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6362]]
// SIMD-ONLY0:       if.end6362:
// SIMD-ONLY0-NEXT:    [[TMP4519:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4519]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4520:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4521:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6363:%.*]] = fcmp olt float [[TMP4520]], [[TMP4521]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6363]], label [[IF_THEN6365:%.*]], label [[IF_END6366:%.*]]
// SIMD-ONLY0:       if.then6365:
// SIMD-ONLY0-NEXT:    [[TMP4522:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4522]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6366]]
// SIMD-ONLY0:       if.end6366:
// SIMD-ONLY0-NEXT:    [[TMP4523:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4523]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4524:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4525:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6367:%.*]] = fcmp olt float [[TMP4524]], [[TMP4525]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6367]], label [[IF_THEN6369:%.*]], label [[IF_END6370:%.*]]
// SIMD-ONLY0:       if.then6369:
// SIMD-ONLY0-NEXT:    [[TMP4526:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4526]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6370]]
// SIMD-ONLY0:       if.end6370:
// SIMD-ONLY0-NEXT:    [[TMP4527:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4527]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4528:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4529:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6371:%.*]] = fcmp oeq float [[TMP4528]], [[TMP4529]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6371]], label [[IF_THEN6373:%.*]], label [[IF_END6374:%.*]]
// SIMD-ONLY0:       if.then6373:
// SIMD-ONLY0-NEXT:    [[TMP4530:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4530]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6374]]
// SIMD-ONLY0:       if.end6374:
// SIMD-ONLY0-NEXT:    [[TMP4531:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4531]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4532:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4533:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6375:%.*]] = fcmp oeq float [[TMP4532]], [[TMP4533]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6375]], label [[IF_THEN6377:%.*]], label [[IF_END6378:%.*]]
// SIMD-ONLY0:       if.then6377:
// SIMD-ONLY0-NEXT:    [[TMP4534:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4534]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6378]]
// SIMD-ONLY0:       if.end6378:
// SIMD-ONLY0-NEXT:    [[TMP4535:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4535]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4536:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4537:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6379:%.*]] = fcmp oeq float [[TMP4536]], [[TMP4537]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6379]], label [[IF_THEN6381:%.*]], label [[IF_ELSE6382:%.*]]
// SIMD-ONLY0:       if.then6381:
// SIMD-ONLY0-NEXT:    [[TMP4538:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4538]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6383:%.*]]
// SIMD-ONLY0:       if.else6382:
// SIMD-ONLY0-NEXT:    [[TMP4539:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4539]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6383]]
// SIMD-ONLY0:       if.end6383:
// SIMD-ONLY0-NEXT:    [[TMP4540:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4541:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6384:%.*]] = fcmp oeq float [[TMP4540]], [[TMP4541]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6384]], label [[IF_THEN6386:%.*]], label [[IF_ELSE6387:%.*]]
// SIMD-ONLY0:       if.then6386:
// SIMD-ONLY0-NEXT:    [[TMP4542:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4542]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6388:%.*]]
// SIMD-ONLY0:       if.else6387:
// SIMD-ONLY0-NEXT:    [[TMP4543:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4543]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6388]]
// SIMD-ONLY0:       if.end6388:
// SIMD-ONLY0-NEXT:    [[TMP4544:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4545:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6389:%.*]] = fcmp oeq float [[TMP4544]], [[TMP4545]]
// SIMD-ONLY0-NEXT:    [[CONV6390:%.*]] = zext i1 [[CMP6389]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6390]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4546:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6391:%.*]] = icmp ne i32 [[TMP4546]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6391]], label [[IF_THEN6392:%.*]], label [[IF_END6393:%.*]]
// SIMD-ONLY0:       if.then6392:
// SIMD-ONLY0-NEXT:    [[TMP4547:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4547]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6393]]
// SIMD-ONLY0:       if.end6393:
// SIMD-ONLY0-NEXT:    [[TMP4548:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4549:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6394:%.*]] = fcmp oeq float [[TMP4548]], [[TMP4549]]
// SIMD-ONLY0-NEXT:    [[CONV6395:%.*]] = zext i1 [[CMP6394]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6395]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4550:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6396:%.*]] = icmp ne i32 [[TMP4550]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6396]], label [[IF_THEN6397:%.*]], label [[IF_END6398:%.*]]
// SIMD-ONLY0:       if.then6397:
// SIMD-ONLY0-NEXT:    [[TMP4551:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4551]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6398]]
// SIMD-ONLY0:       if.end6398:
// SIMD-ONLY0-NEXT:    [[TMP4552:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4553:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6399:%.*]] = fcmp oeq float [[TMP4552]], [[TMP4553]]
// SIMD-ONLY0-NEXT:    [[CONV6400:%.*]] = zext i1 [[CMP6399]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6400]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4554:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6401:%.*]] = icmp ne i32 [[TMP4554]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6401]], label [[IF_THEN6402:%.*]], label [[IF_ELSE6403:%.*]]
// SIMD-ONLY0:       if.then6402:
// SIMD-ONLY0-NEXT:    [[TMP4555:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4555]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6404:%.*]]
// SIMD-ONLY0:       if.else6403:
// SIMD-ONLY0-NEXT:    [[TMP4556:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4556]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6404]]
// SIMD-ONLY0:       if.end6404:
// SIMD-ONLY0-NEXT:    [[TMP4557:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4558:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6405:%.*]] = fcmp oeq float [[TMP4557]], [[TMP4558]]
// SIMD-ONLY0-NEXT:    [[CONV6406:%.*]] = zext i1 [[CMP6405]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6406]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4559:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6407:%.*]] = icmp ne i32 [[TMP4559]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6407]], label [[IF_THEN6408:%.*]], label [[IF_ELSE6409:%.*]]
// SIMD-ONLY0:       if.then6408:
// SIMD-ONLY0-NEXT:    [[TMP4560:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4560]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6410:%.*]]
// SIMD-ONLY0:       if.else6409:
// SIMD-ONLY0-NEXT:    [[TMP4561:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4561]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6410]]
// SIMD-ONLY0:       if.end6410:
// SIMD-ONLY0-NEXT:    [[TMP4562:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4562]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4563:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4564:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6411:%.*]] = fcmp ogt float [[TMP4563]], [[TMP4564]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6411]], label [[IF_THEN6413:%.*]], label [[IF_END6414:%.*]]
// SIMD-ONLY0:       if.then6413:
// SIMD-ONLY0-NEXT:    [[TMP4565:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4565]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6414]]
// SIMD-ONLY0:       if.end6414:
// SIMD-ONLY0-NEXT:    [[TMP4566:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4566]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4567:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4568:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6415:%.*]] = fcmp ogt float [[TMP4567]], [[TMP4568]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6415]], label [[IF_THEN6417:%.*]], label [[IF_END6418:%.*]]
// SIMD-ONLY0:       if.then6417:
// SIMD-ONLY0-NEXT:    [[TMP4569:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4569]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6418]]
// SIMD-ONLY0:       if.end6418:
// SIMD-ONLY0-NEXT:    [[TMP4570:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4570]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4571:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4572:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6419:%.*]] = fcmp olt float [[TMP4571]], [[TMP4572]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6419]], label [[IF_THEN6421:%.*]], label [[IF_END6422:%.*]]
// SIMD-ONLY0:       if.then6421:
// SIMD-ONLY0-NEXT:    [[TMP4573:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4573]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6422]]
// SIMD-ONLY0:       if.end6422:
// SIMD-ONLY0-NEXT:    [[TMP4574:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4574]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4575:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4576:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6423:%.*]] = fcmp olt float [[TMP4575]], [[TMP4576]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6423]], label [[IF_THEN6425:%.*]], label [[IF_END6426:%.*]]
// SIMD-ONLY0:       if.then6425:
// SIMD-ONLY0-NEXT:    [[TMP4577:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4577]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6426]]
// SIMD-ONLY0:       if.end6426:
// SIMD-ONLY0-NEXT:    [[TMP4578:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4578]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4579:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4580:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6427:%.*]] = fcmp oeq float [[TMP4579]], [[TMP4580]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6427]], label [[IF_THEN6429:%.*]], label [[IF_END6430:%.*]]
// SIMD-ONLY0:       if.then6429:
// SIMD-ONLY0-NEXT:    [[TMP4581:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4581]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6430]]
// SIMD-ONLY0:       if.end6430:
// SIMD-ONLY0-NEXT:    [[TMP4582:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4582]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4583:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4584:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6431:%.*]] = fcmp oeq float [[TMP4583]], [[TMP4584]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6431]], label [[IF_THEN6433:%.*]], label [[IF_END6434:%.*]]
// SIMD-ONLY0:       if.then6433:
// SIMD-ONLY0-NEXT:    [[TMP4585:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4585]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6434]]
// SIMD-ONLY0:       if.end6434:
// SIMD-ONLY0-NEXT:    [[TMP4586:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4587:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6435:%.*]] = fcmp ogt float [[TMP4586]], [[TMP4587]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6435]], label [[IF_THEN6437:%.*]], label [[IF_END6438:%.*]]
// SIMD-ONLY0:       if.then6437:
// SIMD-ONLY0-NEXT:    [[TMP4588:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4588]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6438]]
// SIMD-ONLY0:       if.end6438:
// SIMD-ONLY0-NEXT:    [[TMP4589:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4589]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4590:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4591:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6439:%.*]] = fcmp ogt float [[TMP4590]], [[TMP4591]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6439]], label [[IF_THEN6441:%.*]], label [[IF_END6442:%.*]]
// SIMD-ONLY0:       if.then6441:
// SIMD-ONLY0-NEXT:    [[TMP4592:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4592]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6442]]
// SIMD-ONLY0:       if.end6442:
// SIMD-ONLY0-NEXT:    [[TMP4593:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4593]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4594:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4595:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6443:%.*]] = fcmp olt float [[TMP4594]], [[TMP4595]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6443]], label [[IF_THEN6445:%.*]], label [[IF_END6446:%.*]]
// SIMD-ONLY0:       if.then6445:
// SIMD-ONLY0-NEXT:    [[TMP4596:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4596]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6446]]
// SIMD-ONLY0:       if.end6446:
// SIMD-ONLY0-NEXT:    [[TMP4597:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4597]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4598:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4599:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6447:%.*]] = fcmp olt float [[TMP4598]], [[TMP4599]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6447]], label [[IF_THEN6449:%.*]], label [[IF_END6450:%.*]]
// SIMD-ONLY0:       if.then6449:
// SIMD-ONLY0-NEXT:    [[TMP4600:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4600]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6450]]
// SIMD-ONLY0:       if.end6450:
// SIMD-ONLY0-NEXT:    [[TMP4601:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4601]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4602:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4603:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6451:%.*]] = fcmp oeq float [[TMP4602]], [[TMP4603]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6451]], label [[IF_THEN6453:%.*]], label [[IF_END6454:%.*]]
// SIMD-ONLY0:       if.then6453:
// SIMD-ONLY0-NEXT:    [[TMP4604:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4604]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6454]]
// SIMD-ONLY0:       if.end6454:
// SIMD-ONLY0-NEXT:    [[TMP4605:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4605]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4606:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4607:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6455:%.*]] = fcmp oeq float [[TMP4606]], [[TMP4607]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6455]], label [[IF_THEN6457:%.*]], label [[IF_END6458:%.*]]
// SIMD-ONLY0:       if.then6457:
// SIMD-ONLY0-NEXT:    [[TMP4608:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4608]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6458]]
// SIMD-ONLY0:       if.end6458:
// SIMD-ONLY0-NEXT:    [[TMP4609:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4609]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4610:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4611:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6459:%.*]] = fcmp oeq float [[TMP4610]], [[TMP4611]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6459]], label [[IF_THEN6461:%.*]], label [[IF_ELSE6462:%.*]]
// SIMD-ONLY0:       if.then6461:
// SIMD-ONLY0-NEXT:    [[TMP4612:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4612]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6463:%.*]]
// SIMD-ONLY0:       if.else6462:
// SIMD-ONLY0-NEXT:    [[TMP4613:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4613]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6463]]
// SIMD-ONLY0:       if.end6463:
// SIMD-ONLY0-NEXT:    [[TMP4614:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4615:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6464:%.*]] = fcmp oeq float [[TMP4614]], [[TMP4615]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6464]], label [[IF_THEN6466:%.*]], label [[IF_ELSE6467:%.*]]
// SIMD-ONLY0:       if.then6466:
// SIMD-ONLY0-NEXT:    [[TMP4616:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4616]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6468:%.*]]
// SIMD-ONLY0:       if.else6467:
// SIMD-ONLY0-NEXT:    [[TMP4617:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4617]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6468]]
// SIMD-ONLY0:       if.end6468:
// SIMD-ONLY0-NEXT:    [[TMP4618:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4619:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6469:%.*]] = fcmp oeq float [[TMP4618]], [[TMP4619]]
// SIMD-ONLY0-NEXT:    [[CONV6470:%.*]] = zext i1 [[CMP6469]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6470]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4620:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6471:%.*]] = icmp ne i32 [[TMP4620]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6471]], label [[IF_THEN6472:%.*]], label [[IF_END6473:%.*]]
// SIMD-ONLY0:       if.then6472:
// SIMD-ONLY0-NEXT:    [[TMP4621:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4621]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6473]]
// SIMD-ONLY0:       if.end6473:
// SIMD-ONLY0-NEXT:    [[TMP4622:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4623:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6474:%.*]] = fcmp oeq float [[TMP4622]], [[TMP4623]]
// SIMD-ONLY0-NEXT:    [[CONV6475:%.*]] = zext i1 [[CMP6474]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6475]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4624:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6476:%.*]] = icmp ne i32 [[TMP4624]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6476]], label [[IF_THEN6477:%.*]], label [[IF_END6478:%.*]]
// SIMD-ONLY0:       if.then6477:
// SIMD-ONLY0-NEXT:    [[TMP4625:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4625]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6478]]
// SIMD-ONLY0:       if.end6478:
// SIMD-ONLY0-NEXT:    [[TMP4626:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4627:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6479:%.*]] = fcmp oeq float [[TMP4626]], [[TMP4627]]
// SIMD-ONLY0-NEXT:    [[CONV6480:%.*]] = zext i1 [[CMP6479]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6480]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4628:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6481:%.*]] = icmp ne i32 [[TMP4628]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6481]], label [[IF_THEN6482:%.*]], label [[IF_ELSE6483:%.*]]
// SIMD-ONLY0:       if.then6482:
// SIMD-ONLY0-NEXT:    [[TMP4629:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4629]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6484:%.*]]
// SIMD-ONLY0:       if.else6483:
// SIMD-ONLY0-NEXT:    [[TMP4630:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4630]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6484]]
// SIMD-ONLY0:       if.end6484:
// SIMD-ONLY0-NEXT:    [[TMP4631:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4632:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6485:%.*]] = fcmp oeq float [[TMP4631]], [[TMP4632]]
// SIMD-ONLY0-NEXT:    [[CONV6486:%.*]] = zext i1 [[CMP6485]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6486]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4633:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6487:%.*]] = icmp ne i32 [[TMP4633]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6487]], label [[IF_THEN6488:%.*]], label [[IF_ELSE6489:%.*]]
// SIMD-ONLY0:       if.then6488:
// SIMD-ONLY0-NEXT:    [[TMP4634:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4634]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6490:%.*]]
// SIMD-ONLY0:       if.else6489:
// SIMD-ONLY0-NEXT:    [[TMP4635:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4635]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6490]]
// SIMD-ONLY0:       if.end6490:
// SIMD-ONLY0-NEXT:    [[TMP4636:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4636]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4637:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4638:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6491:%.*]] = fcmp ogt float [[TMP4637]], [[TMP4638]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6491]], label [[IF_THEN6493:%.*]], label [[IF_END6494:%.*]]
// SIMD-ONLY0:       if.then6493:
// SIMD-ONLY0-NEXT:    [[TMP4639:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4639]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6494]]
// SIMD-ONLY0:       if.end6494:
// SIMD-ONLY0-NEXT:    [[TMP4640:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4640]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4641:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4642:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6495:%.*]] = fcmp ogt float [[TMP4641]], [[TMP4642]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6495]], label [[IF_THEN6497:%.*]], label [[IF_END6498:%.*]]
// SIMD-ONLY0:       if.then6497:
// SIMD-ONLY0-NEXT:    [[TMP4643:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4643]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6498]]
// SIMD-ONLY0:       if.end6498:
// SIMD-ONLY0-NEXT:    [[TMP4644:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4644]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4645:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4646:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6499:%.*]] = fcmp olt float [[TMP4645]], [[TMP4646]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6499]], label [[IF_THEN6501:%.*]], label [[IF_END6502:%.*]]
// SIMD-ONLY0:       if.then6501:
// SIMD-ONLY0-NEXT:    [[TMP4647:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4647]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6502]]
// SIMD-ONLY0:       if.end6502:
// SIMD-ONLY0-NEXT:    [[TMP4648:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4648]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4649:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4650:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6503:%.*]] = fcmp olt float [[TMP4649]], [[TMP4650]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6503]], label [[IF_THEN6505:%.*]], label [[IF_END6506:%.*]]
// SIMD-ONLY0:       if.then6505:
// SIMD-ONLY0-NEXT:    [[TMP4651:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4651]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6506]]
// SIMD-ONLY0:       if.end6506:
// SIMD-ONLY0-NEXT:    [[TMP4652:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4652]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4653:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4654:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6507:%.*]] = fcmp oeq float [[TMP4653]], [[TMP4654]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6507]], label [[IF_THEN6509:%.*]], label [[IF_END6510:%.*]]
// SIMD-ONLY0:       if.then6509:
// SIMD-ONLY0-NEXT:    [[TMP4655:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4655]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6510]]
// SIMD-ONLY0:       if.end6510:
// SIMD-ONLY0-NEXT:    [[TMP4656:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4656]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4657:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4658:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6511:%.*]] = fcmp oeq float [[TMP4657]], [[TMP4658]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6511]], label [[IF_THEN6513:%.*]], label [[IF_END6514:%.*]]
// SIMD-ONLY0:       if.then6513:
// SIMD-ONLY0-NEXT:    [[TMP4659:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4659]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6514]]
// SIMD-ONLY0:       if.end6514:
// SIMD-ONLY0-NEXT:    [[TMP4660:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4661:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6515:%.*]] = fcmp ogt float [[TMP4660]], [[TMP4661]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6515]], label [[IF_THEN6517:%.*]], label [[IF_END6518:%.*]]
// SIMD-ONLY0:       if.then6517:
// SIMD-ONLY0-NEXT:    [[TMP4662:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4662]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6518]]
// SIMD-ONLY0:       if.end6518:
// SIMD-ONLY0-NEXT:    [[TMP4663:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4663]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4664:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4665:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6519:%.*]] = fcmp ogt float [[TMP4664]], [[TMP4665]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6519]], label [[IF_THEN6521:%.*]], label [[IF_END6522:%.*]]
// SIMD-ONLY0:       if.then6521:
// SIMD-ONLY0-NEXT:    [[TMP4666:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4666]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6522]]
// SIMD-ONLY0:       if.end6522:
// SIMD-ONLY0-NEXT:    [[TMP4667:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4667]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4668:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4669:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6523:%.*]] = fcmp olt float [[TMP4668]], [[TMP4669]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6523]], label [[IF_THEN6525:%.*]], label [[IF_END6526:%.*]]
// SIMD-ONLY0:       if.then6525:
// SIMD-ONLY0-NEXT:    [[TMP4670:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4670]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6526]]
// SIMD-ONLY0:       if.end6526:
// SIMD-ONLY0-NEXT:    [[TMP4671:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4671]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4672:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4673:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6527:%.*]] = fcmp olt float [[TMP4672]], [[TMP4673]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6527]], label [[IF_THEN6529:%.*]], label [[IF_END6530:%.*]]
// SIMD-ONLY0:       if.then6529:
// SIMD-ONLY0-NEXT:    [[TMP4674:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4674]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6530]]
// SIMD-ONLY0:       if.end6530:
// SIMD-ONLY0-NEXT:    [[TMP4675:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4675]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4676:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4677:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6531:%.*]] = fcmp oeq float [[TMP4676]], [[TMP4677]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6531]], label [[IF_THEN6533:%.*]], label [[IF_END6534:%.*]]
// SIMD-ONLY0:       if.then6533:
// SIMD-ONLY0-NEXT:    [[TMP4678:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4678]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6534]]
// SIMD-ONLY0:       if.end6534:
// SIMD-ONLY0-NEXT:    [[TMP4679:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4679]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4680:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4681:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6535:%.*]] = fcmp oeq float [[TMP4680]], [[TMP4681]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6535]], label [[IF_THEN6537:%.*]], label [[IF_END6538:%.*]]
// SIMD-ONLY0:       if.then6537:
// SIMD-ONLY0-NEXT:    [[TMP4682:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4682]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6538]]
// SIMD-ONLY0:       if.end6538:
// SIMD-ONLY0-NEXT:    [[TMP4683:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4683]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4684:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4685:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6539:%.*]] = fcmp oeq float [[TMP4684]], [[TMP4685]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6539]], label [[IF_THEN6541:%.*]], label [[IF_ELSE6542:%.*]]
// SIMD-ONLY0:       if.then6541:
// SIMD-ONLY0-NEXT:    [[TMP4686:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4686]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6543:%.*]]
// SIMD-ONLY0:       if.else6542:
// SIMD-ONLY0-NEXT:    [[TMP4687:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4687]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6543]]
// SIMD-ONLY0:       if.end6543:
// SIMD-ONLY0-NEXT:    [[TMP4688:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4689:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6544:%.*]] = fcmp oeq float [[TMP4688]], [[TMP4689]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6544]], label [[IF_THEN6546:%.*]], label [[IF_ELSE6547:%.*]]
// SIMD-ONLY0:       if.then6546:
// SIMD-ONLY0-NEXT:    [[TMP4690:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4690]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6548:%.*]]
// SIMD-ONLY0:       if.else6547:
// SIMD-ONLY0-NEXT:    [[TMP4691:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4691]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6548]]
// SIMD-ONLY0:       if.end6548:
// SIMD-ONLY0-NEXT:    [[TMP4692:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4693:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6549:%.*]] = fcmp oeq float [[TMP4692]], [[TMP4693]]
// SIMD-ONLY0-NEXT:    [[CONV6550:%.*]] = zext i1 [[CMP6549]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6550]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4694:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6551:%.*]] = icmp ne i32 [[TMP4694]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6551]], label [[IF_THEN6552:%.*]], label [[IF_END6553:%.*]]
// SIMD-ONLY0:       if.then6552:
// SIMD-ONLY0-NEXT:    [[TMP4695:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4695]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6553]]
// SIMD-ONLY0:       if.end6553:
// SIMD-ONLY0-NEXT:    [[TMP4696:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4697:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6554:%.*]] = fcmp oeq float [[TMP4696]], [[TMP4697]]
// SIMD-ONLY0-NEXT:    [[CONV6555:%.*]] = zext i1 [[CMP6554]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6555]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4698:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6556:%.*]] = icmp ne i32 [[TMP4698]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6556]], label [[IF_THEN6557:%.*]], label [[IF_END6558:%.*]]
// SIMD-ONLY0:       if.then6557:
// SIMD-ONLY0-NEXT:    [[TMP4699:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4699]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6558]]
// SIMD-ONLY0:       if.end6558:
// SIMD-ONLY0-NEXT:    [[TMP4700:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4701:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6559:%.*]] = fcmp oeq float [[TMP4700]], [[TMP4701]]
// SIMD-ONLY0-NEXT:    [[CONV6560:%.*]] = zext i1 [[CMP6559]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6560]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4702:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6561:%.*]] = icmp ne i32 [[TMP4702]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6561]], label [[IF_THEN6562:%.*]], label [[IF_ELSE6563:%.*]]
// SIMD-ONLY0:       if.then6562:
// SIMD-ONLY0-NEXT:    [[TMP4703:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4703]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6564:%.*]]
// SIMD-ONLY0:       if.else6563:
// SIMD-ONLY0-NEXT:    [[TMP4704:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4704]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6564]]
// SIMD-ONLY0:       if.end6564:
// SIMD-ONLY0-NEXT:    [[TMP4705:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4706:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6565:%.*]] = fcmp oeq float [[TMP4705]], [[TMP4706]]
// SIMD-ONLY0-NEXT:    [[CONV6566:%.*]] = zext i1 [[CMP6565]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6566]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4707:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6567:%.*]] = icmp ne i32 [[TMP4707]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6567]], label [[IF_THEN6568:%.*]], label [[IF_ELSE6569:%.*]]
// SIMD-ONLY0:       if.then6568:
// SIMD-ONLY0-NEXT:    [[TMP4708:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4708]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6570:%.*]]
// SIMD-ONLY0:       if.else6569:
// SIMD-ONLY0-NEXT:    [[TMP4709:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4709]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6570]]
// SIMD-ONLY0:       if.end6570:
// SIMD-ONLY0-NEXT:    [[TMP4710:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4710]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4711:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4712:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6571:%.*]] = fcmp ogt float [[TMP4711]], [[TMP4712]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6571]], label [[IF_THEN6573:%.*]], label [[IF_END6574:%.*]]
// SIMD-ONLY0:       if.then6573:
// SIMD-ONLY0-NEXT:    [[TMP4713:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4713]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6574]]
// SIMD-ONLY0:       if.end6574:
// SIMD-ONLY0-NEXT:    [[TMP4714:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4714]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4715:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4716:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6575:%.*]] = fcmp ogt float [[TMP4715]], [[TMP4716]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6575]], label [[IF_THEN6577:%.*]], label [[IF_END6578:%.*]]
// SIMD-ONLY0:       if.then6577:
// SIMD-ONLY0-NEXT:    [[TMP4717:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4717]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6578]]
// SIMD-ONLY0:       if.end6578:
// SIMD-ONLY0-NEXT:    [[TMP4718:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4718]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4719:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4720:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6579:%.*]] = fcmp olt float [[TMP4719]], [[TMP4720]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6579]], label [[IF_THEN6581:%.*]], label [[IF_END6582:%.*]]
// SIMD-ONLY0:       if.then6581:
// SIMD-ONLY0-NEXT:    [[TMP4721:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4721]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6582]]
// SIMD-ONLY0:       if.end6582:
// SIMD-ONLY0-NEXT:    [[TMP4722:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4722]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4723:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4724:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6583:%.*]] = fcmp olt float [[TMP4723]], [[TMP4724]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6583]], label [[IF_THEN6585:%.*]], label [[IF_END6586:%.*]]
// SIMD-ONLY0:       if.then6585:
// SIMD-ONLY0-NEXT:    [[TMP4725:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4725]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6586]]
// SIMD-ONLY0:       if.end6586:
// SIMD-ONLY0-NEXT:    [[TMP4726:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4726]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4727:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4728:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6587:%.*]] = fcmp oeq float [[TMP4727]], [[TMP4728]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6587]], label [[IF_THEN6589:%.*]], label [[IF_END6590:%.*]]
// SIMD-ONLY0:       if.then6589:
// SIMD-ONLY0-NEXT:    [[TMP4729:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4729]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6590]]
// SIMD-ONLY0:       if.end6590:
// SIMD-ONLY0-NEXT:    [[TMP4730:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4730]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4731:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4732:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6591:%.*]] = fcmp oeq float [[TMP4731]], [[TMP4732]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6591]], label [[IF_THEN6593:%.*]], label [[IF_END6594:%.*]]
// SIMD-ONLY0:       if.then6593:
// SIMD-ONLY0-NEXT:    [[TMP4733:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4733]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6594]]
// SIMD-ONLY0:       if.end6594:
// SIMD-ONLY0-NEXT:    [[TMP4734:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4735:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6595:%.*]] = fcmp ogt float [[TMP4734]], [[TMP4735]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6595]], label [[IF_THEN6597:%.*]], label [[IF_END6598:%.*]]
// SIMD-ONLY0:       if.then6597:
// SIMD-ONLY0-NEXT:    [[TMP4736:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4736]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6598]]
// SIMD-ONLY0:       if.end6598:
// SIMD-ONLY0-NEXT:    [[TMP4737:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4737]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4738:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4739:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6599:%.*]] = fcmp ogt float [[TMP4738]], [[TMP4739]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6599]], label [[IF_THEN6601:%.*]], label [[IF_END6602:%.*]]
// SIMD-ONLY0:       if.then6601:
// SIMD-ONLY0-NEXT:    [[TMP4740:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4740]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6602]]
// SIMD-ONLY0:       if.end6602:
// SIMD-ONLY0-NEXT:    [[TMP4741:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4741]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4742:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4743:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6603:%.*]] = fcmp olt float [[TMP4742]], [[TMP4743]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6603]], label [[IF_THEN6605:%.*]], label [[IF_END6606:%.*]]
// SIMD-ONLY0:       if.then6605:
// SIMD-ONLY0-NEXT:    [[TMP4744:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4744]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6606]]
// SIMD-ONLY0:       if.end6606:
// SIMD-ONLY0-NEXT:    [[TMP4745:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4745]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4746:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4747:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6607:%.*]] = fcmp olt float [[TMP4746]], [[TMP4747]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6607]], label [[IF_THEN6609:%.*]], label [[IF_END6610:%.*]]
// SIMD-ONLY0:       if.then6609:
// SIMD-ONLY0-NEXT:    [[TMP4748:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4748]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6610]]
// SIMD-ONLY0:       if.end6610:
// SIMD-ONLY0-NEXT:    [[TMP4749:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4749]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4750:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4751:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6611:%.*]] = fcmp oeq float [[TMP4750]], [[TMP4751]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6611]], label [[IF_THEN6613:%.*]], label [[IF_END6614:%.*]]
// SIMD-ONLY0:       if.then6613:
// SIMD-ONLY0-NEXT:    [[TMP4752:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4752]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6614]]
// SIMD-ONLY0:       if.end6614:
// SIMD-ONLY0-NEXT:    [[TMP4753:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4753]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4754:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4755:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6615:%.*]] = fcmp oeq float [[TMP4754]], [[TMP4755]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6615]], label [[IF_THEN6617:%.*]], label [[IF_END6618:%.*]]
// SIMD-ONLY0:       if.then6617:
// SIMD-ONLY0-NEXT:    [[TMP4756:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4756]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6618]]
// SIMD-ONLY0:       if.end6618:
// SIMD-ONLY0-NEXT:    [[TMP4757:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4757]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4758:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4759:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6619:%.*]] = fcmp oeq float [[TMP4758]], [[TMP4759]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6619]], label [[IF_THEN6621:%.*]], label [[IF_ELSE6622:%.*]]
// SIMD-ONLY0:       if.then6621:
// SIMD-ONLY0-NEXT:    [[TMP4760:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4760]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6623:%.*]]
// SIMD-ONLY0:       if.else6622:
// SIMD-ONLY0-NEXT:    [[TMP4761:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4761]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6623]]
// SIMD-ONLY0:       if.end6623:
// SIMD-ONLY0-NEXT:    [[TMP4762:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4763:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6624:%.*]] = fcmp oeq float [[TMP4762]], [[TMP4763]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6624]], label [[IF_THEN6626:%.*]], label [[IF_ELSE6627:%.*]]
// SIMD-ONLY0:       if.then6626:
// SIMD-ONLY0-NEXT:    [[TMP4764:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4764]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6628:%.*]]
// SIMD-ONLY0:       if.else6627:
// SIMD-ONLY0-NEXT:    [[TMP4765:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4765]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6628]]
// SIMD-ONLY0:       if.end6628:
// SIMD-ONLY0-NEXT:    [[TMP4766:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4767:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6629:%.*]] = fcmp oeq float [[TMP4766]], [[TMP4767]]
// SIMD-ONLY0-NEXT:    [[CONV6630:%.*]] = zext i1 [[CMP6629]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6630]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4768:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6631:%.*]] = icmp ne i32 [[TMP4768]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6631]], label [[IF_THEN6632:%.*]], label [[IF_END6633:%.*]]
// SIMD-ONLY0:       if.then6632:
// SIMD-ONLY0-NEXT:    [[TMP4769:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4769]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6633]]
// SIMD-ONLY0:       if.end6633:
// SIMD-ONLY0-NEXT:    [[TMP4770:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4771:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6634:%.*]] = fcmp oeq float [[TMP4770]], [[TMP4771]]
// SIMD-ONLY0-NEXT:    [[CONV6635:%.*]] = zext i1 [[CMP6634]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6635]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4772:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6636:%.*]] = icmp ne i32 [[TMP4772]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6636]], label [[IF_THEN6637:%.*]], label [[IF_END6638:%.*]]
// SIMD-ONLY0:       if.then6637:
// SIMD-ONLY0-NEXT:    [[TMP4773:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4773]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6638]]
// SIMD-ONLY0:       if.end6638:
// SIMD-ONLY0-NEXT:    [[TMP4774:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4775:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6639:%.*]] = fcmp oeq float [[TMP4774]], [[TMP4775]]
// SIMD-ONLY0-NEXT:    [[CONV6640:%.*]] = zext i1 [[CMP6639]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6640]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4776:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6641:%.*]] = icmp ne i32 [[TMP4776]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6641]], label [[IF_THEN6642:%.*]], label [[IF_ELSE6643:%.*]]
// SIMD-ONLY0:       if.then6642:
// SIMD-ONLY0-NEXT:    [[TMP4777:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4777]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6644:%.*]]
// SIMD-ONLY0:       if.else6643:
// SIMD-ONLY0-NEXT:    [[TMP4778:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4778]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6644]]
// SIMD-ONLY0:       if.end6644:
// SIMD-ONLY0-NEXT:    [[TMP4779:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4780:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6645:%.*]] = fcmp oeq float [[TMP4779]], [[TMP4780]]
// SIMD-ONLY0-NEXT:    [[CONV6646:%.*]] = zext i1 [[CMP6645]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6646]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4781:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6647:%.*]] = icmp ne i32 [[TMP4781]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6647]], label [[IF_THEN6648:%.*]], label [[IF_ELSE6649:%.*]]
// SIMD-ONLY0:       if.then6648:
// SIMD-ONLY0-NEXT:    [[TMP4782:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4782]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6650:%.*]]
// SIMD-ONLY0:       if.else6649:
// SIMD-ONLY0-NEXT:    [[TMP4783:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4783]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6650]]
// SIMD-ONLY0:       if.end6650:
// SIMD-ONLY0-NEXT:    [[TMP4784:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4784]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4785:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4786:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6651:%.*]] = fcmp ogt float [[TMP4785]], [[TMP4786]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6651]], label [[IF_THEN6653:%.*]], label [[IF_END6654:%.*]]
// SIMD-ONLY0:       if.then6653:
// SIMD-ONLY0-NEXT:    [[TMP4787:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4787]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6654]]
// SIMD-ONLY0:       if.end6654:
// SIMD-ONLY0-NEXT:    [[TMP4788:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4788]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4789:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4790:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6655:%.*]] = fcmp ogt float [[TMP4789]], [[TMP4790]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6655]], label [[IF_THEN6657:%.*]], label [[IF_END6658:%.*]]
// SIMD-ONLY0:       if.then6657:
// SIMD-ONLY0-NEXT:    [[TMP4791:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4791]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6658]]
// SIMD-ONLY0:       if.end6658:
// SIMD-ONLY0-NEXT:    [[TMP4792:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4792]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4793:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4794:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6659:%.*]] = fcmp olt float [[TMP4793]], [[TMP4794]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6659]], label [[IF_THEN6661:%.*]], label [[IF_END6662:%.*]]
// SIMD-ONLY0:       if.then6661:
// SIMD-ONLY0-NEXT:    [[TMP4795:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4795]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6662]]
// SIMD-ONLY0:       if.end6662:
// SIMD-ONLY0-NEXT:    [[TMP4796:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4796]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4797:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4798:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6663:%.*]] = fcmp olt float [[TMP4797]], [[TMP4798]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6663]], label [[IF_THEN6665:%.*]], label [[IF_END6666:%.*]]
// SIMD-ONLY0:       if.then6665:
// SIMD-ONLY0-NEXT:    [[TMP4799:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4799]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6666]]
// SIMD-ONLY0:       if.end6666:
// SIMD-ONLY0-NEXT:    [[TMP4800:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4800]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4801:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4802:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6667:%.*]] = fcmp oeq float [[TMP4801]], [[TMP4802]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6667]], label [[IF_THEN6669:%.*]], label [[IF_END6670:%.*]]
// SIMD-ONLY0:       if.then6669:
// SIMD-ONLY0-NEXT:    [[TMP4803:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4803]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6670]]
// SIMD-ONLY0:       if.end6670:
// SIMD-ONLY0-NEXT:    [[TMP4804:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4804]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4805:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4806:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6671:%.*]] = fcmp oeq float [[TMP4805]], [[TMP4806]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6671]], label [[IF_THEN6673:%.*]], label [[IF_END6674:%.*]]
// SIMD-ONLY0:       if.then6673:
// SIMD-ONLY0-NEXT:    [[TMP4807:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4807]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6674]]
// SIMD-ONLY0:       if.end6674:
// SIMD-ONLY0-NEXT:    [[TMP4808:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4809:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6675:%.*]] = fcmp ogt float [[TMP4808]], [[TMP4809]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6675]], label [[IF_THEN6677:%.*]], label [[IF_END6678:%.*]]
// SIMD-ONLY0:       if.then6677:
// SIMD-ONLY0-NEXT:    [[TMP4810:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4810]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6678]]
// SIMD-ONLY0:       if.end6678:
// SIMD-ONLY0-NEXT:    [[TMP4811:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4811]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4812:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4813:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6679:%.*]] = fcmp ogt float [[TMP4812]], [[TMP4813]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6679]], label [[IF_THEN6681:%.*]], label [[IF_END6682:%.*]]
// SIMD-ONLY0:       if.then6681:
// SIMD-ONLY0-NEXT:    [[TMP4814:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4814]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6682]]
// SIMD-ONLY0:       if.end6682:
// SIMD-ONLY0-NEXT:    [[TMP4815:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4815]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4816:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4817:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6683:%.*]] = fcmp olt float [[TMP4816]], [[TMP4817]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6683]], label [[IF_THEN6685:%.*]], label [[IF_END6686:%.*]]
// SIMD-ONLY0:       if.then6685:
// SIMD-ONLY0-NEXT:    [[TMP4818:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4818]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6686]]
// SIMD-ONLY0:       if.end6686:
// SIMD-ONLY0-NEXT:    [[TMP4819:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4819]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4820:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4821:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6687:%.*]] = fcmp olt float [[TMP4820]], [[TMP4821]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6687]], label [[IF_THEN6689:%.*]], label [[IF_END6690:%.*]]
// SIMD-ONLY0:       if.then6689:
// SIMD-ONLY0-NEXT:    [[TMP4822:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4822]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6690]]
// SIMD-ONLY0:       if.end6690:
// SIMD-ONLY0-NEXT:    [[TMP4823:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4823]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4824:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4825:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6691:%.*]] = fcmp oeq float [[TMP4824]], [[TMP4825]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6691]], label [[IF_THEN6693:%.*]], label [[IF_END6694:%.*]]
// SIMD-ONLY0:       if.then6693:
// SIMD-ONLY0-NEXT:    [[TMP4826:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4826]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6694]]
// SIMD-ONLY0:       if.end6694:
// SIMD-ONLY0-NEXT:    [[TMP4827:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4827]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4828:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4829:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6695:%.*]] = fcmp oeq float [[TMP4828]], [[TMP4829]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6695]], label [[IF_THEN6697:%.*]], label [[IF_END6698:%.*]]
// SIMD-ONLY0:       if.then6697:
// SIMD-ONLY0-NEXT:    [[TMP4830:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4830]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6698]]
// SIMD-ONLY0:       if.end6698:
// SIMD-ONLY0-NEXT:    [[TMP4831:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4831]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4832:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4833:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6699:%.*]] = fcmp oeq float [[TMP4832]], [[TMP4833]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6699]], label [[IF_THEN6701:%.*]], label [[IF_ELSE6702:%.*]]
// SIMD-ONLY0:       if.then6701:
// SIMD-ONLY0-NEXT:    [[TMP4834:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4834]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6703:%.*]]
// SIMD-ONLY0:       if.else6702:
// SIMD-ONLY0-NEXT:    [[TMP4835:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4835]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6703]]
// SIMD-ONLY0:       if.end6703:
// SIMD-ONLY0-NEXT:    [[TMP4836:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4837:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6704:%.*]] = fcmp oeq float [[TMP4836]], [[TMP4837]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6704]], label [[IF_THEN6706:%.*]], label [[IF_ELSE6707:%.*]]
// SIMD-ONLY0:       if.then6706:
// SIMD-ONLY0-NEXT:    [[TMP4838:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4838]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6708:%.*]]
// SIMD-ONLY0:       if.else6707:
// SIMD-ONLY0-NEXT:    [[TMP4839:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4839]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6708]]
// SIMD-ONLY0:       if.end6708:
// SIMD-ONLY0-NEXT:    [[TMP4840:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4841:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6709:%.*]] = fcmp oeq float [[TMP4840]], [[TMP4841]]
// SIMD-ONLY0-NEXT:    [[CONV6710:%.*]] = zext i1 [[CMP6709]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6710]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4842:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6711:%.*]] = icmp ne i32 [[TMP4842]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6711]], label [[IF_THEN6712:%.*]], label [[IF_END6713:%.*]]
// SIMD-ONLY0:       if.then6712:
// SIMD-ONLY0-NEXT:    [[TMP4843:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4843]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6713]]
// SIMD-ONLY0:       if.end6713:
// SIMD-ONLY0-NEXT:    [[TMP4844:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4845:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6714:%.*]] = fcmp oeq float [[TMP4844]], [[TMP4845]]
// SIMD-ONLY0-NEXT:    [[CONV6715:%.*]] = zext i1 [[CMP6714]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6715]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4846:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6716:%.*]] = icmp ne i32 [[TMP4846]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6716]], label [[IF_THEN6717:%.*]], label [[IF_END6718:%.*]]
// SIMD-ONLY0:       if.then6717:
// SIMD-ONLY0-NEXT:    [[TMP4847:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4847]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6718]]
// SIMD-ONLY0:       if.end6718:
// SIMD-ONLY0-NEXT:    [[TMP4848:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4849:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6719:%.*]] = fcmp oeq float [[TMP4848]], [[TMP4849]]
// SIMD-ONLY0-NEXT:    [[CONV6720:%.*]] = zext i1 [[CMP6719]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6720]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4850:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6721:%.*]] = icmp ne i32 [[TMP4850]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6721]], label [[IF_THEN6722:%.*]], label [[IF_ELSE6723:%.*]]
// SIMD-ONLY0:       if.then6722:
// SIMD-ONLY0-NEXT:    [[TMP4851:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4851]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6724:%.*]]
// SIMD-ONLY0:       if.else6723:
// SIMD-ONLY0-NEXT:    [[TMP4852:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4852]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6724]]
// SIMD-ONLY0:       if.end6724:
// SIMD-ONLY0-NEXT:    [[TMP4853:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4854:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6725:%.*]] = fcmp oeq float [[TMP4853]], [[TMP4854]]
// SIMD-ONLY0-NEXT:    [[CONV6726:%.*]] = zext i1 [[CMP6725]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6726]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4855:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6727:%.*]] = icmp ne i32 [[TMP4855]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6727]], label [[IF_THEN6728:%.*]], label [[IF_ELSE6729:%.*]]
// SIMD-ONLY0:       if.then6728:
// SIMD-ONLY0-NEXT:    [[TMP4856:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4856]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6730:%.*]]
// SIMD-ONLY0:       if.else6729:
// SIMD-ONLY0-NEXT:    [[TMP4857:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4857]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6730]]
// SIMD-ONLY0:       if.end6730:
// SIMD-ONLY0-NEXT:    [[TMP4858:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4858]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4859:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4860:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6731:%.*]] = fcmp ogt float [[TMP4859]], [[TMP4860]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6731]], label [[IF_THEN6733:%.*]], label [[IF_END6734:%.*]]
// SIMD-ONLY0:       if.then6733:
// SIMD-ONLY0-NEXT:    [[TMP4861:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4861]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6734]]
// SIMD-ONLY0:       if.end6734:
// SIMD-ONLY0-NEXT:    [[TMP4862:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4862]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4863:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4864:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6735:%.*]] = fcmp ogt float [[TMP4863]], [[TMP4864]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6735]], label [[IF_THEN6737:%.*]], label [[IF_END6738:%.*]]
// SIMD-ONLY0:       if.then6737:
// SIMD-ONLY0-NEXT:    [[TMP4865:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4865]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6738]]
// SIMD-ONLY0:       if.end6738:
// SIMD-ONLY0-NEXT:    [[TMP4866:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4866]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4867:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4868:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6739:%.*]] = fcmp olt float [[TMP4867]], [[TMP4868]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6739]], label [[IF_THEN6741:%.*]], label [[IF_END6742:%.*]]
// SIMD-ONLY0:       if.then6741:
// SIMD-ONLY0-NEXT:    [[TMP4869:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4869]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6742]]
// SIMD-ONLY0:       if.end6742:
// SIMD-ONLY0-NEXT:    [[TMP4870:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4870]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4871:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4872:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6743:%.*]] = fcmp olt float [[TMP4871]], [[TMP4872]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6743]], label [[IF_THEN6745:%.*]], label [[IF_END6746:%.*]]
// SIMD-ONLY0:       if.then6745:
// SIMD-ONLY0-NEXT:    [[TMP4873:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4873]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6746]]
// SIMD-ONLY0:       if.end6746:
// SIMD-ONLY0-NEXT:    [[TMP4874:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4874]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4875:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4876:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6747:%.*]] = fcmp oeq float [[TMP4875]], [[TMP4876]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6747]], label [[IF_THEN6749:%.*]], label [[IF_END6750:%.*]]
// SIMD-ONLY0:       if.then6749:
// SIMD-ONLY0-NEXT:    [[TMP4877:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4877]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6750]]
// SIMD-ONLY0:       if.end6750:
// SIMD-ONLY0-NEXT:    [[TMP4878:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4878]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4879:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4880:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6751:%.*]] = fcmp oeq float [[TMP4879]], [[TMP4880]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6751]], label [[IF_THEN6753:%.*]], label [[IF_END6754:%.*]]
// SIMD-ONLY0:       if.then6753:
// SIMD-ONLY0-NEXT:    [[TMP4881:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4881]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6754]]
// SIMD-ONLY0:       if.end6754:
// SIMD-ONLY0-NEXT:    [[TMP4882:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4883:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6755:%.*]] = fcmp ogt float [[TMP4882]], [[TMP4883]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6755]], label [[IF_THEN6757:%.*]], label [[IF_END6758:%.*]]
// SIMD-ONLY0:       if.then6757:
// SIMD-ONLY0-NEXT:    [[TMP4884:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4884]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6758]]
// SIMD-ONLY0:       if.end6758:
// SIMD-ONLY0-NEXT:    [[TMP4885:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4885]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4886:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4887:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6759:%.*]] = fcmp ogt float [[TMP4886]], [[TMP4887]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6759]], label [[IF_THEN6761:%.*]], label [[IF_END6762:%.*]]
// SIMD-ONLY0:       if.then6761:
// SIMD-ONLY0-NEXT:    [[TMP4888:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4888]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6762]]
// SIMD-ONLY0:       if.end6762:
// SIMD-ONLY0-NEXT:    [[TMP4889:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4889]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4890:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4891:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6763:%.*]] = fcmp olt float [[TMP4890]], [[TMP4891]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6763]], label [[IF_THEN6765:%.*]], label [[IF_END6766:%.*]]
// SIMD-ONLY0:       if.then6765:
// SIMD-ONLY0-NEXT:    [[TMP4892:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4892]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6766]]
// SIMD-ONLY0:       if.end6766:
// SIMD-ONLY0-NEXT:    [[TMP4893:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4893]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4894:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4895:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6767:%.*]] = fcmp olt float [[TMP4894]], [[TMP4895]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6767]], label [[IF_THEN6769:%.*]], label [[IF_END6770:%.*]]
// SIMD-ONLY0:       if.then6769:
// SIMD-ONLY0-NEXT:    [[TMP4896:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4896]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6770]]
// SIMD-ONLY0:       if.end6770:
// SIMD-ONLY0-NEXT:    [[TMP4897:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4897]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4898:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4899:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6771:%.*]] = fcmp oeq float [[TMP4898]], [[TMP4899]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6771]], label [[IF_THEN6773:%.*]], label [[IF_END6774:%.*]]
// SIMD-ONLY0:       if.then6773:
// SIMD-ONLY0-NEXT:    [[TMP4900:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4900]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6774]]
// SIMD-ONLY0:       if.end6774:
// SIMD-ONLY0-NEXT:    [[TMP4901:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4901]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4902:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4903:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6775:%.*]] = fcmp oeq float [[TMP4902]], [[TMP4903]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6775]], label [[IF_THEN6777:%.*]], label [[IF_END6778:%.*]]
// SIMD-ONLY0:       if.then6777:
// SIMD-ONLY0-NEXT:    [[TMP4904:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4904]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6778]]
// SIMD-ONLY0:       if.end6778:
// SIMD-ONLY0-NEXT:    [[TMP4905:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4905]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4906:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4907:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6779:%.*]] = fcmp oeq float [[TMP4906]], [[TMP4907]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6779]], label [[IF_THEN6781:%.*]], label [[IF_ELSE6782:%.*]]
// SIMD-ONLY0:       if.then6781:
// SIMD-ONLY0-NEXT:    [[TMP4908:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4908]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6783:%.*]]
// SIMD-ONLY0:       if.else6782:
// SIMD-ONLY0-NEXT:    [[TMP4909:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4909]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6783]]
// SIMD-ONLY0:       if.end6783:
// SIMD-ONLY0-NEXT:    [[TMP4910:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4911:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6784:%.*]] = fcmp oeq float [[TMP4910]], [[TMP4911]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6784]], label [[IF_THEN6786:%.*]], label [[IF_ELSE6787:%.*]]
// SIMD-ONLY0:       if.then6786:
// SIMD-ONLY0-NEXT:    [[TMP4912:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4912]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6788:%.*]]
// SIMD-ONLY0:       if.else6787:
// SIMD-ONLY0-NEXT:    [[TMP4913:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4913]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6788]]
// SIMD-ONLY0:       if.end6788:
// SIMD-ONLY0-NEXT:    [[TMP4914:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4915:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6789:%.*]] = fcmp oeq float [[TMP4914]], [[TMP4915]]
// SIMD-ONLY0-NEXT:    [[CONV6790:%.*]] = zext i1 [[CMP6789]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6790]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4916:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6791:%.*]] = icmp ne i32 [[TMP4916]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6791]], label [[IF_THEN6792:%.*]], label [[IF_END6793:%.*]]
// SIMD-ONLY0:       if.then6792:
// SIMD-ONLY0-NEXT:    [[TMP4917:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4917]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6793]]
// SIMD-ONLY0:       if.end6793:
// SIMD-ONLY0-NEXT:    [[TMP4918:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4919:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6794:%.*]] = fcmp oeq float [[TMP4918]], [[TMP4919]]
// SIMD-ONLY0-NEXT:    [[CONV6795:%.*]] = zext i1 [[CMP6794]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6795]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4920:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6796:%.*]] = icmp ne i32 [[TMP4920]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6796]], label [[IF_THEN6797:%.*]], label [[IF_END6798:%.*]]
// SIMD-ONLY0:       if.then6797:
// SIMD-ONLY0-NEXT:    [[TMP4921:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4921]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6798]]
// SIMD-ONLY0:       if.end6798:
// SIMD-ONLY0-NEXT:    [[TMP4922:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4923:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6799:%.*]] = fcmp oeq float [[TMP4922]], [[TMP4923]]
// SIMD-ONLY0-NEXT:    [[CONV6800:%.*]] = zext i1 [[CMP6799]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6800]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4924:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6801:%.*]] = icmp ne i32 [[TMP4924]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6801]], label [[IF_THEN6802:%.*]], label [[IF_ELSE6803:%.*]]
// SIMD-ONLY0:       if.then6802:
// SIMD-ONLY0-NEXT:    [[TMP4925:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4925]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6804:%.*]]
// SIMD-ONLY0:       if.else6803:
// SIMD-ONLY0-NEXT:    [[TMP4926:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4926]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6804]]
// SIMD-ONLY0:       if.end6804:
// SIMD-ONLY0-NEXT:    [[TMP4927:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4928:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6805:%.*]] = fcmp oeq float [[TMP4927]], [[TMP4928]]
// SIMD-ONLY0-NEXT:    [[CONV6806:%.*]] = zext i1 [[CMP6805]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6806]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4929:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6807:%.*]] = icmp ne i32 [[TMP4929]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6807]], label [[IF_THEN6808:%.*]], label [[IF_ELSE6809:%.*]]
// SIMD-ONLY0:       if.then6808:
// SIMD-ONLY0-NEXT:    [[TMP4930:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4930]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6810:%.*]]
// SIMD-ONLY0:       if.else6809:
// SIMD-ONLY0-NEXT:    [[TMP4931:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP4931]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    br label [[IF_END6810]]
// SIMD-ONLY0:       if.end6810:
// SIMD-ONLY0-NEXT:    [[TMP4932:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4932]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4933:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4934:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6811:%.*]] = fcmp ogt double [[TMP4933]], [[TMP4934]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6811]], label [[IF_THEN6813:%.*]], label [[IF_END6814:%.*]]
// SIMD-ONLY0:       if.then6813:
// SIMD-ONLY0-NEXT:    [[TMP4935:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4935]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6814]]
// SIMD-ONLY0:       if.end6814:
// SIMD-ONLY0-NEXT:    [[TMP4936:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4936]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4937:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4938:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6815:%.*]] = fcmp ogt double [[TMP4937]], [[TMP4938]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6815]], label [[IF_THEN6817:%.*]], label [[IF_END6818:%.*]]
// SIMD-ONLY0:       if.then6817:
// SIMD-ONLY0-NEXT:    [[TMP4939:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4939]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6818]]
// SIMD-ONLY0:       if.end6818:
// SIMD-ONLY0-NEXT:    [[TMP4940:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4940]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4941:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4942:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6819:%.*]] = fcmp olt double [[TMP4941]], [[TMP4942]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6819]], label [[IF_THEN6821:%.*]], label [[IF_END6822:%.*]]
// SIMD-ONLY0:       if.then6821:
// SIMD-ONLY0-NEXT:    [[TMP4943:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4943]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6822]]
// SIMD-ONLY0:       if.end6822:
// SIMD-ONLY0-NEXT:    [[TMP4944:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4944]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4945:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4946:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6823:%.*]] = fcmp olt double [[TMP4945]], [[TMP4946]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6823]], label [[IF_THEN6825:%.*]], label [[IF_END6826:%.*]]
// SIMD-ONLY0:       if.then6825:
// SIMD-ONLY0-NEXT:    [[TMP4947:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4947]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6826]]
// SIMD-ONLY0:       if.end6826:
// SIMD-ONLY0-NEXT:    [[TMP4948:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4948]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4949:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4950:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6827:%.*]] = fcmp oeq double [[TMP4949]], [[TMP4950]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6827]], label [[IF_THEN6829:%.*]], label [[IF_END6830:%.*]]
// SIMD-ONLY0:       if.then6829:
// SIMD-ONLY0-NEXT:    [[TMP4951:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4951]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6830]]
// SIMD-ONLY0:       if.end6830:
// SIMD-ONLY0-NEXT:    [[TMP4952:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4952]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4953:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4954:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6831:%.*]] = fcmp oeq double [[TMP4953]], [[TMP4954]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6831]], label [[IF_THEN6833:%.*]], label [[IF_END6834:%.*]]
// SIMD-ONLY0:       if.then6833:
// SIMD-ONLY0-NEXT:    [[TMP4955:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4955]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6834]]
// SIMD-ONLY0:       if.end6834:
// SIMD-ONLY0-NEXT:    [[TMP4956:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4957:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6835:%.*]] = fcmp ogt double [[TMP4956]], [[TMP4957]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6835]], label [[IF_THEN6837:%.*]], label [[IF_END6838:%.*]]
// SIMD-ONLY0:       if.then6837:
// SIMD-ONLY0-NEXT:    [[TMP4958:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4958]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6838]]
// SIMD-ONLY0:       if.end6838:
// SIMD-ONLY0-NEXT:    [[TMP4959:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4959]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4960:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4961:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6839:%.*]] = fcmp ogt double [[TMP4960]], [[TMP4961]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6839]], label [[IF_THEN6841:%.*]], label [[IF_END6842:%.*]]
// SIMD-ONLY0:       if.then6841:
// SIMD-ONLY0-NEXT:    [[TMP4962:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4962]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6842]]
// SIMD-ONLY0:       if.end6842:
// SIMD-ONLY0-NEXT:    [[TMP4963:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4963]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4964:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4965:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6843:%.*]] = fcmp olt double [[TMP4964]], [[TMP4965]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6843]], label [[IF_THEN6845:%.*]], label [[IF_END6846:%.*]]
// SIMD-ONLY0:       if.then6845:
// SIMD-ONLY0-NEXT:    [[TMP4966:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4966]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6846]]
// SIMD-ONLY0:       if.end6846:
// SIMD-ONLY0-NEXT:    [[TMP4967:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4967]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4968:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4969:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6847:%.*]] = fcmp olt double [[TMP4968]], [[TMP4969]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6847]], label [[IF_THEN6849:%.*]], label [[IF_END6850:%.*]]
// SIMD-ONLY0:       if.then6849:
// SIMD-ONLY0-NEXT:    [[TMP4970:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4970]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6850]]
// SIMD-ONLY0:       if.end6850:
// SIMD-ONLY0-NEXT:    [[TMP4971:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4971]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4972:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4973:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6851:%.*]] = fcmp oeq double [[TMP4972]], [[TMP4973]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6851]], label [[IF_THEN6853:%.*]], label [[IF_END6854:%.*]]
// SIMD-ONLY0:       if.then6853:
// SIMD-ONLY0-NEXT:    [[TMP4974:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4974]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6854]]
// SIMD-ONLY0:       if.end6854:
// SIMD-ONLY0-NEXT:    [[TMP4975:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4975]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4976:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4977:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6855:%.*]] = fcmp oeq double [[TMP4976]], [[TMP4977]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6855]], label [[IF_THEN6857:%.*]], label [[IF_END6858:%.*]]
// SIMD-ONLY0:       if.then6857:
// SIMD-ONLY0-NEXT:    [[TMP4978:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4978]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6858]]
// SIMD-ONLY0:       if.end6858:
// SIMD-ONLY0-NEXT:    [[TMP4979:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4979]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4980:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4981:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6859:%.*]] = fcmp oeq double [[TMP4980]], [[TMP4981]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6859]], label [[IF_THEN6861:%.*]], label [[IF_ELSE6862:%.*]]
// SIMD-ONLY0:       if.then6861:
// SIMD-ONLY0-NEXT:    [[TMP4982:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4982]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6863:%.*]]
// SIMD-ONLY0:       if.else6862:
// SIMD-ONLY0-NEXT:    [[TMP4983:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4983]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6863]]
// SIMD-ONLY0:       if.end6863:
// SIMD-ONLY0-NEXT:    [[TMP4984:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4985:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6864:%.*]] = fcmp oeq double [[TMP4984]], [[TMP4985]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6864]], label [[IF_THEN6866:%.*]], label [[IF_ELSE6867:%.*]]
// SIMD-ONLY0:       if.then6866:
// SIMD-ONLY0-NEXT:    [[TMP4986:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4986]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6868:%.*]]
// SIMD-ONLY0:       if.else6867:
// SIMD-ONLY0-NEXT:    [[TMP4987:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4987]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6868]]
// SIMD-ONLY0:       if.end6868:
// SIMD-ONLY0-NEXT:    [[TMP4988:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4989:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6869:%.*]] = fcmp oeq double [[TMP4988]], [[TMP4989]]
// SIMD-ONLY0-NEXT:    [[CONV6870:%.*]] = zext i1 [[CMP6869]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6870]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4990:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6871:%.*]] = icmp ne i32 [[TMP4990]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6871]], label [[IF_THEN6872:%.*]], label [[IF_END6873:%.*]]
// SIMD-ONLY0:       if.then6872:
// SIMD-ONLY0-NEXT:    [[TMP4991:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4991]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6873]]
// SIMD-ONLY0:       if.end6873:
// SIMD-ONLY0-NEXT:    [[TMP4992:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4993:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6874:%.*]] = fcmp oeq double [[TMP4992]], [[TMP4993]]
// SIMD-ONLY0-NEXT:    [[CONV6875:%.*]] = zext i1 [[CMP6874]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6875]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4994:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6876:%.*]] = icmp ne i32 [[TMP4994]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6876]], label [[IF_THEN6877:%.*]], label [[IF_END6878:%.*]]
// SIMD-ONLY0:       if.then6877:
// SIMD-ONLY0-NEXT:    [[TMP4995:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4995]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6878]]
// SIMD-ONLY0:       if.end6878:
// SIMD-ONLY0-NEXT:    [[TMP4996:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP4997:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6879:%.*]] = fcmp oeq double [[TMP4996]], [[TMP4997]]
// SIMD-ONLY0-NEXT:    [[CONV6880:%.*]] = zext i1 [[CMP6879]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6880]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP4998:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6881:%.*]] = icmp ne i32 [[TMP4998]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6881]], label [[IF_THEN6882:%.*]], label [[IF_ELSE6883:%.*]]
// SIMD-ONLY0:       if.then6882:
// SIMD-ONLY0-NEXT:    [[TMP4999:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP4999]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6884:%.*]]
// SIMD-ONLY0:       if.else6883:
// SIMD-ONLY0-NEXT:    [[TMP5000:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5000]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6884]]
// SIMD-ONLY0:       if.end6884:
// SIMD-ONLY0-NEXT:    [[TMP5001:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5002:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6885:%.*]] = fcmp oeq double [[TMP5001]], [[TMP5002]]
// SIMD-ONLY0-NEXT:    [[CONV6886:%.*]] = zext i1 [[CMP6885]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6886]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5003:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6887:%.*]] = icmp ne i32 [[TMP5003]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6887]], label [[IF_THEN6888:%.*]], label [[IF_ELSE6889:%.*]]
// SIMD-ONLY0:       if.then6888:
// SIMD-ONLY0-NEXT:    [[TMP5004:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5004]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6890:%.*]]
// SIMD-ONLY0:       if.else6889:
// SIMD-ONLY0-NEXT:    [[TMP5005:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5005]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6890]]
// SIMD-ONLY0:       if.end6890:
// SIMD-ONLY0-NEXT:    [[TMP5006:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5006]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5007:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5008:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6891:%.*]] = fcmp ogt double [[TMP5007]], [[TMP5008]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6891]], label [[IF_THEN6893:%.*]], label [[IF_END6894:%.*]]
// SIMD-ONLY0:       if.then6893:
// SIMD-ONLY0-NEXT:    [[TMP5009:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5009]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6894]]
// SIMD-ONLY0:       if.end6894:
// SIMD-ONLY0-NEXT:    [[TMP5010:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5010]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5011:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5012:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6895:%.*]] = fcmp ogt double [[TMP5011]], [[TMP5012]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6895]], label [[IF_THEN6897:%.*]], label [[IF_END6898:%.*]]
// SIMD-ONLY0:       if.then6897:
// SIMD-ONLY0-NEXT:    [[TMP5013:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5013]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6898]]
// SIMD-ONLY0:       if.end6898:
// SIMD-ONLY0-NEXT:    [[TMP5014:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5014]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5015:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5016:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6899:%.*]] = fcmp olt double [[TMP5015]], [[TMP5016]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6899]], label [[IF_THEN6901:%.*]], label [[IF_END6902:%.*]]
// SIMD-ONLY0:       if.then6901:
// SIMD-ONLY0-NEXT:    [[TMP5017:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5017]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6902]]
// SIMD-ONLY0:       if.end6902:
// SIMD-ONLY0-NEXT:    [[TMP5018:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5018]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5019:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5020:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6903:%.*]] = fcmp olt double [[TMP5019]], [[TMP5020]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6903]], label [[IF_THEN6905:%.*]], label [[IF_END6906:%.*]]
// SIMD-ONLY0:       if.then6905:
// SIMD-ONLY0-NEXT:    [[TMP5021:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5021]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6906]]
// SIMD-ONLY0:       if.end6906:
// SIMD-ONLY0-NEXT:    [[TMP5022:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5022]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5023:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5024:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6907:%.*]] = fcmp oeq double [[TMP5023]], [[TMP5024]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6907]], label [[IF_THEN6909:%.*]], label [[IF_END6910:%.*]]
// SIMD-ONLY0:       if.then6909:
// SIMD-ONLY0-NEXT:    [[TMP5025:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5025]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6910]]
// SIMD-ONLY0:       if.end6910:
// SIMD-ONLY0-NEXT:    [[TMP5026:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5026]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5027:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5028:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6911:%.*]] = fcmp oeq double [[TMP5027]], [[TMP5028]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6911]], label [[IF_THEN6913:%.*]], label [[IF_END6914:%.*]]
// SIMD-ONLY0:       if.then6913:
// SIMD-ONLY0-NEXT:    [[TMP5029:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5029]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6914]]
// SIMD-ONLY0:       if.end6914:
// SIMD-ONLY0-NEXT:    [[TMP5030:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5031:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6915:%.*]] = fcmp ogt double [[TMP5030]], [[TMP5031]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6915]], label [[IF_THEN6917:%.*]], label [[IF_END6918:%.*]]
// SIMD-ONLY0:       if.then6917:
// SIMD-ONLY0-NEXT:    [[TMP5032:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5032]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6918]]
// SIMD-ONLY0:       if.end6918:
// SIMD-ONLY0-NEXT:    [[TMP5033:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5033]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5034:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5035:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6919:%.*]] = fcmp ogt double [[TMP5034]], [[TMP5035]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6919]], label [[IF_THEN6921:%.*]], label [[IF_END6922:%.*]]
// SIMD-ONLY0:       if.then6921:
// SIMD-ONLY0-NEXT:    [[TMP5036:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5036]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6922]]
// SIMD-ONLY0:       if.end6922:
// SIMD-ONLY0-NEXT:    [[TMP5037:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5037]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5038:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5039:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6923:%.*]] = fcmp olt double [[TMP5038]], [[TMP5039]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6923]], label [[IF_THEN6925:%.*]], label [[IF_END6926:%.*]]
// SIMD-ONLY0:       if.then6925:
// SIMD-ONLY0-NEXT:    [[TMP5040:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5040]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6926]]
// SIMD-ONLY0:       if.end6926:
// SIMD-ONLY0-NEXT:    [[TMP5041:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5041]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5042:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5043:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6927:%.*]] = fcmp olt double [[TMP5042]], [[TMP5043]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6927]], label [[IF_THEN6929:%.*]], label [[IF_END6930:%.*]]
// SIMD-ONLY0:       if.then6929:
// SIMD-ONLY0-NEXT:    [[TMP5044:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5044]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6930]]
// SIMD-ONLY0:       if.end6930:
// SIMD-ONLY0-NEXT:    [[TMP5045:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5045]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5046:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5047:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6931:%.*]] = fcmp oeq double [[TMP5046]], [[TMP5047]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6931]], label [[IF_THEN6933:%.*]], label [[IF_END6934:%.*]]
// SIMD-ONLY0:       if.then6933:
// SIMD-ONLY0-NEXT:    [[TMP5048:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5048]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6934]]
// SIMD-ONLY0:       if.end6934:
// SIMD-ONLY0-NEXT:    [[TMP5049:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5049]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5050:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5051:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6935:%.*]] = fcmp oeq double [[TMP5050]], [[TMP5051]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6935]], label [[IF_THEN6937:%.*]], label [[IF_END6938:%.*]]
// SIMD-ONLY0:       if.then6937:
// SIMD-ONLY0-NEXT:    [[TMP5052:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5052]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6938]]
// SIMD-ONLY0:       if.end6938:
// SIMD-ONLY0-NEXT:    [[TMP5053:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5053]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5054:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5055:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6939:%.*]] = fcmp oeq double [[TMP5054]], [[TMP5055]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6939]], label [[IF_THEN6941:%.*]], label [[IF_ELSE6942:%.*]]
// SIMD-ONLY0:       if.then6941:
// SIMD-ONLY0-NEXT:    [[TMP5056:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5056]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6943:%.*]]
// SIMD-ONLY0:       if.else6942:
// SIMD-ONLY0-NEXT:    [[TMP5057:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5057]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6943]]
// SIMD-ONLY0:       if.end6943:
// SIMD-ONLY0-NEXT:    [[TMP5058:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5059:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6944:%.*]] = fcmp oeq double [[TMP5058]], [[TMP5059]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6944]], label [[IF_THEN6946:%.*]], label [[IF_ELSE6947:%.*]]
// SIMD-ONLY0:       if.then6946:
// SIMD-ONLY0-NEXT:    [[TMP5060:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5060]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6948:%.*]]
// SIMD-ONLY0:       if.else6947:
// SIMD-ONLY0-NEXT:    [[TMP5061:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5061]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6948]]
// SIMD-ONLY0:       if.end6948:
// SIMD-ONLY0-NEXT:    [[TMP5062:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5063:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6949:%.*]] = fcmp oeq double [[TMP5062]], [[TMP5063]]
// SIMD-ONLY0-NEXT:    [[CONV6950:%.*]] = zext i1 [[CMP6949]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6950]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5064:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6951:%.*]] = icmp ne i32 [[TMP5064]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6951]], label [[IF_THEN6952:%.*]], label [[IF_END6953:%.*]]
// SIMD-ONLY0:       if.then6952:
// SIMD-ONLY0-NEXT:    [[TMP5065:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5065]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6953]]
// SIMD-ONLY0:       if.end6953:
// SIMD-ONLY0-NEXT:    [[TMP5066:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5067:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6954:%.*]] = fcmp oeq double [[TMP5066]], [[TMP5067]]
// SIMD-ONLY0-NEXT:    [[CONV6955:%.*]] = zext i1 [[CMP6954]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6955]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5068:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6956:%.*]] = icmp ne i32 [[TMP5068]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6956]], label [[IF_THEN6957:%.*]], label [[IF_END6958:%.*]]
// SIMD-ONLY0:       if.then6957:
// SIMD-ONLY0-NEXT:    [[TMP5069:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5069]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6958]]
// SIMD-ONLY0:       if.end6958:
// SIMD-ONLY0-NEXT:    [[TMP5070:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5071:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6959:%.*]] = fcmp oeq double [[TMP5070]], [[TMP5071]]
// SIMD-ONLY0-NEXT:    [[CONV6960:%.*]] = zext i1 [[CMP6959]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6960]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5072:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6961:%.*]] = icmp ne i32 [[TMP5072]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6961]], label [[IF_THEN6962:%.*]], label [[IF_ELSE6963:%.*]]
// SIMD-ONLY0:       if.then6962:
// SIMD-ONLY0-NEXT:    [[TMP5073:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5073]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6964:%.*]]
// SIMD-ONLY0:       if.else6963:
// SIMD-ONLY0-NEXT:    [[TMP5074:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5074]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6964]]
// SIMD-ONLY0:       if.end6964:
// SIMD-ONLY0-NEXT:    [[TMP5075:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5076:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6965:%.*]] = fcmp oeq double [[TMP5075]], [[TMP5076]]
// SIMD-ONLY0-NEXT:    [[CONV6966:%.*]] = zext i1 [[CMP6965]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV6966]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5077:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL6967:%.*]] = icmp ne i32 [[TMP5077]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL6967]], label [[IF_THEN6968:%.*]], label [[IF_ELSE6969:%.*]]
// SIMD-ONLY0:       if.then6968:
// SIMD-ONLY0-NEXT:    [[TMP5078:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5078]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6970:%.*]]
// SIMD-ONLY0:       if.else6969:
// SIMD-ONLY0-NEXT:    [[TMP5079:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5079]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6970]]
// SIMD-ONLY0:       if.end6970:
// SIMD-ONLY0-NEXT:    [[TMP5080:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5080]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5081:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5082:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6971:%.*]] = fcmp ogt double [[TMP5081]], [[TMP5082]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6971]], label [[IF_THEN6973:%.*]], label [[IF_END6974:%.*]]
// SIMD-ONLY0:       if.then6973:
// SIMD-ONLY0-NEXT:    [[TMP5083:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5083]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6974]]
// SIMD-ONLY0:       if.end6974:
// SIMD-ONLY0-NEXT:    [[TMP5084:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5084]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5085:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5086:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6975:%.*]] = fcmp ogt double [[TMP5085]], [[TMP5086]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6975]], label [[IF_THEN6977:%.*]], label [[IF_END6978:%.*]]
// SIMD-ONLY0:       if.then6977:
// SIMD-ONLY0-NEXT:    [[TMP5087:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5087]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6978]]
// SIMD-ONLY0:       if.end6978:
// SIMD-ONLY0-NEXT:    [[TMP5088:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5088]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5089:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5090:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6979:%.*]] = fcmp olt double [[TMP5089]], [[TMP5090]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6979]], label [[IF_THEN6981:%.*]], label [[IF_END6982:%.*]]
// SIMD-ONLY0:       if.then6981:
// SIMD-ONLY0-NEXT:    [[TMP5091:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5091]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6982]]
// SIMD-ONLY0:       if.end6982:
// SIMD-ONLY0-NEXT:    [[TMP5092:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5092]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5093:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5094:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6983:%.*]] = fcmp olt double [[TMP5093]], [[TMP5094]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6983]], label [[IF_THEN6985:%.*]], label [[IF_END6986:%.*]]
// SIMD-ONLY0:       if.then6985:
// SIMD-ONLY0-NEXT:    [[TMP5095:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5095]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6986]]
// SIMD-ONLY0:       if.end6986:
// SIMD-ONLY0-NEXT:    [[TMP5096:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5096]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5097:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5098:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6987:%.*]] = fcmp oeq double [[TMP5097]], [[TMP5098]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6987]], label [[IF_THEN6989:%.*]], label [[IF_END6990:%.*]]
// SIMD-ONLY0:       if.then6989:
// SIMD-ONLY0-NEXT:    [[TMP5099:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5099]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6990]]
// SIMD-ONLY0:       if.end6990:
// SIMD-ONLY0-NEXT:    [[TMP5100:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5100]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5101:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5102:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6991:%.*]] = fcmp oeq double [[TMP5101]], [[TMP5102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6991]], label [[IF_THEN6993:%.*]], label [[IF_END6994:%.*]]
// SIMD-ONLY0:       if.then6993:
// SIMD-ONLY0-NEXT:    [[TMP5103:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5103]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6994]]
// SIMD-ONLY0:       if.end6994:
// SIMD-ONLY0-NEXT:    [[TMP5104:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5105:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6995:%.*]] = fcmp ogt double [[TMP5104]], [[TMP5105]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6995]], label [[IF_THEN6997:%.*]], label [[IF_END6998:%.*]]
// SIMD-ONLY0:       if.then6997:
// SIMD-ONLY0-NEXT:    [[TMP5106:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5106]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END6998]]
// SIMD-ONLY0:       if.end6998:
// SIMD-ONLY0-NEXT:    [[TMP5107:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5107]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5108:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5109:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6999:%.*]] = fcmp ogt double [[TMP5108]], [[TMP5109]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6999]], label [[IF_THEN7001:%.*]], label [[IF_END7002:%.*]]
// SIMD-ONLY0:       if.then7001:
// SIMD-ONLY0-NEXT:    [[TMP5110:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5110]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7002]]
// SIMD-ONLY0:       if.end7002:
// SIMD-ONLY0-NEXT:    [[TMP5111:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5111]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5112:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5113:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7003:%.*]] = fcmp olt double [[TMP5112]], [[TMP5113]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7003]], label [[IF_THEN7005:%.*]], label [[IF_END7006:%.*]]
// SIMD-ONLY0:       if.then7005:
// SIMD-ONLY0-NEXT:    [[TMP5114:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5114]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7006]]
// SIMD-ONLY0:       if.end7006:
// SIMD-ONLY0-NEXT:    [[TMP5115:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5115]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5116:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5117:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7007:%.*]] = fcmp olt double [[TMP5116]], [[TMP5117]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7007]], label [[IF_THEN7009:%.*]], label [[IF_END7010:%.*]]
// SIMD-ONLY0:       if.then7009:
// SIMD-ONLY0-NEXT:    [[TMP5118:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5118]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7010]]
// SIMD-ONLY0:       if.end7010:
// SIMD-ONLY0-NEXT:    [[TMP5119:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5119]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5120:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5121:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7011:%.*]] = fcmp oeq double [[TMP5120]], [[TMP5121]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7011]], label [[IF_THEN7013:%.*]], label [[IF_END7014:%.*]]
// SIMD-ONLY0:       if.then7013:
// SIMD-ONLY0-NEXT:    [[TMP5122:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5122]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7014]]
// SIMD-ONLY0:       if.end7014:
// SIMD-ONLY0-NEXT:    [[TMP5123:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5123]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5124:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5125:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7015:%.*]] = fcmp oeq double [[TMP5124]], [[TMP5125]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7015]], label [[IF_THEN7017:%.*]], label [[IF_END7018:%.*]]
// SIMD-ONLY0:       if.then7017:
// SIMD-ONLY0-NEXT:    [[TMP5126:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5126]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7018]]
// SIMD-ONLY0:       if.end7018:
// SIMD-ONLY0-NEXT:    [[TMP5127:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5127]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5128:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5129:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7019:%.*]] = fcmp oeq double [[TMP5128]], [[TMP5129]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7019]], label [[IF_THEN7021:%.*]], label [[IF_ELSE7022:%.*]]
// SIMD-ONLY0:       if.then7021:
// SIMD-ONLY0-NEXT:    [[TMP5130:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5130]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7023:%.*]]
// SIMD-ONLY0:       if.else7022:
// SIMD-ONLY0-NEXT:    [[TMP5131:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5131]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7023]]
// SIMD-ONLY0:       if.end7023:
// SIMD-ONLY0-NEXT:    [[TMP5132:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5133:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7024:%.*]] = fcmp oeq double [[TMP5132]], [[TMP5133]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7024]], label [[IF_THEN7026:%.*]], label [[IF_ELSE7027:%.*]]
// SIMD-ONLY0:       if.then7026:
// SIMD-ONLY0-NEXT:    [[TMP5134:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5134]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7028:%.*]]
// SIMD-ONLY0:       if.else7027:
// SIMD-ONLY0-NEXT:    [[TMP5135:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5135]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7028]]
// SIMD-ONLY0:       if.end7028:
// SIMD-ONLY0-NEXT:    [[TMP5136:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5137:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7029:%.*]] = fcmp oeq double [[TMP5136]], [[TMP5137]]
// SIMD-ONLY0-NEXT:    [[CONV7030:%.*]] = zext i1 [[CMP7029]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7030]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5138:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7031:%.*]] = icmp ne i32 [[TMP5138]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7031]], label [[IF_THEN7032:%.*]], label [[IF_END7033:%.*]]
// SIMD-ONLY0:       if.then7032:
// SIMD-ONLY0-NEXT:    [[TMP5139:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5139]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7033]]
// SIMD-ONLY0:       if.end7033:
// SIMD-ONLY0-NEXT:    [[TMP5140:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5141:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7034:%.*]] = fcmp oeq double [[TMP5140]], [[TMP5141]]
// SIMD-ONLY0-NEXT:    [[CONV7035:%.*]] = zext i1 [[CMP7034]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7035]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5142:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7036:%.*]] = icmp ne i32 [[TMP5142]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7036]], label [[IF_THEN7037:%.*]], label [[IF_END7038:%.*]]
// SIMD-ONLY0:       if.then7037:
// SIMD-ONLY0-NEXT:    [[TMP5143:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5143]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7038]]
// SIMD-ONLY0:       if.end7038:
// SIMD-ONLY0-NEXT:    [[TMP5144:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5145:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7039:%.*]] = fcmp oeq double [[TMP5144]], [[TMP5145]]
// SIMD-ONLY0-NEXT:    [[CONV7040:%.*]] = zext i1 [[CMP7039]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7040]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5146:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7041:%.*]] = icmp ne i32 [[TMP5146]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7041]], label [[IF_THEN7042:%.*]], label [[IF_ELSE7043:%.*]]
// SIMD-ONLY0:       if.then7042:
// SIMD-ONLY0-NEXT:    [[TMP5147:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5147]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7044:%.*]]
// SIMD-ONLY0:       if.else7043:
// SIMD-ONLY0-NEXT:    [[TMP5148:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5148]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7044]]
// SIMD-ONLY0:       if.end7044:
// SIMD-ONLY0-NEXT:    [[TMP5149:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5150:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7045:%.*]] = fcmp oeq double [[TMP5149]], [[TMP5150]]
// SIMD-ONLY0-NEXT:    [[CONV7046:%.*]] = zext i1 [[CMP7045]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7046]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5151:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7047:%.*]] = icmp ne i32 [[TMP5151]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7047]], label [[IF_THEN7048:%.*]], label [[IF_ELSE7049:%.*]]
// SIMD-ONLY0:       if.then7048:
// SIMD-ONLY0-NEXT:    [[TMP5152:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5152]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7050:%.*]]
// SIMD-ONLY0:       if.else7049:
// SIMD-ONLY0-NEXT:    [[TMP5153:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5153]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7050]]
// SIMD-ONLY0:       if.end7050:
// SIMD-ONLY0-NEXT:    [[TMP5154:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5154]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5155:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5156:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7051:%.*]] = fcmp ogt double [[TMP5155]], [[TMP5156]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7051]], label [[IF_THEN7053:%.*]], label [[IF_END7054:%.*]]
// SIMD-ONLY0:       if.then7053:
// SIMD-ONLY0-NEXT:    [[TMP5157:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5157]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7054]]
// SIMD-ONLY0:       if.end7054:
// SIMD-ONLY0-NEXT:    [[TMP5158:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5158]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5159:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5160:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7055:%.*]] = fcmp ogt double [[TMP5159]], [[TMP5160]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7055]], label [[IF_THEN7057:%.*]], label [[IF_END7058:%.*]]
// SIMD-ONLY0:       if.then7057:
// SIMD-ONLY0-NEXT:    [[TMP5161:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5161]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7058]]
// SIMD-ONLY0:       if.end7058:
// SIMD-ONLY0-NEXT:    [[TMP5162:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5162]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5163:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5164:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7059:%.*]] = fcmp olt double [[TMP5163]], [[TMP5164]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7059]], label [[IF_THEN7061:%.*]], label [[IF_END7062:%.*]]
// SIMD-ONLY0:       if.then7061:
// SIMD-ONLY0-NEXT:    [[TMP5165:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5165]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7062]]
// SIMD-ONLY0:       if.end7062:
// SIMD-ONLY0-NEXT:    [[TMP5166:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5166]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5167:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5168:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7063:%.*]] = fcmp olt double [[TMP5167]], [[TMP5168]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7063]], label [[IF_THEN7065:%.*]], label [[IF_END7066:%.*]]
// SIMD-ONLY0:       if.then7065:
// SIMD-ONLY0-NEXT:    [[TMP5169:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5169]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7066]]
// SIMD-ONLY0:       if.end7066:
// SIMD-ONLY0-NEXT:    [[TMP5170:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5170]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5171:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5172:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7067:%.*]] = fcmp oeq double [[TMP5171]], [[TMP5172]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7067]], label [[IF_THEN7069:%.*]], label [[IF_END7070:%.*]]
// SIMD-ONLY0:       if.then7069:
// SIMD-ONLY0-NEXT:    [[TMP5173:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5173]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7070]]
// SIMD-ONLY0:       if.end7070:
// SIMD-ONLY0-NEXT:    [[TMP5174:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5174]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5175:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5176:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7071:%.*]] = fcmp oeq double [[TMP5175]], [[TMP5176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7071]], label [[IF_THEN7073:%.*]], label [[IF_END7074:%.*]]
// SIMD-ONLY0:       if.then7073:
// SIMD-ONLY0-NEXT:    [[TMP5177:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5177]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7074]]
// SIMD-ONLY0:       if.end7074:
// SIMD-ONLY0-NEXT:    [[TMP5178:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5179:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7075:%.*]] = fcmp ogt double [[TMP5178]], [[TMP5179]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7075]], label [[IF_THEN7077:%.*]], label [[IF_END7078:%.*]]
// SIMD-ONLY0:       if.then7077:
// SIMD-ONLY0-NEXT:    [[TMP5180:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5180]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7078]]
// SIMD-ONLY0:       if.end7078:
// SIMD-ONLY0-NEXT:    [[TMP5181:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5181]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5182:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5183:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7079:%.*]] = fcmp ogt double [[TMP5182]], [[TMP5183]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7079]], label [[IF_THEN7081:%.*]], label [[IF_END7082:%.*]]
// SIMD-ONLY0:       if.then7081:
// SIMD-ONLY0-NEXT:    [[TMP5184:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5184]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7082]]
// SIMD-ONLY0:       if.end7082:
// SIMD-ONLY0-NEXT:    [[TMP5185:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5185]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5186:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5187:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7083:%.*]] = fcmp olt double [[TMP5186]], [[TMP5187]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7083]], label [[IF_THEN7085:%.*]], label [[IF_END7086:%.*]]
// SIMD-ONLY0:       if.then7085:
// SIMD-ONLY0-NEXT:    [[TMP5188:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5188]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7086]]
// SIMD-ONLY0:       if.end7086:
// SIMD-ONLY0-NEXT:    [[TMP5189:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5189]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5190:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5191:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7087:%.*]] = fcmp olt double [[TMP5190]], [[TMP5191]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7087]], label [[IF_THEN7089:%.*]], label [[IF_END7090:%.*]]
// SIMD-ONLY0:       if.then7089:
// SIMD-ONLY0-NEXT:    [[TMP5192:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5192]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7090]]
// SIMD-ONLY0:       if.end7090:
// SIMD-ONLY0-NEXT:    [[TMP5193:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5193]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5194:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5195:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7091:%.*]] = fcmp oeq double [[TMP5194]], [[TMP5195]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7091]], label [[IF_THEN7093:%.*]], label [[IF_END7094:%.*]]
// SIMD-ONLY0:       if.then7093:
// SIMD-ONLY0-NEXT:    [[TMP5196:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5196]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7094]]
// SIMD-ONLY0:       if.end7094:
// SIMD-ONLY0-NEXT:    [[TMP5197:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5197]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5198:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5199:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7095:%.*]] = fcmp oeq double [[TMP5198]], [[TMP5199]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7095]], label [[IF_THEN7097:%.*]], label [[IF_END7098:%.*]]
// SIMD-ONLY0:       if.then7097:
// SIMD-ONLY0-NEXT:    [[TMP5200:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5200]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7098]]
// SIMD-ONLY0:       if.end7098:
// SIMD-ONLY0-NEXT:    [[TMP5201:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5201]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5202:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5203:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7099:%.*]] = fcmp oeq double [[TMP5202]], [[TMP5203]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7099]], label [[IF_THEN7101:%.*]], label [[IF_ELSE7102:%.*]]
// SIMD-ONLY0:       if.then7101:
// SIMD-ONLY0-NEXT:    [[TMP5204:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5204]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7103:%.*]]
// SIMD-ONLY0:       if.else7102:
// SIMD-ONLY0-NEXT:    [[TMP5205:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5205]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7103]]
// SIMD-ONLY0:       if.end7103:
// SIMD-ONLY0-NEXT:    [[TMP5206:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5207:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7104:%.*]] = fcmp oeq double [[TMP5206]], [[TMP5207]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7104]], label [[IF_THEN7106:%.*]], label [[IF_ELSE7107:%.*]]
// SIMD-ONLY0:       if.then7106:
// SIMD-ONLY0-NEXT:    [[TMP5208:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5208]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7108:%.*]]
// SIMD-ONLY0:       if.else7107:
// SIMD-ONLY0-NEXT:    [[TMP5209:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5209]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7108]]
// SIMD-ONLY0:       if.end7108:
// SIMD-ONLY0-NEXT:    [[TMP5210:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5211:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7109:%.*]] = fcmp oeq double [[TMP5210]], [[TMP5211]]
// SIMD-ONLY0-NEXT:    [[CONV7110:%.*]] = zext i1 [[CMP7109]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7110]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5212:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7111:%.*]] = icmp ne i32 [[TMP5212]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7111]], label [[IF_THEN7112:%.*]], label [[IF_END7113:%.*]]
// SIMD-ONLY0:       if.then7112:
// SIMD-ONLY0-NEXT:    [[TMP5213:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5213]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7113]]
// SIMD-ONLY0:       if.end7113:
// SIMD-ONLY0-NEXT:    [[TMP5214:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5215:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7114:%.*]] = fcmp oeq double [[TMP5214]], [[TMP5215]]
// SIMD-ONLY0-NEXT:    [[CONV7115:%.*]] = zext i1 [[CMP7114]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7115]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5216:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7116:%.*]] = icmp ne i32 [[TMP5216]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7116]], label [[IF_THEN7117:%.*]], label [[IF_END7118:%.*]]
// SIMD-ONLY0:       if.then7117:
// SIMD-ONLY0-NEXT:    [[TMP5217:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5217]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7118]]
// SIMD-ONLY0:       if.end7118:
// SIMD-ONLY0-NEXT:    [[TMP5218:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5219:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7119:%.*]] = fcmp oeq double [[TMP5218]], [[TMP5219]]
// SIMD-ONLY0-NEXT:    [[CONV7120:%.*]] = zext i1 [[CMP7119]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7120]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5220:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7121:%.*]] = icmp ne i32 [[TMP5220]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7121]], label [[IF_THEN7122:%.*]], label [[IF_ELSE7123:%.*]]
// SIMD-ONLY0:       if.then7122:
// SIMD-ONLY0-NEXT:    [[TMP5221:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5221]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7124:%.*]]
// SIMD-ONLY0:       if.else7123:
// SIMD-ONLY0-NEXT:    [[TMP5222:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5222]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7124]]
// SIMD-ONLY0:       if.end7124:
// SIMD-ONLY0-NEXT:    [[TMP5223:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5224:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7125:%.*]] = fcmp oeq double [[TMP5223]], [[TMP5224]]
// SIMD-ONLY0-NEXT:    [[CONV7126:%.*]] = zext i1 [[CMP7125]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7126]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5225:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7127:%.*]] = icmp ne i32 [[TMP5225]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7127]], label [[IF_THEN7128:%.*]], label [[IF_ELSE7129:%.*]]
// SIMD-ONLY0:       if.then7128:
// SIMD-ONLY0-NEXT:    [[TMP5226:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5226]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7130:%.*]]
// SIMD-ONLY0:       if.else7129:
// SIMD-ONLY0-NEXT:    [[TMP5227:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5227]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7130]]
// SIMD-ONLY0:       if.end7130:
// SIMD-ONLY0-NEXT:    [[TMP5228:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5228]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5229:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5230:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7131:%.*]] = fcmp ogt double [[TMP5229]], [[TMP5230]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7131]], label [[IF_THEN7133:%.*]], label [[IF_END7134:%.*]]
// SIMD-ONLY0:       if.then7133:
// SIMD-ONLY0-NEXT:    [[TMP5231:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5231]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7134]]
// SIMD-ONLY0:       if.end7134:
// SIMD-ONLY0-NEXT:    [[TMP5232:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5232]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5233:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5234:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7135:%.*]] = fcmp ogt double [[TMP5233]], [[TMP5234]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7135]], label [[IF_THEN7137:%.*]], label [[IF_END7138:%.*]]
// SIMD-ONLY0:       if.then7137:
// SIMD-ONLY0-NEXT:    [[TMP5235:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5235]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7138]]
// SIMD-ONLY0:       if.end7138:
// SIMD-ONLY0-NEXT:    [[TMP5236:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5236]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5237:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5238:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7139:%.*]] = fcmp olt double [[TMP5237]], [[TMP5238]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7139]], label [[IF_THEN7141:%.*]], label [[IF_END7142:%.*]]
// SIMD-ONLY0:       if.then7141:
// SIMD-ONLY0-NEXT:    [[TMP5239:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5239]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7142]]
// SIMD-ONLY0:       if.end7142:
// SIMD-ONLY0-NEXT:    [[TMP5240:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5240]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5241:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5242:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7143:%.*]] = fcmp olt double [[TMP5241]], [[TMP5242]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7143]], label [[IF_THEN7145:%.*]], label [[IF_END7146:%.*]]
// SIMD-ONLY0:       if.then7145:
// SIMD-ONLY0-NEXT:    [[TMP5243:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5243]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7146]]
// SIMD-ONLY0:       if.end7146:
// SIMD-ONLY0-NEXT:    [[TMP5244:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5244]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5245:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5246:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7147:%.*]] = fcmp oeq double [[TMP5245]], [[TMP5246]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7147]], label [[IF_THEN7149:%.*]], label [[IF_END7150:%.*]]
// SIMD-ONLY0:       if.then7149:
// SIMD-ONLY0-NEXT:    [[TMP5247:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5247]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7150]]
// SIMD-ONLY0:       if.end7150:
// SIMD-ONLY0-NEXT:    [[TMP5248:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5248]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5249:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5250:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7151:%.*]] = fcmp oeq double [[TMP5249]], [[TMP5250]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7151]], label [[IF_THEN7153:%.*]], label [[IF_END7154:%.*]]
// SIMD-ONLY0:       if.then7153:
// SIMD-ONLY0-NEXT:    [[TMP5251:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5251]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7154]]
// SIMD-ONLY0:       if.end7154:
// SIMD-ONLY0-NEXT:    [[TMP5252:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5253:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7155:%.*]] = fcmp ogt double [[TMP5252]], [[TMP5253]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7155]], label [[IF_THEN7157:%.*]], label [[IF_END7158:%.*]]
// SIMD-ONLY0:       if.then7157:
// SIMD-ONLY0-NEXT:    [[TMP5254:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5254]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7158]]
// SIMD-ONLY0:       if.end7158:
// SIMD-ONLY0-NEXT:    [[TMP5255:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5255]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5256:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5257:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7159:%.*]] = fcmp ogt double [[TMP5256]], [[TMP5257]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7159]], label [[IF_THEN7161:%.*]], label [[IF_END7162:%.*]]
// SIMD-ONLY0:       if.then7161:
// SIMD-ONLY0-NEXT:    [[TMP5258:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5258]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7162]]
// SIMD-ONLY0:       if.end7162:
// SIMD-ONLY0-NEXT:    [[TMP5259:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5259]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5260:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5261:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7163:%.*]] = fcmp olt double [[TMP5260]], [[TMP5261]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7163]], label [[IF_THEN7165:%.*]], label [[IF_END7166:%.*]]
// SIMD-ONLY0:       if.then7165:
// SIMD-ONLY0-NEXT:    [[TMP5262:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5262]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7166]]
// SIMD-ONLY0:       if.end7166:
// SIMD-ONLY0-NEXT:    [[TMP5263:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5263]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5264:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5265:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7167:%.*]] = fcmp olt double [[TMP5264]], [[TMP5265]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7167]], label [[IF_THEN7169:%.*]], label [[IF_END7170:%.*]]
// SIMD-ONLY0:       if.then7169:
// SIMD-ONLY0-NEXT:    [[TMP5266:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5266]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7170]]
// SIMD-ONLY0:       if.end7170:
// SIMD-ONLY0-NEXT:    [[TMP5267:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5267]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5268:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5269:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7171:%.*]] = fcmp oeq double [[TMP5268]], [[TMP5269]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7171]], label [[IF_THEN7173:%.*]], label [[IF_END7174:%.*]]
// SIMD-ONLY0:       if.then7173:
// SIMD-ONLY0-NEXT:    [[TMP5270:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5270]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7174]]
// SIMD-ONLY0:       if.end7174:
// SIMD-ONLY0-NEXT:    [[TMP5271:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5271]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5272:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5273:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7175:%.*]] = fcmp oeq double [[TMP5272]], [[TMP5273]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7175]], label [[IF_THEN7177:%.*]], label [[IF_END7178:%.*]]
// SIMD-ONLY0:       if.then7177:
// SIMD-ONLY0-NEXT:    [[TMP5274:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5274]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7178]]
// SIMD-ONLY0:       if.end7178:
// SIMD-ONLY0-NEXT:    [[TMP5275:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5275]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5276:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5277:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7179:%.*]] = fcmp oeq double [[TMP5276]], [[TMP5277]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7179]], label [[IF_THEN7181:%.*]], label [[IF_ELSE7182:%.*]]
// SIMD-ONLY0:       if.then7181:
// SIMD-ONLY0-NEXT:    [[TMP5278:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5278]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7183:%.*]]
// SIMD-ONLY0:       if.else7182:
// SIMD-ONLY0-NEXT:    [[TMP5279:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5279]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7183]]
// SIMD-ONLY0:       if.end7183:
// SIMD-ONLY0-NEXT:    [[TMP5280:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5281:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7184:%.*]] = fcmp oeq double [[TMP5280]], [[TMP5281]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7184]], label [[IF_THEN7186:%.*]], label [[IF_ELSE7187:%.*]]
// SIMD-ONLY0:       if.then7186:
// SIMD-ONLY0-NEXT:    [[TMP5282:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5282]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7188:%.*]]
// SIMD-ONLY0:       if.else7187:
// SIMD-ONLY0-NEXT:    [[TMP5283:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5283]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7188]]
// SIMD-ONLY0:       if.end7188:
// SIMD-ONLY0-NEXT:    [[TMP5284:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5285:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7189:%.*]] = fcmp oeq double [[TMP5284]], [[TMP5285]]
// SIMD-ONLY0-NEXT:    [[CONV7190:%.*]] = zext i1 [[CMP7189]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7190]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5286:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7191:%.*]] = icmp ne i32 [[TMP5286]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7191]], label [[IF_THEN7192:%.*]], label [[IF_END7193:%.*]]
// SIMD-ONLY0:       if.then7192:
// SIMD-ONLY0-NEXT:    [[TMP5287:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5287]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7193]]
// SIMD-ONLY0:       if.end7193:
// SIMD-ONLY0-NEXT:    [[TMP5288:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5289:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7194:%.*]] = fcmp oeq double [[TMP5288]], [[TMP5289]]
// SIMD-ONLY0-NEXT:    [[CONV7195:%.*]] = zext i1 [[CMP7194]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7195]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5290:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7196:%.*]] = icmp ne i32 [[TMP5290]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7196]], label [[IF_THEN7197:%.*]], label [[IF_END7198:%.*]]
// SIMD-ONLY0:       if.then7197:
// SIMD-ONLY0-NEXT:    [[TMP5291:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5291]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7198]]
// SIMD-ONLY0:       if.end7198:
// SIMD-ONLY0-NEXT:    [[TMP5292:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5293:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7199:%.*]] = fcmp oeq double [[TMP5292]], [[TMP5293]]
// SIMD-ONLY0-NEXT:    [[CONV7200:%.*]] = zext i1 [[CMP7199]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7200]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5294:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7201:%.*]] = icmp ne i32 [[TMP5294]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7201]], label [[IF_THEN7202:%.*]], label [[IF_ELSE7203:%.*]]
// SIMD-ONLY0:       if.then7202:
// SIMD-ONLY0-NEXT:    [[TMP5295:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5295]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7204:%.*]]
// SIMD-ONLY0:       if.else7203:
// SIMD-ONLY0-NEXT:    [[TMP5296:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5296]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7204]]
// SIMD-ONLY0:       if.end7204:
// SIMD-ONLY0-NEXT:    [[TMP5297:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5298:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7205:%.*]] = fcmp oeq double [[TMP5297]], [[TMP5298]]
// SIMD-ONLY0-NEXT:    [[CONV7206:%.*]] = zext i1 [[CMP7205]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7206]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5299:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7207:%.*]] = icmp ne i32 [[TMP5299]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7207]], label [[IF_THEN7208:%.*]], label [[IF_ELSE7209:%.*]]
// SIMD-ONLY0:       if.then7208:
// SIMD-ONLY0-NEXT:    [[TMP5300:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5300]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7210:%.*]]
// SIMD-ONLY0:       if.else7209:
// SIMD-ONLY0-NEXT:    [[TMP5301:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5301]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7210]]
// SIMD-ONLY0:       if.end7210:
// SIMD-ONLY0-NEXT:    [[TMP5302:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5302]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5303:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5304:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7211:%.*]] = fcmp ogt double [[TMP5303]], [[TMP5304]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7211]], label [[IF_THEN7213:%.*]], label [[IF_END7214:%.*]]
// SIMD-ONLY0:       if.then7213:
// SIMD-ONLY0-NEXT:    [[TMP5305:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5305]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7214]]
// SIMD-ONLY0:       if.end7214:
// SIMD-ONLY0-NEXT:    [[TMP5306:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5306]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5307:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5308:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7215:%.*]] = fcmp ogt double [[TMP5307]], [[TMP5308]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7215]], label [[IF_THEN7217:%.*]], label [[IF_END7218:%.*]]
// SIMD-ONLY0:       if.then7217:
// SIMD-ONLY0-NEXT:    [[TMP5309:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5309]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7218]]
// SIMD-ONLY0:       if.end7218:
// SIMD-ONLY0-NEXT:    [[TMP5310:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5310]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5311:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5312:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7219:%.*]] = fcmp olt double [[TMP5311]], [[TMP5312]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7219]], label [[IF_THEN7221:%.*]], label [[IF_END7222:%.*]]
// SIMD-ONLY0:       if.then7221:
// SIMD-ONLY0-NEXT:    [[TMP5313:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5313]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7222]]
// SIMD-ONLY0:       if.end7222:
// SIMD-ONLY0-NEXT:    [[TMP5314:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5314]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5315:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5316:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7223:%.*]] = fcmp olt double [[TMP5315]], [[TMP5316]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7223]], label [[IF_THEN7225:%.*]], label [[IF_END7226:%.*]]
// SIMD-ONLY0:       if.then7225:
// SIMD-ONLY0-NEXT:    [[TMP5317:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5317]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7226]]
// SIMD-ONLY0:       if.end7226:
// SIMD-ONLY0-NEXT:    [[TMP5318:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5318]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5319:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5320:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7227:%.*]] = fcmp oeq double [[TMP5319]], [[TMP5320]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7227]], label [[IF_THEN7229:%.*]], label [[IF_END7230:%.*]]
// SIMD-ONLY0:       if.then7229:
// SIMD-ONLY0-NEXT:    [[TMP5321:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5321]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7230]]
// SIMD-ONLY0:       if.end7230:
// SIMD-ONLY0-NEXT:    [[TMP5322:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5322]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5323:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5324:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7231:%.*]] = fcmp oeq double [[TMP5323]], [[TMP5324]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7231]], label [[IF_THEN7233:%.*]], label [[IF_END7234:%.*]]
// SIMD-ONLY0:       if.then7233:
// SIMD-ONLY0-NEXT:    [[TMP5325:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5325]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7234]]
// SIMD-ONLY0:       if.end7234:
// SIMD-ONLY0-NEXT:    [[TMP5326:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5327:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7235:%.*]] = fcmp ogt double [[TMP5326]], [[TMP5327]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7235]], label [[IF_THEN7237:%.*]], label [[IF_END7238:%.*]]
// SIMD-ONLY0:       if.then7237:
// SIMD-ONLY0-NEXT:    [[TMP5328:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5328]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7238]]
// SIMD-ONLY0:       if.end7238:
// SIMD-ONLY0-NEXT:    [[TMP5329:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5329]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5330:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5331:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7239:%.*]] = fcmp ogt double [[TMP5330]], [[TMP5331]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7239]], label [[IF_THEN7241:%.*]], label [[IF_END7242:%.*]]
// SIMD-ONLY0:       if.then7241:
// SIMD-ONLY0-NEXT:    [[TMP5332:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5332]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7242]]
// SIMD-ONLY0:       if.end7242:
// SIMD-ONLY0-NEXT:    [[TMP5333:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5333]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5334:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5335:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7243:%.*]] = fcmp olt double [[TMP5334]], [[TMP5335]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7243]], label [[IF_THEN7245:%.*]], label [[IF_END7246:%.*]]
// SIMD-ONLY0:       if.then7245:
// SIMD-ONLY0-NEXT:    [[TMP5336:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5336]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7246]]
// SIMD-ONLY0:       if.end7246:
// SIMD-ONLY0-NEXT:    [[TMP5337:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5337]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5338:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5339:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7247:%.*]] = fcmp olt double [[TMP5338]], [[TMP5339]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7247]], label [[IF_THEN7249:%.*]], label [[IF_END7250:%.*]]
// SIMD-ONLY0:       if.then7249:
// SIMD-ONLY0-NEXT:    [[TMP5340:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5340]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7250]]
// SIMD-ONLY0:       if.end7250:
// SIMD-ONLY0-NEXT:    [[TMP5341:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5341]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5342:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5343:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7251:%.*]] = fcmp oeq double [[TMP5342]], [[TMP5343]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7251]], label [[IF_THEN7253:%.*]], label [[IF_END7254:%.*]]
// SIMD-ONLY0:       if.then7253:
// SIMD-ONLY0-NEXT:    [[TMP5344:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5344]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7254]]
// SIMD-ONLY0:       if.end7254:
// SIMD-ONLY0-NEXT:    [[TMP5345:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5345]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5346:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5347:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7255:%.*]] = fcmp oeq double [[TMP5346]], [[TMP5347]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7255]], label [[IF_THEN7257:%.*]], label [[IF_END7258:%.*]]
// SIMD-ONLY0:       if.then7257:
// SIMD-ONLY0-NEXT:    [[TMP5348:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5348]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7258]]
// SIMD-ONLY0:       if.end7258:
// SIMD-ONLY0-NEXT:    [[TMP5349:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5349]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5350:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5351:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7259:%.*]] = fcmp oeq double [[TMP5350]], [[TMP5351]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7259]], label [[IF_THEN7261:%.*]], label [[IF_ELSE7262:%.*]]
// SIMD-ONLY0:       if.then7261:
// SIMD-ONLY0-NEXT:    [[TMP5352:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5352]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7263:%.*]]
// SIMD-ONLY0:       if.else7262:
// SIMD-ONLY0-NEXT:    [[TMP5353:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5353]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7263]]
// SIMD-ONLY0:       if.end7263:
// SIMD-ONLY0-NEXT:    [[TMP5354:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5355:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7264:%.*]] = fcmp oeq double [[TMP5354]], [[TMP5355]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP7264]], label [[IF_THEN7266:%.*]], label [[IF_ELSE7267:%.*]]
// SIMD-ONLY0:       if.then7266:
// SIMD-ONLY0-NEXT:    [[TMP5356:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5356]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7268:%.*]]
// SIMD-ONLY0:       if.else7267:
// SIMD-ONLY0-NEXT:    [[TMP5357:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5357]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7268]]
// SIMD-ONLY0:       if.end7268:
// SIMD-ONLY0-NEXT:    [[TMP5358:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5359:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7269:%.*]] = fcmp oeq double [[TMP5358]], [[TMP5359]]
// SIMD-ONLY0-NEXT:    [[CONV7270:%.*]] = zext i1 [[CMP7269]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7270]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5360:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7271:%.*]] = icmp ne i32 [[TMP5360]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7271]], label [[IF_THEN7272:%.*]], label [[IF_END7273:%.*]]
// SIMD-ONLY0:       if.then7272:
// SIMD-ONLY0-NEXT:    [[TMP5361:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5361]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7273]]
// SIMD-ONLY0:       if.end7273:
// SIMD-ONLY0-NEXT:    [[TMP5362:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5363:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7274:%.*]] = fcmp oeq double [[TMP5362]], [[TMP5363]]
// SIMD-ONLY0-NEXT:    [[CONV7275:%.*]] = zext i1 [[CMP7274]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7275]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5364:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7276:%.*]] = icmp ne i32 [[TMP5364]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7276]], label [[IF_THEN7277:%.*]], label [[IF_END7278:%.*]]
// SIMD-ONLY0:       if.then7277:
// SIMD-ONLY0-NEXT:    [[TMP5365:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5365]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7278]]
// SIMD-ONLY0:       if.end7278:
// SIMD-ONLY0-NEXT:    [[TMP5366:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5367:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7279:%.*]] = fcmp oeq double [[TMP5366]], [[TMP5367]]
// SIMD-ONLY0-NEXT:    [[CONV7280:%.*]] = zext i1 [[CMP7279]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7280]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5368:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7281:%.*]] = icmp ne i32 [[TMP5368]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7281]], label [[IF_THEN7282:%.*]], label [[IF_ELSE7283:%.*]]
// SIMD-ONLY0:       if.then7282:
// SIMD-ONLY0-NEXT:    [[TMP5369:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5369]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7284:%.*]]
// SIMD-ONLY0:       if.else7283:
// SIMD-ONLY0-NEXT:    [[TMP5370:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5370]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7284]]
// SIMD-ONLY0:       if.end7284:
// SIMD-ONLY0-NEXT:    [[TMP5371:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5372:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[CMP7285:%.*]] = fcmp oeq double [[TMP5371]], [[TMP5372]]
// SIMD-ONLY0-NEXT:    [[CONV7286:%.*]] = zext i1 [[CMP7285]] to i32
// SIMD-ONLY0-NEXT:    store i32 [[CONV7286]], ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5373:%.*]] = load i32, ptr [[IR]], align 4
// SIMD-ONLY0-NEXT:    [[TOBOOL7287:%.*]] = icmp ne i32 [[TMP5373]], 0
// SIMD-ONLY0-NEXT:    br i1 [[TOBOOL7287]], label [[IF_THEN7288:%.*]], label [[IF_ELSE7289:%.*]]
// SIMD-ONLY0:       if.then7288:
// SIMD-ONLY0-NEXT:    [[TMP5374:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5374]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7290:%.*]]
// SIMD-ONLY0:       if.else7289:
// SIMD-ONLY0-NEXT:    [[TMP5375:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5375]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END7290]]
// SIMD-ONLY0:       if.end7290:
// SIMD-ONLY0-NEXT:    ret void
//
//
// SIMD-ONLY0-LABEL: @cxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[CX:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[CV:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[CE:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[CD:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP0]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = bytecast b8 [[TMP1]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1:%.*]] = sext i8 [[CONV]] to i32
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV2:%.*]] = bytecast b8 [[TMP2]] to i8
// SIMD-ONLY0-NEXT:    [[CONV3:%.*]] = sext i8 [[CONV2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV1]], [[CONV3]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV5:%.*]] = bytecast b8 [[TMP3]] to i8
// SIMD-ONLY0-NEXT:    [[CONV6:%.*]] = sext i8 [[CONV5]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV7:%.*]] = bytecast b8 [[TMP4]] to i8
// SIMD-ONLY0-NEXT:    [[CONV8:%.*]] = sext i8 [[CONV7]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV6]], [[COND_TRUE]] ], [ [[CONV8]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    [[CONV9:%.*]] = trunc i32 [[COND]] to i8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = bitcast i8 [[CONV9]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP5]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP6]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV10:%.*]] = bytecast b8 [[TMP7]] to i8
// SIMD-ONLY0-NEXT:    [[CONV11:%.*]] = sext i8 [[CONV10]] to i32
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV12:%.*]] = bytecast b8 [[TMP8]] to i8
// SIMD-ONLY0-NEXT:    [[CONV13:%.*]] = sext i8 [[CONV12]] to i32
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = icmp slt i32 [[CONV11]], [[CONV13]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE16:%.*]], label [[COND_FALSE19:%.*]]
// SIMD-ONLY0:       cond.true16:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV17:%.*]] = bytecast b8 [[TMP9]] to i8
// SIMD-ONLY0-NEXT:    [[CONV18:%.*]] = sext i8 [[CONV17]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false19:
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV20:%.*]] = bytecast b8 [[TMP10]] to i8
// SIMD-ONLY0-NEXT:    [[CONV21:%.*]] = sext i8 [[CONV20]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi i32 [ [[CONV18]], [[COND_TRUE16]] ], [ [[CONV21]], [[COND_FALSE19]] ]
// SIMD-ONLY0-NEXT:    [[CONV24:%.*]] = trunc i32 [[COND23]] to i8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = bitcast i8 [[CONV24]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP11]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP12]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV25:%.*]] = bytecast b8 [[TMP13]] to i8
// SIMD-ONLY0-NEXT:    [[CONV26:%.*]] = sext i8 [[CONV25]] to i32
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV27:%.*]] = bytecast b8 [[TMP14]] to i8
// SIMD-ONLY0-NEXT:    [[CONV28:%.*]] = sext i8 [[CONV27]] to i32
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = icmp eq i32 [[CONV26]], [[CONV28]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE31:%.*]], label [[COND_FALSE34:%.*]]
// SIMD-ONLY0:       cond.true31:
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV32:%.*]] = bytecast b8 [[TMP15]] to i8
// SIMD-ONLY0-NEXT:    [[CONV33:%.*]] = sext i8 [[CONV32]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false34:
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV35:%.*]] = bytecast b8 [[TMP16]] to i8
// SIMD-ONLY0-NEXT:    [[CONV36:%.*]] = sext i8 [[CONV35]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi i32 [ [[CONV33]], [[COND_TRUE31]] ], [ [[CONV36]], [[COND_FALSE34]] ]
// SIMD-ONLY0-NEXT:    [[CONV39:%.*]] = trunc i32 [[COND38]] to i8
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = bitcast i8 [[CONV39]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP17]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV40:%.*]] = bytecast b8 [[TMP18]] to i8
// SIMD-ONLY0-NEXT:    [[CONV41:%.*]] = sext i8 [[CONV40]] to i32
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV42:%.*]] = bytecast b8 [[TMP19]] to i8
// SIMD-ONLY0-NEXT:    [[CONV43:%.*]] = sext i8 [[CONV42]] to i32
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp sgt i32 [[CONV41]], [[CONV43]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE46:%.*]], label [[COND_FALSE49:%.*]]
// SIMD-ONLY0:       cond.true46:
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV47:%.*]] = bytecast b8 [[TMP20]] to i8
// SIMD-ONLY0-NEXT:    [[CONV48:%.*]] = sext i8 [[CONV47]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false49:
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV50:%.*]] = bytecast b8 [[TMP21]] to i8
// SIMD-ONLY0-NEXT:    [[CONV51:%.*]] = sext i8 [[CONV50]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi i32 [ [[CONV48]], [[COND_TRUE46]] ], [ [[CONV51]], [[COND_FALSE49]] ]
// SIMD-ONLY0-NEXT:    [[CONV54:%.*]] = trunc i32 [[COND53]] to i8
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = bitcast i8 [[CONV54]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP22]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP23]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV55:%.*]] = bytecast b8 [[TMP24]] to i8
// SIMD-ONLY0-NEXT:    [[CONV56:%.*]] = sext i8 [[CONV55]] to i32
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV57:%.*]] = bytecast b8 [[TMP25]] to i8
// SIMD-ONLY0-NEXT:    [[CONV58:%.*]] = sext i8 [[CONV57]] to i32
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = icmp slt i32 [[CONV56]], [[CONV58]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[COND_TRUE61:%.*]], label [[COND_FALSE64:%.*]]
// SIMD-ONLY0:       cond.true61:
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV62:%.*]] = bytecast b8 [[TMP26]] to i8
// SIMD-ONLY0-NEXT:    [[CONV63:%.*]] = sext i8 [[CONV62]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END67:%.*]]
// SIMD-ONLY0:       cond.false64:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV65:%.*]] = bytecast b8 [[TMP27]] to i8
// SIMD-ONLY0-NEXT:    [[CONV66:%.*]] = sext i8 [[CONV65]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END67]]
// SIMD-ONLY0:       cond.end67:
// SIMD-ONLY0-NEXT:    [[COND68:%.*]] = phi i32 [ [[CONV63]], [[COND_TRUE61]] ], [ [[CONV66]], [[COND_FALSE64]] ]
// SIMD-ONLY0-NEXT:    [[CONV69:%.*]] = trunc i32 [[COND68]] to i8
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = bitcast i8 [[CONV69]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP28]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP29]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV70:%.*]] = bytecast b8 [[TMP30]] to i8
// SIMD-ONLY0-NEXT:    [[CONV71:%.*]] = sext i8 [[CONV70]] to i32
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV72:%.*]] = bytecast b8 [[TMP31]] to i8
// SIMD-ONLY0-NEXT:    [[CONV73:%.*]] = sext i8 [[CONV72]] to i32
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp eq i32 [[CONV71]], [[CONV73]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE76:%.*]], label [[COND_FALSE79:%.*]]
// SIMD-ONLY0:       cond.true76:
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV77:%.*]] = bytecast b8 [[TMP32]] to i8
// SIMD-ONLY0-NEXT:    [[CONV78:%.*]] = sext i8 [[CONV77]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END82:%.*]]
// SIMD-ONLY0:       cond.false79:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV80:%.*]] = bytecast b8 [[TMP33]] to i8
// SIMD-ONLY0-NEXT:    [[CONV81:%.*]] = sext i8 [[CONV80]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END82]]
// SIMD-ONLY0:       cond.end82:
// SIMD-ONLY0-NEXT:    [[COND83:%.*]] = phi i32 [ [[CONV78]], [[COND_TRUE76]] ], [ [[CONV81]], [[COND_FALSE79]] ]
// SIMD-ONLY0-NEXT:    [[CONV84:%.*]] = trunc i32 [[COND83]] to i8
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = bitcast i8 [[CONV84]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP34]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP35]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP36]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV85:%.*]] = bytecast b8 [[TMP37]] to i8
// SIMD-ONLY0-NEXT:    [[CONV86:%.*]] = sext i8 [[CONV85]] to i32
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV87:%.*]] = bytecast b8 [[TMP38]] to i8
// SIMD-ONLY0-NEXT:    [[CONV88:%.*]] = sext i8 [[CONV87]] to i32
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = icmp sgt i32 [[CONV86]], [[CONV88]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE91:%.*]], label [[COND_FALSE94:%.*]]
// SIMD-ONLY0:       cond.true91:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV92:%.*]] = bytecast b8 [[TMP39]] to i8
// SIMD-ONLY0-NEXT:    [[CONV93:%.*]] = sext i8 [[CONV92]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false94:
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV95:%.*]] = bytecast b8 [[TMP40]] to i8
// SIMD-ONLY0-NEXT:    [[CONV96:%.*]] = sext i8 [[CONV95]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi i32 [ [[CONV93]], [[COND_TRUE91]] ], [ [[CONV96]], [[COND_FALSE94]] ]
// SIMD-ONLY0-NEXT:    [[CONV99:%.*]] = trunc i32 [[COND98]] to i8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = bitcast i8 [[CONV99]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP41]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP42]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV100:%.*]] = bytecast b8 [[TMP43]] to i8
// SIMD-ONLY0-NEXT:    [[CONV101:%.*]] = sext i8 [[CONV100]] to i32
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV102:%.*]] = bytecast b8 [[TMP44]] to i8
// SIMD-ONLY0-NEXT:    [[CONV103:%.*]] = sext i8 [[CONV102]] to i32
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = icmp slt i32 [[CONV101]], [[CONV103]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE106:%.*]], label [[COND_FALSE109:%.*]]
// SIMD-ONLY0:       cond.true106:
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV107:%.*]] = bytecast b8 [[TMP45]] to i8
// SIMD-ONLY0-NEXT:    [[CONV108:%.*]] = sext i8 [[CONV107]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false109:
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV110:%.*]] = bytecast b8 [[TMP46]] to i8
// SIMD-ONLY0-NEXT:    [[CONV111:%.*]] = sext i8 [[CONV110]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi i32 [ [[CONV108]], [[COND_TRUE106]] ], [ [[CONV111]], [[COND_FALSE109]] ]
// SIMD-ONLY0-NEXT:    [[CONV114:%.*]] = trunc i32 [[COND113]] to i8
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = bitcast i8 [[CONV114]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP47]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP48]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = bytecast b8 [[TMP49]] to i8
// SIMD-ONLY0-NEXT:    [[CONV116:%.*]] = sext i8 [[CONV115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV117:%.*]] = bytecast b8 [[TMP50]] to i8
// SIMD-ONLY0-NEXT:    [[CONV118:%.*]] = sext i8 [[CONV117]] to i32
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = icmp eq i32 [[CONV116]], [[CONV118]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[COND_TRUE121:%.*]], label [[COND_FALSE124:%.*]]
// SIMD-ONLY0:       cond.true121:
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV122:%.*]] = bytecast b8 [[TMP51]] to i8
// SIMD-ONLY0-NEXT:    [[CONV123:%.*]] = sext i8 [[CONV122]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false124:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV125:%.*]] = bytecast b8 [[TMP52]] to i8
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = sext i8 [[CONV125]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i32 [ [[CONV123]], [[COND_TRUE121]] ], [ [[CONV126]], [[COND_FALSE124]] ]
// SIMD-ONLY0-NEXT:    [[CONV129:%.*]] = trunc i32 [[COND128]] to i8
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = bitcast i8 [[CONV129]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP53]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV130:%.*]] = bytecast b8 [[TMP54]] to i8
// SIMD-ONLY0-NEXT:    [[CONV131:%.*]] = sext i8 [[CONV130]] to i32
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV132:%.*]] = bytecast b8 [[TMP55]] to i8
// SIMD-ONLY0-NEXT:    [[CONV133:%.*]] = sext i8 [[CONV132]] to i32
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = icmp sgt i32 [[CONV131]], [[CONV133]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[COND_TRUE136:%.*]], label [[COND_FALSE139:%.*]]
// SIMD-ONLY0:       cond.true136:
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV137:%.*]] = bytecast b8 [[TMP56]] to i8
// SIMD-ONLY0-NEXT:    [[CONV138:%.*]] = sext i8 [[CONV137]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END142:%.*]]
// SIMD-ONLY0:       cond.false139:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV140:%.*]] = bytecast b8 [[TMP57]] to i8
// SIMD-ONLY0-NEXT:    [[CONV141:%.*]] = sext i8 [[CONV140]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END142]]
// SIMD-ONLY0:       cond.end142:
// SIMD-ONLY0-NEXT:    [[COND143:%.*]] = phi i32 [ [[CONV138]], [[COND_TRUE136]] ], [ [[CONV141]], [[COND_FALSE139]] ]
// SIMD-ONLY0-NEXT:    [[CONV144:%.*]] = trunc i32 [[COND143]] to i8
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = bitcast i8 [[CONV144]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP58]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP59]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV145:%.*]] = bytecast b8 [[TMP60]] to i8
// SIMD-ONLY0-NEXT:    [[CONV146:%.*]] = sext i8 [[CONV145]] to i32
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV147:%.*]] = bytecast b8 [[TMP61]] to i8
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = sext i8 [[CONV147]] to i32
// SIMD-ONLY0-NEXT:    [[CMP149:%.*]] = icmp slt i32 [[CONV146]], [[CONV148]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP149]], label [[COND_TRUE151:%.*]], label [[COND_FALSE154:%.*]]
// SIMD-ONLY0:       cond.true151:
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV152:%.*]] = bytecast b8 [[TMP62]] to i8
// SIMD-ONLY0-NEXT:    [[CONV153:%.*]] = sext i8 [[CONV152]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false154:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV155:%.*]] = bytecast b8 [[TMP63]] to i8
// SIMD-ONLY0-NEXT:    [[CONV156:%.*]] = sext i8 [[CONV155]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi i32 [ [[CONV153]], [[COND_TRUE151]] ], [ [[CONV156]], [[COND_FALSE154]] ]
// SIMD-ONLY0-NEXT:    [[CONV159:%.*]] = trunc i32 [[COND158]] to i8
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = bitcast i8 [[CONV159]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP64]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP65]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV160:%.*]] = bytecast b8 [[TMP66]] to i8
// SIMD-ONLY0-NEXT:    [[CONV161:%.*]] = sext i8 [[CONV160]] to i32
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV162:%.*]] = bytecast b8 [[TMP67]] to i8
// SIMD-ONLY0-NEXT:    [[CONV163:%.*]] = sext i8 [[CONV162]] to i32
// SIMD-ONLY0-NEXT:    [[CMP164:%.*]] = icmp eq i32 [[CONV161]], [[CONV163]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP164]], label [[COND_TRUE166:%.*]], label [[COND_FALSE169:%.*]]
// SIMD-ONLY0:       cond.true166:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV167:%.*]] = bytecast b8 [[TMP68]] to i8
// SIMD-ONLY0-NEXT:    [[CONV168:%.*]] = sext i8 [[CONV167]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END172:%.*]]
// SIMD-ONLY0:       cond.false169:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV170:%.*]] = bytecast b8 [[TMP69]] to i8
// SIMD-ONLY0-NEXT:    [[CONV171:%.*]] = sext i8 [[CONV170]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END172]]
// SIMD-ONLY0:       cond.end172:
// SIMD-ONLY0-NEXT:    [[COND173:%.*]] = phi i32 [ [[CONV168]], [[COND_TRUE166]] ], [ [[CONV171]], [[COND_FALSE169]] ]
// SIMD-ONLY0-NEXT:    [[CONV174:%.*]] = trunc i32 [[COND173]] to i8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = bitcast i8 [[CONV174]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP70]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP71]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP72]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV175:%.*]] = bytecast b8 [[TMP73]] to i8
// SIMD-ONLY0-NEXT:    [[CONV176:%.*]] = sext i8 [[CONV175]] to i32
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV177:%.*]] = bytecast b8 [[TMP74]] to i8
// SIMD-ONLY0-NEXT:    [[CONV178:%.*]] = sext i8 [[CONV177]] to i32
// SIMD-ONLY0-NEXT:    [[CMP179:%.*]] = icmp sgt i32 [[CONV176]], [[CONV178]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP179]], label [[COND_TRUE181:%.*]], label [[COND_FALSE184:%.*]]
// SIMD-ONLY0:       cond.true181:
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV182:%.*]] = bytecast b8 [[TMP75]] to i8
// SIMD-ONLY0-NEXT:    [[CONV183:%.*]] = sext i8 [[CONV182]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END187:%.*]]
// SIMD-ONLY0:       cond.false184:
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV185:%.*]] = bytecast b8 [[TMP76]] to i8
// SIMD-ONLY0-NEXT:    [[CONV186:%.*]] = sext i8 [[CONV185]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END187]]
// SIMD-ONLY0:       cond.end187:
// SIMD-ONLY0-NEXT:    [[COND188:%.*]] = phi i32 [ [[CONV183]], [[COND_TRUE181]] ], [ [[CONV186]], [[COND_FALSE184]] ]
// SIMD-ONLY0-NEXT:    [[CONV189:%.*]] = trunc i32 [[COND188]] to i8
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = bitcast i8 [[CONV189]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP77]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP78]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV190:%.*]] = bytecast b8 [[TMP79]] to i8
// SIMD-ONLY0-NEXT:    [[CONV191:%.*]] = sext i8 [[CONV190]] to i32
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV192:%.*]] = bytecast b8 [[TMP80]] to i8
// SIMD-ONLY0-NEXT:    [[CONV193:%.*]] = sext i8 [[CONV192]] to i32
// SIMD-ONLY0-NEXT:    [[CMP194:%.*]] = icmp slt i32 [[CONV191]], [[CONV193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP194]], label [[COND_TRUE196:%.*]], label [[COND_FALSE199:%.*]]
// SIMD-ONLY0:       cond.true196:
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV197:%.*]] = bytecast b8 [[TMP81]] to i8
// SIMD-ONLY0-NEXT:    [[CONV198:%.*]] = sext i8 [[CONV197]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END202:%.*]]
// SIMD-ONLY0:       cond.false199:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV200:%.*]] = bytecast b8 [[TMP82]] to i8
// SIMD-ONLY0-NEXT:    [[CONV201:%.*]] = sext i8 [[CONV200]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END202]]
// SIMD-ONLY0:       cond.end202:
// SIMD-ONLY0-NEXT:    [[COND203:%.*]] = phi i32 [ [[CONV198]], [[COND_TRUE196]] ], [ [[CONV201]], [[COND_FALSE199]] ]
// SIMD-ONLY0-NEXT:    [[CONV204:%.*]] = trunc i32 [[COND203]] to i8
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = bitcast i8 [[CONV204]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP83]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP84]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV205:%.*]] = bytecast b8 [[TMP85]] to i8
// SIMD-ONLY0-NEXT:    [[CONV206:%.*]] = sext i8 [[CONV205]] to i32
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV207:%.*]] = bytecast b8 [[TMP86]] to i8
// SIMD-ONLY0-NEXT:    [[CONV208:%.*]] = sext i8 [[CONV207]] to i32
// SIMD-ONLY0-NEXT:    [[CMP209:%.*]] = icmp eq i32 [[CONV206]], [[CONV208]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP209]], label [[COND_TRUE211:%.*]], label [[COND_FALSE214:%.*]]
// SIMD-ONLY0:       cond.true211:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV212:%.*]] = bytecast b8 [[TMP87]] to i8
// SIMD-ONLY0-NEXT:    [[CONV213:%.*]] = sext i8 [[CONV212]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END217:%.*]]
// SIMD-ONLY0:       cond.false214:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV215:%.*]] = bytecast b8 [[TMP88]] to i8
// SIMD-ONLY0-NEXT:    [[CONV216:%.*]] = sext i8 [[CONV215]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END217]]
// SIMD-ONLY0:       cond.end217:
// SIMD-ONLY0-NEXT:    [[COND218:%.*]] = phi i32 [ [[CONV213]], [[COND_TRUE211]] ], [ [[CONV216]], [[COND_FALSE214]] ]
// SIMD-ONLY0-NEXT:    [[CONV219:%.*]] = trunc i32 [[COND218]] to i8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = bitcast i8 [[CONV219]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP89]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV220:%.*]] = bytecast b8 [[TMP90]] to i8
// SIMD-ONLY0-NEXT:    [[CONV221:%.*]] = sext i8 [[CONV220]] to i32
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV222:%.*]] = bytecast b8 [[TMP91]] to i8
// SIMD-ONLY0-NEXT:    [[CONV223:%.*]] = sext i8 [[CONV222]] to i32
// SIMD-ONLY0-NEXT:    [[CMP224:%.*]] = icmp sgt i32 [[CONV221]], [[CONV223]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP224]], label [[COND_TRUE226:%.*]], label [[COND_FALSE229:%.*]]
// SIMD-ONLY0:       cond.true226:
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV227:%.*]] = bytecast b8 [[TMP92]] to i8
// SIMD-ONLY0-NEXT:    [[CONV228:%.*]] = sext i8 [[CONV227]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END232:%.*]]
// SIMD-ONLY0:       cond.false229:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV230:%.*]] = bytecast b8 [[TMP93]] to i8
// SIMD-ONLY0-NEXT:    [[CONV231:%.*]] = sext i8 [[CONV230]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END232]]
// SIMD-ONLY0:       cond.end232:
// SIMD-ONLY0-NEXT:    [[COND233:%.*]] = phi i32 [ [[CONV228]], [[COND_TRUE226]] ], [ [[CONV231]], [[COND_FALSE229]] ]
// SIMD-ONLY0-NEXT:    [[CONV234:%.*]] = trunc i32 [[COND233]] to i8
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = bitcast i8 [[CONV234]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP94]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP95]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV235:%.*]] = bytecast b8 [[TMP96]] to i8
// SIMD-ONLY0-NEXT:    [[CONV236:%.*]] = sext i8 [[CONV235]] to i32
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV237:%.*]] = bytecast b8 [[TMP97]] to i8
// SIMD-ONLY0-NEXT:    [[CONV238:%.*]] = sext i8 [[CONV237]] to i32
// SIMD-ONLY0-NEXT:    [[CMP239:%.*]] = icmp slt i32 [[CONV236]], [[CONV238]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP239]], label [[COND_TRUE241:%.*]], label [[COND_FALSE244:%.*]]
// SIMD-ONLY0:       cond.true241:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV242:%.*]] = bytecast b8 [[TMP98]] to i8
// SIMD-ONLY0-NEXT:    [[CONV243:%.*]] = sext i8 [[CONV242]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END247:%.*]]
// SIMD-ONLY0:       cond.false244:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV245:%.*]] = bytecast b8 [[TMP99]] to i8
// SIMD-ONLY0-NEXT:    [[CONV246:%.*]] = sext i8 [[CONV245]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END247]]
// SIMD-ONLY0:       cond.end247:
// SIMD-ONLY0-NEXT:    [[COND248:%.*]] = phi i32 [ [[CONV243]], [[COND_TRUE241]] ], [ [[CONV246]], [[COND_FALSE244]] ]
// SIMD-ONLY0-NEXT:    [[CONV249:%.*]] = trunc i32 [[COND248]] to i8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = bitcast i8 [[CONV249]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP100]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP101]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV250:%.*]] = bytecast b8 [[TMP102]] to i8
// SIMD-ONLY0-NEXT:    [[CONV251:%.*]] = sext i8 [[CONV250]] to i32
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV252:%.*]] = bytecast b8 [[TMP103]] to i8
// SIMD-ONLY0-NEXT:    [[CONV253:%.*]] = sext i8 [[CONV252]] to i32
// SIMD-ONLY0-NEXT:    [[CMP254:%.*]] = icmp eq i32 [[CONV251]], [[CONV253]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP254]], label [[COND_TRUE256:%.*]], label [[COND_FALSE259:%.*]]
// SIMD-ONLY0:       cond.true256:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV257:%.*]] = bytecast b8 [[TMP104]] to i8
// SIMD-ONLY0-NEXT:    [[CONV258:%.*]] = sext i8 [[CONV257]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END262:%.*]]
// SIMD-ONLY0:       cond.false259:
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV260:%.*]] = bytecast b8 [[TMP105]] to i8
// SIMD-ONLY0-NEXT:    [[CONV261:%.*]] = sext i8 [[CONV260]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END262]]
// SIMD-ONLY0:       cond.end262:
// SIMD-ONLY0-NEXT:    [[COND263:%.*]] = phi i32 [ [[CONV258]], [[COND_TRUE256]] ], [ [[CONV261]], [[COND_FALSE259]] ]
// SIMD-ONLY0-NEXT:    [[CONV264:%.*]] = trunc i32 [[COND263]] to i8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = bitcast i8 [[CONV264]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP106]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP107]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP108]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV265:%.*]] = bytecast b8 [[TMP109]] to i8
// SIMD-ONLY0-NEXT:    [[CONV266:%.*]] = sext i8 [[CONV265]] to i32
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV267:%.*]] = bytecast b8 [[TMP110]] to i8
// SIMD-ONLY0-NEXT:    [[CONV268:%.*]] = sext i8 [[CONV267]] to i32
// SIMD-ONLY0-NEXT:    [[CMP269:%.*]] = icmp sgt i32 [[CONV266]], [[CONV268]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP269]], label [[COND_TRUE271:%.*]], label [[COND_FALSE274:%.*]]
// SIMD-ONLY0:       cond.true271:
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV272:%.*]] = bytecast b8 [[TMP111]] to i8
// SIMD-ONLY0-NEXT:    [[CONV273:%.*]] = sext i8 [[CONV272]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END277:%.*]]
// SIMD-ONLY0:       cond.false274:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV275:%.*]] = bytecast b8 [[TMP112]] to i8
// SIMD-ONLY0-NEXT:    [[CONV276:%.*]] = sext i8 [[CONV275]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END277]]
// SIMD-ONLY0:       cond.end277:
// SIMD-ONLY0-NEXT:    [[COND278:%.*]] = phi i32 [ [[CONV273]], [[COND_TRUE271]] ], [ [[CONV276]], [[COND_FALSE274]] ]
// SIMD-ONLY0-NEXT:    [[CONV279:%.*]] = trunc i32 [[COND278]] to i8
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = bitcast i8 [[CONV279]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP113]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP114]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV280:%.*]] = bytecast b8 [[TMP115]] to i8
// SIMD-ONLY0-NEXT:    [[CONV281:%.*]] = sext i8 [[CONV280]] to i32
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV282:%.*]] = bytecast b8 [[TMP116]] to i8
// SIMD-ONLY0-NEXT:    [[CONV283:%.*]] = sext i8 [[CONV282]] to i32
// SIMD-ONLY0-NEXT:    [[CMP284:%.*]] = icmp slt i32 [[CONV281]], [[CONV283]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP284]], label [[COND_TRUE286:%.*]], label [[COND_FALSE289:%.*]]
// SIMD-ONLY0:       cond.true286:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV287:%.*]] = bytecast b8 [[TMP117]] to i8
// SIMD-ONLY0-NEXT:    [[CONV288:%.*]] = sext i8 [[CONV287]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292:%.*]]
// SIMD-ONLY0:       cond.false289:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV290:%.*]] = bytecast b8 [[TMP118]] to i8
// SIMD-ONLY0-NEXT:    [[CONV291:%.*]] = sext i8 [[CONV290]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292]]
// SIMD-ONLY0:       cond.end292:
// SIMD-ONLY0-NEXT:    [[COND293:%.*]] = phi i32 [ [[CONV288]], [[COND_TRUE286]] ], [ [[CONV291]], [[COND_FALSE289]] ]
// SIMD-ONLY0-NEXT:    [[CONV294:%.*]] = trunc i32 [[COND293]] to i8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = bitcast i8 [[CONV294]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP119]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP120]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV295:%.*]] = bytecast b8 [[TMP121]] to i8
// SIMD-ONLY0-NEXT:    [[CONV296:%.*]] = sext i8 [[CONV295]] to i32
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV297:%.*]] = bytecast b8 [[TMP122]] to i8
// SIMD-ONLY0-NEXT:    [[CONV298:%.*]] = sext i8 [[CONV297]] to i32
// SIMD-ONLY0-NEXT:    [[CMP299:%.*]] = icmp eq i32 [[CONV296]], [[CONV298]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP299]], label [[COND_TRUE301:%.*]], label [[COND_FALSE304:%.*]]
// SIMD-ONLY0:       cond.true301:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV302:%.*]] = bytecast b8 [[TMP123]] to i8
// SIMD-ONLY0-NEXT:    [[CONV303:%.*]] = sext i8 [[CONV302]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END307:%.*]]
// SIMD-ONLY0:       cond.false304:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV305:%.*]] = bytecast b8 [[TMP124]] to i8
// SIMD-ONLY0-NEXT:    [[CONV306:%.*]] = sext i8 [[CONV305]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END307]]
// SIMD-ONLY0:       cond.end307:
// SIMD-ONLY0-NEXT:    [[COND308:%.*]] = phi i32 [ [[CONV303]], [[COND_TRUE301]] ], [ [[CONV306]], [[COND_FALSE304]] ]
// SIMD-ONLY0-NEXT:    [[CONV309:%.*]] = trunc i32 [[COND308]] to i8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = bitcast i8 [[CONV309]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP125]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV310:%.*]] = bytecast b8 [[TMP126]] to i8
// SIMD-ONLY0-NEXT:    [[CONV311:%.*]] = sext i8 [[CONV310]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV312:%.*]] = bytecast b8 [[TMP127]] to i8
// SIMD-ONLY0-NEXT:    [[CONV313:%.*]] = sext i8 [[CONV312]] to i32
// SIMD-ONLY0-NEXT:    [[CMP314:%.*]] = icmp sgt i32 [[CONV311]], [[CONV313]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP314]], label [[COND_TRUE316:%.*]], label [[COND_FALSE319:%.*]]
// SIMD-ONLY0:       cond.true316:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV317:%.*]] = bytecast b8 [[TMP128]] to i8
// SIMD-ONLY0-NEXT:    [[CONV318:%.*]] = sext i8 [[CONV317]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END322:%.*]]
// SIMD-ONLY0:       cond.false319:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV320:%.*]] = bytecast b8 [[TMP129]] to i8
// SIMD-ONLY0-NEXT:    [[CONV321:%.*]] = sext i8 [[CONV320]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END322]]
// SIMD-ONLY0:       cond.end322:
// SIMD-ONLY0-NEXT:    [[COND323:%.*]] = phi i32 [ [[CONV318]], [[COND_TRUE316]] ], [ [[CONV321]], [[COND_FALSE319]] ]
// SIMD-ONLY0-NEXT:    [[CONV324:%.*]] = trunc i32 [[COND323]] to i8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = bitcast i8 [[CONV324]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP130]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP131]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV325:%.*]] = bytecast b8 [[TMP132]] to i8
// SIMD-ONLY0-NEXT:    [[CONV326:%.*]] = sext i8 [[CONV325]] to i32
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV327:%.*]] = bytecast b8 [[TMP133]] to i8
// SIMD-ONLY0-NEXT:    [[CONV328:%.*]] = sext i8 [[CONV327]] to i32
// SIMD-ONLY0-NEXT:    [[CMP329:%.*]] = icmp slt i32 [[CONV326]], [[CONV328]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP329]], label [[COND_TRUE331:%.*]], label [[COND_FALSE334:%.*]]
// SIMD-ONLY0:       cond.true331:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV332:%.*]] = bytecast b8 [[TMP134]] to i8
// SIMD-ONLY0-NEXT:    [[CONV333:%.*]] = sext i8 [[CONV332]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END337:%.*]]
// SIMD-ONLY0:       cond.false334:
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV335:%.*]] = bytecast b8 [[TMP135]] to i8
// SIMD-ONLY0-NEXT:    [[CONV336:%.*]] = sext i8 [[CONV335]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END337]]
// SIMD-ONLY0:       cond.end337:
// SIMD-ONLY0-NEXT:    [[COND338:%.*]] = phi i32 [ [[CONV333]], [[COND_TRUE331]] ], [ [[CONV336]], [[COND_FALSE334]] ]
// SIMD-ONLY0-NEXT:    [[CONV339:%.*]] = trunc i32 [[COND338]] to i8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = bitcast i8 [[CONV339]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP136]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP137]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV340:%.*]] = bytecast b8 [[TMP138]] to i8
// SIMD-ONLY0-NEXT:    [[CONV341:%.*]] = sext i8 [[CONV340]] to i32
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV342:%.*]] = bytecast b8 [[TMP139]] to i8
// SIMD-ONLY0-NEXT:    [[CONV343:%.*]] = sext i8 [[CONV342]] to i32
// SIMD-ONLY0-NEXT:    [[CMP344:%.*]] = icmp eq i32 [[CONV341]], [[CONV343]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP344]], label [[COND_TRUE346:%.*]], label [[COND_FALSE349:%.*]]
// SIMD-ONLY0:       cond.true346:
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV347:%.*]] = bytecast b8 [[TMP140]] to i8
// SIMD-ONLY0-NEXT:    [[CONV348:%.*]] = sext i8 [[CONV347]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END352:%.*]]
// SIMD-ONLY0:       cond.false349:
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV350:%.*]] = bytecast b8 [[TMP141]] to i8
// SIMD-ONLY0-NEXT:    [[CONV351:%.*]] = sext i8 [[CONV350]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END352]]
// SIMD-ONLY0:       cond.end352:
// SIMD-ONLY0-NEXT:    [[COND353:%.*]] = phi i32 [ [[CONV348]], [[COND_TRUE346]] ], [ [[CONV351]], [[COND_FALSE349]] ]
// SIMD-ONLY0-NEXT:    [[CONV354:%.*]] = trunc i32 [[COND353]] to i8
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = bitcast i8 [[CONV354]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP142]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP143]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP144]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV355:%.*]] = bytecast b8 [[TMP145]] to i8
// SIMD-ONLY0-NEXT:    [[CONV356:%.*]] = sext i8 [[CONV355]] to i32
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV357:%.*]] = bytecast b8 [[TMP146]] to i8
// SIMD-ONLY0-NEXT:    [[CONV358:%.*]] = sext i8 [[CONV357]] to i32
// SIMD-ONLY0-NEXT:    [[CMP359:%.*]] = icmp sgt i32 [[CONV356]], [[CONV358]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP359]], label [[COND_TRUE361:%.*]], label [[COND_FALSE364:%.*]]
// SIMD-ONLY0:       cond.true361:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV362:%.*]] = bytecast b8 [[TMP147]] to i8
// SIMD-ONLY0-NEXT:    [[CONV363:%.*]] = sext i8 [[CONV362]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END367:%.*]]
// SIMD-ONLY0:       cond.false364:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV365:%.*]] = bytecast b8 [[TMP148]] to i8
// SIMD-ONLY0-NEXT:    [[CONV366:%.*]] = sext i8 [[CONV365]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END367]]
// SIMD-ONLY0:       cond.end367:
// SIMD-ONLY0-NEXT:    [[COND368:%.*]] = phi i32 [ [[CONV363]], [[COND_TRUE361]] ], [ [[CONV366]], [[COND_FALSE364]] ]
// SIMD-ONLY0-NEXT:    [[CONV369:%.*]] = trunc i32 [[COND368]] to i8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = bitcast i8 [[CONV369]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP149]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP150]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV370:%.*]] = bytecast b8 [[TMP151]] to i8
// SIMD-ONLY0-NEXT:    [[CONV371:%.*]] = sext i8 [[CONV370]] to i32
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV372:%.*]] = bytecast b8 [[TMP152]] to i8
// SIMD-ONLY0-NEXT:    [[CONV373:%.*]] = sext i8 [[CONV372]] to i32
// SIMD-ONLY0-NEXT:    [[CMP374:%.*]] = icmp slt i32 [[CONV371]], [[CONV373]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP374]], label [[COND_TRUE376:%.*]], label [[COND_FALSE379:%.*]]
// SIMD-ONLY0:       cond.true376:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV377:%.*]] = bytecast b8 [[TMP153]] to i8
// SIMD-ONLY0-NEXT:    [[CONV378:%.*]] = sext i8 [[CONV377]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END382:%.*]]
// SIMD-ONLY0:       cond.false379:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV380:%.*]] = bytecast b8 [[TMP154]] to i8
// SIMD-ONLY0-NEXT:    [[CONV381:%.*]] = sext i8 [[CONV380]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END382]]
// SIMD-ONLY0:       cond.end382:
// SIMD-ONLY0-NEXT:    [[COND383:%.*]] = phi i32 [ [[CONV378]], [[COND_TRUE376]] ], [ [[CONV381]], [[COND_FALSE379]] ]
// SIMD-ONLY0-NEXT:    [[CONV384:%.*]] = trunc i32 [[COND383]] to i8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = bitcast i8 [[CONV384]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP155]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP156]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV385:%.*]] = bytecast b8 [[TMP157]] to i8
// SIMD-ONLY0-NEXT:    [[CONV386:%.*]] = sext i8 [[CONV385]] to i32
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV387:%.*]] = bytecast b8 [[TMP158]] to i8
// SIMD-ONLY0-NEXT:    [[CONV388:%.*]] = sext i8 [[CONV387]] to i32
// SIMD-ONLY0-NEXT:    [[CMP389:%.*]] = icmp eq i32 [[CONV386]], [[CONV388]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP389]], label [[COND_TRUE391:%.*]], label [[COND_FALSE394:%.*]]
// SIMD-ONLY0:       cond.true391:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV392:%.*]] = bytecast b8 [[TMP159]] to i8
// SIMD-ONLY0-NEXT:    [[CONV393:%.*]] = sext i8 [[CONV392]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END397:%.*]]
// SIMD-ONLY0:       cond.false394:
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV395:%.*]] = bytecast b8 [[TMP160]] to i8
// SIMD-ONLY0-NEXT:    [[CONV396:%.*]] = sext i8 [[CONV395]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END397]]
// SIMD-ONLY0:       cond.end397:
// SIMD-ONLY0-NEXT:    [[COND398:%.*]] = phi i32 [ [[CONV393]], [[COND_TRUE391]] ], [ [[CONV396]], [[COND_FALSE394]] ]
// SIMD-ONLY0-NEXT:    [[CONV399:%.*]] = trunc i32 [[COND398]] to i8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = bitcast i8 [[CONV399]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP161]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV400:%.*]] = bytecast b8 [[TMP162]] to i8
// SIMD-ONLY0-NEXT:    [[CONV401:%.*]] = sext i8 [[CONV400]] to i32
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV402:%.*]] = bytecast b8 [[TMP163]] to i8
// SIMD-ONLY0-NEXT:    [[CONV403:%.*]] = sext i8 [[CONV402]] to i32
// SIMD-ONLY0-NEXT:    [[CMP404:%.*]] = icmp sgt i32 [[CONV401]], [[CONV403]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP404]], label [[COND_TRUE406:%.*]], label [[COND_FALSE409:%.*]]
// SIMD-ONLY0:       cond.true406:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV407:%.*]] = bytecast b8 [[TMP164]] to i8
// SIMD-ONLY0-NEXT:    [[CONV408:%.*]] = sext i8 [[CONV407]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END412:%.*]]
// SIMD-ONLY0:       cond.false409:
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV410:%.*]] = bytecast b8 [[TMP165]] to i8
// SIMD-ONLY0-NEXT:    [[CONV411:%.*]] = sext i8 [[CONV410]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END412]]
// SIMD-ONLY0:       cond.end412:
// SIMD-ONLY0-NEXT:    [[COND413:%.*]] = phi i32 [ [[CONV408]], [[COND_TRUE406]] ], [ [[CONV411]], [[COND_FALSE409]] ]
// SIMD-ONLY0-NEXT:    [[CONV414:%.*]] = trunc i32 [[COND413]] to i8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = bitcast i8 [[CONV414]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP166]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP167]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV415:%.*]] = bytecast b8 [[TMP168]] to i8
// SIMD-ONLY0-NEXT:    [[CONV416:%.*]] = sext i8 [[CONV415]] to i32
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV417:%.*]] = bytecast b8 [[TMP169]] to i8
// SIMD-ONLY0-NEXT:    [[CONV418:%.*]] = sext i8 [[CONV417]] to i32
// SIMD-ONLY0-NEXT:    [[CMP419:%.*]] = icmp slt i32 [[CONV416]], [[CONV418]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP419]], label [[COND_TRUE421:%.*]], label [[COND_FALSE424:%.*]]
// SIMD-ONLY0:       cond.true421:
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV422:%.*]] = bytecast b8 [[TMP170]] to i8
// SIMD-ONLY0-NEXT:    [[CONV423:%.*]] = sext i8 [[CONV422]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END427:%.*]]
// SIMD-ONLY0:       cond.false424:
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV425:%.*]] = bytecast b8 [[TMP171]] to i8
// SIMD-ONLY0-NEXT:    [[CONV426:%.*]] = sext i8 [[CONV425]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END427]]
// SIMD-ONLY0:       cond.end427:
// SIMD-ONLY0-NEXT:    [[COND428:%.*]] = phi i32 [ [[CONV423]], [[COND_TRUE421]] ], [ [[CONV426]], [[COND_FALSE424]] ]
// SIMD-ONLY0-NEXT:    [[CONV429:%.*]] = trunc i32 [[COND428]] to i8
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = bitcast i8 [[CONV429]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP172]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP173]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV430:%.*]] = bytecast b8 [[TMP174]] to i8
// SIMD-ONLY0-NEXT:    [[CONV431:%.*]] = sext i8 [[CONV430]] to i32
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV432:%.*]] = bytecast b8 [[TMP175]] to i8
// SIMD-ONLY0-NEXT:    [[CONV433:%.*]] = sext i8 [[CONV432]] to i32
// SIMD-ONLY0-NEXT:    [[CMP434:%.*]] = icmp eq i32 [[CONV431]], [[CONV433]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP434]], label [[COND_TRUE436:%.*]], label [[COND_FALSE439:%.*]]
// SIMD-ONLY0:       cond.true436:
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV437:%.*]] = bytecast b8 [[TMP176]] to i8
// SIMD-ONLY0-NEXT:    [[CONV438:%.*]] = sext i8 [[CONV437]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END442:%.*]]
// SIMD-ONLY0:       cond.false439:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV440:%.*]] = bytecast b8 [[TMP177]] to i8
// SIMD-ONLY0-NEXT:    [[CONV441:%.*]] = sext i8 [[CONV440]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END442]]
// SIMD-ONLY0:       cond.end442:
// SIMD-ONLY0-NEXT:    [[COND443:%.*]] = phi i32 [ [[CONV438]], [[COND_TRUE436]] ], [ [[CONV441]], [[COND_FALSE439]] ]
// SIMD-ONLY0-NEXT:    [[CONV444:%.*]] = trunc i32 [[COND443]] to i8
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = bitcast i8 [[CONV444]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP178]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP179]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP180]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP181:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV445:%.*]] = bytecast b8 [[TMP181]] to i8
// SIMD-ONLY0-NEXT:    [[CONV446:%.*]] = sext i8 [[CONV445]] to i32
// SIMD-ONLY0-NEXT:    [[TMP182:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV447:%.*]] = bytecast b8 [[TMP182]] to i8
// SIMD-ONLY0-NEXT:    [[CONV448:%.*]] = sext i8 [[CONV447]] to i32
// SIMD-ONLY0-NEXT:    [[CMP449:%.*]] = icmp sgt i32 [[CONV446]], [[CONV448]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP449]], label [[COND_TRUE451:%.*]], label [[COND_FALSE454:%.*]]
// SIMD-ONLY0:       cond.true451:
// SIMD-ONLY0-NEXT:    [[TMP183:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV452:%.*]] = bytecast b8 [[TMP183]] to i8
// SIMD-ONLY0-NEXT:    [[CONV453:%.*]] = sext i8 [[CONV452]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END457:%.*]]
// SIMD-ONLY0:       cond.false454:
// SIMD-ONLY0-NEXT:    [[TMP184:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV455:%.*]] = bytecast b8 [[TMP184]] to i8
// SIMD-ONLY0-NEXT:    [[CONV456:%.*]] = sext i8 [[CONV455]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END457]]
// SIMD-ONLY0:       cond.end457:
// SIMD-ONLY0-NEXT:    [[COND458:%.*]] = phi i32 [ [[CONV453]], [[COND_TRUE451]] ], [ [[CONV456]], [[COND_FALSE454]] ]
// SIMD-ONLY0-NEXT:    [[CONV459:%.*]] = trunc i32 [[COND458]] to i8
// SIMD-ONLY0-NEXT:    [[TMP185:%.*]] = bitcast i8 [[CONV459]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP185]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP186:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP186]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP187:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV460:%.*]] = bytecast b8 [[TMP187]] to i8
// SIMD-ONLY0-NEXT:    [[CONV461:%.*]] = sext i8 [[CONV460]] to i32
// SIMD-ONLY0-NEXT:    [[TMP188:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV462:%.*]] = bytecast b8 [[TMP188]] to i8
// SIMD-ONLY0-NEXT:    [[CONV463:%.*]] = sext i8 [[CONV462]] to i32
// SIMD-ONLY0-NEXT:    [[CMP464:%.*]] = icmp slt i32 [[CONV461]], [[CONV463]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP464]], label [[COND_TRUE466:%.*]], label [[COND_FALSE469:%.*]]
// SIMD-ONLY0:       cond.true466:
// SIMD-ONLY0-NEXT:    [[TMP189:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV467:%.*]] = bytecast b8 [[TMP189]] to i8
// SIMD-ONLY0-NEXT:    [[CONV468:%.*]] = sext i8 [[CONV467]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END472:%.*]]
// SIMD-ONLY0:       cond.false469:
// SIMD-ONLY0-NEXT:    [[TMP190:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV470:%.*]] = bytecast b8 [[TMP190]] to i8
// SIMD-ONLY0-NEXT:    [[CONV471:%.*]] = sext i8 [[CONV470]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END472]]
// SIMD-ONLY0:       cond.end472:
// SIMD-ONLY0-NEXT:    [[COND473:%.*]] = phi i32 [ [[CONV468]], [[COND_TRUE466]] ], [ [[CONV471]], [[COND_FALSE469]] ]
// SIMD-ONLY0-NEXT:    [[CONV474:%.*]] = trunc i32 [[COND473]] to i8
// SIMD-ONLY0-NEXT:    [[TMP191:%.*]] = bitcast i8 [[CONV474]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP191]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP192:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP192]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP193:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV475:%.*]] = bytecast b8 [[TMP193]] to i8
// SIMD-ONLY0-NEXT:    [[CONV476:%.*]] = sext i8 [[CONV475]] to i32
// SIMD-ONLY0-NEXT:    [[TMP194:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV477:%.*]] = bytecast b8 [[TMP194]] to i8
// SIMD-ONLY0-NEXT:    [[CONV478:%.*]] = sext i8 [[CONV477]] to i32
// SIMD-ONLY0-NEXT:    [[CMP479:%.*]] = icmp eq i32 [[CONV476]], [[CONV478]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP479]], label [[COND_TRUE481:%.*]], label [[COND_FALSE484:%.*]]
// SIMD-ONLY0:       cond.true481:
// SIMD-ONLY0-NEXT:    [[TMP195:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV482:%.*]] = bytecast b8 [[TMP195]] to i8
// SIMD-ONLY0-NEXT:    [[CONV483:%.*]] = sext i8 [[CONV482]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END487:%.*]]
// SIMD-ONLY0:       cond.false484:
// SIMD-ONLY0-NEXT:    [[TMP196:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV485:%.*]] = bytecast b8 [[TMP196]] to i8
// SIMD-ONLY0-NEXT:    [[CONV486:%.*]] = sext i8 [[CONV485]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END487]]
// SIMD-ONLY0:       cond.end487:
// SIMD-ONLY0-NEXT:    [[COND488:%.*]] = phi i32 [ [[CONV483]], [[COND_TRUE481]] ], [ [[CONV486]], [[COND_FALSE484]] ]
// SIMD-ONLY0-NEXT:    [[CONV489:%.*]] = trunc i32 [[COND488]] to i8
// SIMD-ONLY0-NEXT:    [[TMP197:%.*]] = bitcast i8 [[CONV489]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP197]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP198:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV490:%.*]] = bytecast b8 [[TMP198]] to i8
// SIMD-ONLY0-NEXT:    [[CONV491:%.*]] = sext i8 [[CONV490]] to i32
// SIMD-ONLY0-NEXT:    [[TMP199:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV492:%.*]] = bytecast b8 [[TMP199]] to i8
// SIMD-ONLY0-NEXT:    [[CONV493:%.*]] = sext i8 [[CONV492]] to i32
// SIMD-ONLY0-NEXT:    [[CMP494:%.*]] = icmp sgt i32 [[CONV491]], [[CONV493]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP494]], label [[COND_TRUE496:%.*]], label [[COND_FALSE499:%.*]]
// SIMD-ONLY0:       cond.true496:
// SIMD-ONLY0-NEXT:    [[TMP200:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV497:%.*]] = bytecast b8 [[TMP200]] to i8
// SIMD-ONLY0-NEXT:    [[CONV498:%.*]] = sext i8 [[CONV497]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END502:%.*]]
// SIMD-ONLY0:       cond.false499:
// SIMD-ONLY0-NEXT:    [[TMP201:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV500:%.*]] = bytecast b8 [[TMP201]] to i8
// SIMD-ONLY0-NEXT:    [[CONV501:%.*]] = sext i8 [[CONV500]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END502]]
// SIMD-ONLY0:       cond.end502:
// SIMD-ONLY0-NEXT:    [[COND503:%.*]] = phi i32 [ [[CONV498]], [[COND_TRUE496]] ], [ [[CONV501]], [[COND_FALSE499]] ]
// SIMD-ONLY0-NEXT:    [[CONV504:%.*]] = trunc i32 [[COND503]] to i8
// SIMD-ONLY0-NEXT:    [[TMP202:%.*]] = bitcast i8 [[CONV504]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP202]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP203:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP203]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP204:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV505:%.*]] = bytecast b8 [[TMP204]] to i8
// SIMD-ONLY0-NEXT:    [[CONV506:%.*]] = sext i8 [[CONV505]] to i32
// SIMD-ONLY0-NEXT:    [[TMP205:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV507:%.*]] = bytecast b8 [[TMP205]] to i8
// SIMD-ONLY0-NEXT:    [[CONV508:%.*]] = sext i8 [[CONV507]] to i32
// SIMD-ONLY0-NEXT:    [[CMP509:%.*]] = icmp slt i32 [[CONV506]], [[CONV508]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP509]], label [[COND_TRUE511:%.*]], label [[COND_FALSE514:%.*]]
// SIMD-ONLY0:       cond.true511:
// SIMD-ONLY0-NEXT:    [[TMP206:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV512:%.*]] = bytecast b8 [[TMP206]] to i8
// SIMD-ONLY0-NEXT:    [[CONV513:%.*]] = sext i8 [[CONV512]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END517:%.*]]
// SIMD-ONLY0:       cond.false514:
// SIMD-ONLY0-NEXT:    [[TMP207:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV515:%.*]] = bytecast b8 [[TMP207]] to i8
// SIMD-ONLY0-NEXT:    [[CONV516:%.*]] = sext i8 [[CONV515]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END517]]
// SIMD-ONLY0:       cond.end517:
// SIMD-ONLY0-NEXT:    [[COND518:%.*]] = phi i32 [ [[CONV513]], [[COND_TRUE511]] ], [ [[CONV516]], [[COND_FALSE514]] ]
// SIMD-ONLY0-NEXT:    [[CONV519:%.*]] = trunc i32 [[COND518]] to i8
// SIMD-ONLY0-NEXT:    [[TMP208:%.*]] = bitcast i8 [[CONV519]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP208]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP209:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP209]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP210:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV520:%.*]] = bytecast b8 [[TMP210]] to i8
// SIMD-ONLY0-NEXT:    [[CONV521:%.*]] = sext i8 [[CONV520]] to i32
// SIMD-ONLY0-NEXT:    [[TMP211:%.*]] = load b8, ptr [[CE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV522:%.*]] = bytecast b8 [[TMP211]] to i8
// SIMD-ONLY0-NEXT:    [[CONV523:%.*]] = sext i8 [[CONV522]] to i32
// SIMD-ONLY0-NEXT:    [[CMP524:%.*]] = icmp eq i32 [[CONV521]], [[CONV523]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP524]], label [[COND_TRUE526:%.*]], label [[COND_FALSE529:%.*]]
// SIMD-ONLY0:       cond.true526:
// SIMD-ONLY0-NEXT:    [[TMP212:%.*]] = load b8, ptr [[CD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV527:%.*]] = bytecast b8 [[TMP212]] to i8
// SIMD-ONLY0-NEXT:    [[CONV528:%.*]] = sext i8 [[CONV527]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END532:%.*]]
// SIMD-ONLY0:       cond.false529:
// SIMD-ONLY0-NEXT:    [[TMP213:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV530:%.*]] = bytecast b8 [[TMP213]] to i8
// SIMD-ONLY0-NEXT:    [[CONV531:%.*]] = sext i8 [[CONV530]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END532]]
// SIMD-ONLY0:       cond.end532:
// SIMD-ONLY0-NEXT:    [[COND533:%.*]] = phi i32 [ [[CONV528]], [[COND_TRUE526]] ], [ [[CONV531]], [[COND_FALSE529]] ]
// SIMD-ONLY0-NEXT:    [[CONV534:%.*]] = trunc i32 [[COND533]] to i8
// SIMD-ONLY0-NEXT:    [[TMP214:%.*]] = bitcast i8 [[CONV534]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP214]], ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP215:%.*]] = load b8, ptr [[CX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP215]], ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP216:%.*]] = load b8, ptr [[CV]], align 1
// SIMD-ONLY0-NEXT:    ret b8 [[TMP216]]
//
//
// SIMD-ONLY0-LABEL: @ucxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[UCX:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCV:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCE:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[UCD:%.*]] = alloca b8, align 1
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP0]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = bytecast b8 [[TMP1]] to i8
// SIMD-ONLY0-NEXT:    [[CONV1:%.*]] = zext i8 [[CONV]] to i32
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV2:%.*]] = bytecast b8 [[TMP2]] to i8
// SIMD-ONLY0-NEXT:    [[CONV3:%.*]] = zext i8 [[CONV2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV1]], [[CONV3]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV5:%.*]] = bytecast b8 [[TMP3]] to i8
// SIMD-ONLY0-NEXT:    [[CONV6:%.*]] = zext i8 [[CONV5]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV7:%.*]] = bytecast b8 [[TMP4]] to i8
// SIMD-ONLY0-NEXT:    [[CONV8:%.*]] = zext i8 [[CONV7]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV6]], [[COND_TRUE]] ], [ [[CONV8]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    [[CONV9:%.*]] = trunc i32 [[COND]] to i8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = bitcast i8 [[CONV9]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP5]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP6]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV10:%.*]] = bytecast b8 [[TMP7]] to i8
// SIMD-ONLY0-NEXT:    [[CONV11:%.*]] = zext i8 [[CONV10]] to i32
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV12:%.*]] = bytecast b8 [[TMP8]] to i8
// SIMD-ONLY0-NEXT:    [[CONV13:%.*]] = zext i8 [[CONV12]] to i32
// SIMD-ONLY0-NEXT:    [[CMP14:%.*]] = icmp slt i32 [[CONV11]], [[CONV13]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP14]], label [[COND_TRUE16:%.*]], label [[COND_FALSE19:%.*]]
// SIMD-ONLY0:       cond.true16:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV17:%.*]] = bytecast b8 [[TMP9]] to i8
// SIMD-ONLY0-NEXT:    [[CONV18:%.*]] = zext i8 [[CONV17]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END22:%.*]]
// SIMD-ONLY0:       cond.false19:
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV20:%.*]] = bytecast b8 [[TMP10]] to i8
// SIMD-ONLY0-NEXT:    [[CONV21:%.*]] = zext i8 [[CONV20]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END22]]
// SIMD-ONLY0:       cond.end22:
// SIMD-ONLY0-NEXT:    [[COND23:%.*]] = phi i32 [ [[CONV18]], [[COND_TRUE16]] ], [ [[CONV21]], [[COND_FALSE19]] ]
// SIMD-ONLY0-NEXT:    [[CONV24:%.*]] = trunc i32 [[COND23]] to i8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = bitcast i8 [[CONV24]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP11]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP12]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV25:%.*]] = bytecast b8 [[TMP13]] to i8
// SIMD-ONLY0-NEXT:    [[CONV26:%.*]] = zext i8 [[CONV25]] to i32
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV27:%.*]] = bytecast b8 [[TMP14]] to i8
// SIMD-ONLY0-NEXT:    [[CONV28:%.*]] = zext i8 [[CONV27]] to i32
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = icmp eq i32 [[CONV26]], [[CONV28]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[COND_TRUE31:%.*]], label [[COND_FALSE34:%.*]]
// SIMD-ONLY0:       cond.true31:
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV32:%.*]] = bytecast b8 [[TMP15]] to i8
// SIMD-ONLY0-NEXT:    [[CONV33:%.*]] = zext i8 [[CONV32]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END37:%.*]]
// SIMD-ONLY0:       cond.false34:
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV35:%.*]] = bytecast b8 [[TMP16]] to i8
// SIMD-ONLY0-NEXT:    [[CONV36:%.*]] = zext i8 [[CONV35]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END37]]
// SIMD-ONLY0:       cond.end37:
// SIMD-ONLY0-NEXT:    [[COND38:%.*]] = phi i32 [ [[CONV33]], [[COND_TRUE31]] ], [ [[CONV36]], [[COND_FALSE34]] ]
// SIMD-ONLY0-NEXT:    [[CONV39:%.*]] = trunc i32 [[COND38]] to i8
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = bitcast i8 [[CONV39]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP17]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV40:%.*]] = bytecast b8 [[TMP18]] to i8
// SIMD-ONLY0-NEXT:    [[CONV41:%.*]] = zext i8 [[CONV40]] to i32
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV42:%.*]] = bytecast b8 [[TMP19]] to i8
// SIMD-ONLY0-NEXT:    [[CONV43:%.*]] = zext i8 [[CONV42]] to i32
// SIMD-ONLY0-NEXT:    [[CMP44:%.*]] = icmp sgt i32 [[CONV41]], [[CONV43]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP44]], label [[COND_TRUE46:%.*]], label [[COND_FALSE49:%.*]]
// SIMD-ONLY0:       cond.true46:
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV47:%.*]] = bytecast b8 [[TMP20]] to i8
// SIMD-ONLY0-NEXT:    [[CONV48:%.*]] = zext i8 [[CONV47]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END52:%.*]]
// SIMD-ONLY0:       cond.false49:
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV50:%.*]] = bytecast b8 [[TMP21]] to i8
// SIMD-ONLY0-NEXT:    [[CONV51:%.*]] = zext i8 [[CONV50]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END52]]
// SIMD-ONLY0:       cond.end52:
// SIMD-ONLY0-NEXT:    [[COND53:%.*]] = phi i32 [ [[CONV48]], [[COND_TRUE46]] ], [ [[CONV51]], [[COND_FALSE49]] ]
// SIMD-ONLY0-NEXT:    [[CONV54:%.*]] = trunc i32 [[COND53]] to i8
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = bitcast i8 [[CONV54]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP22]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP23]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV55:%.*]] = bytecast b8 [[TMP24]] to i8
// SIMD-ONLY0-NEXT:    [[CONV56:%.*]] = zext i8 [[CONV55]] to i32
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV57:%.*]] = bytecast b8 [[TMP25]] to i8
// SIMD-ONLY0-NEXT:    [[CONV58:%.*]] = zext i8 [[CONV57]] to i32
// SIMD-ONLY0-NEXT:    [[CMP59:%.*]] = icmp slt i32 [[CONV56]], [[CONV58]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP59]], label [[COND_TRUE61:%.*]], label [[COND_FALSE64:%.*]]
// SIMD-ONLY0:       cond.true61:
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV62:%.*]] = bytecast b8 [[TMP26]] to i8
// SIMD-ONLY0-NEXT:    [[CONV63:%.*]] = zext i8 [[CONV62]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END67:%.*]]
// SIMD-ONLY0:       cond.false64:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV65:%.*]] = bytecast b8 [[TMP27]] to i8
// SIMD-ONLY0-NEXT:    [[CONV66:%.*]] = zext i8 [[CONV65]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END67]]
// SIMD-ONLY0:       cond.end67:
// SIMD-ONLY0-NEXT:    [[COND68:%.*]] = phi i32 [ [[CONV63]], [[COND_TRUE61]] ], [ [[CONV66]], [[COND_FALSE64]] ]
// SIMD-ONLY0-NEXT:    [[CONV69:%.*]] = trunc i32 [[COND68]] to i8
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = bitcast i8 [[CONV69]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP28]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP29]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV70:%.*]] = bytecast b8 [[TMP30]] to i8
// SIMD-ONLY0-NEXT:    [[CONV71:%.*]] = zext i8 [[CONV70]] to i32
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV72:%.*]] = bytecast b8 [[TMP31]] to i8
// SIMD-ONLY0-NEXT:    [[CONV73:%.*]] = zext i8 [[CONV72]] to i32
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp eq i32 [[CONV71]], [[CONV73]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE76:%.*]], label [[COND_FALSE79:%.*]]
// SIMD-ONLY0:       cond.true76:
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV77:%.*]] = bytecast b8 [[TMP32]] to i8
// SIMD-ONLY0-NEXT:    [[CONV78:%.*]] = zext i8 [[CONV77]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END82:%.*]]
// SIMD-ONLY0:       cond.false79:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV80:%.*]] = bytecast b8 [[TMP33]] to i8
// SIMD-ONLY0-NEXT:    [[CONV81:%.*]] = zext i8 [[CONV80]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END82]]
// SIMD-ONLY0:       cond.end82:
// SIMD-ONLY0-NEXT:    [[COND83:%.*]] = phi i32 [ [[CONV78]], [[COND_TRUE76]] ], [ [[CONV81]], [[COND_FALSE79]] ]
// SIMD-ONLY0-NEXT:    [[CONV84:%.*]] = trunc i32 [[COND83]] to i8
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = bitcast i8 [[CONV84]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP34]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP35]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP36]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV85:%.*]] = bytecast b8 [[TMP37]] to i8
// SIMD-ONLY0-NEXT:    [[CONV86:%.*]] = zext i8 [[CONV85]] to i32
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV87:%.*]] = bytecast b8 [[TMP38]] to i8
// SIMD-ONLY0-NEXT:    [[CONV88:%.*]] = zext i8 [[CONV87]] to i32
// SIMD-ONLY0-NEXT:    [[CMP89:%.*]] = icmp sgt i32 [[CONV86]], [[CONV88]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP89]], label [[COND_TRUE91:%.*]], label [[COND_FALSE94:%.*]]
// SIMD-ONLY0:       cond.true91:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV92:%.*]] = bytecast b8 [[TMP39]] to i8
// SIMD-ONLY0-NEXT:    [[CONV93:%.*]] = zext i8 [[CONV92]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END97:%.*]]
// SIMD-ONLY0:       cond.false94:
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV95:%.*]] = bytecast b8 [[TMP40]] to i8
// SIMD-ONLY0-NEXT:    [[CONV96:%.*]] = zext i8 [[CONV95]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END97]]
// SIMD-ONLY0:       cond.end97:
// SIMD-ONLY0-NEXT:    [[COND98:%.*]] = phi i32 [ [[CONV93]], [[COND_TRUE91]] ], [ [[CONV96]], [[COND_FALSE94]] ]
// SIMD-ONLY0-NEXT:    [[CONV99:%.*]] = trunc i32 [[COND98]] to i8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = bitcast i8 [[CONV99]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP41]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP42]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV100:%.*]] = bytecast b8 [[TMP43]] to i8
// SIMD-ONLY0-NEXT:    [[CONV101:%.*]] = zext i8 [[CONV100]] to i32
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV102:%.*]] = bytecast b8 [[TMP44]] to i8
// SIMD-ONLY0-NEXT:    [[CONV103:%.*]] = zext i8 [[CONV102]] to i32
// SIMD-ONLY0-NEXT:    [[CMP104:%.*]] = icmp slt i32 [[CONV101]], [[CONV103]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP104]], label [[COND_TRUE106:%.*]], label [[COND_FALSE109:%.*]]
// SIMD-ONLY0:       cond.true106:
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV107:%.*]] = bytecast b8 [[TMP45]] to i8
// SIMD-ONLY0-NEXT:    [[CONV108:%.*]] = zext i8 [[CONV107]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END112:%.*]]
// SIMD-ONLY0:       cond.false109:
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV110:%.*]] = bytecast b8 [[TMP46]] to i8
// SIMD-ONLY0-NEXT:    [[CONV111:%.*]] = zext i8 [[CONV110]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END112]]
// SIMD-ONLY0:       cond.end112:
// SIMD-ONLY0-NEXT:    [[COND113:%.*]] = phi i32 [ [[CONV108]], [[COND_TRUE106]] ], [ [[CONV111]], [[COND_FALSE109]] ]
// SIMD-ONLY0-NEXT:    [[CONV114:%.*]] = trunc i32 [[COND113]] to i8
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = bitcast i8 [[CONV114]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP47]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP48]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = bytecast b8 [[TMP49]] to i8
// SIMD-ONLY0-NEXT:    [[CONV116:%.*]] = zext i8 [[CONV115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV117:%.*]] = bytecast b8 [[TMP50]] to i8
// SIMD-ONLY0-NEXT:    [[CONV118:%.*]] = zext i8 [[CONV117]] to i32
// SIMD-ONLY0-NEXT:    [[CMP119:%.*]] = icmp eq i32 [[CONV116]], [[CONV118]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP119]], label [[COND_TRUE121:%.*]], label [[COND_FALSE124:%.*]]
// SIMD-ONLY0:       cond.true121:
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV122:%.*]] = bytecast b8 [[TMP51]] to i8
// SIMD-ONLY0-NEXT:    [[CONV123:%.*]] = zext i8 [[CONV122]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127:%.*]]
// SIMD-ONLY0:       cond.false124:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV125:%.*]] = bytecast b8 [[TMP52]] to i8
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = zext i8 [[CONV125]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END127]]
// SIMD-ONLY0:       cond.end127:
// SIMD-ONLY0-NEXT:    [[COND128:%.*]] = phi i32 [ [[CONV123]], [[COND_TRUE121]] ], [ [[CONV126]], [[COND_FALSE124]] ]
// SIMD-ONLY0-NEXT:    [[CONV129:%.*]] = trunc i32 [[COND128]] to i8
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = bitcast i8 [[CONV129]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP53]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV130:%.*]] = bytecast b8 [[TMP54]] to i8
// SIMD-ONLY0-NEXT:    [[CONV131:%.*]] = zext i8 [[CONV130]] to i32
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV132:%.*]] = bytecast b8 [[TMP55]] to i8
// SIMD-ONLY0-NEXT:    [[CONV133:%.*]] = zext i8 [[CONV132]] to i32
// SIMD-ONLY0-NEXT:    [[CMP134:%.*]] = icmp sgt i32 [[CONV131]], [[CONV133]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP134]], label [[COND_TRUE136:%.*]], label [[COND_FALSE139:%.*]]
// SIMD-ONLY0:       cond.true136:
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV137:%.*]] = bytecast b8 [[TMP56]] to i8
// SIMD-ONLY0-NEXT:    [[CONV138:%.*]] = zext i8 [[CONV137]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END142:%.*]]
// SIMD-ONLY0:       cond.false139:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV140:%.*]] = bytecast b8 [[TMP57]] to i8
// SIMD-ONLY0-NEXT:    [[CONV141:%.*]] = zext i8 [[CONV140]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END142]]
// SIMD-ONLY0:       cond.end142:
// SIMD-ONLY0-NEXT:    [[COND143:%.*]] = phi i32 [ [[CONV138]], [[COND_TRUE136]] ], [ [[CONV141]], [[COND_FALSE139]] ]
// SIMD-ONLY0-NEXT:    [[CONV144:%.*]] = trunc i32 [[COND143]] to i8
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = bitcast i8 [[CONV144]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP58]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP59]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV145:%.*]] = bytecast b8 [[TMP60]] to i8
// SIMD-ONLY0-NEXT:    [[CONV146:%.*]] = zext i8 [[CONV145]] to i32
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV147:%.*]] = bytecast b8 [[TMP61]] to i8
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = zext i8 [[CONV147]] to i32
// SIMD-ONLY0-NEXT:    [[CMP149:%.*]] = icmp slt i32 [[CONV146]], [[CONV148]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP149]], label [[COND_TRUE151:%.*]], label [[COND_FALSE154:%.*]]
// SIMD-ONLY0:       cond.true151:
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV152:%.*]] = bytecast b8 [[TMP62]] to i8
// SIMD-ONLY0-NEXT:    [[CONV153:%.*]] = zext i8 [[CONV152]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false154:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV155:%.*]] = bytecast b8 [[TMP63]] to i8
// SIMD-ONLY0-NEXT:    [[CONV156:%.*]] = zext i8 [[CONV155]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi i32 [ [[CONV153]], [[COND_TRUE151]] ], [ [[CONV156]], [[COND_FALSE154]] ]
// SIMD-ONLY0-NEXT:    [[CONV159:%.*]] = trunc i32 [[COND158]] to i8
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = bitcast i8 [[CONV159]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP64]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP65]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV160:%.*]] = bytecast b8 [[TMP66]] to i8
// SIMD-ONLY0-NEXT:    [[CONV161:%.*]] = zext i8 [[CONV160]] to i32
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV162:%.*]] = bytecast b8 [[TMP67]] to i8
// SIMD-ONLY0-NEXT:    [[CONV163:%.*]] = zext i8 [[CONV162]] to i32
// SIMD-ONLY0-NEXT:    [[CMP164:%.*]] = icmp eq i32 [[CONV161]], [[CONV163]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP164]], label [[COND_TRUE166:%.*]], label [[COND_FALSE169:%.*]]
// SIMD-ONLY0:       cond.true166:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV167:%.*]] = bytecast b8 [[TMP68]] to i8
// SIMD-ONLY0-NEXT:    [[CONV168:%.*]] = zext i8 [[CONV167]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END172:%.*]]
// SIMD-ONLY0:       cond.false169:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV170:%.*]] = bytecast b8 [[TMP69]] to i8
// SIMD-ONLY0-NEXT:    [[CONV171:%.*]] = zext i8 [[CONV170]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END172]]
// SIMD-ONLY0:       cond.end172:
// SIMD-ONLY0-NEXT:    [[COND173:%.*]] = phi i32 [ [[CONV168]], [[COND_TRUE166]] ], [ [[CONV171]], [[COND_FALSE169]] ]
// SIMD-ONLY0-NEXT:    [[CONV174:%.*]] = trunc i32 [[COND173]] to i8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = bitcast i8 [[CONV174]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP70]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP71]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP72]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV175:%.*]] = bytecast b8 [[TMP73]] to i8
// SIMD-ONLY0-NEXT:    [[CONV176:%.*]] = zext i8 [[CONV175]] to i32
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV177:%.*]] = bytecast b8 [[TMP74]] to i8
// SIMD-ONLY0-NEXT:    [[CONV178:%.*]] = zext i8 [[CONV177]] to i32
// SIMD-ONLY0-NEXT:    [[CMP179:%.*]] = icmp sgt i32 [[CONV176]], [[CONV178]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP179]], label [[COND_TRUE181:%.*]], label [[COND_FALSE184:%.*]]
// SIMD-ONLY0:       cond.true181:
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV182:%.*]] = bytecast b8 [[TMP75]] to i8
// SIMD-ONLY0-NEXT:    [[CONV183:%.*]] = zext i8 [[CONV182]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END187:%.*]]
// SIMD-ONLY0:       cond.false184:
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV185:%.*]] = bytecast b8 [[TMP76]] to i8
// SIMD-ONLY0-NEXT:    [[CONV186:%.*]] = zext i8 [[CONV185]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END187]]
// SIMD-ONLY0:       cond.end187:
// SIMD-ONLY0-NEXT:    [[COND188:%.*]] = phi i32 [ [[CONV183]], [[COND_TRUE181]] ], [ [[CONV186]], [[COND_FALSE184]] ]
// SIMD-ONLY0-NEXT:    [[CONV189:%.*]] = trunc i32 [[COND188]] to i8
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = bitcast i8 [[CONV189]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP77]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP78]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV190:%.*]] = bytecast b8 [[TMP79]] to i8
// SIMD-ONLY0-NEXT:    [[CONV191:%.*]] = zext i8 [[CONV190]] to i32
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV192:%.*]] = bytecast b8 [[TMP80]] to i8
// SIMD-ONLY0-NEXT:    [[CONV193:%.*]] = zext i8 [[CONV192]] to i32
// SIMD-ONLY0-NEXT:    [[CMP194:%.*]] = icmp slt i32 [[CONV191]], [[CONV193]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP194]], label [[COND_TRUE196:%.*]], label [[COND_FALSE199:%.*]]
// SIMD-ONLY0:       cond.true196:
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV197:%.*]] = bytecast b8 [[TMP81]] to i8
// SIMD-ONLY0-NEXT:    [[CONV198:%.*]] = zext i8 [[CONV197]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END202:%.*]]
// SIMD-ONLY0:       cond.false199:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV200:%.*]] = bytecast b8 [[TMP82]] to i8
// SIMD-ONLY0-NEXT:    [[CONV201:%.*]] = zext i8 [[CONV200]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END202]]
// SIMD-ONLY0:       cond.end202:
// SIMD-ONLY0-NEXT:    [[COND203:%.*]] = phi i32 [ [[CONV198]], [[COND_TRUE196]] ], [ [[CONV201]], [[COND_FALSE199]] ]
// SIMD-ONLY0-NEXT:    [[CONV204:%.*]] = trunc i32 [[COND203]] to i8
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = bitcast i8 [[CONV204]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP83]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP84]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV205:%.*]] = bytecast b8 [[TMP85]] to i8
// SIMD-ONLY0-NEXT:    [[CONV206:%.*]] = zext i8 [[CONV205]] to i32
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV207:%.*]] = bytecast b8 [[TMP86]] to i8
// SIMD-ONLY0-NEXT:    [[CONV208:%.*]] = zext i8 [[CONV207]] to i32
// SIMD-ONLY0-NEXT:    [[CMP209:%.*]] = icmp eq i32 [[CONV206]], [[CONV208]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP209]], label [[COND_TRUE211:%.*]], label [[COND_FALSE214:%.*]]
// SIMD-ONLY0:       cond.true211:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV212:%.*]] = bytecast b8 [[TMP87]] to i8
// SIMD-ONLY0-NEXT:    [[CONV213:%.*]] = zext i8 [[CONV212]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END217:%.*]]
// SIMD-ONLY0:       cond.false214:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV215:%.*]] = bytecast b8 [[TMP88]] to i8
// SIMD-ONLY0-NEXT:    [[CONV216:%.*]] = zext i8 [[CONV215]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END217]]
// SIMD-ONLY0:       cond.end217:
// SIMD-ONLY0-NEXT:    [[COND218:%.*]] = phi i32 [ [[CONV213]], [[COND_TRUE211]] ], [ [[CONV216]], [[COND_FALSE214]] ]
// SIMD-ONLY0-NEXT:    [[CONV219:%.*]] = trunc i32 [[COND218]] to i8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = bitcast i8 [[CONV219]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP89]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV220:%.*]] = bytecast b8 [[TMP90]] to i8
// SIMD-ONLY0-NEXT:    [[CONV221:%.*]] = zext i8 [[CONV220]] to i32
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV222:%.*]] = bytecast b8 [[TMP91]] to i8
// SIMD-ONLY0-NEXT:    [[CONV223:%.*]] = zext i8 [[CONV222]] to i32
// SIMD-ONLY0-NEXT:    [[CMP224:%.*]] = icmp sgt i32 [[CONV221]], [[CONV223]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP224]], label [[COND_TRUE226:%.*]], label [[COND_FALSE229:%.*]]
// SIMD-ONLY0:       cond.true226:
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV227:%.*]] = bytecast b8 [[TMP92]] to i8
// SIMD-ONLY0-NEXT:    [[CONV228:%.*]] = zext i8 [[CONV227]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END232:%.*]]
// SIMD-ONLY0:       cond.false229:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV230:%.*]] = bytecast b8 [[TMP93]] to i8
// SIMD-ONLY0-NEXT:    [[CONV231:%.*]] = zext i8 [[CONV230]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END232]]
// SIMD-ONLY0:       cond.end232:
// SIMD-ONLY0-NEXT:    [[COND233:%.*]] = phi i32 [ [[CONV228]], [[COND_TRUE226]] ], [ [[CONV231]], [[COND_FALSE229]] ]
// SIMD-ONLY0-NEXT:    [[CONV234:%.*]] = trunc i32 [[COND233]] to i8
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = bitcast i8 [[CONV234]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP94]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP95]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV235:%.*]] = bytecast b8 [[TMP96]] to i8
// SIMD-ONLY0-NEXT:    [[CONV236:%.*]] = zext i8 [[CONV235]] to i32
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV237:%.*]] = bytecast b8 [[TMP97]] to i8
// SIMD-ONLY0-NEXT:    [[CONV238:%.*]] = zext i8 [[CONV237]] to i32
// SIMD-ONLY0-NEXT:    [[CMP239:%.*]] = icmp slt i32 [[CONV236]], [[CONV238]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP239]], label [[COND_TRUE241:%.*]], label [[COND_FALSE244:%.*]]
// SIMD-ONLY0:       cond.true241:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV242:%.*]] = bytecast b8 [[TMP98]] to i8
// SIMD-ONLY0-NEXT:    [[CONV243:%.*]] = zext i8 [[CONV242]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END247:%.*]]
// SIMD-ONLY0:       cond.false244:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV245:%.*]] = bytecast b8 [[TMP99]] to i8
// SIMD-ONLY0-NEXT:    [[CONV246:%.*]] = zext i8 [[CONV245]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END247]]
// SIMD-ONLY0:       cond.end247:
// SIMD-ONLY0-NEXT:    [[COND248:%.*]] = phi i32 [ [[CONV243]], [[COND_TRUE241]] ], [ [[CONV246]], [[COND_FALSE244]] ]
// SIMD-ONLY0-NEXT:    [[CONV249:%.*]] = trunc i32 [[COND248]] to i8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = bitcast i8 [[CONV249]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP100]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP101]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV250:%.*]] = bytecast b8 [[TMP102]] to i8
// SIMD-ONLY0-NEXT:    [[CONV251:%.*]] = zext i8 [[CONV250]] to i32
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV252:%.*]] = bytecast b8 [[TMP103]] to i8
// SIMD-ONLY0-NEXT:    [[CONV253:%.*]] = zext i8 [[CONV252]] to i32
// SIMD-ONLY0-NEXT:    [[CMP254:%.*]] = icmp eq i32 [[CONV251]], [[CONV253]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP254]], label [[COND_TRUE256:%.*]], label [[COND_FALSE259:%.*]]
// SIMD-ONLY0:       cond.true256:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV257:%.*]] = bytecast b8 [[TMP104]] to i8
// SIMD-ONLY0-NEXT:    [[CONV258:%.*]] = zext i8 [[CONV257]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END262:%.*]]
// SIMD-ONLY0:       cond.false259:
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV260:%.*]] = bytecast b8 [[TMP105]] to i8
// SIMD-ONLY0-NEXT:    [[CONV261:%.*]] = zext i8 [[CONV260]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END262]]
// SIMD-ONLY0:       cond.end262:
// SIMD-ONLY0-NEXT:    [[COND263:%.*]] = phi i32 [ [[CONV258]], [[COND_TRUE256]] ], [ [[CONV261]], [[COND_FALSE259]] ]
// SIMD-ONLY0-NEXT:    [[CONV264:%.*]] = trunc i32 [[COND263]] to i8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = bitcast i8 [[CONV264]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP106]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP107]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP108]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV265:%.*]] = bytecast b8 [[TMP109]] to i8
// SIMD-ONLY0-NEXT:    [[CONV266:%.*]] = zext i8 [[CONV265]] to i32
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV267:%.*]] = bytecast b8 [[TMP110]] to i8
// SIMD-ONLY0-NEXT:    [[CONV268:%.*]] = zext i8 [[CONV267]] to i32
// SIMD-ONLY0-NEXT:    [[CMP269:%.*]] = icmp sgt i32 [[CONV266]], [[CONV268]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP269]], label [[COND_TRUE271:%.*]], label [[COND_FALSE274:%.*]]
// SIMD-ONLY0:       cond.true271:
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV272:%.*]] = bytecast b8 [[TMP111]] to i8
// SIMD-ONLY0-NEXT:    [[CONV273:%.*]] = zext i8 [[CONV272]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END277:%.*]]
// SIMD-ONLY0:       cond.false274:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV275:%.*]] = bytecast b8 [[TMP112]] to i8
// SIMD-ONLY0-NEXT:    [[CONV276:%.*]] = zext i8 [[CONV275]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END277]]
// SIMD-ONLY0:       cond.end277:
// SIMD-ONLY0-NEXT:    [[COND278:%.*]] = phi i32 [ [[CONV273]], [[COND_TRUE271]] ], [ [[CONV276]], [[COND_FALSE274]] ]
// SIMD-ONLY0-NEXT:    [[CONV279:%.*]] = trunc i32 [[COND278]] to i8
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = bitcast i8 [[CONV279]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP113]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP114]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV280:%.*]] = bytecast b8 [[TMP115]] to i8
// SIMD-ONLY0-NEXT:    [[CONV281:%.*]] = zext i8 [[CONV280]] to i32
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV282:%.*]] = bytecast b8 [[TMP116]] to i8
// SIMD-ONLY0-NEXT:    [[CONV283:%.*]] = zext i8 [[CONV282]] to i32
// SIMD-ONLY0-NEXT:    [[CMP284:%.*]] = icmp slt i32 [[CONV281]], [[CONV283]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP284]], label [[COND_TRUE286:%.*]], label [[COND_FALSE289:%.*]]
// SIMD-ONLY0:       cond.true286:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV287:%.*]] = bytecast b8 [[TMP117]] to i8
// SIMD-ONLY0-NEXT:    [[CONV288:%.*]] = zext i8 [[CONV287]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292:%.*]]
// SIMD-ONLY0:       cond.false289:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV290:%.*]] = bytecast b8 [[TMP118]] to i8
// SIMD-ONLY0-NEXT:    [[CONV291:%.*]] = zext i8 [[CONV290]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END292]]
// SIMD-ONLY0:       cond.end292:
// SIMD-ONLY0-NEXT:    [[COND293:%.*]] = phi i32 [ [[CONV288]], [[COND_TRUE286]] ], [ [[CONV291]], [[COND_FALSE289]] ]
// SIMD-ONLY0-NEXT:    [[CONV294:%.*]] = trunc i32 [[COND293]] to i8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = bitcast i8 [[CONV294]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP119]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP120]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV295:%.*]] = bytecast b8 [[TMP121]] to i8
// SIMD-ONLY0-NEXT:    [[CONV296:%.*]] = zext i8 [[CONV295]] to i32
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV297:%.*]] = bytecast b8 [[TMP122]] to i8
// SIMD-ONLY0-NEXT:    [[CONV298:%.*]] = zext i8 [[CONV297]] to i32
// SIMD-ONLY0-NEXT:    [[CMP299:%.*]] = icmp eq i32 [[CONV296]], [[CONV298]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP299]], label [[COND_TRUE301:%.*]], label [[COND_FALSE304:%.*]]
// SIMD-ONLY0:       cond.true301:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV302:%.*]] = bytecast b8 [[TMP123]] to i8
// SIMD-ONLY0-NEXT:    [[CONV303:%.*]] = zext i8 [[CONV302]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END307:%.*]]
// SIMD-ONLY0:       cond.false304:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV305:%.*]] = bytecast b8 [[TMP124]] to i8
// SIMD-ONLY0-NEXT:    [[CONV306:%.*]] = zext i8 [[CONV305]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END307]]
// SIMD-ONLY0:       cond.end307:
// SIMD-ONLY0-NEXT:    [[COND308:%.*]] = phi i32 [ [[CONV303]], [[COND_TRUE301]] ], [ [[CONV306]], [[COND_FALSE304]] ]
// SIMD-ONLY0-NEXT:    [[CONV309:%.*]] = trunc i32 [[COND308]] to i8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = bitcast i8 [[CONV309]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP125]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV310:%.*]] = bytecast b8 [[TMP126]] to i8
// SIMD-ONLY0-NEXT:    [[CONV311:%.*]] = zext i8 [[CONV310]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV312:%.*]] = bytecast b8 [[TMP127]] to i8
// SIMD-ONLY0-NEXT:    [[CONV313:%.*]] = zext i8 [[CONV312]] to i32
// SIMD-ONLY0-NEXT:    [[CMP314:%.*]] = icmp sgt i32 [[CONV311]], [[CONV313]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP314]], label [[COND_TRUE316:%.*]], label [[COND_FALSE319:%.*]]
// SIMD-ONLY0:       cond.true316:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV317:%.*]] = bytecast b8 [[TMP128]] to i8
// SIMD-ONLY0-NEXT:    [[CONV318:%.*]] = zext i8 [[CONV317]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END322:%.*]]
// SIMD-ONLY0:       cond.false319:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV320:%.*]] = bytecast b8 [[TMP129]] to i8
// SIMD-ONLY0-NEXT:    [[CONV321:%.*]] = zext i8 [[CONV320]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END322]]
// SIMD-ONLY0:       cond.end322:
// SIMD-ONLY0-NEXT:    [[COND323:%.*]] = phi i32 [ [[CONV318]], [[COND_TRUE316]] ], [ [[CONV321]], [[COND_FALSE319]] ]
// SIMD-ONLY0-NEXT:    [[CONV324:%.*]] = trunc i32 [[COND323]] to i8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = bitcast i8 [[CONV324]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP130]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP131]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV325:%.*]] = bytecast b8 [[TMP132]] to i8
// SIMD-ONLY0-NEXT:    [[CONV326:%.*]] = zext i8 [[CONV325]] to i32
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV327:%.*]] = bytecast b8 [[TMP133]] to i8
// SIMD-ONLY0-NEXT:    [[CONV328:%.*]] = zext i8 [[CONV327]] to i32
// SIMD-ONLY0-NEXT:    [[CMP329:%.*]] = icmp slt i32 [[CONV326]], [[CONV328]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP329]], label [[COND_TRUE331:%.*]], label [[COND_FALSE334:%.*]]
// SIMD-ONLY0:       cond.true331:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV332:%.*]] = bytecast b8 [[TMP134]] to i8
// SIMD-ONLY0-NEXT:    [[CONV333:%.*]] = zext i8 [[CONV332]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END337:%.*]]
// SIMD-ONLY0:       cond.false334:
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV335:%.*]] = bytecast b8 [[TMP135]] to i8
// SIMD-ONLY0-NEXT:    [[CONV336:%.*]] = zext i8 [[CONV335]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END337]]
// SIMD-ONLY0:       cond.end337:
// SIMD-ONLY0-NEXT:    [[COND338:%.*]] = phi i32 [ [[CONV333]], [[COND_TRUE331]] ], [ [[CONV336]], [[COND_FALSE334]] ]
// SIMD-ONLY0-NEXT:    [[CONV339:%.*]] = trunc i32 [[COND338]] to i8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = bitcast i8 [[CONV339]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP136]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP137]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV340:%.*]] = bytecast b8 [[TMP138]] to i8
// SIMD-ONLY0-NEXT:    [[CONV341:%.*]] = zext i8 [[CONV340]] to i32
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV342:%.*]] = bytecast b8 [[TMP139]] to i8
// SIMD-ONLY0-NEXT:    [[CONV343:%.*]] = zext i8 [[CONV342]] to i32
// SIMD-ONLY0-NEXT:    [[CMP344:%.*]] = icmp eq i32 [[CONV341]], [[CONV343]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP344]], label [[COND_TRUE346:%.*]], label [[COND_FALSE349:%.*]]
// SIMD-ONLY0:       cond.true346:
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV347:%.*]] = bytecast b8 [[TMP140]] to i8
// SIMD-ONLY0-NEXT:    [[CONV348:%.*]] = zext i8 [[CONV347]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END352:%.*]]
// SIMD-ONLY0:       cond.false349:
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV350:%.*]] = bytecast b8 [[TMP141]] to i8
// SIMD-ONLY0-NEXT:    [[CONV351:%.*]] = zext i8 [[CONV350]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END352]]
// SIMD-ONLY0:       cond.end352:
// SIMD-ONLY0-NEXT:    [[COND353:%.*]] = phi i32 [ [[CONV348]], [[COND_TRUE346]] ], [ [[CONV351]], [[COND_FALSE349]] ]
// SIMD-ONLY0-NEXT:    [[CONV354:%.*]] = trunc i32 [[COND353]] to i8
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = bitcast i8 [[CONV354]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP142]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP143]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP144]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV355:%.*]] = bytecast b8 [[TMP145]] to i8
// SIMD-ONLY0-NEXT:    [[CONV356:%.*]] = zext i8 [[CONV355]] to i32
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV357:%.*]] = bytecast b8 [[TMP146]] to i8
// SIMD-ONLY0-NEXT:    [[CONV358:%.*]] = zext i8 [[CONV357]] to i32
// SIMD-ONLY0-NEXT:    [[CMP359:%.*]] = icmp sgt i32 [[CONV356]], [[CONV358]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP359]], label [[COND_TRUE361:%.*]], label [[COND_FALSE364:%.*]]
// SIMD-ONLY0:       cond.true361:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV362:%.*]] = bytecast b8 [[TMP147]] to i8
// SIMD-ONLY0-NEXT:    [[CONV363:%.*]] = zext i8 [[CONV362]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END367:%.*]]
// SIMD-ONLY0:       cond.false364:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV365:%.*]] = bytecast b8 [[TMP148]] to i8
// SIMD-ONLY0-NEXT:    [[CONV366:%.*]] = zext i8 [[CONV365]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END367]]
// SIMD-ONLY0:       cond.end367:
// SIMD-ONLY0-NEXT:    [[COND368:%.*]] = phi i32 [ [[CONV363]], [[COND_TRUE361]] ], [ [[CONV366]], [[COND_FALSE364]] ]
// SIMD-ONLY0-NEXT:    [[CONV369:%.*]] = trunc i32 [[COND368]] to i8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = bitcast i8 [[CONV369]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP149]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP150]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV370:%.*]] = bytecast b8 [[TMP151]] to i8
// SIMD-ONLY0-NEXT:    [[CONV371:%.*]] = zext i8 [[CONV370]] to i32
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV372:%.*]] = bytecast b8 [[TMP152]] to i8
// SIMD-ONLY0-NEXT:    [[CONV373:%.*]] = zext i8 [[CONV372]] to i32
// SIMD-ONLY0-NEXT:    [[CMP374:%.*]] = icmp slt i32 [[CONV371]], [[CONV373]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP374]], label [[COND_TRUE376:%.*]], label [[COND_FALSE379:%.*]]
// SIMD-ONLY0:       cond.true376:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV377:%.*]] = bytecast b8 [[TMP153]] to i8
// SIMD-ONLY0-NEXT:    [[CONV378:%.*]] = zext i8 [[CONV377]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END382:%.*]]
// SIMD-ONLY0:       cond.false379:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV380:%.*]] = bytecast b8 [[TMP154]] to i8
// SIMD-ONLY0-NEXT:    [[CONV381:%.*]] = zext i8 [[CONV380]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END382]]
// SIMD-ONLY0:       cond.end382:
// SIMD-ONLY0-NEXT:    [[COND383:%.*]] = phi i32 [ [[CONV378]], [[COND_TRUE376]] ], [ [[CONV381]], [[COND_FALSE379]] ]
// SIMD-ONLY0-NEXT:    [[CONV384:%.*]] = trunc i32 [[COND383]] to i8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = bitcast i8 [[CONV384]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP155]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP156]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV385:%.*]] = bytecast b8 [[TMP157]] to i8
// SIMD-ONLY0-NEXT:    [[CONV386:%.*]] = zext i8 [[CONV385]] to i32
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV387:%.*]] = bytecast b8 [[TMP158]] to i8
// SIMD-ONLY0-NEXT:    [[CONV388:%.*]] = zext i8 [[CONV387]] to i32
// SIMD-ONLY0-NEXT:    [[CMP389:%.*]] = icmp eq i32 [[CONV386]], [[CONV388]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP389]], label [[COND_TRUE391:%.*]], label [[COND_FALSE394:%.*]]
// SIMD-ONLY0:       cond.true391:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV392:%.*]] = bytecast b8 [[TMP159]] to i8
// SIMD-ONLY0-NEXT:    [[CONV393:%.*]] = zext i8 [[CONV392]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END397:%.*]]
// SIMD-ONLY0:       cond.false394:
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV395:%.*]] = bytecast b8 [[TMP160]] to i8
// SIMD-ONLY0-NEXT:    [[CONV396:%.*]] = zext i8 [[CONV395]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END397]]
// SIMD-ONLY0:       cond.end397:
// SIMD-ONLY0-NEXT:    [[COND398:%.*]] = phi i32 [ [[CONV393]], [[COND_TRUE391]] ], [ [[CONV396]], [[COND_FALSE394]] ]
// SIMD-ONLY0-NEXT:    [[CONV399:%.*]] = trunc i32 [[COND398]] to i8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = bitcast i8 [[CONV399]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP161]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV400:%.*]] = bytecast b8 [[TMP162]] to i8
// SIMD-ONLY0-NEXT:    [[CONV401:%.*]] = zext i8 [[CONV400]] to i32
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV402:%.*]] = bytecast b8 [[TMP163]] to i8
// SIMD-ONLY0-NEXT:    [[CONV403:%.*]] = zext i8 [[CONV402]] to i32
// SIMD-ONLY0-NEXT:    [[CMP404:%.*]] = icmp sgt i32 [[CONV401]], [[CONV403]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP404]], label [[COND_TRUE406:%.*]], label [[COND_FALSE409:%.*]]
// SIMD-ONLY0:       cond.true406:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV407:%.*]] = bytecast b8 [[TMP164]] to i8
// SIMD-ONLY0-NEXT:    [[CONV408:%.*]] = zext i8 [[CONV407]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END412:%.*]]
// SIMD-ONLY0:       cond.false409:
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV410:%.*]] = bytecast b8 [[TMP165]] to i8
// SIMD-ONLY0-NEXT:    [[CONV411:%.*]] = zext i8 [[CONV410]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END412]]
// SIMD-ONLY0:       cond.end412:
// SIMD-ONLY0-NEXT:    [[COND413:%.*]] = phi i32 [ [[CONV408]], [[COND_TRUE406]] ], [ [[CONV411]], [[COND_FALSE409]] ]
// SIMD-ONLY0-NEXT:    [[CONV414:%.*]] = trunc i32 [[COND413]] to i8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = bitcast i8 [[CONV414]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP166]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP167]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV415:%.*]] = bytecast b8 [[TMP168]] to i8
// SIMD-ONLY0-NEXT:    [[CONV416:%.*]] = zext i8 [[CONV415]] to i32
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV417:%.*]] = bytecast b8 [[TMP169]] to i8
// SIMD-ONLY0-NEXT:    [[CONV418:%.*]] = zext i8 [[CONV417]] to i32
// SIMD-ONLY0-NEXT:    [[CMP419:%.*]] = icmp slt i32 [[CONV416]], [[CONV418]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP419]], label [[COND_TRUE421:%.*]], label [[COND_FALSE424:%.*]]
// SIMD-ONLY0:       cond.true421:
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV422:%.*]] = bytecast b8 [[TMP170]] to i8
// SIMD-ONLY0-NEXT:    [[CONV423:%.*]] = zext i8 [[CONV422]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END427:%.*]]
// SIMD-ONLY0:       cond.false424:
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV425:%.*]] = bytecast b8 [[TMP171]] to i8
// SIMD-ONLY0-NEXT:    [[CONV426:%.*]] = zext i8 [[CONV425]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END427]]
// SIMD-ONLY0:       cond.end427:
// SIMD-ONLY0-NEXT:    [[COND428:%.*]] = phi i32 [ [[CONV423]], [[COND_TRUE421]] ], [ [[CONV426]], [[COND_FALSE424]] ]
// SIMD-ONLY0-NEXT:    [[CONV429:%.*]] = trunc i32 [[COND428]] to i8
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = bitcast i8 [[CONV429]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP172]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP173]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV430:%.*]] = bytecast b8 [[TMP174]] to i8
// SIMD-ONLY0-NEXT:    [[CONV431:%.*]] = zext i8 [[CONV430]] to i32
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV432:%.*]] = bytecast b8 [[TMP175]] to i8
// SIMD-ONLY0-NEXT:    [[CONV433:%.*]] = zext i8 [[CONV432]] to i32
// SIMD-ONLY0-NEXT:    [[CMP434:%.*]] = icmp eq i32 [[CONV431]], [[CONV433]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP434]], label [[COND_TRUE436:%.*]], label [[COND_FALSE439:%.*]]
// SIMD-ONLY0:       cond.true436:
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV437:%.*]] = bytecast b8 [[TMP176]] to i8
// SIMD-ONLY0-NEXT:    [[CONV438:%.*]] = zext i8 [[CONV437]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END442:%.*]]
// SIMD-ONLY0:       cond.false439:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV440:%.*]] = bytecast b8 [[TMP177]] to i8
// SIMD-ONLY0-NEXT:    [[CONV441:%.*]] = zext i8 [[CONV440]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END442]]
// SIMD-ONLY0:       cond.end442:
// SIMD-ONLY0-NEXT:    [[COND443:%.*]] = phi i32 [ [[CONV438]], [[COND_TRUE436]] ], [ [[CONV441]], [[COND_FALSE439]] ]
// SIMD-ONLY0-NEXT:    [[CONV444:%.*]] = trunc i32 [[COND443]] to i8
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = bitcast i8 [[CONV444]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP178]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP179]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP180]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP181:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV445:%.*]] = bytecast b8 [[TMP181]] to i8
// SIMD-ONLY0-NEXT:    [[CONV446:%.*]] = zext i8 [[CONV445]] to i32
// SIMD-ONLY0-NEXT:    [[TMP182:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV447:%.*]] = bytecast b8 [[TMP182]] to i8
// SIMD-ONLY0-NEXT:    [[CONV448:%.*]] = zext i8 [[CONV447]] to i32
// SIMD-ONLY0-NEXT:    [[CMP449:%.*]] = icmp sgt i32 [[CONV446]], [[CONV448]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP449]], label [[COND_TRUE451:%.*]], label [[COND_FALSE454:%.*]]
// SIMD-ONLY0:       cond.true451:
// SIMD-ONLY0-NEXT:    [[TMP183:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV452:%.*]] = bytecast b8 [[TMP183]] to i8
// SIMD-ONLY0-NEXT:    [[CONV453:%.*]] = zext i8 [[CONV452]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END457:%.*]]
// SIMD-ONLY0:       cond.false454:
// SIMD-ONLY0-NEXT:    [[TMP184:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV455:%.*]] = bytecast b8 [[TMP184]] to i8
// SIMD-ONLY0-NEXT:    [[CONV456:%.*]] = zext i8 [[CONV455]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END457]]
// SIMD-ONLY0:       cond.end457:
// SIMD-ONLY0-NEXT:    [[COND458:%.*]] = phi i32 [ [[CONV453]], [[COND_TRUE451]] ], [ [[CONV456]], [[COND_FALSE454]] ]
// SIMD-ONLY0-NEXT:    [[CONV459:%.*]] = trunc i32 [[COND458]] to i8
// SIMD-ONLY0-NEXT:    [[TMP185:%.*]] = bitcast i8 [[CONV459]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP185]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP186:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP186]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP187:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV460:%.*]] = bytecast b8 [[TMP187]] to i8
// SIMD-ONLY0-NEXT:    [[CONV461:%.*]] = zext i8 [[CONV460]] to i32
// SIMD-ONLY0-NEXT:    [[TMP188:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV462:%.*]] = bytecast b8 [[TMP188]] to i8
// SIMD-ONLY0-NEXT:    [[CONV463:%.*]] = zext i8 [[CONV462]] to i32
// SIMD-ONLY0-NEXT:    [[CMP464:%.*]] = icmp slt i32 [[CONV461]], [[CONV463]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP464]], label [[COND_TRUE466:%.*]], label [[COND_FALSE469:%.*]]
// SIMD-ONLY0:       cond.true466:
// SIMD-ONLY0-NEXT:    [[TMP189:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV467:%.*]] = bytecast b8 [[TMP189]] to i8
// SIMD-ONLY0-NEXT:    [[CONV468:%.*]] = zext i8 [[CONV467]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END472:%.*]]
// SIMD-ONLY0:       cond.false469:
// SIMD-ONLY0-NEXT:    [[TMP190:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV470:%.*]] = bytecast b8 [[TMP190]] to i8
// SIMD-ONLY0-NEXT:    [[CONV471:%.*]] = zext i8 [[CONV470]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END472]]
// SIMD-ONLY0:       cond.end472:
// SIMD-ONLY0-NEXT:    [[COND473:%.*]] = phi i32 [ [[CONV468]], [[COND_TRUE466]] ], [ [[CONV471]], [[COND_FALSE469]] ]
// SIMD-ONLY0-NEXT:    [[CONV474:%.*]] = trunc i32 [[COND473]] to i8
// SIMD-ONLY0-NEXT:    [[TMP191:%.*]] = bitcast i8 [[CONV474]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP191]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP192:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP192]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP193:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV475:%.*]] = bytecast b8 [[TMP193]] to i8
// SIMD-ONLY0-NEXT:    [[CONV476:%.*]] = zext i8 [[CONV475]] to i32
// SIMD-ONLY0-NEXT:    [[TMP194:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV477:%.*]] = bytecast b8 [[TMP194]] to i8
// SIMD-ONLY0-NEXT:    [[CONV478:%.*]] = zext i8 [[CONV477]] to i32
// SIMD-ONLY0-NEXT:    [[CMP479:%.*]] = icmp eq i32 [[CONV476]], [[CONV478]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP479]], label [[COND_TRUE481:%.*]], label [[COND_FALSE484:%.*]]
// SIMD-ONLY0:       cond.true481:
// SIMD-ONLY0-NEXT:    [[TMP195:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV482:%.*]] = bytecast b8 [[TMP195]] to i8
// SIMD-ONLY0-NEXT:    [[CONV483:%.*]] = zext i8 [[CONV482]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END487:%.*]]
// SIMD-ONLY0:       cond.false484:
// SIMD-ONLY0-NEXT:    [[TMP196:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV485:%.*]] = bytecast b8 [[TMP196]] to i8
// SIMD-ONLY0-NEXT:    [[CONV486:%.*]] = zext i8 [[CONV485]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END487]]
// SIMD-ONLY0:       cond.end487:
// SIMD-ONLY0-NEXT:    [[COND488:%.*]] = phi i32 [ [[CONV483]], [[COND_TRUE481]] ], [ [[CONV486]], [[COND_FALSE484]] ]
// SIMD-ONLY0-NEXT:    [[CONV489:%.*]] = trunc i32 [[COND488]] to i8
// SIMD-ONLY0-NEXT:    [[TMP197:%.*]] = bitcast i8 [[CONV489]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP197]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP198:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV490:%.*]] = bytecast b8 [[TMP198]] to i8
// SIMD-ONLY0-NEXT:    [[CONV491:%.*]] = zext i8 [[CONV490]] to i32
// SIMD-ONLY0-NEXT:    [[TMP199:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV492:%.*]] = bytecast b8 [[TMP199]] to i8
// SIMD-ONLY0-NEXT:    [[CONV493:%.*]] = zext i8 [[CONV492]] to i32
// SIMD-ONLY0-NEXT:    [[CMP494:%.*]] = icmp sgt i32 [[CONV491]], [[CONV493]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP494]], label [[COND_TRUE496:%.*]], label [[COND_FALSE499:%.*]]
// SIMD-ONLY0:       cond.true496:
// SIMD-ONLY0-NEXT:    [[TMP200:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV497:%.*]] = bytecast b8 [[TMP200]] to i8
// SIMD-ONLY0-NEXT:    [[CONV498:%.*]] = zext i8 [[CONV497]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END502:%.*]]
// SIMD-ONLY0:       cond.false499:
// SIMD-ONLY0-NEXT:    [[TMP201:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV500:%.*]] = bytecast b8 [[TMP201]] to i8
// SIMD-ONLY0-NEXT:    [[CONV501:%.*]] = zext i8 [[CONV500]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END502]]
// SIMD-ONLY0:       cond.end502:
// SIMD-ONLY0-NEXT:    [[COND503:%.*]] = phi i32 [ [[CONV498]], [[COND_TRUE496]] ], [ [[CONV501]], [[COND_FALSE499]] ]
// SIMD-ONLY0-NEXT:    [[CONV504:%.*]] = trunc i32 [[COND503]] to i8
// SIMD-ONLY0-NEXT:    [[TMP202:%.*]] = bitcast i8 [[CONV504]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP202]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP203:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP203]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP204:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV505:%.*]] = bytecast b8 [[TMP204]] to i8
// SIMD-ONLY0-NEXT:    [[CONV506:%.*]] = zext i8 [[CONV505]] to i32
// SIMD-ONLY0-NEXT:    [[TMP205:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV507:%.*]] = bytecast b8 [[TMP205]] to i8
// SIMD-ONLY0-NEXT:    [[CONV508:%.*]] = zext i8 [[CONV507]] to i32
// SIMD-ONLY0-NEXT:    [[CMP509:%.*]] = icmp slt i32 [[CONV506]], [[CONV508]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP509]], label [[COND_TRUE511:%.*]], label [[COND_FALSE514:%.*]]
// SIMD-ONLY0:       cond.true511:
// SIMD-ONLY0-NEXT:    [[TMP206:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV512:%.*]] = bytecast b8 [[TMP206]] to i8
// SIMD-ONLY0-NEXT:    [[CONV513:%.*]] = zext i8 [[CONV512]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END517:%.*]]
// SIMD-ONLY0:       cond.false514:
// SIMD-ONLY0-NEXT:    [[TMP207:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV515:%.*]] = bytecast b8 [[TMP207]] to i8
// SIMD-ONLY0-NEXT:    [[CONV516:%.*]] = zext i8 [[CONV515]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END517]]
// SIMD-ONLY0:       cond.end517:
// SIMD-ONLY0-NEXT:    [[COND518:%.*]] = phi i32 [ [[CONV513]], [[COND_TRUE511]] ], [ [[CONV516]], [[COND_FALSE514]] ]
// SIMD-ONLY0-NEXT:    [[CONV519:%.*]] = trunc i32 [[COND518]] to i8
// SIMD-ONLY0-NEXT:    [[TMP208:%.*]] = bitcast i8 [[CONV519]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP208]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP209:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP209]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP210:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV520:%.*]] = bytecast b8 [[TMP210]] to i8
// SIMD-ONLY0-NEXT:    [[CONV521:%.*]] = zext i8 [[CONV520]] to i32
// SIMD-ONLY0-NEXT:    [[TMP211:%.*]] = load b8, ptr [[UCE]], align 1
// SIMD-ONLY0-NEXT:    [[CONV522:%.*]] = bytecast b8 [[TMP211]] to i8
// SIMD-ONLY0-NEXT:    [[CONV523:%.*]] = zext i8 [[CONV522]] to i32
// SIMD-ONLY0-NEXT:    [[CMP524:%.*]] = icmp eq i32 [[CONV521]], [[CONV523]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP524]], label [[COND_TRUE526:%.*]], label [[COND_FALSE529:%.*]]
// SIMD-ONLY0:       cond.true526:
// SIMD-ONLY0-NEXT:    [[TMP212:%.*]] = load b8, ptr [[UCD]], align 1
// SIMD-ONLY0-NEXT:    [[CONV527:%.*]] = bytecast b8 [[TMP212]] to i8
// SIMD-ONLY0-NEXT:    [[CONV528:%.*]] = zext i8 [[CONV527]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END532:%.*]]
// SIMD-ONLY0:       cond.false529:
// SIMD-ONLY0-NEXT:    [[TMP213:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[CONV530:%.*]] = bytecast b8 [[TMP213]] to i8
// SIMD-ONLY0-NEXT:    [[CONV531:%.*]] = zext i8 [[CONV530]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END532]]
// SIMD-ONLY0:       cond.end532:
// SIMD-ONLY0-NEXT:    [[COND533:%.*]] = phi i32 [ [[CONV528]], [[COND_TRUE526]] ], [ [[CONV531]], [[COND_FALSE529]] ]
// SIMD-ONLY0-NEXT:    [[CONV534:%.*]] = trunc i32 [[COND533]] to i8
// SIMD-ONLY0-NEXT:    [[TMP214:%.*]] = bitcast i8 [[CONV534]] to b8
// SIMD-ONLY0-NEXT:    store b8 [[TMP214]], ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    [[TMP215:%.*]] = load b8, ptr [[UCX]], align 1
// SIMD-ONLY0-NEXT:    store b8 [[TMP215]], ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    [[TMP216:%.*]] = load b8, ptr [[UCV]], align 1
// SIMD-ONLY0-NEXT:    ret b8 [[TMP216]]
//
//
// SIMD-ONLY0-LABEL: @sxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[SX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SV:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[SD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP0]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = sext i16 [[TMP1]] to i32
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1:%.*]] = sext i16 [[TMP2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV]], [[CONV1]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3:%.*]] = sext i16 [[TMP3]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV4:%.*]] = sext i16 [[TMP4]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV3]], [[COND_TRUE]] ], [ [[CONV4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    [[CONV5:%.*]] = trunc i32 [[COND]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV5]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP5]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV6:%.*]] = sext i16 [[TMP6]] to i32
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV7:%.*]] = sext i16 [[TMP7]] to i32
// SIMD-ONLY0-NEXT:    [[CMP8:%.*]] = icmp slt i32 [[CONV6]], [[CONV7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP8]], label [[COND_TRUE10:%.*]], label [[COND_FALSE12:%.*]]
// SIMD-ONLY0:       cond.true10:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV11:%.*]] = sext i16 [[TMP8]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END14:%.*]]
// SIMD-ONLY0:       cond.false12:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV13:%.*]] = sext i16 [[TMP9]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END14]]
// SIMD-ONLY0:       cond.end14:
// SIMD-ONLY0-NEXT:    [[COND15:%.*]] = phi i32 [ [[CONV11]], [[COND_TRUE10]] ], [ [[CONV13]], [[COND_FALSE12]] ]
// SIMD-ONLY0-NEXT:    [[CONV16:%.*]] = trunc i32 [[COND15]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV16]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP10]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV17:%.*]] = sext i16 [[TMP11]] to i32
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV18:%.*]] = sext i16 [[TMP12]] to i32
// SIMD-ONLY0-NEXT:    [[CMP19:%.*]] = icmp eq i32 [[CONV17]], [[CONV18]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP19]], label [[COND_TRUE21:%.*]], label [[COND_FALSE23:%.*]]
// SIMD-ONLY0:       cond.true21:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV22:%.*]] = sext i16 [[TMP13]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END25:%.*]]
// SIMD-ONLY0:       cond.false23:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV24:%.*]] = sext i16 [[TMP14]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END25]]
// SIMD-ONLY0:       cond.end25:
// SIMD-ONLY0-NEXT:    [[COND26:%.*]] = phi i32 [ [[CONV22]], [[COND_TRUE21]] ], [ [[CONV24]], [[COND_FALSE23]] ]
// SIMD-ONLY0-NEXT:    [[CONV27:%.*]] = trunc i32 [[COND26]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV27]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV28:%.*]] = sext i16 [[TMP15]] to i32
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV29:%.*]] = sext i16 [[TMP16]] to i32
// SIMD-ONLY0-NEXT:    [[CMP30:%.*]] = icmp sgt i32 [[CONV28]], [[CONV29]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP30]], label [[COND_TRUE32:%.*]], label [[COND_FALSE34:%.*]]
// SIMD-ONLY0:       cond.true32:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV33:%.*]] = sext i16 [[TMP17]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END36:%.*]]
// SIMD-ONLY0:       cond.false34:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV35:%.*]] = sext i16 [[TMP18]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END36]]
// SIMD-ONLY0:       cond.end36:
// SIMD-ONLY0-NEXT:    [[COND37:%.*]] = phi i32 [ [[CONV33]], [[COND_TRUE32]] ], [ [[CONV35]], [[COND_FALSE34]] ]
// SIMD-ONLY0-NEXT:    [[CONV38:%.*]] = trunc i32 [[COND37]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV38]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP19]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV39:%.*]] = sext i16 [[TMP20]] to i32
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV40:%.*]] = sext i16 [[TMP21]] to i32
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = icmp slt i32 [[CONV39]], [[CONV40]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[COND_TRUE43:%.*]], label [[COND_FALSE45:%.*]]
// SIMD-ONLY0:       cond.true43:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV44:%.*]] = sext i16 [[TMP22]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END47:%.*]]
// SIMD-ONLY0:       cond.false45:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV46:%.*]] = sext i16 [[TMP23]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END47]]
// SIMD-ONLY0:       cond.end47:
// SIMD-ONLY0-NEXT:    [[COND48:%.*]] = phi i32 [ [[CONV44]], [[COND_TRUE43]] ], [ [[CONV46]], [[COND_FALSE45]] ]
// SIMD-ONLY0-NEXT:    [[CONV49:%.*]] = trunc i32 [[COND48]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV49]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP24]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV50:%.*]] = sext i16 [[TMP25]] to i32
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV51:%.*]] = sext i16 [[TMP26]] to i32
// SIMD-ONLY0-NEXT:    [[CMP52:%.*]] = icmp eq i32 [[CONV50]], [[CONV51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP52]], label [[COND_TRUE54:%.*]], label [[COND_FALSE56:%.*]]
// SIMD-ONLY0:       cond.true54:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV55:%.*]] = sext i16 [[TMP27]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END58:%.*]]
// SIMD-ONLY0:       cond.false56:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV57:%.*]] = sext i16 [[TMP28]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END58]]
// SIMD-ONLY0:       cond.end58:
// SIMD-ONLY0-NEXT:    [[COND59:%.*]] = phi i32 [ [[CONV55]], [[COND_TRUE54]] ], [ [[CONV57]], [[COND_FALSE56]] ]
// SIMD-ONLY0-NEXT:    [[CONV60:%.*]] = trunc i32 [[COND59]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV60]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP29]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP30]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV61:%.*]] = sext i16 [[TMP31]] to i32
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV62:%.*]] = sext i16 [[TMP32]] to i32
// SIMD-ONLY0-NEXT:    [[CMP63:%.*]] = icmp sgt i32 [[CONV61]], [[CONV62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP63]], label [[COND_TRUE65:%.*]], label [[COND_FALSE67:%.*]]
// SIMD-ONLY0:       cond.true65:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV66:%.*]] = sext i16 [[TMP33]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END69:%.*]]
// SIMD-ONLY0:       cond.false67:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV68:%.*]] = sext i16 [[TMP34]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END69]]
// SIMD-ONLY0:       cond.end69:
// SIMD-ONLY0-NEXT:    [[COND70:%.*]] = phi i32 [ [[CONV66]], [[COND_TRUE65]] ], [ [[CONV68]], [[COND_FALSE67]] ]
// SIMD-ONLY0-NEXT:    [[CONV71:%.*]] = trunc i32 [[COND70]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV71]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP35]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV72:%.*]] = sext i16 [[TMP36]] to i32
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV73:%.*]] = sext i16 [[TMP37]] to i32
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp slt i32 [[CONV72]], [[CONV73]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE76:%.*]], label [[COND_FALSE78:%.*]]
// SIMD-ONLY0:       cond.true76:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV77:%.*]] = sext i16 [[TMP38]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END80:%.*]]
// SIMD-ONLY0:       cond.false78:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV79:%.*]] = sext i16 [[TMP39]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END80]]
// SIMD-ONLY0:       cond.end80:
// SIMD-ONLY0-NEXT:    [[COND81:%.*]] = phi i32 [ [[CONV77]], [[COND_TRUE76]] ], [ [[CONV79]], [[COND_FALSE78]] ]
// SIMD-ONLY0-NEXT:    [[CONV82:%.*]] = trunc i32 [[COND81]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV82]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP40]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV83:%.*]] = sext i16 [[TMP41]] to i32
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV84:%.*]] = sext i16 [[TMP42]] to i32
// SIMD-ONLY0-NEXT:    [[CMP85:%.*]] = icmp eq i32 [[CONV83]], [[CONV84]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP85]], label [[COND_TRUE87:%.*]], label [[COND_FALSE89:%.*]]
// SIMD-ONLY0:       cond.true87:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV88:%.*]] = sext i16 [[TMP43]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END91:%.*]]
// SIMD-ONLY0:       cond.false89:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV90:%.*]] = sext i16 [[TMP44]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END91]]
// SIMD-ONLY0:       cond.end91:
// SIMD-ONLY0-NEXT:    [[COND92:%.*]] = phi i32 [ [[CONV88]], [[COND_TRUE87]] ], [ [[CONV90]], [[COND_FALSE89]] ]
// SIMD-ONLY0-NEXT:    [[CONV93:%.*]] = trunc i32 [[COND92]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV93]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV94:%.*]] = sext i16 [[TMP45]] to i32
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV95:%.*]] = sext i16 [[TMP46]] to i32
// SIMD-ONLY0-NEXT:    [[CMP96:%.*]] = icmp sgt i32 [[CONV94]], [[CONV95]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP96]], label [[COND_TRUE98:%.*]], label [[COND_FALSE100:%.*]]
// SIMD-ONLY0:       cond.true98:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV99:%.*]] = sext i16 [[TMP47]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END102:%.*]]
// SIMD-ONLY0:       cond.false100:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV101:%.*]] = sext i16 [[TMP48]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END102]]
// SIMD-ONLY0:       cond.end102:
// SIMD-ONLY0-NEXT:    [[COND103:%.*]] = phi i32 [ [[CONV99]], [[COND_TRUE98]] ], [ [[CONV101]], [[COND_FALSE100]] ]
// SIMD-ONLY0-NEXT:    [[CONV104:%.*]] = trunc i32 [[COND103]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV104]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP49]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV105:%.*]] = sext i16 [[TMP50]] to i32
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV106:%.*]] = sext i16 [[TMP51]] to i32
// SIMD-ONLY0-NEXT:    [[CMP107:%.*]] = icmp slt i32 [[CONV105]], [[CONV106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP107]], label [[COND_TRUE109:%.*]], label [[COND_FALSE111:%.*]]
// SIMD-ONLY0:       cond.true109:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV110:%.*]] = sext i16 [[TMP52]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END113:%.*]]
// SIMD-ONLY0:       cond.false111:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV112:%.*]] = sext i16 [[TMP53]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END113]]
// SIMD-ONLY0:       cond.end113:
// SIMD-ONLY0-NEXT:    [[COND114:%.*]] = phi i32 [ [[CONV110]], [[COND_TRUE109]] ], [ [[CONV112]], [[COND_FALSE111]] ]
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = trunc i32 [[COND114]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV115]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP54]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV116:%.*]] = sext i16 [[TMP55]] to i32
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV117:%.*]] = sext i16 [[TMP56]] to i32
// SIMD-ONLY0-NEXT:    [[CMP118:%.*]] = icmp eq i32 [[CONV116]], [[CONV117]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP118]], label [[COND_TRUE120:%.*]], label [[COND_FALSE122:%.*]]
// SIMD-ONLY0:       cond.true120:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV121:%.*]] = sext i16 [[TMP57]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END124:%.*]]
// SIMD-ONLY0:       cond.false122:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV123:%.*]] = sext i16 [[TMP58]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END124]]
// SIMD-ONLY0:       cond.end124:
// SIMD-ONLY0-NEXT:    [[COND125:%.*]] = phi i32 [ [[CONV121]], [[COND_TRUE120]] ], [ [[CONV123]], [[COND_FALSE122]] ]
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = trunc i32 [[COND125]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV126]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP59]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP60]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV127:%.*]] = sext i16 [[TMP61]] to i32
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV128:%.*]] = sext i16 [[TMP62]] to i32
// SIMD-ONLY0-NEXT:    [[CMP129:%.*]] = icmp sgt i32 [[CONV127]], [[CONV128]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP129]], label [[COND_TRUE131:%.*]], label [[COND_FALSE133:%.*]]
// SIMD-ONLY0:       cond.true131:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV132:%.*]] = sext i16 [[TMP63]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END135:%.*]]
// SIMD-ONLY0:       cond.false133:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV134:%.*]] = sext i16 [[TMP64]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END135]]
// SIMD-ONLY0:       cond.end135:
// SIMD-ONLY0-NEXT:    [[COND136:%.*]] = phi i32 [ [[CONV132]], [[COND_TRUE131]] ], [ [[CONV134]], [[COND_FALSE133]] ]
// SIMD-ONLY0-NEXT:    [[CONV137:%.*]] = trunc i32 [[COND136]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV137]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP65]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV138:%.*]] = sext i16 [[TMP66]] to i32
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV139:%.*]] = sext i16 [[TMP67]] to i32
// SIMD-ONLY0-NEXT:    [[CMP140:%.*]] = icmp slt i32 [[CONV138]], [[CONV139]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP140]], label [[COND_TRUE142:%.*]], label [[COND_FALSE144:%.*]]
// SIMD-ONLY0:       cond.true142:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV143:%.*]] = sext i16 [[TMP68]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END146:%.*]]
// SIMD-ONLY0:       cond.false144:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV145:%.*]] = sext i16 [[TMP69]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END146]]
// SIMD-ONLY0:       cond.end146:
// SIMD-ONLY0-NEXT:    [[COND147:%.*]] = phi i32 [ [[CONV143]], [[COND_TRUE142]] ], [ [[CONV145]], [[COND_FALSE144]] ]
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = trunc i32 [[COND147]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV148]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP70]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV149:%.*]] = sext i16 [[TMP71]] to i32
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV150:%.*]] = sext i16 [[TMP72]] to i32
// SIMD-ONLY0-NEXT:    [[CMP151:%.*]] = icmp eq i32 [[CONV149]], [[CONV150]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP151]], label [[COND_TRUE153:%.*]], label [[COND_FALSE155:%.*]]
// SIMD-ONLY0:       cond.true153:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV154:%.*]] = sext i16 [[TMP73]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false155:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV156:%.*]] = sext i16 [[TMP74]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi i32 [ [[CONV154]], [[COND_TRUE153]] ], [ [[CONV156]], [[COND_FALSE155]] ]
// SIMD-ONLY0-NEXT:    [[CONV159:%.*]] = trunc i32 [[COND158]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV159]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV160:%.*]] = sext i16 [[TMP75]] to i32
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV161:%.*]] = sext i16 [[TMP76]] to i32
// SIMD-ONLY0-NEXT:    [[CMP162:%.*]] = icmp sgt i32 [[CONV160]], [[CONV161]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP162]], label [[COND_TRUE164:%.*]], label [[COND_FALSE166:%.*]]
// SIMD-ONLY0:       cond.true164:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV165:%.*]] = sext i16 [[TMP77]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END168:%.*]]
// SIMD-ONLY0:       cond.false166:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV167:%.*]] = sext i16 [[TMP78]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END168]]
// SIMD-ONLY0:       cond.end168:
// SIMD-ONLY0-NEXT:    [[COND169:%.*]] = phi i32 [ [[CONV165]], [[COND_TRUE164]] ], [ [[CONV167]], [[COND_FALSE166]] ]
// SIMD-ONLY0-NEXT:    [[CONV170:%.*]] = trunc i32 [[COND169]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV170]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP79]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV171:%.*]] = sext i16 [[TMP80]] to i32
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV172:%.*]] = sext i16 [[TMP81]] to i32
// SIMD-ONLY0-NEXT:    [[CMP173:%.*]] = icmp slt i32 [[CONV171]], [[CONV172]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP173]], label [[COND_TRUE175:%.*]], label [[COND_FALSE177:%.*]]
// SIMD-ONLY0:       cond.true175:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV176:%.*]] = sext i16 [[TMP82]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END179:%.*]]
// SIMD-ONLY0:       cond.false177:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV178:%.*]] = sext i16 [[TMP83]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END179]]
// SIMD-ONLY0:       cond.end179:
// SIMD-ONLY0-NEXT:    [[COND180:%.*]] = phi i32 [ [[CONV176]], [[COND_TRUE175]] ], [ [[CONV178]], [[COND_FALSE177]] ]
// SIMD-ONLY0-NEXT:    [[CONV181:%.*]] = trunc i32 [[COND180]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV181]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP84]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV182:%.*]] = sext i16 [[TMP85]] to i32
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV183:%.*]] = sext i16 [[TMP86]] to i32
// SIMD-ONLY0-NEXT:    [[CMP184:%.*]] = icmp eq i32 [[CONV182]], [[CONV183]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP184]], label [[COND_TRUE186:%.*]], label [[COND_FALSE188:%.*]]
// SIMD-ONLY0:       cond.true186:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV187:%.*]] = sext i16 [[TMP87]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END190:%.*]]
// SIMD-ONLY0:       cond.false188:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV189:%.*]] = sext i16 [[TMP88]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END190]]
// SIMD-ONLY0:       cond.end190:
// SIMD-ONLY0-NEXT:    [[COND191:%.*]] = phi i32 [ [[CONV187]], [[COND_TRUE186]] ], [ [[CONV189]], [[COND_FALSE188]] ]
// SIMD-ONLY0-NEXT:    [[CONV192:%.*]] = trunc i32 [[COND191]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV192]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP89]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP90]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV193:%.*]] = sext i16 [[TMP91]] to i32
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV194:%.*]] = sext i16 [[TMP92]] to i32
// SIMD-ONLY0-NEXT:    [[CMP195:%.*]] = icmp sgt i32 [[CONV193]], [[CONV194]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP195]], label [[COND_TRUE197:%.*]], label [[COND_FALSE199:%.*]]
// SIMD-ONLY0:       cond.true197:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV198:%.*]] = sext i16 [[TMP93]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END201:%.*]]
// SIMD-ONLY0:       cond.false199:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV200:%.*]] = sext i16 [[TMP94]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END201]]
// SIMD-ONLY0:       cond.end201:
// SIMD-ONLY0-NEXT:    [[COND202:%.*]] = phi i32 [ [[CONV198]], [[COND_TRUE197]] ], [ [[CONV200]], [[COND_FALSE199]] ]
// SIMD-ONLY0-NEXT:    [[CONV203:%.*]] = trunc i32 [[COND202]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV203]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP95]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV204:%.*]] = sext i16 [[TMP96]] to i32
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV205:%.*]] = sext i16 [[TMP97]] to i32
// SIMD-ONLY0-NEXT:    [[CMP206:%.*]] = icmp slt i32 [[CONV204]], [[CONV205]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP206]], label [[COND_TRUE208:%.*]], label [[COND_FALSE210:%.*]]
// SIMD-ONLY0:       cond.true208:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV209:%.*]] = sext i16 [[TMP98]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END212:%.*]]
// SIMD-ONLY0:       cond.false210:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV211:%.*]] = sext i16 [[TMP99]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END212]]
// SIMD-ONLY0:       cond.end212:
// SIMD-ONLY0-NEXT:    [[COND213:%.*]] = phi i32 [ [[CONV209]], [[COND_TRUE208]] ], [ [[CONV211]], [[COND_FALSE210]] ]
// SIMD-ONLY0-NEXT:    [[CONV214:%.*]] = trunc i32 [[COND213]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV214]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP100]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV215:%.*]] = sext i16 [[TMP101]] to i32
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV216:%.*]] = sext i16 [[TMP102]] to i32
// SIMD-ONLY0-NEXT:    [[CMP217:%.*]] = icmp eq i32 [[CONV215]], [[CONV216]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP217]], label [[COND_TRUE219:%.*]], label [[COND_FALSE221:%.*]]
// SIMD-ONLY0:       cond.true219:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV220:%.*]] = sext i16 [[TMP103]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END223:%.*]]
// SIMD-ONLY0:       cond.false221:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV222:%.*]] = sext i16 [[TMP104]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END223]]
// SIMD-ONLY0:       cond.end223:
// SIMD-ONLY0-NEXT:    [[COND224:%.*]] = phi i32 [ [[CONV220]], [[COND_TRUE219]] ], [ [[CONV222]], [[COND_FALSE221]] ]
// SIMD-ONLY0-NEXT:    [[CONV225:%.*]] = trunc i32 [[COND224]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV225]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV226:%.*]] = sext i16 [[TMP105]] to i32
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV227:%.*]] = sext i16 [[TMP106]] to i32
// SIMD-ONLY0-NEXT:    [[CMP228:%.*]] = icmp sgt i32 [[CONV226]], [[CONV227]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP228]], label [[COND_TRUE230:%.*]], label [[COND_FALSE232:%.*]]
// SIMD-ONLY0:       cond.true230:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV231:%.*]] = sext i16 [[TMP107]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END234:%.*]]
// SIMD-ONLY0:       cond.false232:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV233:%.*]] = sext i16 [[TMP108]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END234]]
// SIMD-ONLY0:       cond.end234:
// SIMD-ONLY0-NEXT:    [[COND235:%.*]] = phi i32 [ [[CONV231]], [[COND_TRUE230]] ], [ [[CONV233]], [[COND_FALSE232]] ]
// SIMD-ONLY0-NEXT:    [[CONV236:%.*]] = trunc i32 [[COND235]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV236]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP109]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV237:%.*]] = sext i16 [[TMP110]] to i32
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV238:%.*]] = sext i16 [[TMP111]] to i32
// SIMD-ONLY0-NEXT:    [[CMP239:%.*]] = icmp slt i32 [[CONV237]], [[CONV238]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP239]], label [[COND_TRUE241:%.*]], label [[COND_FALSE243:%.*]]
// SIMD-ONLY0:       cond.true241:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV242:%.*]] = sext i16 [[TMP112]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END245:%.*]]
// SIMD-ONLY0:       cond.false243:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV244:%.*]] = sext i16 [[TMP113]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END245]]
// SIMD-ONLY0:       cond.end245:
// SIMD-ONLY0-NEXT:    [[COND246:%.*]] = phi i32 [ [[CONV242]], [[COND_TRUE241]] ], [ [[CONV244]], [[COND_FALSE243]] ]
// SIMD-ONLY0-NEXT:    [[CONV247:%.*]] = trunc i32 [[COND246]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV247]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP114]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV248:%.*]] = sext i16 [[TMP115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV249:%.*]] = sext i16 [[TMP116]] to i32
// SIMD-ONLY0-NEXT:    [[CMP250:%.*]] = icmp eq i32 [[CONV248]], [[CONV249]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP250]], label [[COND_TRUE252:%.*]], label [[COND_FALSE254:%.*]]
// SIMD-ONLY0:       cond.true252:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV253:%.*]] = sext i16 [[TMP117]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END256:%.*]]
// SIMD-ONLY0:       cond.false254:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV255:%.*]] = sext i16 [[TMP118]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END256]]
// SIMD-ONLY0:       cond.end256:
// SIMD-ONLY0-NEXT:    [[COND257:%.*]] = phi i32 [ [[CONV253]], [[COND_TRUE252]] ], [ [[CONV255]], [[COND_FALSE254]] ]
// SIMD-ONLY0-NEXT:    [[CONV258:%.*]] = trunc i32 [[COND257]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV258]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP119]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP120]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV259:%.*]] = sext i16 [[TMP121]] to i32
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV260:%.*]] = sext i16 [[TMP122]] to i32
// SIMD-ONLY0-NEXT:    [[CMP261:%.*]] = icmp sgt i32 [[CONV259]], [[CONV260]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP261]], label [[COND_TRUE263:%.*]], label [[COND_FALSE265:%.*]]
// SIMD-ONLY0:       cond.true263:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV264:%.*]] = sext i16 [[TMP123]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END267:%.*]]
// SIMD-ONLY0:       cond.false265:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV266:%.*]] = sext i16 [[TMP124]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END267]]
// SIMD-ONLY0:       cond.end267:
// SIMD-ONLY0-NEXT:    [[COND268:%.*]] = phi i32 [ [[CONV264]], [[COND_TRUE263]] ], [ [[CONV266]], [[COND_FALSE265]] ]
// SIMD-ONLY0-NEXT:    [[CONV269:%.*]] = trunc i32 [[COND268]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV269]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP125]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV270:%.*]] = sext i16 [[TMP126]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV271:%.*]] = sext i16 [[TMP127]] to i32
// SIMD-ONLY0-NEXT:    [[CMP272:%.*]] = icmp slt i32 [[CONV270]], [[CONV271]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP272]], label [[COND_TRUE274:%.*]], label [[COND_FALSE276:%.*]]
// SIMD-ONLY0:       cond.true274:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV275:%.*]] = sext i16 [[TMP128]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END278:%.*]]
// SIMD-ONLY0:       cond.false276:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV277:%.*]] = sext i16 [[TMP129]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END278]]
// SIMD-ONLY0:       cond.end278:
// SIMD-ONLY0-NEXT:    [[COND279:%.*]] = phi i32 [ [[CONV275]], [[COND_TRUE274]] ], [ [[CONV277]], [[COND_FALSE276]] ]
// SIMD-ONLY0-NEXT:    [[CONV280:%.*]] = trunc i32 [[COND279]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV280]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP130]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV281:%.*]] = sext i16 [[TMP131]] to i32
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV282:%.*]] = sext i16 [[TMP132]] to i32
// SIMD-ONLY0-NEXT:    [[CMP283:%.*]] = icmp eq i32 [[CONV281]], [[CONV282]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP283]], label [[COND_TRUE285:%.*]], label [[COND_FALSE287:%.*]]
// SIMD-ONLY0:       cond.true285:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV286:%.*]] = sext i16 [[TMP133]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END289:%.*]]
// SIMD-ONLY0:       cond.false287:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV288:%.*]] = sext i16 [[TMP134]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END289]]
// SIMD-ONLY0:       cond.end289:
// SIMD-ONLY0-NEXT:    [[COND290:%.*]] = phi i32 [ [[CONV286]], [[COND_TRUE285]] ], [ [[CONV288]], [[COND_FALSE287]] ]
// SIMD-ONLY0-NEXT:    [[CONV291:%.*]] = trunc i32 [[COND290]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV291]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV292:%.*]] = sext i16 [[TMP135]] to i32
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV293:%.*]] = sext i16 [[TMP136]] to i32
// SIMD-ONLY0-NEXT:    [[CMP294:%.*]] = icmp sgt i32 [[CONV292]], [[CONV293]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP294]], label [[COND_TRUE296:%.*]], label [[COND_FALSE298:%.*]]
// SIMD-ONLY0:       cond.true296:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV297:%.*]] = sext i16 [[TMP137]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END300:%.*]]
// SIMD-ONLY0:       cond.false298:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV299:%.*]] = sext i16 [[TMP138]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END300]]
// SIMD-ONLY0:       cond.end300:
// SIMD-ONLY0-NEXT:    [[COND301:%.*]] = phi i32 [ [[CONV297]], [[COND_TRUE296]] ], [ [[CONV299]], [[COND_FALSE298]] ]
// SIMD-ONLY0-NEXT:    [[CONV302:%.*]] = trunc i32 [[COND301]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV302]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP139]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV303:%.*]] = sext i16 [[TMP140]] to i32
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV304:%.*]] = sext i16 [[TMP141]] to i32
// SIMD-ONLY0-NEXT:    [[CMP305:%.*]] = icmp slt i32 [[CONV303]], [[CONV304]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP305]], label [[COND_TRUE307:%.*]], label [[COND_FALSE309:%.*]]
// SIMD-ONLY0:       cond.true307:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV308:%.*]] = sext i16 [[TMP142]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END311:%.*]]
// SIMD-ONLY0:       cond.false309:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV310:%.*]] = sext i16 [[TMP143]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END311]]
// SIMD-ONLY0:       cond.end311:
// SIMD-ONLY0-NEXT:    [[COND312:%.*]] = phi i32 [ [[CONV308]], [[COND_TRUE307]] ], [ [[CONV310]], [[COND_FALSE309]] ]
// SIMD-ONLY0-NEXT:    [[CONV313:%.*]] = trunc i32 [[COND312]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV313]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP144]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV314:%.*]] = sext i16 [[TMP145]] to i32
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV315:%.*]] = sext i16 [[TMP146]] to i32
// SIMD-ONLY0-NEXT:    [[CMP316:%.*]] = icmp eq i32 [[CONV314]], [[CONV315]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP316]], label [[COND_TRUE318:%.*]], label [[COND_FALSE320:%.*]]
// SIMD-ONLY0:       cond.true318:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV319:%.*]] = sext i16 [[TMP147]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END322:%.*]]
// SIMD-ONLY0:       cond.false320:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV321:%.*]] = sext i16 [[TMP148]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END322]]
// SIMD-ONLY0:       cond.end322:
// SIMD-ONLY0-NEXT:    [[COND323:%.*]] = phi i32 [ [[CONV319]], [[COND_TRUE318]] ], [ [[CONV321]], [[COND_FALSE320]] ]
// SIMD-ONLY0-NEXT:    [[CONV324:%.*]] = trunc i32 [[COND323]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV324]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP149]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP150]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV325:%.*]] = sext i16 [[TMP151]] to i32
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV326:%.*]] = sext i16 [[TMP152]] to i32
// SIMD-ONLY0-NEXT:    [[CMP327:%.*]] = icmp sgt i32 [[CONV325]], [[CONV326]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP327]], label [[COND_TRUE329:%.*]], label [[COND_FALSE331:%.*]]
// SIMD-ONLY0:       cond.true329:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV330:%.*]] = sext i16 [[TMP153]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END333:%.*]]
// SIMD-ONLY0:       cond.false331:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV332:%.*]] = sext i16 [[TMP154]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END333]]
// SIMD-ONLY0:       cond.end333:
// SIMD-ONLY0-NEXT:    [[COND334:%.*]] = phi i32 [ [[CONV330]], [[COND_TRUE329]] ], [ [[CONV332]], [[COND_FALSE331]] ]
// SIMD-ONLY0-NEXT:    [[CONV335:%.*]] = trunc i32 [[COND334]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV335]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP155]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV336:%.*]] = sext i16 [[TMP156]] to i32
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV337:%.*]] = sext i16 [[TMP157]] to i32
// SIMD-ONLY0-NEXT:    [[CMP338:%.*]] = icmp slt i32 [[CONV336]], [[CONV337]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP338]], label [[COND_TRUE340:%.*]], label [[COND_FALSE342:%.*]]
// SIMD-ONLY0:       cond.true340:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV341:%.*]] = sext i16 [[TMP158]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END344:%.*]]
// SIMD-ONLY0:       cond.false342:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV343:%.*]] = sext i16 [[TMP159]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END344]]
// SIMD-ONLY0:       cond.end344:
// SIMD-ONLY0-NEXT:    [[COND345:%.*]] = phi i32 [ [[CONV341]], [[COND_TRUE340]] ], [ [[CONV343]], [[COND_FALSE342]] ]
// SIMD-ONLY0-NEXT:    [[CONV346:%.*]] = trunc i32 [[COND345]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV346]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP160]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV347:%.*]] = sext i16 [[TMP161]] to i32
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV348:%.*]] = sext i16 [[TMP162]] to i32
// SIMD-ONLY0-NEXT:    [[CMP349:%.*]] = icmp eq i32 [[CONV347]], [[CONV348]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP349]], label [[COND_TRUE351:%.*]], label [[COND_FALSE353:%.*]]
// SIMD-ONLY0:       cond.true351:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV352:%.*]] = sext i16 [[TMP163]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END355:%.*]]
// SIMD-ONLY0:       cond.false353:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV354:%.*]] = sext i16 [[TMP164]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END355]]
// SIMD-ONLY0:       cond.end355:
// SIMD-ONLY0-NEXT:    [[COND356:%.*]] = phi i32 [ [[CONV352]], [[COND_TRUE351]] ], [ [[CONV354]], [[COND_FALSE353]] ]
// SIMD-ONLY0-NEXT:    [[CONV357:%.*]] = trunc i32 [[COND356]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV357]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV358:%.*]] = sext i16 [[TMP165]] to i32
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV359:%.*]] = sext i16 [[TMP166]] to i32
// SIMD-ONLY0-NEXT:    [[CMP360:%.*]] = icmp sgt i32 [[CONV358]], [[CONV359]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP360]], label [[COND_TRUE362:%.*]], label [[COND_FALSE364:%.*]]
// SIMD-ONLY0:       cond.true362:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV363:%.*]] = sext i16 [[TMP167]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END366:%.*]]
// SIMD-ONLY0:       cond.false364:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV365:%.*]] = sext i16 [[TMP168]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END366]]
// SIMD-ONLY0:       cond.end366:
// SIMD-ONLY0-NEXT:    [[COND367:%.*]] = phi i32 [ [[CONV363]], [[COND_TRUE362]] ], [ [[CONV365]], [[COND_FALSE364]] ]
// SIMD-ONLY0-NEXT:    [[CONV368:%.*]] = trunc i32 [[COND367]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV368]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP169]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV369:%.*]] = sext i16 [[TMP170]] to i32
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV370:%.*]] = sext i16 [[TMP171]] to i32
// SIMD-ONLY0-NEXT:    [[CMP371:%.*]] = icmp slt i32 [[CONV369]], [[CONV370]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP371]], label [[COND_TRUE373:%.*]], label [[COND_FALSE375:%.*]]
// SIMD-ONLY0:       cond.true373:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV374:%.*]] = sext i16 [[TMP172]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END377:%.*]]
// SIMD-ONLY0:       cond.false375:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV376:%.*]] = sext i16 [[TMP173]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END377]]
// SIMD-ONLY0:       cond.end377:
// SIMD-ONLY0-NEXT:    [[COND378:%.*]] = phi i32 [ [[CONV374]], [[COND_TRUE373]] ], [ [[CONV376]], [[COND_FALSE375]] ]
// SIMD-ONLY0-NEXT:    [[CONV379:%.*]] = trunc i32 [[COND378]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV379]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP174]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV380:%.*]] = sext i16 [[TMP175]] to i32
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i16, ptr [[SE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV381:%.*]] = sext i16 [[TMP176]] to i32
// SIMD-ONLY0-NEXT:    [[CMP382:%.*]] = icmp eq i32 [[CONV380]], [[CONV381]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP382]], label [[COND_TRUE384:%.*]], label [[COND_FALSE386:%.*]]
// SIMD-ONLY0:       cond.true384:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i16, ptr [[SD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV385:%.*]] = sext i16 [[TMP177]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END388:%.*]]
// SIMD-ONLY0:       cond.false386:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV387:%.*]] = sext i16 [[TMP178]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END388]]
// SIMD-ONLY0:       cond.end388:
// SIMD-ONLY0-NEXT:    [[COND389:%.*]] = phi i32 [ [[CONV385]], [[COND_TRUE384]] ], [ [[CONV387]], [[COND_FALSE386]] ]
// SIMD-ONLY0-NEXT:    [[CONV390:%.*]] = trunc i32 [[COND389]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV390]], ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i16, ptr [[SX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP179]], ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i16, ptr [[SV]], align 2
// SIMD-ONLY0-NEXT:    ret i16 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @usxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[USX:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USV:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USE:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[USD:%.*]] = alloca i16, align 2
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP0]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV:%.*]] = zext i16 [[TMP1]] to i32
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV1:%.*]] = zext i16 [[TMP2]] to i32
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CONV]], [[CONV1]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV3:%.*]] = zext i16 [[TMP3]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV4:%.*]] = zext i16 [[TMP4]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[CONV3]], [[COND_TRUE]] ], [ [[CONV4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    [[CONV5:%.*]] = trunc i32 [[COND]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV5]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP5]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV6:%.*]] = zext i16 [[TMP6]] to i32
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV7:%.*]] = zext i16 [[TMP7]] to i32
// SIMD-ONLY0-NEXT:    [[CMP8:%.*]] = icmp slt i32 [[CONV6]], [[CONV7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP8]], label [[COND_TRUE10:%.*]], label [[COND_FALSE12:%.*]]
// SIMD-ONLY0:       cond.true10:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV11:%.*]] = zext i16 [[TMP8]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END14:%.*]]
// SIMD-ONLY0:       cond.false12:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV13:%.*]] = zext i16 [[TMP9]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END14]]
// SIMD-ONLY0:       cond.end14:
// SIMD-ONLY0-NEXT:    [[COND15:%.*]] = phi i32 [ [[CONV11]], [[COND_TRUE10]] ], [ [[CONV13]], [[COND_FALSE12]] ]
// SIMD-ONLY0-NEXT:    [[CONV16:%.*]] = trunc i32 [[COND15]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV16]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP10]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV17:%.*]] = zext i16 [[TMP11]] to i32
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV18:%.*]] = zext i16 [[TMP12]] to i32
// SIMD-ONLY0-NEXT:    [[CMP19:%.*]] = icmp eq i32 [[CONV17]], [[CONV18]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP19]], label [[COND_TRUE21:%.*]], label [[COND_FALSE23:%.*]]
// SIMD-ONLY0:       cond.true21:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV22:%.*]] = zext i16 [[TMP13]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END25:%.*]]
// SIMD-ONLY0:       cond.false23:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV24:%.*]] = zext i16 [[TMP14]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END25]]
// SIMD-ONLY0:       cond.end25:
// SIMD-ONLY0-NEXT:    [[COND26:%.*]] = phi i32 [ [[CONV22]], [[COND_TRUE21]] ], [ [[CONV24]], [[COND_FALSE23]] ]
// SIMD-ONLY0-NEXT:    [[CONV27:%.*]] = trunc i32 [[COND26]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV27]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV28:%.*]] = zext i16 [[TMP15]] to i32
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV29:%.*]] = zext i16 [[TMP16]] to i32
// SIMD-ONLY0-NEXT:    [[CMP30:%.*]] = icmp sgt i32 [[CONV28]], [[CONV29]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP30]], label [[COND_TRUE32:%.*]], label [[COND_FALSE34:%.*]]
// SIMD-ONLY0:       cond.true32:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV33:%.*]] = zext i16 [[TMP17]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END36:%.*]]
// SIMD-ONLY0:       cond.false34:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV35:%.*]] = zext i16 [[TMP18]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END36]]
// SIMD-ONLY0:       cond.end36:
// SIMD-ONLY0-NEXT:    [[COND37:%.*]] = phi i32 [ [[CONV33]], [[COND_TRUE32]] ], [ [[CONV35]], [[COND_FALSE34]] ]
// SIMD-ONLY0-NEXT:    [[CONV38:%.*]] = trunc i32 [[COND37]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV38]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP19]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV39:%.*]] = zext i16 [[TMP20]] to i32
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV40:%.*]] = zext i16 [[TMP21]] to i32
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = icmp slt i32 [[CONV39]], [[CONV40]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[COND_TRUE43:%.*]], label [[COND_FALSE45:%.*]]
// SIMD-ONLY0:       cond.true43:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV44:%.*]] = zext i16 [[TMP22]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END47:%.*]]
// SIMD-ONLY0:       cond.false45:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV46:%.*]] = zext i16 [[TMP23]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END47]]
// SIMD-ONLY0:       cond.end47:
// SIMD-ONLY0-NEXT:    [[COND48:%.*]] = phi i32 [ [[CONV44]], [[COND_TRUE43]] ], [ [[CONV46]], [[COND_FALSE45]] ]
// SIMD-ONLY0-NEXT:    [[CONV49:%.*]] = trunc i32 [[COND48]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV49]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP24]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV50:%.*]] = zext i16 [[TMP25]] to i32
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV51:%.*]] = zext i16 [[TMP26]] to i32
// SIMD-ONLY0-NEXT:    [[CMP52:%.*]] = icmp eq i32 [[CONV50]], [[CONV51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP52]], label [[COND_TRUE54:%.*]], label [[COND_FALSE56:%.*]]
// SIMD-ONLY0:       cond.true54:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV55:%.*]] = zext i16 [[TMP27]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END58:%.*]]
// SIMD-ONLY0:       cond.false56:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV57:%.*]] = zext i16 [[TMP28]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END58]]
// SIMD-ONLY0:       cond.end58:
// SIMD-ONLY0-NEXT:    [[COND59:%.*]] = phi i32 [ [[CONV55]], [[COND_TRUE54]] ], [ [[CONV57]], [[COND_FALSE56]] ]
// SIMD-ONLY0-NEXT:    [[CONV60:%.*]] = trunc i32 [[COND59]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV60]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP29]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP30]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV61:%.*]] = zext i16 [[TMP31]] to i32
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV62:%.*]] = zext i16 [[TMP32]] to i32
// SIMD-ONLY0-NEXT:    [[CMP63:%.*]] = icmp sgt i32 [[CONV61]], [[CONV62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP63]], label [[COND_TRUE65:%.*]], label [[COND_FALSE67:%.*]]
// SIMD-ONLY0:       cond.true65:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV66:%.*]] = zext i16 [[TMP33]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END69:%.*]]
// SIMD-ONLY0:       cond.false67:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV68:%.*]] = zext i16 [[TMP34]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END69]]
// SIMD-ONLY0:       cond.end69:
// SIMD-ONLY0-NEXT:    [[COND70:%.*]] = phi i32 [ [[CONV66]], [[COND_TRUE65]] ], [ [[CONV68]], [[COND_FALSE67]] ]
// SIMD-ONLY0-NEXT:    [[CONV71:%.*]] = trunc i32 [[COND70]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV71]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP35]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV72:%.*]] = zext i16 [[TMP36]] to i32
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV73:%.*]] = zext i16 [[TMP37]] to i32
// SIMD-ONLY0-NEXT:    [[CMP74:%.*]] = icmp slt i32 [[CONV72]], [[CONV73]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP74]], label [[COND_TRUE76:%.*]], label [[COND_FALSE78:%.*]]
// SIMD-ONLY0:       cond.true76:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV77:%.*]] = zext i16 [[TMP38]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END80:%.*]]
// SIMD-ONLY0:       cond.false78:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV79:%.*]] = zext i16 [[TMP39]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END80]]
// SIMD-ONLY0:       cond.end80:
// SIMD-ONLY0-NEXT:    [[COND81:%.*]] = phi i32 [ [[CONV77]], [[COND_TRUE76]] ], [ [[CONV79]], [[COND_FALSE78]] ]
// SIMD-ONLY0-NEXT:    [[CONV82:%.*]] = trunc i32 [[COND81]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV82]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP40]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV83:%.*]] = zext i16 [[TMP41]] to i32
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV84:%.*]] = zext i16 [[TMP42]] to i32
// SIMD-ONLY0-NEXT:    [[CMP85:%.*]] = icmp eq i32 [[CONV83]], [[CONV84]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP85]], label [[COND_TRUE87:%.*]], label [[COND_FALSE89:%.*]]
// SIMD-ONLY0:       cond.true87:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV88:%.*]] = zext i16 [[TMP43]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END91:%.*]]
// SIMD-ONLY0:       cond.false89:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV90:%.*]] = zext i16 [[TMP44]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END91]]
// SIMD-ONLY0:       cond.end91:
// SIMD-ONLY0-NEXT:    [[COND92:%.*]] = phi i32 [ [[CONV88]], [[COND_TRUE87]] ], [ [[CONV90]], [[COND_FALSE89]] ]
// SIMD-ONLY0-NEXT:    [[CONV93:%.*]] = trunc i32 [[COND92]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV93]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV94:%.*]] = zext i16 [[TMP45]] to i32
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV95:%.*]] = zext i16 [[TMP46]] to i32
// SIMD-ONLY0-NEXT:    [[CMP96:%.*]] = icmp sgt i32 [[CONV94]], [[CONV95]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP96]], label [[COND_TRUE98:%.*]], label [[COND_FALSE100:%.*]]
// SIMD-ONLY0:       cond.true98:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV99:%.*]] = zext i16 [[TMP47]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END102:%.*]]
// SIMD-ONLY0:       cond.false100:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV101:%.*]] = zext i16 [[TMP48]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END102]]
// SIMD-ONLY0:       cond.end102:
// SIMD-ONLY0-NEXT:    [[COND103:%.*]] = phi i32 [ [[CONV99]], [[COND_TRUE98]] ], [ [[CONV101]], [[COND_FALSE100]] ]
// SIMD-ONLY0-NEXT:    [[CONV104:%.*]] = trunc i32 [[COND103]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV104]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP49]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV105:%.*]] = zext i16 [[TMP50]] to i32
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV106:%.*]] = zext i16 [[TMP51]] to i32
// SIMD-ONLY0-NEXT:    [[CMP107:%.*]] = icmp slt i32 [[CONV105]], [[CONV106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP107]], label [[COND_TRUE109:%.*]], label [[COND_FALSE111:%.*]]
// SIMD-ONLY0:       cond.true109:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV110:%.*]] = zext i16 [[TMP52]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END113:%.*]]
// SIMD-ONLY0:       cond.false111:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV112:%.*]] = zext i16 [[TMP53]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END113]]
// SIMD-ONLY0:       cond.end113:
// SIMD-ONLY0-NEXT:    [[COND114:%.*]] = phi i32 [ [[CONV110]], [[COND_TRUE109]] ], [ [[CONV112]], [[COND_FALSE111]] ]
// SIMD-ONLY0-NEXT:    [[CONV115:%.*]] = trunc i32 [[COND114]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV115]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP54]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV116:%.*]] = zext i16 [[TMP55]] to i32
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV117:%.*]] = zext i16 [[TMP56]] to i32
// SIMD-ONLY0-NEXT:    [[CMP118:%.*]] = icmp eq i32 [[CONV116]], [[CONV117]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP118]], label [[COND_TRUE120:%.*]], label [[COND_FALSE122:%.*]]
// SIMD-ONLY0:       cond.true120:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV121:%.*]] = zext i16 [[TMP57]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END124:%.*]]
// SIMD-ONLY0:       cond.false122:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV123:%.*]] = zext i16 [[TMP58]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END124]]
// SIMD-ONLY0:       cond.end124:
// SIMD-ONLY0-NEXT:    [[COND125:%.*]] = phi i32 [ [[CONV121]], [[COND_TRUE120]] ], [ [[CONV123]], [[COND_FALSE122]] ]
// SIMD-ONLY0-NEXT:    [[CONV126:%.*]] = trunc i32 [[COND125]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV126]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP59]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP60]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV127:%.*]] = zext i16 [[TMP61]] to i32
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV128:%.*]] = zext i16 [[TMP62]] to i32
// SIMD-ONLY0-NEXT:    [[CMP129:%.*]] = icmp sgt i32 [[CONV127]], [[CONV128]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP129]], label [[COND_TRUE131:%.*]], label [[COND_FALSE133:%.*]]
// SIMD-ONLY0:       cond.true131:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV132:%.*]] = zext i16 [[TMP63]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END135:%.*]]
// SIMD-ONLY0:       cond.false133:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV134:%.*]] = zext i16 [[TMP64]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END135]]
// SIMD-ONLY0:       cond.end135:
// SIMD-ONLY0-NEXT:    [[COND136:%.*]] = phi i32 [ [[CONV132]], [[COND_TRUE131]] ], [ [[CONV134]], [[COND_FALSE133]] ]
// SIMD-ONLY0-NEXT:    [[CONV137:%.*]] = trunc i32 [[COND136]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV137]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP65]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV138:%.*]] = zext i16 [[TMP66]] to i32
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV139:%.*]] = zext i16 [[TMP67]] to i32
// SIMD-ONLY0-NEXT:    [[CMP140:%.*]] = icmp slt i32 [[CONV138]], [[CONV139]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP140]], label [[COND_TRUE142:%.*]], label [[COND_FALSE144:%.*]]
// SIMD-ONLY0:       cond.true142:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV143:%.*]] = zext i16 [[TMP68]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END146:%.*]]
// SIMD-ONLY0:       cond.false144:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV145:%.*]] = zext i16 [[TMP69]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END146]]
// SIMD-ONLY0:       cond.end146:
// SIMD-ONLY0-NEXT:    [[COND147:%.*]] = phi i32 [ [[CONV143]], [[COND_TRUE142]] ], [ [[CONV145]], [[COND_FALSE144]] ]
// SIMD-ONLY0-NEXT:    [[CONV148:%.*]] = trunc i32 [[COND147]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV148]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP70]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV149:%.*]] = zext i16 [[TMP71]] to i32
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV150:%.*]] = zext i16 [[TMP72]] to i32
// SIMD-ONLY0-NEXT:    [[CMP151:%.*]] = icmp eq i32 [[CONV149]], [[CONV150]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP151]], label [[COND_TRUE153:%.*]], label [[COND_FALSE155:%.*]]
// SIMD-ONLY0:       cond.true153:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV154:%.*]] = zext i16 [[TMP73]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END157:%.*]]
// SIMD-ONLY0:       cond.false155:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV156:%.*]] = zext i16 [[TMP74]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END157]]
// SIMD-ONLY0:       cond.end157:
// SIMD-ONLY0-NEXT:    [[COND158:%.*]] = phi i32 [ [[CONV154]], [[COND_TRUE153]] ], [ [[CONV156]], [[COND_FALSE155]] ]
// SIMD-ONLY0-NEXT:    [[CONV159:%.*]] = trunc i32 [[COND158]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV159]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV160:%.*]] = zext i16 [[TMP75]] to i32
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV161:%.*]] = zext i16 [[TMP76]] to i32
// SIMD-ONLY0-NEXT:    [[CMP162:%.*]] = icmp sgt i32 [[CONV160]], [[CONV161]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP162]], label [[COND_TRUE164:%.*]], label [[COND_FALSE166:%.*]]
// SIMD-ONLY0:       cond.true164:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV165:%.*]] = zext i16 [[TMP77]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END168:%.*]]
// SIMD-ONLY0:       cond.false166:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV167:%.*]] = zext i16 [[TMP78]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END168]]
// SIMD-ONLY0:       cond.end168:
// SIMD-ONLY0-NEXT:    [[COND169:%.*]] = phi i32 [ [[CONV165]], [[COND_TRUE164]] ], [ [[CONV167]], [[COND_FALSE166]] ]
// SIMD-ONLY0-NEXT:    [[CONV170:%.*]] = trunc i32 [[COND169]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV170]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP79]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV171:%.*]] = zext i16 [[TMP80]] to i32
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV172:%.*]] = zext i16 [[TMP81]] to i32
// SIMD-ONLY0-NEXT:    [[CMP173:%.*]] = icmp slt i32 [[CONV171]], [[CONV172]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP173]], label [[COND_TRUE175:%.*]], label [[COND_FALSE177:%.*]]
// SIMD-ONLY0:       cond.true175:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV176:%.*]] = zext i16 [[TMP82]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END179:%.*]]
// SIMD-ONLY0:       cond.false177:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV178:%.*]] = zext i16 [[TMP83]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END179]]
// SIMD-ONLY0:       cond.end179:
// SIMD-ONLY0-NEXT:    [[COND180:%.*]] = phi i32 [ [[CONV176]], [[COND_TRUE175]] ], [ [[CONV178]], [[COND_FALSE177]] ]
// SIMD-ONLY0-NEXT:    [[CONV181:%.*]] = trunc i32 [[COND180]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV181]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP84]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV182:%.*]] = zext i16 [[TMP85]] to i32
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV183:%.*]] = zext i16 [[TMP86]] to i32
// SIMD-ONLY0-NEXT:    [[CMP184:%.*]] = icmp eq i32 [[CONV182]], [[CONV183]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP184]], label [[COND_TRUE186:%.*]], label [[COND_FALSE188:%.*]]
// SIMD-ONLY0:       cond.true186:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV187:%.*]] = zext i16 [[TMP87]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END190:%.*]]
// SIMD-ONLY0:       cond.false188:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV189:%.*]] = zext i16 [[TMP88]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END190]]
// SIMD-ONLY0:       cond.end190:
// SIMD-ONLY0-NEXT:    [[COND191:%.*]] = phi i32 [ [[CONV187]], [[COND_TRUE186]] ], [ [[CONV189]], [[COND_FALSE188]] ]
// SIMD-ONLY0-NEXT:    [[CONV192:%.*]] = trunc i32 [[COND191]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV192]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP89]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP90]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV193:%.*]] = zext i16 [[TMP91]] to i32
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV194:%.*]] = zext i16 [[TMP92]] to i32
// SIMD-ONLY0-NEXT:    [[CMP195:%.*]] = icmp sgt i32 [[CONV193]], [[CONV194]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP195]], label [[COND_TRUE197:%.*]], label [[COND_FALSE199:%.*]]
// SIMD-ONLY0:       cond.true197:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV198:%.*]] = zext i16 [[TMP93]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END201:%.*]]
// SIMD-ONLY0:       cond.false199:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV200:%.*]] = zext i16 [[TMP94]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END201]]
// SIMD-ONLY0:       cond.end201:
// SIMD-ONLY0-NEXT:    [[COND202:%.*]] = phi i32 [ [[CONV198]], [[COND_TRUE197]] ], [ [[CONV200]], [[COND_FALSE199]] ]
// SIMD-ONLY0-NEXT:    [[CONV203:%.*]] = trunc i32 [[COND202]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV203]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP95]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV204:%.*]] = zext i16 [[TMP96]] to i32
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV205:%.*]] = zext i16 [[TMP97]] to i32
// SIMD-ONLY0-NEXT:    [[CMP206:%.*]] = icmp slt i32 [[CONV204]], [[CONV205]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP206]], label [[COND_TRUE208:%.*]], label [[COND_FALSE210:%.*]]
// SIMD-ONLY0:       cond.true208:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV209:%.*]] = zext i16 [[TMP98]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END212:%.*]]
// SIMD-ONLY0:       cond.false210:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV211:%.*]] = zext i16 [[TMP99]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END212]]
// SIMD-ONLY0:       cond.end212:
// SIMD-ONLY0-NEXT:    [[COND213:%.*]] = phi i32 [ [[CONV209]], [[COND_TRUE208]] ], [ [[CONV211]], [[COND_FALSE210]] ]
// SIMD-ONLY0-NEXT:    [[CONV214:%.*]] = trunc i32 [[COND213]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV214]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP100]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV215:%.*]] = zext i16 [[TMP101]] to i32
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV216:%.*]] = zext i16 [[TMP102]] to i32
// SIMD-ONLY0-NEXT:    [[CMP217:%.*]] = icmp eq i32 [[CONV215]], [[CONV216]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP217]], label [[COND_TRUE219:%.*]], label [[COND_FALSE221:%.*]]
// SIMD-ONLY0:       cond.true219:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV220:%.*]] = zext i16 [[TMP103]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END223:%.*]]
// SIMD-ONLY0:       cond.false221:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV222:%.*]] = zext i16 [[TMP104]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END223]]
// SIMD-ONLY0:       cond.end223:
// SIMD-ONLY0-NEXT:    [[COND224:%.*]] = phi i32 [ [[CONV220]], [[COND_TRUE219]] ], [ [[CONV222]], [[COND_FALSE221]] ]
// SIMD-ONLY0-NEXT:    [[CONV225:%.*]] = trunc i32 [[COND224]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV225]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV226:%.*]] = zext i16 [[TMP105]] to i32
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV227:%.*]] = zext i16 [[TMP106]] to i32
// SIMD-ONLY0-NEXT:    [[CMP228:%.*]] = icmp sgt i32 [[CONV226]], [[CONV227]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP228]], label [[COND_TRUE230:%.*]], label [[COND_FALSE232:%.*]]
// SIMD-ONLY0:       cond.true230:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV231:%.*]] = zext i16 [[TMP107]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END234:%.*]]
// SIMD-ONLY0:       cond.false232:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV233:%.*]] = zext i16 [[TMP108]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END234]]
// SIMD-ONLY0:       cond.end234:
// SIMD-ONLY0-NEXT:    [[COND235:%.*]] = phi i32 [ [[CONV231]], [[COND_TRUE230]] ], [ [[CONV233]], [[COND_FALSE232]] ]
// SIMD-ONLY0-NEXT:    [[CONV236:%.*]] = trunc i32 [[COND235]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV236]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP109]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV237:%.*]] = zext i16 [[TMP110]] to i32
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV238:%.*]] = zext i16 [[TMP111]] to i32
// SIMD-ONLY0-NEXT:    [[CMP239:%.*]] = icmp slt i32 [[CONV237]], [[CONV238]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP239]], label [[COND_TRUE241:%.*]], label [[COND_FALSE243:%.*]]
// SIMD-ONLY0:       cond.true241:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV242:%.*]] = zext i16 [[TMP112]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END245:%.*]]
// SIMD-ONLY0:       cond.false243:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV244:%.*]] = zext i16 [[TMP113]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END245]]
// SIMD-ONLY0:       cond.end245:
// SIMD-ONLY0-NEXT:    [[COND246:%.*]] = phi i32 [ [[CONV242]], [[COND_TRUE241]] ], [ [[CONV244]], [[COND_FALSE243]] ]
// SIMD-ONLY0-NEXT:    [[CONV247:%.*]] = trunc i32 [[COND246]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV247]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP114]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV248:%.*]] = zext i16 [[TMP115]] to i32
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV249:%.*]] = zext i16 [[TMP116]] to i32
// SIMD-ONLY0-NEXT:    [[CMP250:%.*]] = icmp eq i32 [[CONV248]], [[CONV249]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP250]], label [[COND_TRUE252:%.*]], label [[COND_FALSE254:%.*]]
// SIMD-ONLY0:       cond.true252:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV253:%.*]] = zext i16 [[TMP117]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END256:%.*]]
// SIMD-ONLY0:       cond.false254:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV255:%.*]] = zext i16 [[TMP118]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END256]]
// SIMD-ONLY0:       cond.end256:
// SIMD-ONLY0-NEXT:    [[COND257:%.*]] = phi i32 [ [[CONV253]], [[COND_TRUE252]] ], [ [[CONV255]], [[COND_FALSE254]] ]
// SIMD-ONLY0-NEXT:    [[CONV258:%.*]] = trunc i32 [[COND257]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV258]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP119]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP120]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV259:%.*]] = zext i16 [[TMP121]] to i32
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV260:%.*]] = zext i16 [[TMP122]] to i32
// SIMD-ONLY0-NEXT:    [[CMP261:%.*]] = icmp sgt i32 [[CONV259]], [[CONV260]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP261]], label [[COND_TRUE263:%.*]], label [[COND_FALSE265:%.*]]
// SIMD-ONLY0:       cond.true263:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV264:%.*]] = zext i16 [[TMP123]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END267:%.*]]
// SIMD-ONLY0:       cond.false265:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV266:%.*]] = zext i16 [[TMP124]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END267]]
// SIMD-ONLY0:       cond.end267:
// SIMD-ONLY0-NEXT:    [[COND268:%.*]] = phi i32 [ [[CONV264]], [[COND_TRUE263]] ], [ [[CONV266]], [[COND_FALSE265]] ]
// SIMD-ONLY0-NEXT:    [[CONV269:%.*]] = trunc i32 [[COND268]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV269]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP125]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV270:%.*]] = zext i16 [[TMP126]] to i32
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV271:%.*]] = zext i16 [[TMP127]] to i32
// SIMD-ONLY0-NEXT:    [[CMP272:%.*]] = icmp slt i32 [[CONV270]], [[CONV271]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP272]], label [[COND_TRUE274:%.*]], label [[COND_FALSE276:%.*]]
// SIMD-ONLY0:       cond.true274:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV275:%.*]] = zext i16 [[TMP128]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END278:%.*]]
// SIMD-ONLY0:       cond.false276:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV277:%.*]] = zext i16 [[TMP129]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END278]]
// SIMD-ONLY0:       cond.end278:
// SIMD-ONLY0-NEXT:    [[COND279:%.*]] = phi i32 [ [[CONV275]], [[COND_TRUE274]] ], [ [[CONV277]], [[COND_FALSE276]] ]
// SIMD-ONLY0-NEXT:    [[CONV280:%.*]] = trunc i32 [[COND279]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV280]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP130]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV281:%.*]] = zext i16 [[TMP131]] to i32
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV282:%.*]] = zext i16 [[TMP132]] to i32
// SIMD-ONLY0-NEXT:    [[CMP283:%.*]] = icmp eq i32 [[CONV281]], [[CONV282]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP283]], label [[COND_TRUE285:%.*]], label [[COND_FALSE287:%.*]]
// SIMD-ONLY0:       cond.true285:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV286:%.*]] = zext i16 [[TMP133]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END289:%.*]]
// SIMD-ONLY0:       cond.false287:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV288:%.*]] = zext i16 [[TMP134]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END289]]
// SIMD-ONLY0:       cond.end289:
// SIMD-ONLY0-NEXT:    [[COND290:%.*]] = phi i32 [ [[CONV286]], [[COND_TRUE285]] ], [ [[CONV288]], [[COND_FALSE287]] ]
// SIMD-ONLY0-NEXT:    [[CONV291:%.*]] = trunc i32 [[COND290]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV291]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV292:%.*]] = zext i16 [[TMP135]] to i32
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV293:%.*]] = zext i16 [[TMP136]] to i32
// SIMD-ONLY0-NEXT:    [[CMP294:%.*]] = icmp sgt i32 [[CONV292]], [[CONV293]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP294]], label [[COND_TRUE296:%.*]], label [[COND_FALSE298:%.*]]
// SIMD-ONLY0:       cond.true296:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV297:%.*]] = zext i16 [[TMP137]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END300:%.*]]
// SIMD-ONLY0:       cond.false298:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV299:%.*]] = zext i16 [[TMP138]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END300]]
// SIMD-ONLY0:       cond.end300:
// SIMD-ONLY0-NEXT:    [[COND301:%.*]] = phi i32 [ [[CONV297]], [[COND_TRUE296]] ], [ [[CONV299]], [[COND_FALSE298]] ]
// SIMD-ONLY0-NEXT:    [[CONV302:%.*]] = trunc i32 [[COND301]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV302]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP139]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV303:%.*]] = zext i16 [[TMP140]] to i32
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV304:%.*]] = zext i16 [[TMP141]] to i32
// SIMD-ONLY0-NEXT:    [[CMP305:%.*]] = icmp slt i32 [[CONV303]], [[CONV304]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP305]], label [[COND_TRUE307:%.*]], label [[COND_FALSE309:%.*]]
// SIMD-ONLY0:       cond.true307:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV308:%.*]] = zext i16 [[TMP142]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END311:%.*]]
// SIMD-ONLY0:       cond.false309:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV310:%.*]] = zext i16 [[TMP143]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END311]]
// SIMD-ONLY0:       cond.end311:
// SIMD-ONLY0-NEXT:    [[COND312:%.*]] = phi i32 [ [[CONV308]], [[COND_TRUE307]] ], [ [[CONV310]], [[COND_FALSE309]] ]
// SIMD-ONLY0-NEXT:    [[CONV313:%.*]] = trunc i32 [[COND312]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV313]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP144]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV314:%.*]] = zext i16 [[TMP145]] to i32
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV315:%.*]] = zext i16 [[TMP146]] to i32
// SIMD-ONLY0-NEXT:    [[CMP316:%.*]] = icmp eq i32 [[CONV314]], [[CONV315]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP316]], label [[COND_TRUE318:%.*]], label [[COND_FALSE320:%.*]]
// SIMD-ONLY0:       cond.true318:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV319:%.*]] = zext i16 [[TMP147]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END322:%.*]]
// SIMD-ONLY0:       cond.false320:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV321:%.*]] = zext i16 [[TMP148]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END322]]
// SIMD-ONLY0:       cond.end322:
// SIMD-ONLY0-NEXT:    [[COND323:%.*]] = phi i32 [ [[CONV319]], [[COND_TRUE318]] ], [ [[CONV321]], [[COND_FALSE320]] ]
// SIMD-ONLY0-NEXT:    [[CONV324:%.*]] = trunc i32 [[COND323]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV324]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP149]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP150]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV325:%.*]] = zext i16 [[TMP151]] to i32
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV326:%.*]] = zext i16 [[TMP152]] to i32
// SIMD-ONLY0-NEXT:    [[CMP327:%.*]] = icmp sgt i32 [[CONV325]], [[CONV326]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP327]], label [[COND_TRUE329:%.*]], label [[COND_FALSE331:%.*]]
// SIMD-ONLY0:       cond.true329:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV330:%.*]] = zext i16 [[TMP153]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END333:%.*]]
// SIMD-ONLY0:       cond.false331:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV332:%.*]] = zext i16 [[TMP154]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END333]]
// SIMD-ONLY0:       cond.end333:
// SIMD-ONLY0-NEXT:    [[COND334:%.*]] = phi i32 [ [[CONV330]], [[COND_TRUE329]] ], [ [[CONV332]], [[COND_FALSE331]] ]
// SIMD-ONLY0-NEXT:    [[CONV335:%.*]] = trunc i32 [[COND334]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV335]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP155]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV336:%.*]] = zext i16 [[TMP156]] to i32
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV337:%.*]] = zext i16 [[TMP157]] to i32
// SIMD-ONLY0-NEXT:    [[CMP338:%.*]] = icmp slt i32 [[CONV336]], [[CONV337]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP338]], label [[COND_TRUE340:%.*]], label [[COND_FALSE342:%.*]]
// SIMD-ONLY0:       cond.true340:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV341:%.*]] = zext i16 [[TMP158]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END344:%.*]]
// SIMD-ONLY0:       cond.false342:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV343:%.*]] = zext i16 [[TMP159]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END344]]
// SIMD-ONLY0:       cond.end344:
// SIMD-ONLY0-NEXT:    [[COND345:%.*]] = phi i32 [ [[CONV341]], [[COND_TRUE340]] ], [ [[CONV343]], [[COND_FALSE342]] ]
// SIMD-ONLY0-NEXT:    [[CONV346:%.*]] = trunc i32 [[COND345]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV346]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP160]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV347:%.*]] = zext i16 [[TMP161]] to i32
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV348:%.*]] = zext i16 [[TMP162]] to i32
// SIMD-ONLY0-NEXT:    [[CMP349:%.*]] = icmp eq i32 [[CONV347]], [[CONV348]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP349]], label [[COND_TRUE351:%.*]], label [[COND_FALSE353:%.*]]
// SIMD-ONLY0:       cond.true351:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV352:%.*]] = zext i16 [[TMP163]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END355:%.*]]
// SIMD-ONLY0:       cond.false353:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV354:%.*]] = zext i16 [[TMP164]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END355]]
// SIMD-ONLY0:       cond.end355:
// SIMD-ONLY0-NEXT:    [[COND356:%.*]] = phi i32 [ [[CONV352]], [[COND_TRUE351]] ], [ [[CONV354]], [[COND_FALSE353]] ]
// SIMD-ONLY0-NEXT:    [[CONV357:%.*]] = trunc i32 [[COND356]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV357]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV358:%.*]] = zext i16 [[TMP165]] to i32
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV359:%.*]] = zext i16 [[TMP166]] to i32
// SIMD-ONLY0-NEXT:    [[CMP360:%.*]] = icmp sgt i32 [[CONV358]], [[CONV359]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP360]], label [[COND_TRUE362:%.*]], label [[COND_FALSE364:%.*]]
// SIMD-ONLY0:       cond.true362:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV363:%.*]] = zext i16 [[TMP167]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END366:%.*]]
// SIMD-ONLY0:       cond.false364:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV365:%.*]] = zext i16 [[TMP168]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END366]]
// SIMD-ONLY0:       cond.end366:
// SIMD-ONLY0-NEXT:    [[COND367:%.*]] = phi i32 [ [[CONV363]], [[COND_TRUE362]] ], [ [[CONV365]], [[COND_FALSE364]] ]
// SIMD-ONLY0-NEXT:    [[CONV368:%.*]] = trunc i32 [[COND367]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV368]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP169]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV369:%.*]] = zext i16 [[TMP170]] to i32
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV370:%.*]] = zext i16 [[TMP171]] to i32
// SIMD-ONLY0-NEXT:    [[CMP371:%.*]] = icmp slt i32 [[CONV369]], [[CONV370]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP371]], label [[COND_TRUE373:%.*]], label [[COND_FALSE375:%.*]]
// SIMD-ONLY0:       cond.true373:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV374:%.*]] = zext i16 [[TMP172]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END377:%.*]]
// SIMD-ONLY0:       cond.false375:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV376:%.*]] = zext i16 [[TMP173]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END377]]
// SIMD-ONLY0:       cond.end377:
// SIMD-ONLY0-NEXT:    [[COND378:%.*]] = phi i32 [ [[CONV374]], [[COND_TRUE373]] ], [ [[CONV376]], [[COND_FALSE375]] ]
// SIMD-ONLY0-NEXT:    [[CONV379:%.*]] = trunc i32 [[COND378]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV379]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP174]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV380:%.*]] = zext i16 [[TMP175]] to i32
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i16, ptr [[USE]], align 2
// SIMD-ONLY0-NEXT:    [[CONV381:%.*]] = zext i16 [[TMP176]] to i32
// SIMD-ONLY0-NEXT:    [[CMP382:%.*]] = icmp eq i32 [[CONV380]], [[CONV381]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP382]], label [[COND_TRUE384:%.*]], label [[COND_FALSE386:%.*]]
// SIMD-ONLY0:       cond.true384:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i16, ptr [[USD]], align 2
// SIMD-ONLY0-NEXT:    [[CONV385:%.*]] = zext i16 [[TMP177]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END388:%.*]]
// SIMD-ONLY0:       cond.false386:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[CONV387:%.*]] = zext i16 [[TMP178]] to i32
// SIMD-ONLY0-NEXT:    br label [[COND_END388]]
// SIMD-ONLY0:       cond.end388:
// SIMD-ONLY0-NEXT:    [[COND389:%.*]] = phi i32 [ [[CONV385]], [[COND_TRUE384]] ], [ [[CONV387]], [[COND_FALSE386]] ]
// SIMD-ONLY0-NEXT:    [[CONV390:%.*]] = trunc i32 [[COND389]] to i16
// SIMD-ONLY0-NEXT:    store i16 [[CONV390]], ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i16, ptr [[USX]], align 2
// SIMD-ONLY0-NEXT:    store i16 [[TMP179]], ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i16, ptr [[USV]], align 2
// SIMD-ONLY0-NEXT:    ret i16 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @ixevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[IX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IV:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[IE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[ID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP0]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP5]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP1:%.*]] = icmp slt i32 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1]], label [[COND_TRUE2:%.*]], label [[COND_FALSE3:%.*]]
// SIMD-ONLY0:       cond.true2:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4:%.*]]
// SIMD-ONLY0:       cond.false3:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4]]
// SIMD-ONLY0:       cond.end4:
// SIMD-ONLY0-NEXT:    [[COND5:%.*]] = phi i32 [ [[TMP8]], [[COND_TRUE2]] ], [ [[TMP9]], [[COND_FALSE3]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND5]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP10]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6:%.*]] = icmp eq i32 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6]], label [[COND_TRUE7:%.*]], label [[COND_FALSE8:%.*]]
// SIMD-ONLY0:       cond.true7:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END9:%.*]]
// SIMD-ONLY0:       cond.false8:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END9]]
// SIMD-ONLY0:       cond.end9:
// SIMD-ONLY0-NEXT:    [[COND10:%.*]] = phi i32 [ [[TMP13]], [[COND_TRUE7]] ], [ [[TMP14]], [[COND_FALSE8]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND10]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = icmp sgt i32 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE12:%.*]], label [[COND_FALSE13:%.*]]
// SIMD-ONLY0:       cond.true12:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END14:%.*]]
// SIMD-ONLY0:       cond.false13:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END14]]
// SIMD-ONLY0:       cond.end14:
// SIMD-ONLY0-NEXT:    [[COND15:%.*]] = phi i32 [ [[TMP17]], [[COND_TRUE12]] ], [ [[TMP18]], [[COND_FALSE13]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND15]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP19]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP16:%.*]] = icmp slt i32 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP16]], label [[COND_TRUE17:%.*]], label [[COND_FALSE18:%.*]]
// SIMD-ONLY0:       cond.true17:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END19:%.*]]
// SIMD-ONLY0:       cond.false18:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END19]]
// SIMD-ONLY0:       cond.end19:
// SIMD-ONLY0-NEXT:    [[COND20:%.*]] = phi i32 [ [[TMP22]], [[COND_TRUE17]] ], [ [[TMP23]], [[COND_FALSE18]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND20]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP24]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP21:%.*]] = icmp eq i32 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP21]], label [[COND_TRUE22:%.*]], label [[COND_FALSE23:%.*]]
// SIMD-ONLY0:       cond.true22:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END24:%.*]]
// SIMD-ONLY0:       cond.false23:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END24]]
// SIMD-ONLY0:       cond.end24:
// SIMD-ONLY0-NEXT:    [[COND25:%.*]] = phi i32 [ [[TMP27]], [[COND_TRUE22]] ], [ [[TMP28]], [[COND_FALSE23]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND25]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP29]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP30]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP26:%.*]] = icmp sgt i32 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP26]], label [[COND_TRUE27:%.*]], label [[COND_FALSE28:%.*]]
// SIMD-ONLY0:       cond.true27:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END29:%.*]]
// SIMD-ONLY0:       cond.false28:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END29]]
// SIMD-ONLY0:       cond.end29:
// SIMD-ONLY0-NEXT:    [[COND30:%.*]] = phi i32 [ [[TMP33]], [[COND_TRUE27]] ], [ [[TMP34]], [[COND_FALSE28]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND30]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP35]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP31:%.*]] = icmp slt i32 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP31]], label [[COND_TRUE32:%.*]], label [[COND_FALSE33:%.*]]
// SIMD-ONLY0:       cond.true32:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END34:%.*]]
// SIMD-ONLY0:       cond.false33:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END34]]
// SIMD-ONLY0:       cond.end34:
// SIMD-ONLY0-NEXT:    [[COND35:%.*]] = phi i32 [ [[TMP38]], [[COND_TRUE32]] ], [ [[TMP39]], [[COND_FALSE33]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND35]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP40]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP36:%.*]] = icmp eq i32 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP36]], label [[COND_TRUE37:%.*]], label [[COND_FALSE38:%.*]]
// SIMD-ONLY0:       cond.true37:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false38:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi i32 [ [[TMP43]], [[COND_TRUE37]] ], [ [[TMP44]], [[COND_FALSE38]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND40]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = icmp sgt i32 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[COND_TRUE42:%.*]], label [[COND_FALSE43:%.*]]
// SIMD-ONLY0:       cond.true42:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END44:%.*]]
// SIMD-ONLY0:       cond.false43:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END44]]
// SIMD-ONLY0:       cond.end44:
// SIMD-ONLY0-NEXT:    [[COND45:%.*]] = phi i32 [ [[TMP47]], [[COND_TRUE42]] ], [ [[TMP48]], [[COND_FALSE43]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND45]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP49]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP46:%.*]] = icmp slt i32 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP46]], label [[COND_TRUE47:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true47:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END49:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END49]]
// SIMD-ONLY0:       cond.end49:
// SIMD-ONLY0-NEXT:    [[COND50:%.*]] = phi i32 [ [[TMP52]], [[COND_TRUE47]] ], [ [[TMP53]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND50]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP54]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP51:%.*]] = icmp eq i32 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP51]], label [[COND_TRUE52:%.*]], label [[COND_FALSE53:%.*]]
// SIMD-ONLY0:       cond.true52:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END54:%.*]]
// SIMD-ONLY0:       cond.false53:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END54]]
// SIMD-ONLY0:       cond.end54:
// SIMD-ONLY0-NEXT:    [[COND55:%.*]] = phi i32 [ [[TMP57]], [[COND_TRUE52]] ], [ [[TMP58]], [[COND_FALSE53]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND55]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP59]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP60]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP56:%.*]] = icmp sgt i32 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP56]], label [[COND_TRUE57:%.*]], label [[COND_FALSE58:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END59:%.*]]
// SIMD-ONLY0:       cond.false58:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END59]]
// SIMD-ONLY0:       cond.end59:
// SIMD-ONLY0-NEXT:    [[COND60:%.*]] = phi i32 [ [[TMP63]], [[COND_TRUE57]] ], [ [[TMP64]], [[COND_FALSE58]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND60]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP65]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP61:%.*]] = icmp slt i32 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP61]], label [[COND_TRUE62:%.*]], label [[COND_FALSE63:%.*]]
// SIMD-ONLY0:       cond.true62:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END64:%.*]]
// SIMD-ONLY0:       cond.false63:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END64]]
// SIMD-ONLY0:       cond.end64:
// SIMD-ONLY0-NEXT:    [[COND65:%.*]] = phi i32 [ [[TMP68]], [[COND_TRUE62]] ], [ [[TMP69]], [[COND_FALSE63]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND65]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP70]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = icmp eq i32 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE67:%.*]], label [[COND_FALSE68:%.*]]
// SIMD-ONLY0:       cond.true67:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END69:%.*]]
// SIMD-ONLY0:       cond.false68:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END69]]
// SIMD-ONLY0:       cond.end69:
// SIMD-ONLY0-NEXT:    [[COND70:%.*]] = phi i32 [ [[TMP73]], [[COND_TRUE67]] ], [ [[TMP74]], [[COND_FALSE68]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND70]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP71:%.*]] = icmp sgt i32 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP71]], label [[COND_TRUE72:%.*]], label [[COND_FALSE73:%.*]]
// SIMD-ONLY0:       cond.true72:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END74:%.*]]
// SIMD-ONLY0:       cond.false73:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END74]]
// SIMD-ONLY0:       cond.end74:
// SIMD-ONLY0-NEXT:    [[COND75:%.*]] = phi i32 [ [[TMP77]], [[COND_TRUE72]] ], [ [[TMP78]], [[COND_FALSE73]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND75]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP79]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP76:%.*]] = icmp slt i32 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP76]], label [[COND_TRUE77:%.*]], label [[COND_FALSE78:%.*]]
// SIMD-ONLY0:       cond.true77:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END79:%.*]]
// SIMD-ONLY0:       cond.false78:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END79]]
// SIMD-ONLY0:       cond.end79:
// SIMD-ONLY0-NEXT:    [[COND80:%.*]] = phi i32 [ [[TMP82]], [[COND_TRUE77]] ], [ [[TMP83]], [[COND_FALSE78]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND80]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP84]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP81:%.*]] = icmp eq i32 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP81]], label [[COND_TRUE82:%.*]], label [[COND_FALSE83:%.*]]
// SIMD-ONLY0:       cond.true82:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END84:%.*]]
// SIMD-ONLY0:       cond.false83:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END84]]
// SIMD-ONLY0:       cond.end84:
// SIMD-ONLY0-NEXT:    [[COND85:%.*]] = phi i32 [ [[TMP87]], [[COND_TRUE82]] ], [ [[TMP88]], [[COND_FALSE83]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND85]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP89]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP90]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP86:%.*]] = icmp sgt i32 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP86]], label [[COND_TRUE87:%.*]], label [[COND_FALSE88:%.*]]
// SIMD-ONLY0:       cond.true87:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END89:%.*]]
// SIMD-ONLY0:       cond.false88:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END89]]
// SIMD-ONLY0:       cond.end89:
// SIMD-ONLY0-NEXT:    [[COND90:%.*]] = phi i32 [ [[TMP93]], [[COND_TRUE87]] ], [ [[TMP94]], [[COND_FALSE88]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND90]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP95]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP91:%.*]] = icmp slt i32 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP91]], label [[COND_TRUE92:%.*]], label [[COND_FALSE93:%.*]]
// SIMD-ONLY0:       cond.true92:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false93:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi i32 [ [[TMP98]], [[COND_TRUE92]] ], [ [[TMP99]], [[COND_FALSE93]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND95]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP100]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP96:%.*]] = icmp eq i32 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP96]], label [[COND_TRUE97:%.*]], label [[COND_FALSE98:%.*]]
// SIMD-ONLY0:       cond.true97:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END99:%.*]]
// SIMD-ONLY0:       cond.false98:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END99]]
// SIMD-ONLY0:       cond.end99:
// SIMD-ONLY0-NEXT:    [[COND100:%.*]] = phi i32 [ [[TMP103]], [[COND_TRUE97]] ], [ [[TMP104]], [[COND_FALSE98]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND100]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP101:%.*]] = icmp sgt i32 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP101]], label [[COND_TRUE102:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true102:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END104:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END104]]
// SIMD-ONLY0:       cond.end104:
// SIMD-ONLY0-NEXT:    [[COND105:%.*]] = phi i32 [ [[TMP107]], [[COND_TRUE102]] ], [ [[TMP108]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND105]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP109]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP106:%.*]] = icmp slt i32 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP106]], label [[COND_TRUE107:%.*]], label [[COND_FALSE108:%.*]]
// SIMD-ONLY0:       cond.true107:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END109:%.*]]
// SIMD-ONLY0:       cond.false108:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END109]]
// SIMD-ONLY0:       cond.end109:
// SIMD-ONLY0-NEXT:    [[COND110:%.*]] = phi i32 [ [[TMP112]], [[COND_TRUE107]] ], [ [[TMP113]], [[COND_FALSE108]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND110]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP114]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP111:%.*]] = icmp eq i32 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP111]], label [[COND_TRUE112:%.*]], label [[COND_FALSE113:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END114:%.*]]
// SIMD-ONLY0:       cond.false113:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END114]]
// SIMD-ONLY0:       cond.end114:
// SIMD-ONLY0-NEXT:    [[COND115:%.*]] = phi i32 [ [[TMP117]], [[COND_TRUE112]] ], [ [[TMP118]], [[COND_FALSE113]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND115]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP119]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP120]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP116:%.*]] = icmp sgt i32 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP116]], label [[COND_TRUE117:%.*]], label [[COND_FALSE118:%.*]]
// SIMD-ONLY0:       cond.true117:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END119:%.*]]
// SIMD-ONLY0:       cond.false118:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END119]]
// SIMD-ONLY0:       cond.end119:
// SIMD-ONLY0-NEXT:    [[COND120:%.*]] = phi i32 [ [[TMP123]], [[COND_TRUE117]] ], [ [[TMP124]], [[COND_FALSE118]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND120]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP125]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = icmp slt i32 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE122:%.*]], label [[COND_FALSE123:%.*]]
// SIMD-ONLY0:       cond.true122:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END124:%.*]]
// SIMD-ONLY0:       cond.false123:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END124]]
// SIMD-ONLY0:       cond.end124:
// SIMD-ONLY0-NEXT:    [[COND125:%.*]] = phi i32 [ [[TMP128]], [[COND_TRUE122]] ], [ [[TMP129]], [[COND_FALSE123]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND125]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP130]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP126:%.*]] = icmp eq i32 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP126]], label [[COND_TRUE127:%.*]], label [[COND_FALSE128:%.*]]
// SIMD-ONLY0:       cond.true127:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END129:%.*]]
// SIMD-ONLY0:       cond.false128:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END129]]
// SIMD-ONLY0:       cond.end129:
// SIMD-ONLY0-NEXT:    [[COND130:%.*]] = phi i32 [ [[TMP133]], [[COND_TRUE127]] ], [ [[TMP134]], [[COND_FALSE128]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND130]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP131:%.*]] = icmp sgt i32 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP131]], label [[COND_TRUE132:%.*]], label [[COND_FALSE133:%.*]]
// SIMD-ONLY0:       cond.true132:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END134:%.*]]
// SIMD-ONLY0:       cond.false133:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END134]]
// SIMD-ONLY0:       cond.end134:
// SIMD-ONLY0-NEXT:    [[COND135:%.*]] = phi i32 [ [[TMP137]], [[COND_TRUE132]] ], [ [[TMP138]], [[COND_FALSE133]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND135]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP139]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP136:%.*]] = icmp slt i32 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP136]], label [[COND_TRUE137:%.*]], label [[COND_FALSE138:%.*]]
// SIMD-ONLY0:       cond.true137:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END139:%.*]]
// SIMD-ONLY0:       cond.false138:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END139]]
// SIMD-ONLY0:       cond.end139:
// SIMD-ONLY0-NEXT:    [[COND140:%.*]] = phi i32 [ [[TMP142]], [[COND_TRUE137]] ], [ [[TMP143]], [[COND_FALSE138]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND140]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP144]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP141:%.*]] = icmp eq i32 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP141]], label [[COND_TRUE142:%.*]], label [[COND_FALSE143:%.*]]
// SIMD-ONLY0:       cond.true142:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END144:%.*]]
// SIMD-ONLY0:       cond.false143:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END144]]
// SIMD-ONLY0:       cond.end144:
// SIMD-ONLY0-NEXT:    [[COND145:%.*]] = phi i32 [ [[TMP147]], [[COND_TRUE142]] ], [ [[TMP148]], [[COND_FALSE143]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND145]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP149]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP150]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP146:%.*]] = icmp sgt i32 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP146]], label [[COND_TRUE147:%.*]], label [[COND_FALSE148:%.*]]
// SIMD-ONLY0:       cond.true147:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false148:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i32 [ [[TMP153]], [[COND_TRUE147]] ], [ [[TMP154]], [[COND_FALSE148]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND150]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP155]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP151:%.*]] = icmp slt i32 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP151]], label [[COND_TRUE152:%.*]], label [[COND_FALSE153:%.*]]
// SIMD-ONLY0:       cond.true152:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END154:%.*]]
// SIMD-ONLY0:       cond.false153:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END154]]
// SIMD-ONLY0:       cond.end154:
// SIMD-ONLY0-NEXT:    [[COND155:%.*]] = phi i32 [ [[TMP158]], [[COND_TRUE152]] ], [ [[TMP159]], [[COND_FALSE153]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND155]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP160]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP156:%.*]] = icmp eq i32 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP156]], label [[COND_TRUE157:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true157:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END159:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END159]]
// SIMD-ONLY0:       cond.end159:
// SIMD-ONLY0-NEXT:    [[COND160:%.*]] = phi i32 [ [[TMP163]], [[COND_TRUE157]] ], [ [[TMP164]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND160]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP161:%.*]] = icmp sgt i32 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP161]], label [[COND_TRUE162:%.*]], label [[COND_FALSE163:%.*]]
// SIMD-ONLY0:       cond.true162:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END164:%.*]]
// SIMD-ONLY0:       cond.false163:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END164]]
// SIMD-ONLY0:       cond.end164:
// SIMD-ONLY0-NEXT:    [[COND165:%.*]] = phi i32 [ [[TMP167]], [[COND_TRUE162]] ], [ [[TMP168]], [[COND_FALSE163]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND165]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP169]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP166:%.*]] = icmp slt i32 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP166]], label [[COND_TRUE167:%.*]], label [[COND_FALSE168:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END169:%.*]]
// SIMD-ONLY0:       cond.false168:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END169]]
// SIMD-ONLY0:       cond.end169:
// SIMD-ONLY0-NEXT:    [[COND170:%.*]] = phi i32 [ [[TMP172]], [[COND_TRUE167]] ], [ [[TMP173]], [[COND_FALSE168]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND170]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP174]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i32, ptr [[IE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP171:%.*]] = icmp eq i32 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP171]], label [[COND_TRUE172:%.*]], label [[COND_FALSE173:%.*]]
// SIMD-ONLY0:       cond.true172:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i32, ptr [[ID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END174:%.*]]
// SIMD-ONLY0:       cond.false173:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END174]]
// SIMD-ONLY0:       cond.end174:
// SIMD-ONLY0-NEXT:    [[COND175:%.*]] = phi i32 [ [[TMP177]], [[COND_TRUE172]] ], [ [[TMP178]], [[COND_FALSE173]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND175]], ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i32, ptr [[IX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP179]], ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i32, ptr [[IV]], align 4
// SIMD-ONLY0-NEXT:    ret i32 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @uixevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[UIX:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIV:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UIE:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[UID:%.*]] = alloca i32, align 4
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP0]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp ugt i32 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i32 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP5]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP1:%.*]] = icmp ult i32 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1]], label [[COND_TRUE2:%.*]], label [[COND_FALSE3:%.*]]
// SIMD-ONLY0:       cond.true2:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4:%.*]]
// SIMD-ONLY0:       cond.false3:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4]]
// SIMD-ONLY0:       cond.end4:
// SIMD-ONLY0-NEXT:    [[COND5:%.*]] = phi i32 [ [[TMP8]], [[COND_TRUE2]] ], [ [[TMP9]], [[COND_FALSE3]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND5]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP10]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6:%.*]] = icmp eq i32 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6]], label [[COND_TRUE7:%.*]], label [[COND_FALSE8:%.*]]
// SIMD-ONLY0:       cond.true7:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END9:%.*]]
// SIMD-ONLY0:       cond.false8:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END9]]
// SIMD-ONLY0:       cond.end9:
// SIMD-ONLY0-NEXT:    [[COND10:%.*]] = phi i32 [ [[TMP13]], [[COND_TRUE7]] ], [ [[TMP14]], [[COND_FALSE8]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND10]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = icmp ugt i32 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE12:%.*]], label [[COND_FALSE13:%.*]]
// SIMD-ONLY0:       cond.true12:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END14:%.*]]
// SIMD-ONLY0:       cond.false13:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END14]]
// SIMD-ONLY0:       cond.end14:
// SIMD-ONLY0-NEXT:    [[COND15:%.*]] = phi i32 [ [[TMP17]], [[COND_TRUE12]] ], [ [[TMP18]], [[COND_FALSE13]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND15]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP19]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP16:%.*]] = icmp ult i32 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP16]], label [[COND_TRUE17:%.*]], label [[COND_FALSE18:%.*]]
// SIMD-ONLY0:       cond.true17:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END19:%.*]]
// SIMD-ONLY0:       cond.false18:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END19]]
// SIMD-ONLY0:       cond.end19:
// SIMD-ONLY0-NEXT:    [[COND20:%.*]] = phi i32 [ [[TMP22]], [[COND_TRUE17]] ], [ [[TMP23]], [[COND_FALSE18]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND20]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP24]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP21:%.*]] = icmp eq i32 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP21]], label [[COND_TRUE22:%.*]], label [[COND_FALSE23:%.*]]
// SIMD-ONLY0:       cond.true22:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END24:%.*]]
// SIMD-ONLY0:       cond.false23:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END24]]
// SIMD-ONLY0:       cond.end24:
// SIMD-ONLY0-NEXT:    [[COND25:%.*]] = phi i32 [ [[TMP27]], [[COND_TRUE22]] ], [ [[TMP28]], [[COND_FALSE23]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND25]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP29]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP30]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP26:%.*]] = icmp ugt i32 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP26]], label [[COND_TRUE27:%.*]], label [[COND_FALSE28:%.*]]
// SIMD-ONLY0:       cond.true27:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END29:%.*]]
// SIMD-ONLY0:       cond.false28:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END29]]
// SIMD-ONLY0:       cond.end29:
// SIMD-ONLY0-NEXT:    [[COND30:%.*]] = phi i32 [ [[TMP33]], [[COND_TRUE27]] ], [ [[TMP34]], [[COND_FALSE28]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND30]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP35]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP31:%.*]] = icmp ult i32 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP31]], label [[COND_TRUE32:%.*]], label [[COND_FALSE33:%.*]]
// SIMD-ONLY0:       cond.true32:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END34:%.*]]
// SIMD-ONLY0:       cond.false33:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END34]]
// SIMD-ONLY0:       cond.end34:
// SIMD-ONLY0-NEXT:    [[COND35:%.*]] = phi i32 [ [[TMP38]], [[COND_TRUE32]] ], [ [[TMP39]], [[COND_FALSE33]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND35]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP40]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP36:%.*]] = icmp eq i32 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP36]], label [[COND_TRUE37:%.*]], label [[COND_FALSE38:%.*]]
// SIMD-ONLY0:       cond.true37:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false38:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi i32 [ [[TMP43]], [[COND_TRUE37]] ], [ [[TMP44]], [[COND_FALSE38]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND40]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = icmp ugt i32 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[COND_TRUE42:%.*]], label [[COND_FALSE43:%.*]]
// SIMD-ONLY0:       cond.true42:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END44:%.*]]
// SIMD-ONLY0:       cond.false43:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END44]]
// SIMD-ONLY0:       cond.end44:
// SIMD-ONLY0-NEXT:    [[COND45:%.*]] = phi i32 [ [[TMP47]], [[COND_TRUE42]] ], [ [[TMP48]], [[COND_FALSE43]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND45]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP49]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP46:%.*]] = icmp ult i32 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP46]], label [[COND_TRUE47:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true47:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END49:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END49]]
// SIMD-ONLY0:       cond.end49:
// SIMD-ONLY0-NEXT:    [[COND50:%.*]] = phi i32 [ [[TMP52]], [[COND_TRUE47]] ], [ [[TMP53]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND50]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP54]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP51:%.*]] = icmp eq i32 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP51]], label [[COND_TRUE52:%.*]], label [[COND_FALSE53:%.*]]
// SIMD-ONLY0:       cond.true52:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END54:%.*]]
// SIMD-ONLY0:       cond.false53:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END54]]
// SIMD-ONLY0:       cond.end54:
// SIMD-ONLY0-NEXT:    [[COND55:%.*]] = phi i32 [ [[TMP57]], [[COND_TRUE52]] ], [ [[TMP58]], [[COND_FALSE53]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND55]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP59]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP60]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP56:%.*]] = icmp ugt i32 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP56]], label [[COND_TRUE57:%.*]], label [[COND_FALSE58:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END59:%.*]]
// SIMD-ONLY0:       cond.false58:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END59]]
// SIMD-ONLY0:       cond.end59:
// SIMD-ONLY0-NEXT:    [[COND60:%.*]] = phi i32 [ [[TMP63]], [[COND_TRUE57]] ], [ [[TMP64]], [[COND_FALSE58]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND60]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP65]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP61:%.*]] = icmp ult i32 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP61]], label [[COND_TRUE62:%.*]], label [[COND_FALSE63:%.*]]
// SIMD-ONLY0:       cond.true62:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END64:%.*]]
// SIMD-ONLY0:       cond.false63:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END64]]
// SIMD-ONLY0:       cond.end64:
// SIMD-ONLY0-NEXT:    [[COND65:%.*]] = phi i32 [ [[TMP68]], [[COND_TRUE62]] ], [ [[TMP69]], [[COND_FALSE63]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND65]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP70]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = icmp eq i32 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE67:%.*]], label [[COND_FALSE68:%.*]]
// SIMD-ONLY0:       cond.true67:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END69:%.*]]
// SIMD-ONLY0:       cond.false68:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END69]]
// SIMD-ONLY0:       cond.end69:
// SIMD-ONLY0-NEXT:    [[COND70:%.*]] = phi i32 [ [[TMP73]], [[COND_TRUE67]] ], [ [[TMP74]], [[COND_FALSE68]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND70]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP71:%.*]] = icmp ugt i32 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP71]], label [[COND_TRUE72:%.*]], label [[COND_FALSE73:%.*]]
// SIMD-ONLY0:       cond.true72:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END74:%.*]]
// SIMD-ONLY0:       cond.false73:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END74]]
// SIMD-ONLY0:       cond.end74:
// SIMD-ONLY0-NEXT:    [[COND75:%.*]] = phi i32 [ [[TMP77]], [[COND_TRUE72]] ], [ [[TMP78]], [[COND_FALSE73]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND75]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP79]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP76:%.*]] = icmp ult i32 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP76]], label [[COND_TRUE77:%.*]], label [[COND_FALSE78:%.*]]
// SIMD-ONLY0:       cond.true77:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END79:%.*]]
// SIMD-ONLY0:       cond.false78:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END79]]
// SIMD-ONLY0:       cond.end79:
// SIMD-ONLY0-NEXT:    [[COND80:%.*]] = phi i32 [ [[TMP82]], [[COND_TRUE77]] ], [ [[TMP83]], [[COND_FALSE78]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND80]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP84]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP81:%.*]] = icmp eq i32 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP81]], label [[COND_TRUE82:%.*]], label [[COND_FALSE83:%.*]]
// SIMD-ONLY0:       cond.true82:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END84:%.*]]
// SIMD-ONLY0:       cond.false83:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END84]]
// SIMD-ONLY0:       cond.end84:
// SIMD-ONLY0-NEXT:    [[COND85:%.*]] = phi i32 [ [[TMP87]], [[COND_TRUE82]] ], [ [[TMP88]], [[COND_FALSE83]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND85]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP89]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP90]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP86:%.*]] = icmp ugt i32 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP86]], label [[COND_TRUE87:%.*]], label [[COND_FALSE88:%.*]]
// SIMD-ONLY0:       cond.true87:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END89:%.*]]
// SIMD-ONLY0:       cond.false88:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END89]]
// SIMD-ONLY0:       cond.end89:
// SIMD-ONLY0-NEXT:    [[COND90:%.*]] = phi i32 [ [[TMP93]], [[COND_TRUE87]] ], [ [[TMP94]], [[COND_FALSE88]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND90]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP95]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP91:%.*]] = icmp ult i32 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP91]], label [[COND_TRUE92:%.*]], label [[COND_FALSE93:%.*]]
// SIMD-ONLY0:       cond.true92:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false93:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi i32 [ [[TMP98]], [[COND_TRUE92]] ], [ [[TMP99]], [[COND_FALSE93]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND95]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP100]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP96:%.*]] = icmp eq i32 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP96]], label [[COND_TRUE97:%.*]], label [[COND_FALSE98:%.*]]
// SIMD-ONLY0:       cond.true97:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END99:%.*]]
// SIMD-ONLY0:       cond.false98:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END99]]
// SIMD-ONLY0:       cond.end99:
// SIMD-ONLY0-NEXT:    [[COND100:%.*]] = phi i32 [ [[TMP103]], [[COND_TRUE97]] ], [ [[TMP104]], [[COND_FALSE98]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND100]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP101:%.*]] = icmp ugt i32 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP101]], label [[COND_TRUE102:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true102:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END104:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END104]]
// SIMD-ONLY0:       cond.end104:
// SIMD-ONLY0-NEXT:    [[COND105:%.*]] = phi i32 [ [[TMP107]], [[COND_TRUE102]] ], [ [[TMP108]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND105]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP109]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP106:%.*]] = icmp ult i32 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP106]], label [[COND_TRUE107:%.*]], label [[COND_FALSE108:%.*]]
// SIMD-ONLY0:       cond.true107:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END109:%.*]]
// SIMD-ONLY0:       cond.false108:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END109]]
// SIMD-ONLY0:       cond.end109:
// SIMD-ONLY0-NEXT:    [[COND110:%.*]] = phi i32 [ [[TMP112]], [[COND_TRUE107]] ], [ [[TMP113]], [[COND_FALSE108]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND110]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP114]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP111:%.*]] = icmp eq i32 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP111]], label [[COND_TRUE112:%.*]], label [[COND_FALSE113:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END114:%.*]]
// SIMD-ONLY0:       cond.false113:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END114]]
// SIMD-ONLY0:       cond.end114:
// SIMD-ONLY0-NEXT:    [[COND115:%.*]] = phi i32 [ [[TMP117]], [[COND_TRUE112]] ], [ [[TMP118]], [[COND_FALSE113]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND115]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP119]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP120]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP116:%.*]] = icmp ugt i32 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP116]], label [[COND_TRUE117:%.*]], label [[COND_FALSE118:%.*]]
// SIMD-ONLY0:       cond.true117:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END119:%.*]]
// SIMD-ONLY0:       cond.false118:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END119]]
// SIMD-ONLY0:       cond.end119:
// SIMD-ONLY0-NEXT:    [[COND120:%.*]] = phi i32 [ [[TMP123]], [[COND_TRUE117]] ], [ [[TMP124]], [[COND_FALSE118]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND120]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP125]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = icmp ult i32 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE122:%.*]], label [[COND_FALSE123:%.*]]
// SIMD-ONLY0:       cond.true122:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END124:%.*]]
// SIMD-ONLY0:       cond.false123:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END124]]
// SIMD-ONLY0:       cond.end124:
// SIMD-ONLY0-NEXT:    [[COND125:%.*]] = phi i32 [ [[TMP128]], [[COND_TRUE122]] ], [ [[TMP129]], [[COND_FALSE123]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND125]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP130]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP126:%.*]] = icmp eq i32 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP126]], label [[COND_TRUE127:%.*]], label [[COND_FALSE128:%.*]]
// SIMD-ONLY0:       cond.true127:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END129:%.*]]
// SIMD-ONLY0:       cond.false128:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END129]]
// SIMD-ONLY0:       cond.end129:
// SIMD-ONLY0-NEXT:    [[COND130:%.*]] = phi i32 [ [[TMP133]], [[COND_TRUE127]] ], [ [[TMP134]], [[COND_FALSE128]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND130]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP131:%.*]] = icmp ugt i32 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP131]], label [[COND_TRUE132:%.*]], label [[COND_FALSE133:%.*]]
// SIMD-ONLY0:       cond.true132:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END134:%.*]]
// SIMD-ONLY0:       cond.false133:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END134]]
// SIMD-ONLY0:       cond.end134:
// SIMD-ONLY0-NEXT:    [[COND135:%.*]] = phi i32 [ [[TMP137]], [[COND_TRUE132]] ], [ [[TMP138]], [[COND_FALSE133]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND135]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP139]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP136:%.*]] = icmp ult i32 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP136]], label [[COND_TRUE137:%.*]], label [[COND_FALSE138:%.*]]
// SIMD-ONLY0:       cond.true137:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END139:%.*]]
// SIMD-ONLY0:       cond.false138:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END139]]
// SIMD-ONLY0:       cond.end139:
// SIMD-ONLY0-NEXT:    [[COND140:%.*]] = phi i32 [ [[TMP142]], [[COND_TRUE137]] ], [ [[TMP143]], [[COND_FALSE138]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND140]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP144]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP141:%.*]] = icmp eq i32 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP141]], label [[COND_TRUE142:%.*]], label [[COND_FALSE143:%.*]]
// SIMD-ONLY0:       cond.true142:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END144:%.*]]
// SIMD-ONLY0:       cond.false143:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END144]]
// SIMD-ONLY0:       cond.end144:
// SIMD-ONLY0-NEXT:    [[COND145:%.*]] = phi i32 [ [[TMP147]], [[COND_TRUE142]] ], [ [[TMP148]], [[COND_FALSE143]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND145]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP149]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP150]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP146:%.*]] = icmp ugt i32 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP146]], label [[COND_TRUE147:%.*]], label [[COND_FALSE148:%.*]]
// SIMD-ONLY0:       cond.true147:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false148:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i32 [ [[TMP153]], [[COND_TRUE147]] ], [ [[TMP154]], [[COND_FALSE148]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND150]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP155]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP151:%.*]] = icmp ult i32 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP151]], label [[COND_TRUE152:%.*]], label [[COND_FALSE153:%.*]]
// SIMD-ONLY0:       cond.true152:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END154:%.*]]
// SIMD-ONLY0:       cond.false153:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END154]]
// SIMD-ONLY0:       cond.end154:
// SIMD-ONLY0-NEXT:    [[COND155:%.*]] = phi i32 [ [[TMP158]], [[COND_TRUE152]] ], [ [[TMP159]], [[COND_FALSE153]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND155]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP160]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP156:%.*]] = icmp eq i32 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP156]], label [[COND_TRUE157:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true157:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END159:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END159]]
// SIMD-ONLY0:       cond.end159:
// SIMD-ONLY0-NEXT:    [[COND160:%.*]] = phi i32 [ [[TMP163]], [[COND_TRUE157]] ], [ [[TMP164]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND160]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP161:%.*]] = icmp ugt i32 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP161]], label [[COND_TRUE162:%.*]], label [[COND_FALSE163:%.*]]
// SIMD-ONLY0:       cond.true162:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END164:%.*]]
// SIMD-ONLY0:       cond.false163:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END164]]
// SIMD-ONLY0:       cond.end164:
// SIMD-ONLY0-NEXT:    [[COND165:%.*]] = phi i32 [ [[TMP167]], [[COND_TRUE162]] ], [ [[TMP168]], [[COND_FALSE163]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND165]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP169]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP166:%.*]] = icmp ult i32 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP166]], label [[COND_TRUE167:%.*]], label [[COND_FALSE168:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END169:%.*]]
// SIMD-ONLY0:       cond.false168:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END169]]
// SIMD-ONLY0:       cond.end169:
// SIMD-ONLY0-NEXT:    [[COND170:%.*]] = phi i32 [ [[TMP172]], [[COND_TRUE167]] ], [ [[TMP173]], [[COND_FALSE168]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND170]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP174]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i32, ptr [[UIE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP171:%.*]] = icmp eq i32 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP171]], label [[COND_TRUE172:%.*]], label [[COND_FALSE173:%.*]]
// SIMD-ONLY0:       cond.true172:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i32, ptr [[UID]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END174:%.*]]
// SIMD-ONLY0:       cond.false173:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END174]]
// SIMD-ONLY0:       cond.end174:
// SIMD-ONLY0-NEXT:    [[COND175:%.*]] = phi i32 [ [[TMP177]], [[COND_TRUE172]] ], [ [[TMP178]], [[COND_FALSE173]] ]
// SIMD-ONLY0-NEXT:    store i32 [[COND175]], ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i32, ptr [[UIX]], align 4
// SIMD-ONLY0-NEXT:    store i32 [[TMP179]], ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i32, ptr [[UIV]], align 4
// SIMD-ONLY0-NEXT:    ret i32 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @lxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[LX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP0]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP5]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1]], label [[COND_TRUE2:%.*]], label [[COND_FALSE3:%.*]]
// SIMD-ONLY0:       cond.true2:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4:%.*]]
// SIMD-ONLY0:       cond.false3:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4]]
// SIMD-ONLY0:       cond.end4:
// SIMD-ONLY0-NEXT:    [[COND5:%.*]] = phi i64 [ [[TMP8]], [[COND_TRUE2]] ], [ [[TMP9]], [[COND_FALSE3]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND5]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP10]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6:%.*]] = icmp eq i64 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6]], label [[COND_TRUE7:%.*]], label [[COND_FALSE8:%.*]]
// SIMD-ONLY0:       cond.true7:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END9:%.*]]
// SIMD-ONLY0:       cond.false8:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END9]]
// SIMD-ONLY0:       cond.end9:
// SIMD-ONLY0-NEXT:    [[COND10:%.*]] = phi i64 [ [[TMP13]], [[COND_TRUE7]] ], [ [[TMP14]], [[COND_FALSE8]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND10]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = icmp sgt i64 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE12:%.*]], label [[COND_FALSE13:%.*]]
// SIMD-ONLY0:       cond.true12:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END14:%.*]]
// SIMD-ONLY0:       cond.false13:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END14]]
// SIMD-ONLY0:       cond.end14:
// SIMD-ONLY0-NEXT:    [[COND15:%.*]] = phi i64 [ [[TMP17]], [[COND_TRUE12]] ], [ [[TMP18]], [[COND_FALSE13]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND15]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP19]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP16:%.*]] = icmp slt i64 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP16]], label [[COND_TRUE17:%.*]], label [[COND_FALSE18:%.*]]
// SIMD-ONLY0:       cond.true17:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END19:%.*]]
// SIMD-ONLY0:       cond.false18:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END19]]
// SIMD-ONLY0:       cond.end19:
// SIMD-ONLY0-NEXT:    [[COND20:%.*]] = phi i64 [ [[TMP22]], [[COND_TRUE17]] ], [ [[TMP23]], [[COND_FALSE18]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND20]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP24]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP21:%.*]] = icmp eq i64 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP21]], label [[COND_TRUE22:%.*]], label [[COND_FALSE23:%.*]]
// SIMD-ONLY0:       cond.true22:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END24:%.*]]
// SIMD-ONLY0:       cond.false23:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END24]]
// SIMD-ONLY0:       cond.end24:
// SIMD-ONLY0-NEXT:    [[COND25:%.*]] = phi i64 [ [[TMP27]], [[COND_TRUE22]] ], [ [[TMP28]], [[COND_FALSE23]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND25]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP29]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP30]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP26:%.*]] = icmp sgt i64 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP26]], label [[COND_TRUE27:%.*]], label [[COND_FALSE28:%.*]]
// SIMD-ONLY0:       cond.true27:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END29:%.*]]
// SIMD-ONLY0:       cond.false28:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END29]]
// SIMD-ONLY0:       cond.end29:
// SIMD-ONLY0-NEXT:    [[COND30:%.*]] = phi i64 [ [[TMP33]], [[COND_TRUE27]] ], [ [[TMP34]], [[COND_FALSE28]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND30]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP35]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP31:%.*]] = icmp slt i64 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP31]], label [[COND_TRUE32:%.*]], label [[COND_FALSE33:%.*]]
// SIMD-ONLY0:       cond.true32:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END34:%.*]]
// SIMD-ONLY0:       cond.false33:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END34]]
// SIMD-ONLY0:       cond.end34:
// SIMD-ONLY0-NEXT:    [[COND35:%.*]] = phi i64 [ [[TMP38]], [[COND_TRUE32]] ], [ [[TMP39]], [[COND_FALSE33]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND35]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP40]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP36:%.*]] = icmp eq i64 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP36]], label [[COND_TRUE37:%.*]], label [[COND_FALSE38:%.*]]
// SIMD-ONLY0:       cond.true37:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false38:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi i64 [ [[TMP43]], [[COND_TRUE37]] ], [ [[TMP44]], [[COND_FALSE38]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND40]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = icmp sgt i64 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[COND_TRUE42:%.*]], label [[COND_FALSE43:%.*]]
// SIMD-ONLY0:       cond.true42:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END44:%.*]]
// SIMD-ONLY0:       cond.false43:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END44]]
// SIMD-ONLY0:       cond.end44:
// SIMD-ONLY0-NEXT:    [[COND45:%.*]] = phi i64 [ [[TMP47]], [[COND_TRUE42]] ], [ [[TMP48]], [[COND_FALSE43]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND45]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP49]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP46:%.*]] = icmp slt i64 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP46]], label [[COND_TRUE47:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true47:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END49:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END49]]
// SIMD-ONLY0:       cond.end49:
// SIMD-ONLY0-NEXT:    [[COND50:%.*]] = phi i64 [ [[TMP52]], [[COND_TRUE47]] ], [ [[TMP53]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND50]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP54]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP51:%.*]] = icmp eq i64 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP51]], label [[COND_TRUE52:%.*]], label [[COND_FALSE53:%.*]]
// SIMD-ONLY0:       cond.true52:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END54:%.*]]
// SIMD-ONLY0:       cond.false53:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END54]]
// SIMD-ONLY0:       cond.end54:
// SIMD-ONLY0-NEXT:    [[COND55:%.*]] = phi i64 [ [[TMP57]], [[COND_TRUE52]] ], [ [[TMP58]], [[COND_FALSE53]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND55]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP59]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP60]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP56:%.*]] = icmp sgt i64 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP56]], label [[COND_TRUE57:%.*]], label [[COND_FALSE58:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END59:%.*]]
// SIMD-ONLY0:       cond.false58:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END59]]
// SIMD-ONLY0:       cond.end59:
// SIMD-ONLY0-NEXT:    [[COND60:%.*]] = phi i64 [ [[TMP63]], [[COND_TRUE57]] ], [ [[TMP64]], [[COND_FALSE58]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND60]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP65]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP61:%.*]] = icmp slt i64 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP61]], label [[COND_TRUE62:%.*]], label [[COND_FALSE63:%.*]]
// SIMD-ONLY0:       cond.true62:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64:%.*]]
// SIMD-ONLY0:       cond.false63:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64]]
// SIMD-ONLY0:       cond.end64:
// SIMD-ONLY0-NEXT:    [[COND65:%.*]] = phi i64 [ [[TMP68]], [[COND_TRUE62]] ], [ [[TMP69]], [[COND_FALSE63]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND65]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP70]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = icmp eq i64 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE67:%.*]], label [[COND_FALSE68:%.*]]
// SIMD-ONLY0:       cond.true67:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END69:%.*]]
// SIMD-ONLY0:       cond.false68:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END69]]
// SIMD-ONLY0:       cond.end69:
// SIMD-ONLY0-NEXT:    [[COND70:%.*]] = phi i64 [ [[TMP73]], [[COND_TRUE67]] ], [ [[TMP74]], [[COND_FALSE68]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND70]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP71:%.*]] = icmp sgt i64 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP71]], label [[COND_TRUE72:%.*]], label [[COND_FALSE73:%.*]]
// SIMD-ONLY0:       cond.true72:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END74:%.*]]
// SIMD-ONLY0:       cond.false73:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END74]]
// SIMD-ONLY0:       cond.end74:
// SIMD-ONLY0-NEXT:    [[COND75:%.*]] = phi i64 [ [[TMP77]], [[COND_TRUE72]] ], [ [[TMP78]], [[COND_FALSE73]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND75]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP79]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP76:%.*]] = icmp slt i64 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP76]], label [[COND_TRUE77:%.*]], label [[COND_FALSE78:%.*]]
// SIMD-ONLY0:       cond.true77:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END79:%.*]]
// SIMD-ONLY0:       cond.false78:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END79]]
// SIMD-ONLY0:       cond.end79:
// SIMD-ONLY0-NEXT:    [[COND80:%.*]] = phi i64 [ [[TMP82]], [[COND_TRUE77]] ], [ [[TMP83]], [[COND_FALSE78]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND80]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP84]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP81:%.*]] = icmp eq i64 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP81]], label [[COND_TRUE82:%.*]], label [[COND_FALSE83:%.*]]
// SIMD-ONLY0:       cond.true82:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END84:%.*]]
// SIMD-ONLY0:       cond.false83:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END84]]
// SIMD-ONLY0:       cond.end84:
// SIMD-ONLY0-NEXT:    [[COND85:%.*]] = phi i64 [ [[TMP87]], [[COND_TRUE82]] ], [ [[TMP88]], [[COND_FALSE83]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND85]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP89]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP90]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP86:%.*]] = icmp sgt i64 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP86]], label [[COND_TRUE87:%.*]], label [[COND_FALSE88:%.*]]
// SIMD-ONLY0:       cond.true87:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END89:%.*]]
// SIMD-ONLY0:       cond.false88:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END89]]
// SIMD-ONLY0:       cond.end89:
// SIMD-ONLY0-NEXT:    [[COND90:%.*]] = phi i64 [ [[TMP93]], [[COND_TRUE87]] ], [ [[TMP94]], [[COND_FALSE88]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND90]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP95]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP91:%.*]] = icmp slt i64 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP91]], label [[COND_TRUE92:%.*]], label [[COND_FALSE93:%.*]]
// SIMD-ONLY0:       cond.true92:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false93:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi i64 [ [[TMP98]], [[COND_TRUE92]] ], [ [[TMP99]], [[COND_FALSE93]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND95]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP100]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP96:%.*]] = icmp eq i64 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP96]], label [[COND_TRUE97:%.*]], label [[COND_FALSE98:%.*]]
// SIMD-ONLY0:       cond.true97:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END99:%.*]]
// SIMD-ONLY0:       cond.false98:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END99]]
// SIMD-ONLY0:       cond.end99:
// SIMD-ONLY0-NEXT:    [[COND100:%.*]] = phi i64 [ [[TMP103]], [[COND_TRUE97]] ], [ [[TMP104]], [[COND_FALSE98]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND100]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP101:%.*]] = icmp sgt i64 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP101]], label [[COND_TRUE102:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true102:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END104:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END104]]
// SIMD-ONLY0:       cond.end104:
// SIMD-ONLY0-NEXT:    [[COND105:%.*]] = phi i64 [ [[TMP107]], [[COND_TRUE102]] ], [ [[TMP108]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND105]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP109]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP106:%.*]] = icmp slt i64 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP106]], label [[COND_TRUE107:%.*]], label [[COND_FALSE108:%.*]]
// SIMD-ONLY0:       cond.true107:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END109:%.*]]
// SIMD-ONLY0:       cond.false108:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END109]]
// SIMD-ONLY0:       cond.end109:
// SIMD-ONLY0-NEXT:    [[COND110:%.*]] = phi i64 [ [[TMP112]], [[COND_TRUE107]] ], [ [[TMP113]], [[COND_FALSE108]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND110]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP114]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP111:%.*]] = icmp eq i64 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP111]], label [[COND_TRUE112:%.*]], label [[COND_FALSE113:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END114:%.*]]
// SIMD-ONLY0:       cond.false113:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END114]]
// SIMD-ONLY0:       cond.end114:
// SIMD-ONLY0-NEXT:    [[COND115:%.*]] = phi i64 [ [[TMP117]], [[COND_TRUE112]] ], [ [[TMP118]], [[COND_FALSE113]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND115]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP119]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP120]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP116:%.*]] = icmp sgt i64 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP116]], label [[COND_TRUE117:%.*]], label [[COND_FALSE118:%.*]]
// SIMD-ONLY0:       cond.true117:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END119:%.*]]
// SIMD-ONLY0:       cond.false118:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END119]]
// SIMD-ONLY0:       cond.end119:
// SIMD-ONLY0-NEXT:    [[COND120:%.*]] = phi i64 [ [[TMP123]], [[COND_TRUE117]] ], [ [[TMP124]], [[COND_FALSE118]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND120]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP125]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = icmp slt i64 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE122:%.*]], label [[COND_FALSE123:%.*]]
// SIMD-ONLY0:       cond.true122:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END124:%.*]]
// SIMD-ONLY0:       cond.false123:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END124]]
// SIMD-ONLY0:       cond.end124:
// SIMD-ONLY0-NEXT:    [[COND125:%.*]] = phi i64 [ [[TMP128]], [[COND_TRUE122]] ], [ [[TMP129]], [[COND_FALSE123]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND125]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP130]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP126:%.*]] = icmp eq i64 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP126]], label [[COND_TRUE127:%.*]], label [[COND_FALSE128:%.*]]
// SIMD-ONLY0:       cond.true127:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END129:%.*]]
// SIMD-ONLY0:       cond.false128:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END129]]
// SIMD-ONLY0:       cond.end129:
// SIMD-ONLY0-NEXT:    [[COND130:%.*]] = phi i64 [ [[TMP133]], [[COND_TRUE127]] ], [ [[TMP134]], [[COND_FALSE128]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND130]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP131:%.*]] = icmp sgt i64 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP131]], label [[COND_TRUE132:%.*]], label [[COND_FALSE133:%.*]]
// SIMD-ONLY0:       cond.true132:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END134:%.*]]
// SIMD-ONLY0:       cond.false133:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END134]]
// SIMD-ONLY0:       cond.end134:
// SIMD-ONLY0-NEXT:    [[COND135:%.*]] = phi i64 [ [[TMP137]], [[COND_TRUE132]] ], [ [[TMP138]], [[COND_FALSE133]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND135]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP139]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP136:%.*]] = icmp slt i64 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP136]], label [[COND_TRUE137:%.*]], label [[COND_FALSE138:%.*]]
// SIMD-ONLY0:       cond.true137:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END139:%.*]]
// SIMD-ONLY0:       cond.false138:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END139]]
// SIMD-ONLY0:       cond.end139:
// SIMD-ONLY0-NEXT:    [[COND140:%.*]] = phi i64 [ [[TMP142]], [[COND_TRUE137]] ], [ [[TMP143]], [[COND_FALSE138]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND140]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP144]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP141:%.*]] = icmp eq i64 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP141]], label [[COND_TRUE142:%.*]], label [[COND_FALSE143:%.*]]
// SIMD-ONLY0:       cond.true142:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END144:%.*]]
// SIMD-ONLY0:       cond.false143:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END144]]
// SIMD-ONLY0:       cond.end144:
// SIMD-ONLY0-NEXT:    [[COND145:%.*]] = phi i64 [ [[TMP147]], [[COND_TRUE142]] ], [ [[TMP148]], [[COND_FALSE143]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND145]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP149]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP150]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP146:%.*]] = icmp sgt i64 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP146]], label [[COND_TRUE147:%.*]], label [[COND_FALSE148:%.*]]
// SIMD-ONLY0:       cond.true147:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false148:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i64 [ [[TMP153]], [[COND_TRUE147]] ], [ [[TMP154]], [[COND_FALSE148]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND150]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP155]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP151:%.*]] = icmp slt i64 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP151]], label [[COND_TRUE152:%.*]], label [[COND_FALSE153:%.*]]
// SIMD-ONLY0:       cond.true152:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END154:%.*]]
// SIMD-ONLY0:       cond.false153:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END154]]
// SIMD-ONLY0:       cond.end154:
// SIMD-ONLY0-NEXT:    [[COND155:%.*]] = phi i64 [ [[TMP158]], [[COND_TRUE152]] ], [ [[TMP159]], [[COND_FALSE153]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND155]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP160]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP156:%.*]] = icmp eq i64 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP156]], label [[COND_TRUE157:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true157:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END159:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END159]]
// SIMD-ONLY0:       cond.end159:
// SIMD-ONLY0-NEXT:    [[COND160:%.*]] = phi i64 [ [[TMP163]], [[COND_TRUE157]] ], [ [[TMP164]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND160]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP161:%.*]] = icmp sgt i64 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP161]], label [[COND_TRUE162:%.*]], label [[COND_FALSE163:%.*]]
// SIMD-ONLY0:       cond.true162:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END164:%.*]]
// SIMD-ONLY0:       cond.false163:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END164]]
// SIMD-ONLY0:       cond.end164:
// SIMD-ONLY0-NEXT:    [[COND165:%.*]] = phi i64 [ [[TMP167]], [[COND_TRUE162]] ], [ [[TMP168]], [[COND_FALSE163]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND165]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP169]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP166:%.*]] = icmp slt i64 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP166]], label [[COND_TRUE167:%.*]], label [[COND_FALSE168:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END169:%.*]]
// SIMD-ONLY0:       cond.false168:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END169]]
// SIMD-ONLY0:       cond.end169:
// SIMD-ONLY0-NEXT:    [[COND170:%.*]] = phi i64 [ [[TMP172]], [[COND_TRUE167]] ], [ [[TMP173]], [[COND_FALSE168]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND170]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP174]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i64, ptr [[LE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP171:%.*]] = icmp eq i64 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP171]], label [[COND_TRUE172:%.*]], label [[COND_FALSE173:%.*]]
// SIMD-ONLY0:       cond.true172:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i64, ptr [[LD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END174:%.*]]
// SIMD-ONLY0:       cond.false173:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END174]]
// SIMD-ONLY0:       cond.end174:
// SIMD-ONLY0-NEXT:    [[COND175:%.*]] = phi i64 [ [[TMP177]], [[COND_TRUE172]] ], [ [[TMP178]], [[COND_FALSE173]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND175]], ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i64, ptr [[LX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP179]], ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i64, ptr [[LV]], align 8
// SIMD-ONLY0-NEXT:    ret i64 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @ulxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[ULX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP0]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp ugt i64 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP5]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP1:%.*]] = icmp ult i64 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1]], label [[COND_TRUE2:%.*]], label [[COND_FALSE3:%.*]]
// SIMD-ONLY0:       cond.true2:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4:%.*]]
// SIMD-ONLY0:       cond.false3:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4]]
// SIMD-ONLY0:       cond.end4:
// SIMD-ONLY0-NEXT:    [[COND5:%.*]] = phi i64 [ [[TMP8]], [[COND_TRUE2]] ], [ [[TMP9]], [[COND_FALSE3]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND5]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP10]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6:%.*]] = icmp eq i64 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6]], label [[COND_TRUE7:%.*]], label [[COND_FALSE8:%.*]]
// SIMD-ONLY0:       cond.true7:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END9:%.*]]
// SIMD-ONLY0:       cond.false8:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END9]]
// SIMD-ONLY0:       cond.end9:
// SIMD-ONLY0-NEXT:    [[COND10:%.*]] = phi i64 [ [[TMP13]], [[COND_TRUE7]] ], [ [[TMP14]], [[COND_FALSE8]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND10]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = icmp ugt i64 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE12:%.*]], label [[COND_FALSE13:%.*]]
// SIMD-ONLY0:       cond.true12:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END14:%.*]]
// SIMD-ONLY0:       cond.false13:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END14]]
// SIMD-ONLY0:       cond.end14:
// SIMD-ONLY0-NEXT:    [[COND15:%.*]] = phi i64 [ [[TMP17]], [[COND_TRUE12]] ], [ [[TMP18]], [[COND_FALSE13]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND15]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP19]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP16:%.*]] = icmp ult i64 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP16]], label [[COND_TRUE17:%.*]], label [[COND_FALSE18:%.*]]
// SIMD-ONLY0:       cond.true17:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END19:%.*]]
// SIMD-ONLY0:       cond.false18:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END19]]
// SIMD-ONLY0:       cond.end19:
// SIMD-ONLY0-NEXT:    [[COND20:%.*]] = phi i64 [ [[TMP22]], [[COND_TRUE17]] ], [ [[TMP23]], [[COND_FALSE18]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND20]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP24]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP21:%.*]] = icmp eq i64 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP21]], label [[COND_TRUE22:%.*]], label [[COND_FALSE23:%.*]]
// SIMD-ONLY0:       cond.true22:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END24:%.*]]
// SIMD-ONLY0:       cond.false23:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END24]]
// SIMD-ONLY0:       cond.end24:
// SIMD-ONLY0-NEXT:    [[COND25:%.*]] = phi i64 [ [[TMP27]], [[COND_TRUE22]] ], [ [[TMP28]], [[COND_FALSE23]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND25]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP29]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP30]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP26:%.*]] = icmp ugt i64 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP26]], label [[COND_TRUE27:%.*]], label [[COND_FALSE28:%.*]]
// SIMD-ONLY0:       cond.true27:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END29:%.*]]
// SIMD-ONLY0:       cond.false28:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END29]]
// SIMD-ONLY0:       cond.end29:
// SIMD-ONLY0-NEXT:    [[COND30:%.*]] = phi i64 [ [[TMP33]], [[COND_TRUE27]] ], [ [[TMP34]], [[COND_FALSE28]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND30]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP35]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP31:%.*]] = icmp ult i64 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP31]], label [[COND_TRUE32:%.*]], label [[COND_FALSE33:%.*]]
// SIMD-ONLY0:       cond.true32:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END34:%.*]]
// SIMD-ONLY0:       cond.false33:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END34]]
// SIMD-ONLY0:       cond.end34:
// SIMD-ONLY0-NEXT:    [[COND35:%.*]] = phi i64 [ [[TMP38]], [[COND_TRUE32]] ], [ [[TMP39]], [[COND_FALSE33]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND35]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP40]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP36:%.*]] = icmp eq i64 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP36]], label [[COND_TRUE37:%.*]], label [[COND_FALSE38:%.*]]
// SIMD-ONLY0:       cond.true37:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false38:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi i64 [ [[TMP43]], [[COND_TRUE37]] ], [ [[TMP44]], [[COND_FALSE38]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND40]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = icmp ugt i64 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[COND_TRUE42:%.*]], label [[COND_FALSE43:%.*]]
// SIMD-ONLY0:       cond.true42:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END44:%.*]]
// SIMD-ONLY0:       cond.false43:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END44]]
// SIMD-ONLY0:       cond.end44:
// SIMD-ONLY0-NEXT:    [[COND45:%.*]] = phi i64 [ [[TMP47]], [[COND_TRUE42]] ], [ [[TMP48]], [[COND_FALSE43]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND45]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP49]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP46:%.*]] = icmp ult i64 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP46]], label [[COND_TRUE47:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true47:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END49:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END49]]
// SIMD-ONLY0:       cond.end49:
// SIMD-ONLY0-NEXT:    [[COND50:%.*]] = phi i64 [ [[TMP52]], [[COND_TRUE47]] ], [ [[TMP53]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND50]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP54]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP51:%.*]] = icmp eq i64 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP51]], label [[COND_TRUE52:%.*]], label [[COND_FALSE53:%.*]]
// SIMD-ONLY0:       cond.true52:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END54:%.*]]
// SIMD-ONLY0:       cond.false53:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END54]]
// SIMD-ONLY0:       cond.end54:
// SIMD-ONLY0-NEXT:    [[COND55:%.*]] = phi i64 [ [[TMP57]], [[COND_TRUE52]] ], [ [[TMP58]], [[COND_FALSE53]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND55]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP59]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP60]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP56:%.*]] = icmp ugt i64 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP56]], label [[COND_TRUE57:%.*]], label [[COND_FALSE58:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END59:%.*]]
// SIMD-ONLY0:       cond.false58:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END59]]
// SIMD-ONLY0:       cond.end59:
// SIMD-ONLY0-NEXT:    [[COND60:%.*]] = phi i64 [ [[TMP63]], [[COND_TRUE57]] ], [ [[TMP64]], [[COND_FALSE58]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND60]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP65]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP61:%.*]] = icmp ult i64 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP61]], label [[COND_TRUE62:%.*]], label [[COND_FALSE63:%.*]]
// SIMD-ONLY0:       cond.true62:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64:%.*]]
// SIMD-ONLY0:       cond.false63:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64]]
// SIMD-ONLY0:       cond.end64:
// SIMD-ONLY0-NEXT:    [[COND65:%.*]] = phi i64 [ [[TMP68]], [[COND_TRUE62]] ], [ [[TMP69]], [[COND_FALSE63]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND65]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP70]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = icmp eq i64 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE67:%.*]], label [[COND_FALSE68:%.*]]
// SIMD-ONLY0:       cond.true67:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END69:%.*]]
// SIMD-ONLY0:       cond.false68:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END69]]
// SIMD-ONLY0:       cond.end69:
// SIMD-ONLY0-NEXT:    [[COND70:%.*]] = phi i64 [ [[TMP73]], [[COND_TRUE67]] ], [ [[TMP74]], [[COND_FALSE68]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND70]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP71:%.*]] = icmp ugt i64 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP71]], label [[COND_TRUE72:%.*]], label [[COND_FALSE73:%.*]]
// SIMD-ONLY0:       cond.true72:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END74:%.*]]
// SIMD-ONLY0:       cond.false73:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END74]]
// SIMD-ONLY0:       cond.end74:
// SIMD-ONLY0-NEXT:    [[COND75:%.*]] = phi i64 [ [[TMP77]], [[COND_TRUE72]] ], [ [[TMP78]], [[COND_FALSE73]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND75]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP79]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP76:%.*]] = icmp ult i64 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP76]], label [[COND_TRUE77:%.*]], label [[COND_FALSE78:%.*]]
// SIMD-ONLY0:       cond.true77:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END79:%.*]]
// SIMD-ONLY0:       cond.false78:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END79]]
// SIMD-ONLY0:       cond.end79:
// SIMD-ONLY0-NEXT:    [[COND80:%.*]] = phi i64 [ [[TMP82]], [[COND_TRUE77]] ], [ [[TMP83]], [[COND_FALSE78]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND80]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP84]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP81:%.*]] = icmp eq i64 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP81]], label [[COND_TRUE82:%.*]], label [[COND_FALSE83:%.*]]
// SIMD-ONLY0:       cond.true82:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END84:%.*]]
// SIMD-ONLY0:       cond.false83:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END84]]
// SIMD-ONLY0:       cond.end84:
// SIMD-ONLY0-NEXT:    [[COND85:%.*]] = phi i64 [ [[TMP87]], [[COND_TRUE82]] ], [ [[TMP88]], [[COND_FALSE83]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND85]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP89]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP90]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP86:%.*]] = icmp ugt i64 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP86]], label [[COND_TRUE87:%.*]], label [[COND_FALSE88:%.*]]
// SIMD-ONLY0:       cond.true87:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END89:%.*]]
// SIMD-ONLY0:       cond.false88:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END89]]
// SIMD-ONLY0:       cond.end89:
// SIMD-ONLY0-NEXT:    [[COND90:%.*]] = phi i64 [ [[TMP93]], [[COND_TRUE87]] ], [ [[TMP94]], [[COND_FALSE88]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND90]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP95]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP91:%.*]] = icmp ult i64 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP91]], label [[COND_TRUE92:%.*]], label [[COND_FALSE93:%.*]]
// SIMD-ONLY0:       cond.true92:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false93:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi i64 [ [[TMP98]], [[COND_TRUE92]] ], [ [[TMP99]], [[COND_FALSE93]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND95]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP100]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP96:%.*]] = icmp eq i64 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP96]], label [[COND_TRUE97:%.*]], label [[COND_FALSE98:%.*]]
// SIMD-ONLY0:       cond.true97:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END99:%.*]]
// SIMD-ONLY0:       cond.false98:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END99]]
// SIMD-ONLY0:       cond.end99:
// SIMD-ONLY0-NEXT:    [[COND100:%.*]] = phi i64 [ [[TMP103]], [[COND_TRUE97]] ], [ [[TMP104]], [[COND_FALSE98]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND100]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP101:%.*]] = icmp ugt i64 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP101]], label [[COND_TRUE102:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true102:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END104:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END104]]
// SIMD-ONLY0:       cond.end104:
// SIMD-ONLY0-NEXT:    [[COND105:%.*]] = phi i64 [ [[TMP107]], [[COND_TRUE102]] ], [ [[TMP108]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND105]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP109]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP106:%.*]] = icmp ult i64 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP106]], label [[COND_TRUE107:%.*]], label [[COND_FALSE108:%.*]]
// SIMD-ONLY0:       cond.true107:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END109:%.*]]
// SIMD-ONLY0:       cond.false108:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END109]]
// SIMD-ONLY0:       cond.end109:
// SIMD-ONLY0-NEXT:    [[COND110:%.*]] = phi i64 [ [[TMP112]], [[COND_TRUE107]] ], [ [[TMP113]], [[COND_FALSE108]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND110]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP114]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP111:%.*]] = icmp eq i64 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP111]], label [[COND_TRUE112:%.*]], label [[COND_FALSE113:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END114:%.*]]
// SIMD-ONLY0:       cond.false113:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END114]]
// SIMD-ONLY0:       cond.end114:
// SIMD-ONLY0-NEXT:    [[COND115:%.*]] = phi i64 [ [[TMP117]], [[COND_TRUE112]] ], [ [[TMP118]], [[COND_FALSE113]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND115]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP119]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP120]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP116:%.*]] = icmp ugt i64 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP116]], label [[COND_TRUE117:%.*]], label [[COND_FALSE118:%.*]]
// SIMD-ONLY0:       cond.true117:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END119:%.*]]
// SIMD-ONLY0:       cond.false118:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END119]]
// SIMD-ONLY0:       cond.end119:
// SIMD-ONLY0-NEXT:    [[COND120:%.*]] = phi i64 [ [[TMP123]], [[COND_TRUE117]] ], [ [[TMP124]], [[COND_FALSE118]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND120]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP125]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = icmp ult i64 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE122:%.*]], label [[COND_FALSE123:%.*]]
// SIMD-ONLY0:       cond.true122:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END124:%.*]]
// SIMD-ONLY0:       cond.false123:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END124]]
// SIMD-ONLY0:       cond.end124:
// SIMD-ONLY0-NEXT:    [[COND125:%.*]] = phi i64 [ [[TMP128]], [[COND_TRUE122]] ], [ [[TMP129]], [[COND_FALSE123]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND125]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP130]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP126:%.*]] = icmp eq i64 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP126]], label [[COND_TRUE127:%.*]], label [[COND_FALSE128:%.*]]
// SIMD-ONLY0:       cond.true127:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END129:%.*]]
// SIMD-ONLY0:       cond.false128:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END129]]
// SIMD-ONLY0:       cond.end129:
// SIMD-ONLY0-NEXT:    [[COND130:%.*]] = phi i64 [ [[TMP133]], [[COND_TRUE127]] ], [ [[TMP134]], [[COND_FALSE128]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND130]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP131:%.*]] = icmp ugt i64 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP131]], label [[COND_TRUE132:%.*]], label [[COND_FALSE133:%.*]]
// SIMD-ONLY0:       cond.true132:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END134:%.*]]
// SIMD-ONLY0:       cond.false133:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END134]]
// SIMD-ONLY0:       cond.end134:
// SIMD-ONLY0-NEXT:    [[COND135:%.*]] = phi i64 [ [[TMP137]], [[COND_TRUE132]] ], [ [[TMP138]], [[COND_FALSE133]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND135]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP139]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP136:%.*]] = icmp ult i64 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP136]], label [[COND_TRUE137:%.*]], label [[COND_FALSE138:%.*]]
// SIMD-ONLY0:       cond.true137:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END139:%.*]]
// SIMD-ONLY0:       cond.false138:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END139]]
// SIMD-ONLY0:       cond.end139:
// SIMD-ONLY0-NEXT:    [[COND140:%.*]] = phi i64 [ [[TMP142]], [[COND_TRUE137]] ], [ [[TMP143]], [[COND_FALSE138]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND140]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP144]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP141:%.*]] = icmp eq i64 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP141]], label [[COND_TRUE142:%.*]], label [[COND_FALSE143:%.*]]
// SIMD-ONLY0:       cond.true142:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END144:%.*]]
// SIMD-ONLY0:       cond.false143:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END144]]
// SIMD-ONLY0:       cond.end144:
// SIMD-ONLY0-NEXT:    [[COND145:%.*]] = phi i64 [ [[TMP147]], [[COND_TRUE142]] ], [ [[TMP148]], [[COND_FALSE143]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND145]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP149]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP150]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP146:%.*]] = icmp ugt i64 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP146]], label [[COND_TRUE147:%.*]], label [[COND_FALSE148:%.*]]
// SIMD-ONLY0:       cond.true147:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false148:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i64 [ [[TMP153]], [[COND_TRUE147]] ], [ [[TMP154]], [[COND_FALSE148]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND150]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP155]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP151:%.*]] = icmp ult i64 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP151]], label [[COND_TRUE152:%.*]], label [[COND_FALSE153:%.*]]
// SIMD-ONLY0:       cond.true152:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END154:%.*]]
// SIMD-ONLY0:       cond.false153:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END154]]
// SIMD-ONLY0:       cond.end154:
// SIMD-ONLY0-NEXT:    [[COND155:%.*]] = phi i64 [ [[TMP158]], [[COND_TRUE152]] ], [ [[TMP159]], [[COND_FALSE153]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND155]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP160]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP156:%.*]] = icmp eq i64 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP156]], label [[COND_TRUE157:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true157:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END159:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END159]]
// SIMD-ONLY0:       cond.end159:
// SIMD-ONLY0-NEXT:    [[COND160:%.*]] = phi i64 [ [[TMP163]], [[COND_TRUE157]] ], [ [[TMP164]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND160]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP161:%.*]] = icmp ugt i64 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP161]], label [[COND_TRUE162:%.*]], label [[COND_FALSE163:%.*]]
// SIMD-ONLY0:       cond.true162:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END164:%.*]]
// SIMD-ONLY0:       cond.false163:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END164]]
// SIMD-ONLY0:       cond.end164:
// SIMD-ONLY0-NEXT:    [[COND165:%.*]] = phi i64 [ [[TMP167]], [[COND_TRUE162]] ], [ [[TMP168]], [[COND_FALSE163]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND165]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP169]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP166:%.*]] = icmp ult i64 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP166]], label [[COND_TRUE167:%.*]], label [[COND_FALSE168:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END169:%.*]]
// SIMD-ONLY0:       cond.false168:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END169]]
// SIMD-ONLY0:       cond.end169:
// SIMD-ONLY0-NEXT:    [[COND170:%.*]] = phi i64 [ [[TMP172]], [[COND_TRUE167]] ], [ [[TMP173]], [[COND_FALSE168]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND170]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP174]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i64, ptr [[ULE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP171:%.*]] = icmp eq i64 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP171]], label [[COND_TRUE172:%.*]], label [[COND_FALSE173:%.*]]
// SIMD-ONLY0:       cond.true172:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i64, ptr [[ULD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END174:%.*]]
// SIMD-ONLY0:       cond.false173:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END174]]
// SIMD-ONLY0:       cond.end174:
// SIMD-ONLY0-NEXT:    [[COND175:%.*]] = phi i64 [ [[TMP177]], [[COND_TRUE172]] ], [ [[TMP178]], [[COND_FALSE173]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND175]], ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i64, ptr [[ULX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP179]], ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i64, ptr [[ULV]], align 8
// SIMD-ONLY0-NEXT:    ret i64 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @llxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[LLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[LLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP0]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP5]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1]], label [[COND_TRUE2:%.*]], label [[COND_FALSE3:%.*]]
// SIMD-ONLY0:       cond.true2:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4:%.*]]
// SIMD-ONLY0:       cond.false3:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4]]
// SIMD-ONLY0:       cond.end4:
// SIMD-ONLY0-NEXT:    [[COND5:%.*]] = phi i64 [ [[TMP8]], [[COND_TRUE2]] ], [ [[TMP9]], [[COND_FALSE3]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND5]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP10]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6:%.*]] = icmp eq i64 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6]], label [[COND_TRUE7:%.*]], label [[COND_FALSE8:%.*]]
// SIMD-ONLY0:       cond.true7:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END9:%.*]]
// SIMD-ONLY0:       cond.false8:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END9]]
// SIMD-ONLY0:       cond.end9:
// SIMD-ONLY0-NEXT:    [[COND10:%.*]] = phi i64 [ [[TMP13]], [[COND_TRUE7]] ], [ [[TMP14]], [[COND_FALSE8]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND10]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = icmp sgt i64 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE12:%.*]], label [[COND_FALSE13:%.*]]
// SIMD-ONLY0:       cond.true12:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END14:%.*]]
// SIMD-ONLY0:       cond.false13:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END14]]
// SIMD-ONLY0:       cond.end14:
// SIMD-ONLY0-NEXT:    [[COND15:%.*]] = phi i64 [ [[TMP17]], [[COND_TRUE12]] ], [ [[TMP18]], [[COND_FALSE13]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND15]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP19]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP16:%.*]] = icmp slt i64 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP16]], label [[COND_TRUE17:%.*]], label [[COND_FALSE18:%.*]]
// SIMD-ONLY0:       cond.true17:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END19:%.*]]
// SIMD-ONLY0:       cond.false18:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END19]]
// SIMD-ONLY0:       cond.end19:
// SIMD-ONLY0-NEXT:    [[COND20:%.*]] = phi i64 [ [[TMP22]], [[COND_TRUE17]] ], [ [[TMP23]], [[COND_FALSE18]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND20]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP24]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP21:%.*]] = icmp eq i64 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP21]], label [[COND_TRUE22:%.*]], label [[COND_FALSE23:%.*]]
// SIMD-ONLY0:       cond.true22:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END24:%.*]]
// SIMD-ONLY0:       cond.false23:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END24]]
// SIMD-ONLY0:       cond.end24:
// SIMD-ONLY0-NEXT:    [[COND25:%.*]] = phi i64 [ [[TMP27]], [[COND_TRUE22]] ], [ [[TMP28]], [[COND_FALSE23]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND25]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP29]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP30]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP26:%.*]] = icmp sgt i64 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP26]], label [[COND_TRUE27:%.*]], label [[COND_FALSE28:%.*]]
// SIMD-ONLY0:       cond.true27:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END29:%.*]]
// SIMD-ONLY0:       cond.false28:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END29]]
// SIMD-ONLY0:       cond.end29:
// SIMD-ONLY0-NEXT:    [[COND30:%.*]] = phi i64 [ [[TMP33]], [[COND_TRUE27]] ], [ [[TMP34]], [[COND_FALSE28]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND30]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP35]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP31:%.*]] = icmp slt i64 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP31]], label [[COND_TRUE32:%.*]], label [[COND_FALSE33:%.*]]
// SIMD-ONLY0:       cond.true32:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END34:%.*]]
// SIMD-ONLY0:       cond.false33:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END34]]
// SIMD-ONLY0:       cond.end34:
// SIMD-ONLY0-NEXT:    [[COND35:%.*]] = phi i64 [ [[TMP38]], [[COND_TRUE32]] ], [ [[TMP39]], [[COND_FALSE33]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND35]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP40]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP36:%.*]] = icmp eq i64 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP36]], label [[COND_TRUE37:%.*]], label [[COND_FALSE38:%.*]]
// SIMD-ONLY0:       cond.true37:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false38:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi i64 [ [[TMP43]], [[COND_TRUE37]] ], [ [[TMP44]], [[COND_FALSE38]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND40]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = icmp sgt i64 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[COND_TRUE42:%.*]], label [[COND_FALSE43:%.*]]
// SIMD-ONLY0:       cond.true42:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END44:%.*]]
// SIMD-ONLY0:       cond.false43:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END44]]
// SIMD-ONLY0:       cond.end44:
// SIMD-ONLY0-NEXT:    [[COND45:%.*]] = phi i64 [ [[TMP47]], [[COND_TRUE42]] ], [ [[TMP48]], [[COND_FALSE43]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND45]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP49]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP46:%.*]] = icmp slt i64 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP46]], label [[COND_TRUE47:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true47:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END49:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END49]]
// SIMD-ONLY0:       cond.end49:
// SIMD-ONLY0-NEXT:    [[COND50:%.*]] = phi i64 [ [[TMP52]], [[COND_TRUE47]] ], [ [[TMP53]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND50]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP54]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP51:%.*]] = icmp eq i64 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP51]], label [[COND_TRUE52:%.*]], label [[COND_FALSE53:%.*]]
// SIMD-ONLY0:       cond.true52:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END54:%.*]]
// SIMD-ONLY0:       cond.false53:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END54]]
// SIMD-ONLY0:       cond.end54:
// SIMD-ONLY0-NEXT:    [[COND55:%.*]] = phi i64 [ [[TMP57]], [[COND_TRUE52]] ], [ [[TMP58]], [[COND_FALSE53]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND55]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP59]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP60]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP56:%.*]] = icmp sgt i64 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP56]], label [[COND_TRUE57:%.*]], label [[COND_FALSE58:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END59:%.*]]
// SIMD-ONLY0:       cond.false58:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END59]]
// SIMD-ONLY0:       cond.end59:
// SIMD-ONLY0-NEXT:    [[COND60:%.*]] = phi i64 [ [[TMP63]], [[COND_TRUE57]] ], [ [[TMP64]], [[COND_FALSE58]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND60]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP65]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP61:%.*]] = icmp slt i64 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP61]], label [[COND_TRUE62:%.*]], label [[COND_FALSE63:%.*]]
// SIMD-ONLY0:       cond.true62:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64:%.*]]
// SIMD-ONLY0:       cond.false63:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64]]
// SIMD-ONLY0:       cond.end64:
// SIMD-ONLY0-NEXT:    [[COND65:%.*]] = phi i64 [ [[TMP68]], [[COND_TRUE62]] ], [ [[TMP69]], [[COND_FALSE63]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND65]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP70]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = icmp eq i64 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE67:%.*]], label [[COND_FALSE68:%.*]]
// SIMD-ONLY0:       cond.true67:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END69:%.*]]
// SIMD-ONLY0:       cond.false68:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END69]]
// SIMD-ONLY0:       cond.end69:
// SIMD-ONLY0-NEXT:    [[COND70:%.*]] = phi i64 [ [[TMP73]], [[COND_TRUE67]] ], [ [[TMP74]], [[COND_FALSE68]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND70]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP71:%.*]] = icmp sgt i64 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP71]], label [[COND_TRUE72:%.*]], label [[COND_FALSE73:%.*]]
// SIMD-ONLY0:       cond.true72:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END74:%.*]]
// SIMD-ONLY0:       cond.false73:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END74]]
// SIMD-ONLY0:       cond.end74:
// SIMD-ONLY0-NEXT:    [[COND75:%.*]] = phi i64 [ [[TMP77]], [[COND_TRUE72]] ], [ [[TMP78]], [[COND_FALSE73]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND75]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP79]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP76:%.*]] = icmp slt i64 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP76]], label [[COND_TRUE77:%.*]], label [[COND_FALSE78:%.*]]
// SIMD-ONLY0:       cond.true77:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END79:%.*]]
// SIMD-ONLY0:       cond.false78:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END79]]
// SIMD-ONLY0:       cond.end79:
// SIMD-ONLY0-NEXT:    [[COND80:%.*]] = phi i64 [ [[TMP82]], [[COND_TRUE77]] ], [ [[TMP83]], [[COND_FALSE78]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND80]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP84]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP81:%.*]] = icmp eq i64 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP81]], label [[COND_TRUE82:%.*]], label [[COND_FALSE83:%.*]]
// SIMD-ONLY0:       cond.true82:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END84:%.*]]
// SIMD-ONLY0:       cond.false83:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END84]]
// SIMD-ONLY0:       cond.end84:
// SIMD-ONLY0-NEXT:    [[COND85:%.*]] = phi i64 [ [[TMP87]], [[COND_TRUE82]] ], [ [[TMP88]], [[COND_FALSE83]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND85]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP89]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP90]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP86:%.*]] = icmp sgt i64 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP86]], label [[COND_TRUE87:%.*]], label [[COND_FALSE88:%.*]]
// SIMD-ONLY0:       cond.true87:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END89:%.*]]
// SIMD-ONLY0:       cond.false88:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END89]]
// SIMD-ONLY0:       cond.end89:
// SIMD-ONLY0-NEXT:    [[COND90:%.*]] = phi i64 [ [[TMP93]], [[COND_TRUE87]] ], [ [[TMP94]], [[COND_FALSE88]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND90]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP95]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP91:%.*]] = icmp slt i64 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP91]], label [[COND_TRUE92:%.*]], label [[COND_FALSE93:%.*]]
// SIMD-ONLY0:       cond.true92:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false93:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi i64 [ [[TMP98]], [[COND_TRUE92]] ], [ [[TMP99]], [[COND_FALSE93]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND95]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP100]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP96:%.*]] = icmp eq i64 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP96]], label [[COND_TRUE97:%.*]], label [[COND_FALSE98:%.*]]
// SIMD-ONLY0:       cond.true97:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END99:%.*]]
// SIMD-ONLY0:       cond.false98:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END99]]
// SIMD-ONLY0:       cond.end99:
// SIMD-ONLY0-NEXT:    [[COND100:%.*]] = phi i64 [ [[TMP103]], [[COND_TRUE97]] ], [ [[TMP104]], [[COND_FALSE98]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND100]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP101:%.*]] = icmp sgt i64 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP101]], label [[COND_TRUE102:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true102:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END104:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END104]]
// SIMD-ONLY0:       cond.end104:
// SIMD-ONLY0-NEXT:    [[COND105:%.*]] = phi i64 [ [[TMP107]], [[COND_TRUE102]] ], [ [[TMP108]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND105]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP109]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP106:%.*]] = icmp slt i64 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP106]], label [[COND_TRUE107:%.*]], label [[COND_FALSE108:%.*]]
// SIMD-ONLY0:       cond.true107:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END109:%.*]]
// SIMD-ONLY0:       cond.false108:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END109]]
// SIMD-ONLY0:       cond.end109:
// SIMD-ONLY0-NEXT:    [[COND110:%.*]] = phi i64 [ [[TMP112]], [[COND_TRUE107]] ], [ [[TMP113]], [[COND_FALSE108]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND110]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP114]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP111:%.*]] = icmp eq i64 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP111]], label [[COND_TRUE112:%.*]], label [[COND_FALSE113:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END114:%.*]]
// SIMD-ONLY0:       cond.false113:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END114]]
// SIMD-ONLY0:       cond.end114:
// SIMD-ONLY0-NEXT:    [[COND115:%.*]] = phi i64 [ [[TMP117]], [[COND_TRUE112]] ], [ [[TMP118]], [[COND_FALSE113]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND115]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP119]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP120]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP116:%.*]] = icmp sgt i64 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP116]], label [[COND_TRUE117:%.*]], label [[COND_FALSE118:%.*]]
// SIMD-ONLY0:       cond.true117:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END119:%.*]]
// SIMD-ONLY0:       cond.false118:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END119]]
// SIMD-ONLY0:       cond.end119:
// SIMD-ONLY0-NEXT:    [[COND120:%.*]] = phi i64 [ [[TMP123]], [[COND_TRUE117]] ], [ [[TMP124]], [[COND_FALSE118]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND120]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP125]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = icmp slt i64 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE122:%.*]], label [[COND_FALSE123:%.*]]
// SIMD-ONLY0:       cond.true122:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END124:%.*]]
// SIMD-ONLY0:       cond.false123:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END124]]
// SIMD-ONLY0:       cond.end124:
// SIMD-ONLY0-NEXT:    [[COND125:%.*]] = phi i64 [ [[TMP128]], [[COND_TRUE122]] ], [ [[TMP129]], [[COND_FALSE123]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND125]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP130]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP126:%.*]] = icmp eq i64 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP126]], label [[COND_TRUE127:%.*]], label [[COND_FALSE128:%.*]]
// SIMD-ONLY0:       cond.true127:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END129:%.*]]
// SIMD-ONLY0:       cond.false128:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END129]]
// SIMD-ONLY0:       cond.end129:
// SIMD-ONLY0-NEXT:    [[COND130:%.*]] = phi i64 [ [[TMP133]], [[COND_TRUE127]] ], [ [[TMP134]], [[COND_FALSE128]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND130]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP131:%.*]] = icmp sgt i64 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP131]], label [[COND_TRUE132:%.*]], label [[COND_FALSE133:%.*]]
// SIMD-ONLY0:       cond.true132:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END134:%.*]]
// SIMD-ONLY0:       cond.false133:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END134]]
// SIMD-ONLY0:       cond.end134:
// SIMD-ONLY0-NEXT:    [[COND135:%.*]] = phi i64 [ [[TMP137]], [[COND_TRUE132]] ], [ [[TMP138]], [[COND_FALSE133]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND135]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP139]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP136:%.*]] = icmp slt i64 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP136]], label [[COND_TRUE137:%.*]], label [[COND_FALSE138:%.*]]
// SIMD-ONLY0:       cond.true137:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END139:%.*]]
// SIMD-ONLY0:       cond.false138:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END139]]
// SIMD-ONLY0:       cond.end139:
// SIMD-ONLY0-NEXT:    [[COND140:%.*]] = phi i64 [ [[TMP142]], [[COND_TRUE137]] ], [ [[TMP143]], [[COND_FALSE138]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND140]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP144]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP141:%.*]] = icmp eq i64 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP141]], label [[COND_TRUE142:%.*]], label [[COND_FALSE143:%.*]]
// SIMD-ONLY0:       cond.true142:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END144:%.*]]
// SIMD-ONLY0:       cond.false143:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END144]]
// SIMD-ONLY0:       cond.end144:
// SIMD-ONLY0-NEXT:    [[COND145:%.*]] = phi i64 [ [[TMP147]], [[COND_TRUE142]] ], [ [[TMP148]], [[COND_FALSE143]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND145]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP149]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP150]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP146:%.*]] = icmp sgt i64 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP146]], label [[COND_TRUE147:%.*]], label [[COND_FALSE148:%.*]]
// SIMD-ONLY0:       cond.true147:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false148:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i64 [ [[TMP153]], [[COND_TRUE147]] ], [ [[TMP154]], [[COND_FALSE148]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND150]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP155]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP151:%.*]] = icmp slt i64 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP151]], label [[COND_TRUE152:%.*]], label [[COND_FALSE153:%.*]]
// SIMD-ONLY0:       cond.true152:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END154:%.*]]
// SIMD-ONLY0:       cond.false153:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END154]]
// SIMD-ONLY0:       cond.end154:
// SIMD-ONLY0-NEXT:    [[COND155:%.*]] = phi i64 [ [[TMP158]], [[COND_TRUE152]] ], [ [[TMP159]], [[COND_FALSE153]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND155]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP160]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP156:%.*]] = icmp eq i64 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP156]], label [[COND_TRUE157:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true157:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END159:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END159]]
// SIMD-ONLY0:       cond.end159:
// SIMD-ONLY0-NEXT:    [[COND160:%.*]] = phi i64 [ [[TMP163]], [[COND_TRUE157]] ], [ [[TMP164]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND160]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP161:%.*]] = icmp sgt i64 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP161]], label [[COND_TRUE162:%.*]], label [[COND_FALSE163:%.*]]
// SIMD-ONLY0:       cond.true162:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END164:%.*]]
// SIMD-ONLY0:       cond.false163:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END164]]
// SIMD-ONLY0:       cond.end164:
// SIMD-ONLY0-NEXT:    [[COND165:%.*]] = phi i64 [ [[TMP167]], [[COND_TRUE162]] ], [ [[TMP168]], [[COND_FALSE163]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND165]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP169]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP166:%.*]] = icmp slt i64 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP166]], label [[COND_TRUE167:%.*]], label [[COND_FALSE168:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END169:%.*]]
// SIMD-ONLY0:       cond.false168:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END169]]
// SIMD-ONLY0:       cond.end169:
// SIMD-ONLY0-NEXT:    [[COND170:%.*]] = phi i64 [ [[TMP172]], [[COND_TRUE167]] ], [ [[TMP173]], [[COND_FALSE168]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND170]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP174]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i64, ptr [[LLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP171:%.*]] = icmp eq i64 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP171]], label [[COND_TRUE172:%.*]], label [[COND_FALSE173:%.*]]
// SIMD-ONLY0:       cond.true172:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i64, ptr [[LLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END174:%.*]]
// SIMD-ONLY0:       cond.false173:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END174]]
// SIMD-ONLY0:       cond.end174:
// SIMD-ONLY0-NEXT:    [[COND175:%.*]] = phi i64 [ [[TMP177]], [[COND_TRUE172]] ], [ [[TMP178]], [[COND_FALSE173]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND175]], ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i64, ptr [[LLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP179]], ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i64, ptr [[LLV]], align 8
// SIMD-ONLY0-NEXT:    ret i64 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @ullxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[ULLX:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLV:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLE:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[ULLD:%.*]] = alloca i64, align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP0]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = icmp ugt i64 [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi i64 [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP5]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP1:%.*]] = icmp ult i64 [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1]], label [[COND_TRUE2:%.*]], label [[COND_FALSE3:%.*]]
// SIMD-ONLY0:       cond.true2:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4:%.*]]
// SIMD-ONLY0:       cond.false3:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4]]
// SIMD-ONLY0:       cond.end4:
// SIMD-ONLY0-NEXT:    [[COND5:%.*]] = phi i64 [ [[TMP8]], [[COND_TRUE2]] ], [ [[TMP9]], [[COND_FALSE3]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND5]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP10]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6:%.*]] = icmp eq i64 [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6]], label [[COND_TRUE7:%.*]], label [[COND_FALSE8:%.*]]
// SIMD-ONLY0:       cond.true7:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END9:%.*]]
// SIMD-ONLY0:       cond.false8:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END9]]
// SIMD-ONLY0:       cond.end9:
// SIMD-ONLY0-NEXT:    [[COND10:%.*]] = phi i64 [ [[TMP13]], [[COND_TRUE7]] ], [ [[TMP14]], [[COND_FALSE8]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND10]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = icmp ugt i64 [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE12:%.*]], label [[COND_FALSE13:%.*]]
// SIMD-ONLY0:       cond.true12:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END14:%.*]]
// SIMD-ONLY0:       cond.false13:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END14]]
// SIMD-ONLY0:       cond.end14:
// SIMD-ONLY0-NEXT:    [[COND15:%.*]] = phi i64 [ [[TMP17]], [[COND_TRUE12]] ], [ [[TMP18]], [[COND_FALSE13]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND15]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP19]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP16:%.*]] = icmp ult i64 [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP16]], label [[COND_TRUE17:%.*]], label [[COND_FALSE18:%.*]]
// SIMD-ONLY0:       cond.true17:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END19:%.*]]
// SIMD-ONLY0:       cond.false18:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END19]]
// SIMD-ONLY0:       cond.end19:
// SIMD-ONLY0-NEXT:    [[COND20:%.*]] = phi i64 [ [[TMP22]], [[COND_TRUE17]] ], [ [[TMP23]], [[COND_FALSE18]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND20]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP24]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP21:%.*]] = icmp eq i64 [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP21]], label [[COND_TRUE22:%.*]], label [[COND_FALSE23:%.*]]
// SIMD-ONLY0:       cond.true22:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END24:%.*]]
// SIMD-ONLY0:       cond.false23:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END24]]
// SIMD-ONLY0:       cond.end24:
// SIMD-ONLY0-NEXT:    [[COND25:%.*]] = phi i64 [ [[TMP27]], [[COND_TRUE22]] ], [ [[TMP28]], [[COND_FALSE23]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND25]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP29]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP30]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP26:%.*]] = icmp ugt i64 [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP26]], label [[COND_TRUE27:%.*]], label [[COND_FALSE28:%.*]]
// SIMD-ONLY0:       cond.true27:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END29:%.*]]
// SIMD-ONLY0:       cond.false28:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END29]]
// SIMD-ONLY0:       cond.end29:
// SIMD-ONLY0-NEXT:    [[COND30:%.*]] = phi i64 [ [[TMP33]], [[COND_TRUE27]] ], [ [[TMP34]], [[COND_FALSE28]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND30]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP35]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP31:%.*]] = icmp ult i64 [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP31]], label [[COND_TRUE32:%.*]], label [[COND_FALSE33:%.*]]
// SIMD-ONLY0:       cond.true32:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END34:%.*]]
// SIMD-ONLY0:       cond.false33:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END34]]
// SIMD-ONLY0:       cond.end34:
// SIMD-ONLY0-NEXT:    [[COND35:%.*]] = phi i64 [ [[TMP38]], [[COND_TRUE32]] ], [ [[TMP39]], [[COND_FALSE33]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND35]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP40]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP36:%.*]] = icmp eq i64 [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP36]], label [[COND_TRUE37:%.*]], label [[COND_FALSE38:%.*]]
// SIMD-ONLY0:       cond.true37:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false38:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi i64 [ [[TMP43]], [[COND_TRUE37]] ], [ [[TMP44]], [[COND_FALSE38]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND40]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = icmp ugt i64 [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[COND_TRUE42:%.*]], label [[COND_FALSE43:%.*]]
// SIMD-ONLY0:       cond.true42:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END44:%.*]]
// SIMD-ONLY0:       cond.false43:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END44]]
// SIMD-ONLY0:       cond.end44:
// SIMD-ONLY0-NEXT:    [[COND45:%.*]] = phi i64 [ [[TMP47]], [[COND_TRUE42]] ], [ [[TMP48]], [[COND_FALSE43]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND45]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP49]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP46:%.*]] = icmp ult i64 [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP46]], label [[COND_TRUE47:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true47:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END49:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END49]]
// SIMD-ONLY0:       cond.end49:
// SIMD-ONLY0-NEXT:    [[COND50:%.*]] = phi i64 [ [[TMP52]], [[COND_TRUE47]] ], [ [[TMP53]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND50]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP54]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP51:%.*]] = icmp eq i64 [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP51]], label [[COND_TRUE52:%.*]], label [[COND_FALSE53:%.*]]
// SIMD-ONLY0:       cond.true52:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END54:%.*]]
// SIMD-ONLY0:       cond.false53:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END54]]
// SIMD-ONLY0:       cond.end54:
// SIMD-ONLY0-NEXT:    [[COND55:%.*]] = phi i64 [ [[TMP57]], [[COND_TRUE52]] ], [ [[TMP58]], [[COND_FALSE53]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND55]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP59]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP60]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP56:%.*]] = icmp ugt i64 [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP56]], label [[COND_TRUE57:%.*]], label [[COND_FALSE58:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END59:%.*]]
// SIMD-ONLY0:       cond.false58:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END59]]
// SIMD-ONLY0:       cond.end59:
// SIMD-ONLY0-NEXT:    [[COND60:%.*]] = phi i64 [ [[TMP63]], [[COND_TRUE57]] ], [ [[TMP64]], [[COND_FALSE58]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND60]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP65]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP61:%.*]] = icmp ult i64 [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP61]], label [[COND_TRUE62:%.*]], label [[COND_FALSE63:%.*]]
// SIMD-ONLY0:       cond.true62:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64:%.*]]
// SIMD-ONLY0:       cond.false63:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64]]
// SIMD-ONLY0:       cond.end64:
// SIMD-ONLY0-NEXT:    [[COND65:%.*]] = phi i64 [ [[TMP68]], [[COND_TRUE62]] ], [ [[TMP69]], [[COND_FALSE63]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND65]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP70]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = icmp eq i64 [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE67:%.*]], label [[COND_FALSE68:%.*]]
// SIMD-ONLY0:       cond.true67:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END69:%.*]]
// SIMD-ONLY0:       cond.false68:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END69]]
// SIMD-ONLY0:       cond.end69:
// SIMD-ONLY0-NEXT:    [[COND70:%.*]] = phi i64 [ [[TMP73]], [[COND_TRUE67]] ], [ [[TMP74]], [[COND_FALSE68]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND70]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP71:%.*]] = icmp ugt i64 [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP71]], label [[COND_TRUE72:%.*]], label [[COND_FALSE73:%.*]]
// SIMD-ONLY0:       cond.true72:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END74:%.*]]
// SIMD-ONLY0:       cond.false73:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END74]]
// SIMD-ONLY0:       cond.end74:
// SIMD-ONLY0-NEXT:    [[COND75:%.*]] = phi i64 [ [[TMP77]], [[COND_TRUE72]] ], [ [[TMP78]], [[COND_FALSE73]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND75]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP79]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP76:%.*]] = icmp ult i64 [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP76]], label [[COND_TRUE77:%.*]], label [[COND_FALSE78:%.*]]
// SIMD-ONLY0:       cond.true77:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END79:%.*]]
// SIMD-ONLY0:       cond.false78:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END79]]
// SIMD-ONLY0:       cond.end79:
// SIMD-ONLY0-NEXT:    [[COND80:%.*]] = phi i64 [ [[TMP82]], [[COND_TRUE77]] ], [ [[TMP83]], [[COND_FALSE78]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND80]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP84]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP81:%.*]] = icmp eq i64 [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP81]], label [[COND_TRUE82:%.*]], label [[COND_FALSE83:%.*]]
// SIMD-ONLY0:       cond.true82:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END84:%.*]]
// SIMD-ONLY0:       cond.false83:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END84]]
// SIMD-ONLY0:       cond.end84:
// SIMD-ONLY0-NEXT:    [[COND85:%.*]] = phi i64 [ [[TMP87]], [[COND_TRUE82]] ], [ [[TMP88]], [[COND_FALSE83]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND85]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP89]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP90]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP86:%.*]] = icmp ugt i64 [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP86]], label [[COND_TRUE87:%.*]], label [[COND_FALSE88:%.*]]
// SIMD-ONLY0:       cond.true87:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END89:%.*]]
// SIMD-ONLY0:       cond.false88:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END89]]
// SIMD-ONLY0:       cond.end89:
// SIMD-ONLY0-NEXT:    [[COND90:%.*]] = phi i64 [ [[TMP93]], [[COND_TRUE87]] ], [ [[TMP94]], [[COND_FALSE88]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND90]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP95]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP91:%.*]] = icmp ult i64 [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP91]], label [[COND_TRUE92:%.*]], label [[COND_FALSE93:%.*]]
// SIMD-ONLY0:       cond.true92:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false93:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi i64 [ [[TMP98]], [[COND_TRUE92]] ], [ [[TMP99]], [[COND_FALSE93]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND95]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP100]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP96:%.*]] = icmp eq i64 [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP96]], label [[COND_TRUE97:%.*]], label [[COND_FALSE98:%.*]]
// SIMD-ONLY0:       cond.true97:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END99:%.*]]
// SIMD-ONLY0:       cond.false98:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END99]]
// SIMD-ONLY0:       cond.end99:
// SIMD-ONLY0-NEXT:    [[COND100:%.*]] = phi i64 [ [[TMP103]], [[COND_TRUE97]] ], [ [[TMP104]], [[COND_FALSE98]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND100]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP101:%.*]] = icmp ugt i64 [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP101]], label [[COND_TRUE102:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true102:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END104:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END104]]
// SIMD-ONLY0:       cond.end104:
// SIMD-ONLY0-NEXT:    [[COND105:%.*]] = phi i64 [ [[TMP107]], [[COND_TRUE102]] ], [ [[TMP108]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND105]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP109]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP106:%.*]] = icmp ult i64 [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP106]], label [[COND_TRUE107:%.*]], label [[COND_FALSE108:%.*]]
// SIMD-ONLY0:       cond.true107:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END109:%.*]]
// SIMD-ONLY0:       cond.false108:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END109]]
// SIMD-ONLY0:       cond.end109:
// SIMD-ONLY0-NEXT:    [[COND110:%.*]] = phi i64 [ [[TMP112]], [[COND_TRUE107]] ], [ [[TMP113]], [[COND_FALSE108]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND110]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP114]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP111:%.*]] = icmp eq i64 [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP111]], label [[COND_TRUE112:%.*]], label [[COND_FALSE113:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END114:%.*]]
// SIMD-ONLY0:       cond.false113:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END114]]
// SIMD-ONLY0:       cond.end114:
// SIMD-ONLY0-NEXT:    [[COND115:%.*]] = phi i64 [ [[TMP117]], [[COND_TRUE112]] ], [ [[TMP118]], [[COND_FALSE113]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND115]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP119]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP120]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP116:%.*]] = icmp ugt i64 [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP116]], label [[COND_TRUE117:%.*]], label [[COND_FALSE118:%.*]]
// SIMD-ONLY0:       cond.true117:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END119:%.*]]
// SIMD-ONLY0:       cond.false118:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END119]]
// SIMD-ONLY0:       cond.end119:
// SIMD-ONLY0-NEXT:    [[COND120:%.*]] = phi i64 [ [[TMP123]], [[COND_TRUE117]] ], [ [[TMP124]], [[COND_FALSE118]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND120]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP125]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = icmp ult i64 [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE122:%.*]], label [[COND_FALSE123:%.*]]
// SIMD-ONLY0:       cond.true122:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END124:%.*]]
// SIMD-ONLY0:       cond.false123:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END124]]
// SIMD-ONLY0:       cond.end124:
// SIMD-ONLY0-NEXT:    [[COND125:%.*]] = phi i64 [ [[TMP128]], [[COND_TRUE122]] ], [ [[TMP129]], [[COND_FALSE123]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND125]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP130]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP126:%.*]] = icmp eq i64 [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP126]], label [[COND_TRUE127:%.*]], label [[COND_FALSE128:%.*]]
// SIMD-ONLY0:       cond.true127:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END129:%.*]]
// SIMD-ONLY0:       cond.false128:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END129]]
// SIMD-ONLY0:       cond.end129:
// SIMD-ONLY0-NEXT:    [[COND130:%.*]] = phi i64 [ [[TMP133]], [[COND_TRUE127]] ], [ [[TMP134]], [[COND_FALSE128]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND130]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP131:%.*]] = icmp ugt i64 [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP131]], label [[COND_TRUE132:%.*]], label [[COND_FALSE133:%.*]]
// SIMD-ONLY0:       cond.true132:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END134:%.*]]
// SIMD-ONLY0:       cond.false133:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END134]]
// SIMD-ONLY0:       cond.end134:
// SIMD-ONLY0-NEXT:    [[COND135:%.*]] = phi i64 [ [[TMP137]], [[COND_TRUE132]] ], [ [[TMP138]], [[COND_FALSE133]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND135]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP139]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP136:%.*]] = icmp ult i64 [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP136]], label [[COND_TRUE137:%.*]], label [[COND_FALSE138:%.*]]
// SIMD-ONLY0:       cond.true137:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END139:%.*]]
// SIMD-ONLY0:       cond.false138:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END139]]
// SIMD-ONLY0:       cond.end139:
// SIMD-ONLY0-NEXT:    [[COND140:%.*]] = phi i64 [ [[TMP142]], [[COND_TRUE137]] ], [ [[TMP143]], [[COND_FALSE138]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND140]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP144]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP141:%.*]] = icmp eq i64 [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP141]], label [[COND_TRUE142:%.*]], label [[COND_FALSE143:%.*]]
// SIMD-ONLY0:       cond.true142:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END144:%.*]]
// SIMD-ONLY0:       cond.false143:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END144]]
// SIMD-ONLY0:       cond.end144:
// SIMD-ONLY0-NEXT:    [[COND145:%.*]] = phi i64 [ [[TMP147]], [[COND_TRUE142]] ], [ [[TMP148]], [[COND_FALSE143]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND145]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP149]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP150]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP146:%.*]] = icmp ugt i64 [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP146]], label [[COND_TRUE147:%.*]], label [[COND_FALSE148:%.*]]
// SIMD-ONLY0:       cond.true147:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false148:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi i64 [ [[TMP153]], [[COND_TRUE147]] ], [ [[TMP154]], [[COND_FALSE148]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND150]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP155]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP151:%.*]] = icmp ult i64 [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP151]], label [[COND_TRUE152:%.*]], label [[COND_FALSE153:%.*]]
// SIMD-ONLY0:       cond.true152:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END154:%.*]]
// SIMD-ONLY0:       cond.false153:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END154]]
// SIMD-ONLY0:       cond.end154:
// SIMD-ONLY0-NEXT:    [[COND155:%.*]] = phi i64 [ [[TMP158]], [[COND_TRUE152]] ], [ [[TMP159]], [[COND_FALSE153]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND155]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP160]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP156:%.*]] = icmp eq i64 [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP156]], label [[COND_TRUE157:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true157:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END159:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END159]]
// SIMD-ONLY0:       cond.end159:
// SIMD-ONLY0-NEXT:    [[COND160:%.*]] = phi i64 [ [[TMP163]], [[COND_TRUE157]] ], [ [[TMP164]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND160]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP161:%.*]] = icmp ugt i64 [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP161]], label [[COND_TRUE162:%.*]], label [[COND_FALSE163:%.*]]
// SIMD-ONLY0:       cond.true162:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END164:%.*]]
// SIMD-ONLY0:       cond.false163:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END164]]
// SIMD-ONLY0:       cond.end164:
// SIMD-ONLY0-NEXT:    [[COND165:%.*]] = phi i64 [ [[TMP167]], [[COND_TRUE162]] ], [ [[TMP168]], [[COND_FALSE163]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND165]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP169]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP166:%.*]] = icmp ult i64 [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP166]], label [[COND_TRUE167:%.*]], label [[COND_FALSE168:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END169:%.*]]
// SIMD-ONLY0:       cond.false168:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END169]]
// SIMD-ONLY0:       cond.end169:
// SIMD-ONLY0-NEXT:    [[COND170:%.*]] = phi i64 [ [[TMP172]], [[COND_TRUE167]] ], [ [[TMP173]], [[COND_FALSE168]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND170]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP174]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load i64, ptr [[ULLE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP171:%.*]] = icmp eq i64 [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP171]], label [[COND_TRUE172:%.*]], label [[COND_FALSE173:%.*]]
// SIMD-ONLY0:       cond.true172:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load i64, ptr [[ULLD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END174:%.*]]
// SIMD-ONLY0:       cond.false173:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END174]]
// SIMD-ONLY0:       cond.end174:
// SIMD-ONLY0-NEXT:    [[COND175:%.*]] = phi i64 [ [[TMP177]], [[COND_TRUE172]] ], [ [[TMP178]], [[COND_FALSE173]] ]
// SIMD-ONLY0-NEXT:    store i64 [[COND175]], ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load i64, ptr [[ULLX]], align 8
// SIMD-ONLY0-NEXT:    store i64 [[TMP179]], ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load i64, ptr [[ULLV]], align 8
// SIMD-ONLY0-NEXT:    ret i64 [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @fxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[FX:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FV:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FE:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[FD:%.*]] = alloca float, align 4
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP0]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = fcmp ogt float [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi float [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store float [[COND]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP5]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP1:%.*]] = fcmp olt float [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1]], label [[COND_TRUE2:%.*]], label [[COND_FALSE3:%.*]]
// SIMD-ONLY0:       cond.true2:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4:%.*]]
// SIMD-ONLY0:       cond.false3:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END4]]
// SIMD-ONLY0:       cond.end4:
// SIMD-ONLY0-NEXT:    [[COND5:%.*]] = phi float [ [[TMP8]], [[COND_TRUE2]] ], [ [[TMP9]], [[COND_FALSE3]] ]
// SIMD-ONLY0-NEXT:    store float [[COND5]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP10]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP6:%.*]] = fcmp oeq float [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6]], label [[COND_TRUE7:%.*]], label [[COND_FALSE8:%.*]]
// SIMD-ONLY0:       cond.true7:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END9:%.*]]
// SIMD-ONLY0:       cond.false8:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END9]]
// SIMD-ONLY0:       cond.end9:
// SIMD-ONLY0-NEXT:    [[COND10:%.*]] = phi float [ [[TMP13]], [[COND_TRUE7]] ], [ [[TMP14]], [[COND_FALSE8]] ]
// SIMD-ONLY0-NEXT:    store float [[COND10]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = fcmp ogt float [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE12:%.*]], label [[COND_FALSE13:%.*]]
// SIMD-ONLY0:       cond.true12:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END14:%.*]]
// SIMD-ONLY0:       cond.false13:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END14]]
// SIMD-ONLY0:       cond.end14:
// SIMD-ONLY0-NEXT:    [[COND15:%.*]] = phi float [ [[TMP17]], [[COND_TRUE12]] ], [ [[TMP18]], [[COND_FALSE13]] ]
// SIMD-ONLY0-NEXT:    store float [[COND15]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP19]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP16:%.*]] = fcmp olt float [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP16]], label [[COND_TRUE17:%.*]], label [[COND_FALSE18:%.*]]
// SIMD-ONLY0:       cond.true17:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END19:%.*]]
// SIMD-ONLY0:       cond.false18:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END19]]
// SIMD-ONLY0:       cond.end19:
// SIMD-ONLY0-NEXT:    [[COND20:%.*]] = phi float [ [[TMP22]], [[COND_TRUE17]] ], [ [[TMP23]], [[COND_FALSE18]] ]
// SIMD-ONLY0-NEXT:    store float [[COND20]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP24]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP21:%.*]] = fcmp oeq float [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP21]], label [[COND_TRUE22:%.*]], label [[COND_FALSE23:%.*]]
// SIMD-ONLY0:       cond.true22:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END24:%.*]]
// SIMD-ONLY0:       cond.false23:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END24]]
// SIMD-ONLY0:       cond.end24:
// SIMD-ONLY0-NEXT:    [[COND25:%.*]] = phi float [ [[TMP27]], [[COND_TRUE22]] ], [ [[TMP28]], [[COND_FALSE23]] ]
// SIMD-ONLY0-NEXT:    store float [[COND25]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP29]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP30]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP26:%.*]] = fcmp ogt float [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP26]], label [[COND_TRUE27:%.*]], label [[COND_FALSE28:%.*]]
// SIMD-ONLY0:       cond.true27:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END29:%.*]]
// SIMD-ONLY0:       cond.false28:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END29]]
// SIMD-ONLY0:       cond.end29:
// SIMD-ONLY0-NEXT:    [[COND30:%.*]] = phi float [ [[TMP33]], [[COND_TRUE27]] ], [ [[TMP34]], [[COND_FALSE28]] ]
// SIMD-ONLY0-NEXT:    store float [[COND30]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP35]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP31:%.*]] = fcmp olt float [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP31]], label [[COND_TRUE32:%.*]], label [[COND_FALSE33:%.*]]
// SIMD-ONLY0:       cond.true32:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END34:%.*]]
// SIMD-ONLY0:       cond.false33:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END34]]
// SIMD-ONLY0:       cond.end34:
// SIMD-ONLY0-NEXT:    [[COND35:%.*]] = phi float [ [[TMP38]], [[COND_TRUE32]] ], [ [[TMP39]], [[COND_FALSE33]] ]
// SIMD-ONLY0-NEXT:    store float [[COND35]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP40]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP36:%.*]] = fcmp oeq float [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP36]], label [[COND_TRUE37:%.*]], label [[COND_FALSE38:%.*]]
// SIMD-ONLY0:       cond.true37:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false38:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi float [ [[TMP43]], [[COND_TRUE37]] ], [ [[TMP44]], [[COND_FALSE38]] ]
// SIMD-ONLY0-NEXT:    store float [[COND40]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = fcmp ogt float [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[COND_TRUE42:%.*]], label [[COND_FALSE43:%.*]]
// SIMD-ONLY0:       cond.true42:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END44:%.*]]
// SIMD-ONLY0:       cond.false43:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END44]]
// SIMD-ONLY0:       cond.end44:
// SIMD-ONLY0-NEXT:    [[COND45:%.*]] = phi float [ [[TMP47]], [[COND_TRUE42]] ], [ [[TMP48]], [[COND_FALSE43]] ]
// SIMD-ONLY0-NEXT:    store float [[COND45]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP49]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP46:%.*]] = fcmp olt float [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP46]], label [[COND_TRUE47:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true47:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END49:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END49]]
// SIMD-ONLY0:       cond.end49:
// SIMD-ONLY0-NEXT:    [[COND50:%.*]] = phi float [ [[TMP52]], [[COND_TRUE47]] ], [ [[TMP53]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    store float [[COND50]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP54]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP51:%.*]] = fcmp oeq float [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP51]], label [[COND_TRUE52:%.*]], label [[COND_FALSE53:%.*]]
// SIMD-ONLY0:       cond.true52:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END54:%.*]]
// SIMD-ONLY0:       cond.false53:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END54]]
// SIMD-ONLY0:       cond.end54:
// SIMD-ONLY0-NEXT:    [[COND55:%.*]] = phi float [ [[TMP57]], [[COND_TRUE52]] ], [ [[TMP58]], [[COND_FALSE53]] ]
// SIMD-ONLY0-NEXT:    store float [[COND55]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP59]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP60]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP56:%.*]] = fcmp ogt float [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP56]], label [[COND_TRUE57:%.*]], label [[COND_FALSE58:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END59:%.*]]
// SIMD-ONLY0:       cond.false58:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END59]]
// SIMD-ONLY0:       cond.end59:
// SIMD-ONLY0-NEXT:    [[COND60:%.*]] = phi float [ [[TMP63]], [[COND_TRUE57]] ], [ [[TMP64]], [[COND_FALSE58]] ]
// SIMD-ONLY0-NEXT:    store float [[COND60]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP65]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP61:%.*]] = fcmp olt float [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP61]], label [[COND_TRUE62:%.*]], label [[COND_FALSE63:%.*]]
// SIMD-ONLY0:       cond.true62:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END64:%.*]]
// SIMD-ONLY0:       cond.false63:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END64]]
// SIMD-ONLY0:       cond.end64:
// SIMD-ONLY0-NEXT:    [[COND65:%.*]] = phi float [ [[TMP68]], [[COND_TRUE62]] ], [ [[TMP69]], [[COND_FALSE63]] ]
// SIMD-ONLY0-NEXT:    store float [[COND65]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP70]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = fcmp oeq float [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE67:%.*]], label [[COND_FALSE68:%.*]]
// SIMD-ONLY0:       cond.true67:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END69:%.*]]
// SIMD-ONLY0:       cond.false68:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END69]]
// SIMD-ONLY0:       cond.end69:
// SIMD-ONLY0-NEXT:    [[COND70:%.*]] = phi float [ [[TMP73]], [[COND_TRUE67]] ], [ [[TMP74]], [[COND_FALSE68]] ]
// SIMD-ONLY0-NEXT:    store float [[COND70]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP71:%.*]] = fcmp ogt float [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP71]], label [[COND_TRUE72:%.*]], label [[COND_FALSE73:%.*]]
// SIMD-ONLY0:       cond.true72:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END74:%.*]]
// SIMD-ONLY0:       cond.false73:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END74]]
// SIMD-ONLY0:       cond.end74:
// SIMD-ONLY0-NEXT:    [[COND75:%.*]] = phi float [ [[TMP77]], [[COND_TRUE72]] ], [ [[TMP78]], [[COND_FALSE73]] ]
// SIMD-ONLY0-NEXT:    store float [[COND75]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP79]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP76:%.*]] = fcmp olt float [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP76]], label [[COND_TRUE77:%.*]], label [[COND_FALSE78:%.*]]
// SIMD-ONLY0:       cond.true77:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END79:%.*]]
// SIMD-ONLY0:       cond.false78:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END79]]
// SIMD-ONLY0:       cond.end79:
// SIMD-ONLY0-NEXT:    [[COND80:%.*]] = phi float [ [[TMP82]], [[COND_TRUE77]] ], [ [[TMP83]], [[COND_FALSE78]] ]
// SIMD-ONLY0-NEXT:    store float [[COND80]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP84]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP81:%.*]] = fcmp oeq float [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP81]], label [[COND_TRUE82:%.*]], label [[COND_FALSE83:%.*]]
// SIMD-ONLY0:       cond.true82:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END84:%.*]]
// SIMD-ONLY0:       cond.false83:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END84]]
// SIMD-ONLY0:       cond.end84:
// SIMD-ONLY0-NEXT:    [[COND85:%.*]] = phi float [ [[TMP87]], [[COND_TRUE82]] ], [ [[TMP88]], [[COND_FALSE83]] ]
// SIMD-ONLY0-NEXT:    store float [[COND85]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP89]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP90]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP86:%.*]] = fcmp ogt float [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP86]], label [[COND_TRUE87:%.*]], label [[COND_FALSE88:%.*]]
// SIMD-ONLY0:       cond.true87:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END89:%.*]]
// SIMD-ONLY0:       cond.false88:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END89]]
// SIMD-ONLY0:       cond.end89:
// SIMD-ONLY0-NEXT:    [[COND90:%.*]] = phi float [ [[TMP93]], [[COND_TRUE87]] ], [ [[TMP94]], [[COND_FALSE88]] ]
// SIMD-ONLY0-NEXT:    store float [[COND90]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP95]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP91:%.*]] = fcmp olt float [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP91]], label [[COND_TRUE92:%.*]], label [[COND_FALSE93:%.*]]
// SIMD-ONLY0:       cond.true92:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false93:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi float [ [[TMP98]], [[COND_TRUE92]] ], [ [[TMP99]], [[COND_FALSE93]] ]
// SIMD-ONLY0-NEXT:    store float [[COND95]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP100]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP96:%.*]] = fcmp oeq float [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP96]], label [[COND_TRUE97:%.*]], label [[COND_FALSE98:%.*]]
// SIMD-ONLY0:       cond.true97:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END99:%.*]]
// SIMD-ONLY0:       cond.false98:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END99]]
// SIMD-ONLY0:       cond.end99:
// SIMD-ONLY0-NEXT:    [[COND100:%.*]] = phi float [ [[TMP103]], [[COND_TRUE97]] ], [ [[TMP104]], [[COND_FALSE98]] ]
// SIMD-ONLY0-NEXT:    store float [[COND100]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP101:%.*]] = fcmp ogt float [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP101]], label [[COND_TRUE102:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true102:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END104:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END104]]
// SIMD-ONLY0:       cond.end104:
// SIMD-ONLY0-NEXT:    [[COND105:%.*]] = phi float [ [[TMP107]], [[COND_TRUE102]] ], [ [[TMP108]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    store float [[COND105]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP109]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP106:%.*]] = fcmp olt float [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP106]], label [[COND_TRUE107:%.*]], label [[COND_FALSE108:%.*]]
// SIMD-ONLY0:       cond.true107:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END109:%.*]]
// SIMD-ONLY0:       cond.false108:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END109]]
// SIMD-ONLY0:       cond.end109:
// SIMD-ONLY0-NEXT:    [[COND110:%.*]] = phi float [ [[TMP112]], [[COND_TRUE107]] ], [ [[TMP113]], [[COND_FALSE108]] ]
// SIMD-ONLY0-NEXT:    store float [[COND110]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP114]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP111:%.*]] = fcmp oeq float [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP111]], label [[COND_TRUE112:%.*]], label [[COND_FALSE113:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END114:%.*]]
// SIMD-ONLY0:       cond.false113:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END114]]
// SIMD-ONLY0:       cond.end114:
// SIMD-ONLY0-NEXT:    [[COND115:%.*]] = phi float [ [[TMP117]], [[COND_TRUE112]] ], [ [[TMP118]], [[COND_FALSE113]] ]
// SIMD-ONLY0-NEXT:    store float [[COND115]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP119]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP120]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP116:%.*]] = fcmp ogt float [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP116]], label [[COND_TRUE117:%.*]], label [[COND_FALSE118:%.*]]
// SIMD-ONLY0:       cond.true117:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END119:%.*]]
// SIMD-ONLY0:       cond.false118:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END119]]
// SIMD-ONLY0:       cond.end119:
// SIMD-ONLY0-NEXT:    [[COND120:%.*]] = phi float [ [[TMP123]], [[COND_TRUE117]] ], [ [[TMP124]], [[COND_FALSE118]] ]
// SIMD-ONLY0-NEXT:    store float [[COND120]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP125]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = fcmp olt float [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE122:%.*]], label [[COND_FALSE123:%.*]]
// SIMD-ONLY0:       cond.true122:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END124:%.*]]
// SIMD-ONLY0:       cond.false123:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END124]]
// SIMD-ONLY0:       cond.end124:
// SIMD-ONLY0-NEXT:    [[COND125:%.*]] = phi float [ [[TMP128]], [[COND_TRUE122]] ], [ [[TMP129]], [[COND_FALSE123]] ]
// SIMD-ONLY0-NEXT:    store float [[COND125]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP130]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP126:%.*]] = fcmp oeq float [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP126]], label [[COND_TRUE127:%.*]], label [[COND_FALSE128:%.*]]
// SIMD-ONLY0:       cond.true127:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END129:%.*]]
// SIMD-ONLY0:       cond.false128:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END129]]
// SIMD-ONLY0:       cond.end129:
// SIMD-ONLY0-NEXT:    [[COND130:%.*]] = phi float [ [[TMP133]], [[COND_TRUE127]] ], [ [[TMP134]], [[COND_FALSE128]] ]
// SIMD-ONLY0-NEXT:    store float [[COND130]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP131:%.*]] = fcmp ogt float [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP131]], label [[COND_TRUE132:%.*]], label [[COND_FALSE133:%.*]]
// SIMD-ONLY0:       cond.true132:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END134:%.*]]
// SIMD-ONLY0:       cond.false133:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END134]]
// SIMD-ONLY0:       cond.end134:
// SIMD-ONLY0-NEXT:    [[COND135:%.*]] = phi float [ [[TMP137]], [[COND_TRUE132]] ], [ [[TMP138]], [[COND_FALSE133]] ]
// SIMD-ONLY0-NEXT:    store float [[COND135]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP139]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP136:%.*]] = fcmp olt float [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP136]], label [[COND_TRUE137:%.*]], label [[COND_FALSE138:%.*]]
// SIMD-ONLY0:       cond.true137:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END139:%.*]]
// SIMD-ONLY0:       cond.false138:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END139]]
// SIMD-ONLY0:       cond.end139:
// SIMD-ONLY0-NEXT:    [[COND140:%.*]] = phi float [ [[TMP142]], [[COND_TRUE137]] ], [ [[TMP143]], [[COND_FALSE138]] ]
// SIMD-ONLY0-NEXT:    store float [[COND140]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP144]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP141:%.*]] = fcmp oeq float [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP141]], label [[COND_TRUE142:%.*]], label [[COND_FALSE143:%.*]]
// SIMD-ONLY0:       cond.true142:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END144:%.*]]
// SIMD-ONLY0:       cond.false143:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END144]]
// SIMD-ONLY0:       cond.end144:
// SIMD-ONLY0-NEXT:    [[COND145:%.*]] = phi float [ [[TMP147]], [[COND_TRUE142]] ], [ [[TMP148]], [[COND_FALSE143]] ]
// SIMD-ONLY0-NEXT:    store float [[COND145]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP149]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP150]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP146:%.*]] = fcmp ogt float [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP146]], label [[COND_TRUE147:%.*]], label [[COND_FALSE148:%.*]]
// SIMD-ONLY0:       cond.true147:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false148:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi float [ [[TMP153]], [[COND_TRUE147]] ], [ [[TMP154]], [[COND_FALSE148]] ]
// SIMD-ONLY0-NEXT:    store float [[COND150]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP155]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP151:%.*]] = fcmp olt float [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP151]], label [[COND_TRUE152:%.*]], label [[COND_FALSE153:%.*]]
// SIMD-ONLY0:       cond.true152:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END154:%.*]]
// SIMD-ONLY0:       cond.false153:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END154]]
// SIMD-ONLY0:       cond.end154:
// SIMD-ONLY0-NEXT:    [[COND155:%.*]] = phi float [ [[TMP158]], [[COND_TRUE152]] ], [ [[TMP159]], [[COND_FALSE153]] ]
// SIMD-ONLY0-NEXT:    store float [[COND155]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP160]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP156:%.*]] = fcmp oeq float [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP156]], label [[COND_TRUE157:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true157:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END159:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END159]]
// SIMD-ONLY0:       cond.end159:
// SIMD-ONLY0-NEXT:    [[COND160:%.*]] = phi float [ [[TMP163]], [[COND_TRUE157]] ], [ [[TMP164]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    store float [[COND160]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP161:%.*]] = fcmp ogt float [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP161]], label [[COND_TRUE162:%.*]], label [[COND_FALSE163:%.*]]
// SIMD-ONLY0:       cond.true162:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END164:%.*]]
// SIMD-ONLY0:       cond.false163:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END164]]
// SIMD-ONLY0:       cond.end164:
// SIMD-ONLY0-NEXT:    [[COND165:%.*]] = phi float [ [[TMP167]], [[COND_TRUE162]] ], [ [[TMP168]], [[COND_FALSE163]] ]
// SIMD-ONLY0-NEXT:    store float [[COND165]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP169]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP166:%.*]] = fcmp olt float [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP166]], label [[COND_TRUE167:%.*]], label [[COND_FALSE168:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END169:%.*]]
// SIMD-ONLY0:       cond.false168:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END169]]
// SIMD-ONLY0:       cond.end169:
// SIMD-ONLY0-NEXT:    [[COND170:%.*]] = phi float [ [[TMP172]], [[COND_TRUE167]] ], [ [[TMP173]], [[COND_FALSE168]] ]
// SIMD-ONLY0-NEXT:    store float [[COND170]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP174]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load float, ptr [[FE]], align 4
// SIMD-ONLY0-NEXT:    [[CMP171:%.*]] = fcmp oeq float [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP171]], label [[COND_TRUE172:%.*]], label [[COND_FALSE173:%.*]]
// SIMD-ONLY0:       cond.true172:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load float, ptr [[FD]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END174:%.*]]
// SIMD-ONLY0:       cond.false173:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    br label [[COND_END174]]
// SIMD-ONLY0:       cond.end174:
// SIMD-ONLY0-NEXT:    [[COND175:%.*]] = phi float [ [[TMP177]], [[COND_TRUE172]] ], [ [[TMP178]], [[COND_FALSE173]] ]
// SIMD-ONLY0-NEXT:    store float [[COND175]], ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load float, ptr [[FX]], align 4
// SIMD-ONLY0-NEXT:    store float [[TMP179]], ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load float, ptr [[FV]], align 4
// SIMD-ONLY0-NEXT:    ret float [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @dxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[DX:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DV:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DE:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DD:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP0]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP1]], [[TMP2]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi double [ [[TMP3]], [[COND_TRUE]] ], [ [[TMP4]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store double [[COND]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP5]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP1:%.*]] = fcmp olt double [[TMP6]], [[TMP7]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1]], label [[COND_TRUE2:%.*]], label [[COND_FALSE3:%.*]]
// SIMD-ONLY0:       cond.true2:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4:%.*]]
// SIMD-ONLY0:       cond.false3:
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END4]]
// SIMD-ONLY0:       cond.end4:
// SIMD-ONLY0-NEXT:    [[COND5:%.*]] = phi double [ [[TMP8]], [[COND_TRUE2]] ], [ [[TMP9]], [[COND_FALSE3]] ]
// SIMD-ONLY0-NEXT:    store double [[COND5]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP10]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP6:%.*]] = fcmp oeq double [[TMP11]], [[TMP12]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP6]], label [[COND_TRUE7:%.*]], label [[COND_FALSE8:%.*]]
// SIMD-ONLY0:       cond.true7:
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END9:%.*]]
// SIMD-ONLY0:       cond.false8:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END9]]
// SIMD-ONLY0:       cond.end9:
// SIMD-ONLY0-NEXT:    [[COND10:%.*]] = phi double [ [[TMP13]], [[COND_TRUE7]] ], [ [[TMP14]], [[COND_FALSE8]] ]
// SIMD-ONLY0-NEXT:    store double [[COND10]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP11:%.*]] = fcmp ogt double [[TMP15]], [[TMP16]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP11]], label [[COND_TRUE12:%.*]], label [[COND_FALSE13:%.*]]
// SIMD-ONLY0:       cond.true12:
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END14:%.*]]
// SIMD-ONLY0:       cond.false13:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END14]]
// SIMD-ONLY0:       cond.end14:
// SIMD-ONLY0-NEXT:    [[COND15:%.*]] = phi double [ [[TMP17]], [[COND_TRUE12]] ], [ [[TMP18]], [[COND_FALSE13]] ]
// SIMD-ONLY0-NEXT:    store double [[COND15]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP19]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP16:%.*]] = fcmp olt double [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP16]], label [[COND_TRUE17:%.*]], label [[COND_FALSE18:%.*]]
// SIMD-ONLY0:       cond.true17:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END19:%.*]]
// SIMD-ONLY0:       cond.false18:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END19]]
// SIMD-ONLY0:       cond.end19:
// SIMD-ONLY0-NEXT:    [[COND20:%.*]] = phi double [ [[TMP22]], [[COND_TRUE17]] ], [ [[TMP23]], [[COND_FALSE18]] ]
// SIMD-ONLY0-NEXT:    store double [[COND20]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP24]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP21:%.*]] = fcmp oeq double [[TMP25]], [[TMP26]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP21]], label [[COND_TRUE22:%.*]], label [[COND_FALSE23:%.*]]
// SIMD-ONLY0:       cond.true22:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END24:%.*]]
// SIMD-ONLY0:       cond.false23:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END24]]
// SIMD-ONLY0:       cond.end24:
// SIMD-ONLY0-NEXT:    [[COND25:%.*]] = phi double [ [[TMP27]], [[COND_TRUE22]] ], [ [[TMP28]], [[COND_FALSE23]] ]
// SIMD-ONLY0-NEXT:    store double [[COND25]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP29]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP30]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP26:%.*]] = fcmp ogt double [[TMP31]], [[TMP32]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP26]], label [[COND_TRUE27:%.*]], label [[COND_FALSE28:%.*]]
// SIMD-ONLY0:       cond.true27:
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END29:%.*]]
// SIMD-ONLY0:       cond.false28:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END29]]
// SIMD-ONLY0:       cond.end29:
// SIMD-ONLY0-NEXT:    [[COND30:%.*]] = phi double [ [[TMP33]], [[COND_TRUE27]] ], [ [[TMP34]], [[COND_FALSE28]] ]
// SIMD-ONLY0-NEXT:    store double [[COND30]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP35]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP31:%.*]] = fcmp olt double [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP31]], label [[COND_TRUE32:%.*]], label [[COND_FALSE33:%.*]]
// SIMD-ONLY0:       cond.true32:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END34:%.*]]
// SIMD-ONLY0:       cond.false33:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END34]]
// SIMD-ONLY0:       cond.end34:
// SIMD-ONLY0-NEXT:    [[COND35:%.*]] = phi double [ [[TMP38]], [[COND_TRUE32]] ], [ [[TMP39]], [[COND_FALSE33]] ]
// SIMD-ONLY0-NEXT:    store double [[COND35]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP40]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP36:%.*]] = fcmp oeq double [[TMP41]], [[TMP42]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP36]], label [[COND_TRUE37:%.*]], label [[COND_FALSE38:%.*]]
// SIMD-ONLY0:       cond.true37:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END39:%.*]]
// SIMD-ONLY0:       cond.false38:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END39]]
// SIMD-ONLY0:       cond.end39:
// SIMD-ONLY0-NEXT:    [[COND40:%.*]] = phi double [ [[TMP43]], [[COND_TRUE37]] ], [ [[TMP44]], [[COND_FALSE38]] ]
// SIMD-ONLY0-NEXT:    store double [[COND40]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = fcmp ogt double [[TMP45]], [[TMP46]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[COND_TRUE42:%.*]], label [[COND_FALSE43:%.*]]
// SIMD-ONLY0:       cond.true42:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END44:%.*]]
// SIMD-ONLY0:       cond.false43:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END44]]
// SIMD-ONLY0:       cond.end44:
// SIMD-ONLY0-NEXT:    [[COND45:%.*]] = phi double [ [[TMP47]], [[COND_TRUE42]] ], [ [[TMP48]], [[COND_FALSE43]] ]
// SIMD-ONLY0-NEXT:    store double [[COND45]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP49]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP46:%.*]] = fcmp olt double [[TMP50]], [[TMP51]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP46]], label [[COND_TRUE47:%.*]], label [[COND_FALSE48:%.*]]
// SIMD-ONLY0:       cond.true47:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END49:%.*]]
// SIMD-ONLY0:       cond.false48:
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END49]]
// SIMD-ONLY0:       cond.end49:
// SIMD-ONLY0-NEXT:    [[COND50:%.*]] = phi double [ [[TMP52]], [[COND_TRUE47]] ], [ [[TMP53]], [[COND_FALSE48]] ]
// SIMD-ONLY0-NEXT:    store double [[COND50]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP54]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP51:%.*]] = fcmp oeq double [[TMP55]], [[TMP56]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP51]], label [[COND_TRUE52:%.*]], label [[COND_FALSE53:%.*]]
// SIMD-ONLY0:       cond.true52:
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END54:%.*]]
// SIMD-ONLY0:       cond.false53:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END54]]
// SIMD-ONLY0:       cond.end54:
// SIMD-ONLY0-NEXT:    [[COND55:%.*]] = phi double [ [[TMP57]], [[COND_TRUE52]] ], [ [[TMP58]], [[COND_FALSE53]] ]
// SIMD-ONLY0-NEXT:    store double [[COND55]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP59]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP60]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP56:%.*]] = fcmp ogt double [[TMP61]], [[TMP62]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP56]], label [[COND_TRUE57:%.*]], label [[COND_FALSE58:%.*]]
// SIMD-ONLY0:       cond.true57:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END59:%.*]]
// SIMD-ONLY0:       cond.false58:
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END59]]
// SIMD-ONLY0:       cond.end59:
// SIMD-ONLY0-NEXT:    [[COND60:%.*]] = phi double [ [[TMP63]], [[COND_TRUE57]] ], [ [[TMP64]], [[COND_FALSE58]] ]
// SIMD-ONLY0-NEXT:    store double [[COND60]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP65]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP61:%.*]] = fcmp olt double [[TMP66]], [[TMP67]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP61]], label [[COND_TRUE62:%.*]], label [[COND_FALSE63:%.*]]
// SIMD-ONLY0:       cond.true62:
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64:%.*]]
// SIMD-ONLY0:       cond.false63:
// SIMD-ONLY0-NEXT:    [[TMP69:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END64]]
// SIMD-ONLY0:       cond.end64:
// SIMD-ONLY0-NEXT:    [[COND65:%.*]] = phi double [ [[TMP68]], [[COND_TRUE62]] ], [ [[TMP69]], [[COND_FALSE63]] ]
// SIMD-ONLY0-NEXT:    store double [[COND65]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP70:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP70]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP71:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP72:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP66:%.*]] = fcmp oeq double [[TMP71]], [[TMP72]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP66]], label [[COND_TRUE67:%.*]], label [[COND_FALSE68:%.*]]
// SIMD-ONLY0:       cond.true67:
// SIMD-ONLY0-NEXT:    [[TMP73:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END69:%.*]]
// SIMD-ONLY0:       cond.false68:
// SIMD-ONLY0-NEXT:    [[TMP74:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END69]]
// SIMD-ONLY0:       cond.end69:
// SIMD-ONLY0-NEXT:    [[COND70:%.*]] = phi double [ [[TMP73]], [[COND_TRUE67]] ], [ [[TMP74]], [[COND_FALSE68]] ]
// SIMD-ONLY0-NEXT:    store double [[COND70]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP75:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP76:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP71:%.*]] = fcmp ogt double [[TMP75]], [[TMP76]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP71]], label [[COND_TRUE72:%.*]], label [[COND_FALSE73:%.*]]
// SIMD-ONLY0:       cond.true72:
// SIMD-ONLY0-NEXT:    [[TMP77:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END74:%.*]]
// SIMD-ONLY0:       cond.false73:
// SIMD-ONLY0-NEXT:    [[TMP78:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END74]]
// SIMD-ONLY0:       cond.end74:
// SIMD-ONLY0-NEXT:    [[COND75:%.*]] = phi double [ [[TMP77]], [[COND_TRUE72]] ], [ [[TMP78]], [[COND_FALSE73]] ]
// SIMD-ONLY0-NEXT:    store double [[COND75]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP79:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP79]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP80:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP81:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP76:%.*]] = fcmp olt double [[TMP80]], [[TMP81]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP76]], label [[COND_TRUE77:%.*]], label [[COND_FALSE78:%.*]]
// SIMD-ONLY0:       cond.true77:
// SIMD-ONLY0-NEXT:    [[TMP82:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END79:%.*]]
// SIMD-ONLY0:       cond.false78:
// SIMD-ONLY0-NEXT:    [[TMP83:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END79]]
// SIMD-ONLY0:       cond.end79:
// SIMD-ONLY0-NEXT:    [[COND80:%.*]] = phi double [ [[TMP82]], [[COND_TRUE77]] ], [ [[TMP83]], [[COND_FALSE78]] ]
// SIMD-ONLY0-NEXT:    store double [[COND80]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP84:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP84]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP85:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP86:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP81:%.*]] = fcmp oeq double [[TMP85]], [[TMP86]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP81]], label [[COND_TRUE82:%.*]], label [[COND_FALSE83:%.*]]
// SIMD-ONLY0:       cond.true82:
// SIMD-ONLY0-NEXT:    [[TMP87:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END84:%.*]]
// SIMD-ONLY0:       cond.false83:
// SIMD-ONLY0-NEXT:    [[TMP88:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END84]]
// SIMD-ONLY0:       cond.end84:
// SIMD-ONLY0-NEXT:    [[COND85:%.*]] = phi double [ [[TMP87]], [[COND_TRUE82]] ], [ [[TMP88]], [[COND_FALSE83]] ]
// SIMD-ONLY0-NEXT:    store double [[COND85]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP89:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP89]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP90:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP90]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP91:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP92:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP86:%.*]] = fcmp ogt double [[TMP91]], [[TMP92]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP86]], label [[COND_TRUE87:%.*]], label [[COND_FALSE88:%.*]]
// SIMD-ONLY0:       cond.true87:
// SIMD-ONLY0-NEXT:    [[TMP93:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END89:%.*]]
// SIMD-ONLY0:       cond.false88:
// SIMD-ONLY0-NEXT:    [[TMP94:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END89]]
// SIMD-ONLY0:       cond.end89:
// SIMD-ONLY0-NEXT:    [[COND90:%.*]] = phi double [ [[TMP93]], [[COND_TRUE87]] ], [ [[TMP94]], [[COND_FALSE88]] ]
// SIMD-ONLY0-NEXT:    store double [[COND90]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP95:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP95]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP96:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP97:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP91:%.*]] = fcmp olt double [[TMP96]], [[TMP97]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP91]], label [[COND_TRUE92:%.*]], label [[COND_FALSE93:%.*]]
// SIMD-ONLY0:       cond.true92:
// SIMD-ONLY0-NEXT:    [[TMP98:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END94:%.*]]
// SIMD-ONLY0:       cond.false93:
// SIMD-ONLY0-NEXT:    [[TMP99:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END94]]
// SIMD-ONLY0:       cond.end94:
// SIMD-ONLY0-NEXT:    [[COND95:%.*]] = phi double [ [[TMP98]], [[COND_TRUE92]] ], [ [[TMP99]], [[COND_FALSE93]] ]
// SIMD-ONLY0-NEXT:    store double [[COND95]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP100:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP100]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP101:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP102:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP96:%.*]] = fcmp oeq double [[TMP101]], [[TMP102]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP96]], label [[COND_TRUE97:%.*]], label [[COND_FALSE98:%.*]]
// SIMD-ONLY0:       cond.true97:
// SIMD-ONLY0-NEXT:    [[TMP103:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END99:%.*]]
// SIMD-ONLY0:       cond.false98:
// SIMD-ONLY0-NEXT:    [[TMP104:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END99]]
// SIMD-ONLY0:       cond.end99:
// SIMD-ONLY0-NEXT:    [[COND100:%.*]] = phi double [ [[TMP103]], [[COND_TRUE97]] ], [ [[TMP104]], [[COND_FALSE98]] ]
// SIMD-ONLY0-NEXT:    store double [[COND100]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP105:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP106:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP101:%.*]] = fcmp ogt double [[TMP105]], [[TMP106]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP101]], label [[COND_TRUE102:%.*]], label [[COND_FALSE103:%.*]]
// SIMD-ONLY0:       cond.true102:
// SIMD-ONLY0-NEXT:    [[TMP107:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END104:%.*]]
// SIMD-ONLY0:       cond.false103:
// SIMD-ONLY0-NEXT:    [[TMP108:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END104]]
// SIMD-ONLY0:       cond.end104:
// SIMD-ONLY0-NEXT:    [[COND105:%.*]] = phi double [ [[TMP107]], [[COND_TRUE102]] ], [ [[TMP108]], [[COND_FALSE103]] ]
// SIMD-ONLY0-NEXT:    store double [[COND105]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP109:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP109]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP110:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP111:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP106:%.*]] = fcmp olt double [[TMP110]], [[TMP111]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP106]], label [[COND_TRUE107:%.*]], label [[COND_FALSE108:%.*]]
// SIMD-ONLY0:       cond.true107:
// SIMD-ONLY0-NEXT:    [[TMP112:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END109:%.*]]
// SIMD-ONLY0:       cond.false108:
// SIMD-ONLY0-NEXT:    [[TMP113:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END109]]
// SIMD-ONLY0:       cond.end109:
// SIMD-ONLY0-NEXT:    [[COND110:%.*]] = phi double [ [[TMP112]], [[COND_TRUE107]] ], [ [[TMP113]], [[COND_FALSE108]] ]
// SIMD-ONLY0-NEXT:    store double [[COND110]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP114:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP114]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP115:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP116:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP111:%.*]] = fcmp oeq double [[TMP115]], [[TMP116]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP111]], label [[COND_TRUE112:%.*]], label [[COND_FALSE113:%.*]]
// SIMD-ONLY0:       cond.true112:
// SIMD-ONLY0-NEXT:    [[TMP117:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END114:%.*]]
// SIMD-ONLY0:       cond.false113:
// SIMD-ONLY0-NEXT:    [[TMP118:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END114]]
// SIMD-ONLY0:       cond.end114:
// SIMD-ONLY0-NEXT:    [[COND115:%.*]] = phi double [ [[TMP117]], [[COND_TRUE112]] ], [ [[TMP118]], [[COND_FALSE113]] ]
// SIMD-ONLY0-NEXT:    store double [[COND115]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP119:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP119]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP120:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP120]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP121:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP122:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP116:%.*]] = fcmp ogt double [[TMP121]], [[TMP122]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP116]], label [[COND_TRUE117:%.*]], label [[COND_FALSE118:%.*]]
// SIMD-ONLY0:       cond.true117:
// SIMD-ONLY0-NEXT:    [[TMP123:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END119:%.*]]
// SIMD-ONLY0:       cond.false118:
// SIMD-ONLY0-NEXT:    [[TMP124:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END119]]
// SIMD-ONLY0:       cond.end119:
// SIMD-ONLY0-NEXT:    [[COND120:%.*]] = phi double [ [[TMP123]], [[COND_TRUE117]] ], [ [[TMP124]], [[COND_FALSE118]] ]
// SIMD-ONLY0-NEXT:    store double [[COND120]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP125:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP125]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP126:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP127:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP121:%.*]] = fcmp olt double [[TMP126]], [[TMP127]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP121]], label [[COND_TRUE122:%.*]], label [[COND_FALSE123:%.*]]
// SIMD-ONLY0:       cond.true122:
// SIMD-ONLY0-NEXT:    [[TMP128:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END124:%.*]]
// SIMD-ONLY0:       cond.false123:
// SIMD-ONLY0-NEXT:    [[TMP129:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END124]]
// SIMD-ONLY0:       cond.end124:
// SIMD-ONLY0-NEXT:    [[COND125:%.*]] = phi double [ [[TMP128]], [[COND_TRUE122]] ], [ [[TMP129]], [[COND_FALSE123]] ]
// SIMD-ONLY0-NEXT:    store double [[COND125]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP130:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP130]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP131:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP132:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP126:%.*]] = fcmp oeq double [[TMP131]], [[TMP132]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP126]], label [[COND_TRUE127:%.*]], label [[COND_FALSE128:%.*]]
// SIMD-ONLY0:       cond.true127:
// SIMD-ONLY0-NEXT:    [[TMP133:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END129:%.*]]
// SIMD-ONLY0:       cond.false128:
// SIMD-ONLY0-NEXT:    [[TMP134:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END129]]
// SIMD-ONLY0:       cond.end129:
// SIMD-ONLY0-NEXT:    [[COND130:%.*]] = phi double [ [[TMP133]], [[COND_TRUE127]] ], [ [[TMP134]], [[COND_FALSE128]] ]
// SIMD-ONLY0-NEXT:    store double [[COND130]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP135:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP136:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP131:%.*]] = fcmp ogt double [[TMP135]], [[TMP136]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP131]], label [[COND_TRUE132:%.*]], label [[COND_FALSE133:%.*]]
// SIMD-ONLY0:       cond.true132:
// SIMD-ONLY0-NEXT:    [[TMP137:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END134:%.*]]
// SIMD-ONLY0:       cond.false133:
// SIMD-ONLY0-NEXT:    [[TMP138:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END134]]
// SIMD-ONLY0:       cond.end134:
// SIMD-ONLY0-NEXT:    [[COND135:%.*]] = phi double [ [[TMP137]], [[COND_TRUE132]] ], [ [[TMP138]], [[COND_FALSE133]] ]
// SIMD-ONLY0-NEXT:    store double [[COND135]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP139:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP139]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP140:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP141:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP136:%.*]] = fcmp olt double [[TMP140]], [[TMP141]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP136]], label [[COND_TRUE137:%.*]], label [[COND_FALSE138:%.*]]
// SIMD-ONLY0:       cond.true137:
// SIMD-ONLY0-NEXT:    [[TMP142:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END139:%.*]]
// SIMD-ONLY0:       cond.false138:
// SIMD-ONLY0-NEXT:    [[TMP143:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END139]]
// SIMD-ONLY0:       cond.end139:
// SIMD-ONLY0-NEXT:    [[COND140:%.*]] = phi double [ [[TMP142]], [[COND_TRUE137]] ], [ [[TMP143]], [[COND_FALSE138]] ]
// SIMD-ONLY0-NEXT:    store double [[COND140]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP144:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP144]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP145:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP146:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP141:%.*]] = fcmp oeq double [[TMP145]], [[TMP146]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP141]], label [[COND_TRUE142:%.*]], label [[COND_FALSE143:%.*]]
// SIMD-ONLY0:       cond.true142:
// SIMD-ONLY0-NEXT:    [[TMP147:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END144:%.*]]
// SIMD-ONLY0:       cond.false143:
// SIMD-ONLY0-NEXT:    [[TMP148:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END144]]
// SIMD-ONLY0:       cond.end144:
// SIMD-ONLY0-NEXT:    [[COND145:%.*]] = phi double [ [[TMP147]], [[COND_TRUE142]] ], [ [[TMP148]], [[COND_FALSE143]] ]
// SIMD-ONLY0-NEXT:    store double [[COND145]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP149:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP149]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP150:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP150]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP151:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP152:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP146:%.*]] = fcmp ogt double [[TMP151]], [[TMP152]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP146]], label [[COND_TRUE147:%.*]], label [[COND_FALSE148:%.*]]
// SIMD-ONLY0:       cond.true147:
// SIMD-ONLY0-NEXT:    [[TMP153:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END149:%.*]]
// SIMD-ONLY0:       cond.false148:
// SIMD-ONLY0-NEXT:    [[TMP154:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END149]]
// SIMD-ONLY0:       cond.end149:
// SIMD-ONLY0-NEXT:    [[COND150:%.*]] = phi double [ [[TMP153]], [[COND_TRUE147]] ], [ [[TMP154]], [[COND_FALSE148]] ]
// SIMD-ONLY0-NEXT:    store double [[COND150]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP155:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP155]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP156:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP157:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP151:%.*]] = fcmp olt double [[TMP156]], [[TMP157]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP151]], label [[COND_TRUE152:%.*]], label [[COND_FALSE153:%.*]]
// SIMD-ONLY0:       cond.true152:
// SIMD-ONLY0-NEXT:    [[TMP158:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END154:%.*]]
// SIMD-ONLY0:       cond.false153:
// SIMD-ONLY0-NEXT:    [[TMP159:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END154]]
// SIMD-ONLY0:       cond.end154:
// SIMD-ONLY0-NEXT:    [[COND155:%.*]] = phi double [ [[TMP158]], [[COND_TRUE152]] ], [ [[TMP159]], [[COND_FALSE153]] ]
// SIMD-ONLY0-NEXT:    store double [[COND155]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP160:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP160]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP161:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP162:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP156:%.*]] = fcmp oeq double [[TMP161]], [[TMP162]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP156]], label [[COND_TRUE157:%.*]], label [[COND_FALSE158:%.*]]
// SIMD-ONLY0:       cond.true157:
// SIMD-ONLY0-NEXT:    [[TMP163:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END159:%.*]]
// SIMD-ONLY0:       cond.false158:
// SIMD-ONLY0-NEXT:    [[TMP164:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END159]]
// SIMD-ONLY0:       cond.end159:
// SIMD-ONLY0-NEXT:    [[COND160:%.*]] = phi double [ [[TMP163]], [[COND_TRUE157]] ], [ [[TMP164]], [[COND_FALSE158]] ]
// SIMD-ONLY0-NEXT:    store double [[COND160]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP165:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP166:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP161:%.*]] = fcmp ogt double [[TMP165]], [[TMP166]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP161]], label [[COND_TRUE162:%.*]], label [[COND_FALSE163:%.*]]
// SIMD-ONLY0:       cond.true162:
// SIMD-ONLY0-NEXT:    [[TMP167:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END164:%.*]]
// SIMD-ONLY0:       cond.false163:
// SIMD-ONLY0-NEXT:    [[TMP168:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END164]]
// SIMD-ONLY0:       cond.end164:
// SIMD-ONLY0-NEXT:    [[COND165:%.*]] = phi double [ [[TMP167]], [[COND_TRUE162]] ], [ [[TMP168]], [[COND_FALSE163]] ]
// SIMD-ONLY0-NEXT:    store double [[COND165]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP169:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP169]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP170:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP171:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP166:%.*]] = fcmp olt double [[TMP170]], [[TMP171]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP166]], label [[COND_TRUE167:%.*]], label [[COND_FALSE168:%.*]]
// SIMD-ONLY0:       cond.true167:
// SIMD-ONLY0-NEXT:    [[TMP172:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END169:%.*]]
// SIMD-ONLY0:       cond.false168:
// SIMD-ONLY0-NEXT:    [[TMP173:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END169]]
// SIMD-ONLY0:       cond.end169:
// SIMD-ONLY0-NEXT:    [[COND170:%.*]] = phi double [ [[TMP172]], [[COND_TRUE167]] ], [ [[TMP173]], [[COND_FALSE168]] ]
// SIMD-ONLY0-NEXT:    store double [[COND170]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP174:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP174]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP175:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP176:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP171:%.*]] = fcmp oeq double [[TMP175]], [[TMP176]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP171]], label [[COND_TRUE172:%.*]], label [[COND_FALSE173:%.*]]
// SIMD-ONLY0:       cond.true172:
// SIMD-ONLY0-NEXT:    [[TMP177:%.*]] = load double, ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END174:%.*]]
// SIMD-ONLY0:       cond.false173:
// SIMD-ONLY0-NEXT:    [[TMP178:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END174]]
// SIMD-ONLY0:       cond.end174:
// SIMD-ONLY0-NEXT:    [[COND175:%.*]] = phi double [ [[TMP177]], [[COND_TRUE172]] ], [ [[TMP178]], [[COND_FALSE173]] ]
// SIMD-ONLY0-NEXT:    store double [[COND175]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP179:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP179]], ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    [[TMP180:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    ret double [[TMP180]]
//
//
// SIMD-ONLY0-LABEL: @fail_dxevd(
// SIMD-ONLY0-NEXT:  entry:
// SIMD-ONLY0-NEXT:    [[DX:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DV:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DE:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[DD:%.*]] = alloca double, align 8
// SIMD-ONLY0-NEXT:    [[TMP0:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP1:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP:%.*]] = fcmp oeq double [[TMP0]], [[TMP1]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
// SIMD-ONLY0:       if.then:
// SIMD-ONLY0-NEXT:    [[TMP2:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP2]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END:%.*]]
// SIMD-ONLY0:       if.else:
// SIMD-ONLY0-NEXT:    [[TMP3:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP3]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END]]
// SIMD-ONLY0:       if.end:
// SIMD-ONLY0-NEXT:    [[TMP4:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP5:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP1:%.*]] = fcmp oeq double [[TMP4]], [[TMP5]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP1]], label [[IF_THEN2:%.*]], label [[IF_ELSE3:%.*]]
// SIMD-ONLY0:       if.then2:
// SIMD-ONLY0-NEXT:    [[TMP6:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP6]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4:%.*]]
// SIMD-ONLY0:       if.else3:
// SIMD-ONLY0-NEXT:    [[TMP7:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP7]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END4]]
// SIMD-ONLY0:       if.end4:
// SIMD-ONLY0-NEXT:    [[TMP8:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP9:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP5:%.*]] = fcmp oeq double [[TMP8]], [[TMP9]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP5]], label [[IF_THEN6:%.*]], label [[IF_ELSE7:%.*]]
// SIMD-ONLY0:       if.then6:
// SIMD-ONLY0-NEXT:    [[TMP10:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP10]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END8:%.*]]
// SIMD-ONLY0:       if.else7:
// SIMD-ONLY0-NEXT:    [[TMP11:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP11]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END8]]
// SIMD-ONLY0:       if.end8:
// SIMD-ONLY0-NEXT:    [[TMP12:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP13:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP9:%.*]] = fcmp oeq double [[TMP12]], [[TMP13]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP9]], label [[IF_THEN10:%.*]], label [[IF_ELSE11:%.*]]
// SIMD-ONLY0:       if.then10:
// SIMD-ONLY0-NEXT:    [[TMP14:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP14]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END12:%.*]]
// SIMD-ONLY0:       if.else11:
// SIMD-ONLY0-NEXT:    [[TMP15:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP15]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END12]]
// SIMD-ONLY0:       if.end12:
// SIMD-ONLY0-NEXT:    [[TMP16:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP17:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP13:%.*]] = fcmp oeq double [[TMP16]], [[TMP17]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP13]], label [[IF_THEN14:%.*]], label [[IF_ELSE15:%.*]]
// SIMD-ONLY0:       if.then14:
// SIMD-ONLY0-NEXT:    [[TMP18:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP18]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END16:%.*]]
// SIMD-ONLY0:       if.else15:
// SIMD-ONLY0-NEXT:    [[TMP19:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP19]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END16]]
// SIMD-ONLY0:       if.end16:
// SIMD-ONLY0-NEXT:    [[TMP20:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP21:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP17:%.*]] = fcmp oeq double [[TMP20]], [[TMP21]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP17]], label [[IF_THEN18:%.*]], label [[IF_ELSE19:%.*]]
// SIMD-ONLY0:       if.then18:
// SIMD-ONLY0-NEXT:    [[TMP22:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP22]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END20:%.*]]
// SIMD-ONLY0:       if.else19:
// SIMD-ONLY0-NEXT:    [[TMP23:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP23]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END20]]
// SIMD-ONLY0:       if.end20:
// SIMD-ONLY0-NEXT:    [[TMP24:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP25:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP21:%.*]] = fcmp oeq double [[TMP24]], [[TMP25]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP21]], label [[IF_THEN22:%.*]], label [[IF_ELSE23:%.*]]
// SIMD-ONLY0:       if.then22:
// SIMD-ONLY0-NEXT:    [[TMP26:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP26]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END24:%.*]]
// SIMD-ONLY0:       if.else23:
// SIMD-ONLY0-NEXT:    [[TMP27:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP27]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END24]]
// SIMD-ONLY0:       if.end24:
// SIMD-ONLY0-NEXT:    [[TMP28:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP29:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP25:%.*]] = fcmp oeq double [[TMP28]], [[TMP29]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP25]], label [[IF_THEN26:%.*]], label [[IF_ELSE27:%.*]]
// SIMD-ONLY0:       if.then26:
// SIMD-ONLY0-NEXT:    [[TMP30:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP30]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END28:%.*]]
// SIMD-ONLY0:       if.else27:
// SIMD-ONLY0-NEXT:    [[TMP31:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP31]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END28]]
// SIMD-ONLY0:       if.end28:
// SIMD-ONLY0-NEXT:    [[TMP32:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP33:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP29:%.*]] = fcmp oeq double [[TMP32]], [[TMP33]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP29]], label [[IF_THEN30:%.*]], label [[IF_ELSE31:%.*]]
// SIMD-ONLY0:       if.then30:
// SIMD-ONLY0-NEXT:    [[TMP34:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP34]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END32:%.*]]
// SIMD-ONLY0:       if.else31:
// SIMD-ONLY0-NEXT:    [[TMP35:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP35]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END32]]
// SIMD-ONLY0:       if.end32:
// SIMD-ONLY0-NEXT:    [[TMP36:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP37:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP33:%.*]] = fcmp oeq double [[TMP36]], [[TMP37]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP33]], label [[IF_THEN34:%.*]], label [[IF_ELSE35:%.*]]
// SIMD-ONLY0:       if.then34:
// SIMD-ONLY0-NEXT:    [[TMP38:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP38]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END36:%.*]]
// SIMD-ONLY0:       if.else35:
// SIMD-ONLY0-NEXT:    [[TMP39:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP39]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END36]]
// SIMD-ONLY0:       if.end36:
// SIMD-ONLY0-NEXT:    [[TMP40:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP41:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP37:%.*]] = fcmp oeq double [[TMP40]], [[TMP41]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP37]], label [[IF_THEN38:%.*]], label [[IF_ELSE39:%.*]]
// SIMD-ONLY0:       if.then38:
// SIMD-ONLY0-NEXT:    [[TMP42:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP42]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END40:%.*]]
// SIMD-ONLY0:       if.else39:
// SIMD-ONLY0-NEXT:    [[TMP43:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP43]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END40]]
// SIMD-ONLY0:       if.end40:
// SIMD-ONLY0-NEXT:    [[TMP44:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP45:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP41:%.*]] = fcmp oeq double [[TMP44]], [[TMP45]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP41]], label [[IF_THEN42:%.*]], label [[IF_ELSE43:%.*]]
// SIMD-ONLY0:       if.then42:
// SIMD-ONLY0-NEXT:    [[TMP46:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP46]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END44:%.*]]
// SIMD-ONLY0:       if.else43:
// SIMD-ONLY0-NEXT:    [[TMP47:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP47]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END44]]
// SIMD-ONLY0:       if.end44:
// SIMD-ONLY0-NEXT:    [[TMP48:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP49:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP45:%.*]] = fcmp oeq double [[TMP48]], [[TMP49]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP45]], label [[IF_THEN46:%.*]], label [[IF_ELSE47:%.*]]
// SIMD-ONLY0:       if.then46:
// SIMD-ONLY0-NEXT:    [[TMP50:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP50]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END48:%.*]]
// SIMD-ONLY0:       if.else47:
// SIMD-ONLY0-NEXT:    [[TMP51:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP51]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END48]]
// SIMD-ONLY0:       if.end48:
// SIMD-ONLY0-NEXT:    [[TMP52:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP53:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP49:%.*]] = fcmp oeq double [[TMP52]], [[TMP53]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP49]], label [[IF_THEN50:%.*]], label [[IF_ELSE51:%.*]]
// SIMD-ONLY0:       if.then50:
// SIMD-ONLY0-NEXT:    [[TMP54:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP54]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END52:%.*]]
// SIMD-ONLY0:       if.else51:
// SIMD-ONLY0-NEXT:    [[TMP55:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP55]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END52]]
// SIMD-ONLY0:       if.end52:
// SIMD-ONLY0-NEXT:    [[TMP56:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP57:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP53:%.*]] = fcmp oeq double [[TMP56]], [[TMP57]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP53]], label [[IF_THEN54:%.*]], label [[IF_ELSE55:%.*]]
// SIMD-ONLY0:       if.then54:
// SIMD-ONLY0-NEXT:    [[TMP58:%.*]] = load double, ptr [[DV]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP58]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END56:%.*]]
// SIMD-ONLY0:       if.else55:
// SIMD-ONLY0-NEXT:    [[TMP59:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    store double [[TMP59]], ptr [[DD]], align 8
// SIMD-ONLY0-NEXT:    br label [[IF_END56]]
// SIMD-ONLY0:       if.end56:
// SIMD-ONLY0-NEXT:    [[TMP60:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP61:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP57:%.*]] = fcmp olt double [[TMP60]], [[TMP61]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP57]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// SIMD-ONLY0:       cond.true:
// SIMD-ONLY0-NEXT:    [[TMP62:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END:%.*]]
// SIMD-ONLY0:       cond.false:
// SIMD-ONLY0-NEXT:    [[TMP63:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END]]
// SIMD-ONLY0:       cond.end:
// SIMD-ONLY0-NEXT:    [[COND:%.*]] = phi double [ [[TMP62]], [[COND_TRUE]] ], [ [[TMP63]], [[COND_FALSE]] ]
// SIMD-ONLY0-NEXT:    store double [[COND]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP64:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP65:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    [[CMP58:%.*]] = fcmp ogt double [[TMP64]], [[TMP65]]
// SIMD-ONLY0-NEXT:    br i1 [[CMP58]], label [[COND_TRUE59:%.*]], label [[COND_FALSE60:%.*]]
// SIMD-ONLY0:       cond.true59:
// SIMD-ONLY0-NEXT:    [[TMP66:%.*]] = load double, ptr [[DE]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END61:%.*]]
// SIMD-ONLY0:       cond.false60:
// SIMD-ONLY0-NEXT:    [[TMP67:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    br label [[COND_END61]]
// SIMD-ONLY0:       cond.end61:
// SIMD-ONLY0-NEXT:    [[COND62:%.*]] = phi double [ [[TMP66]], [[COND_TRUE59]] ], [ [[TMP67]], [[COND_FALSE60]] ]
// SIMD-ONLY0-NEXT:    store double [[COND62]], ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    [[TMP68:%.*]] = load double, ptr [[DX]], align 8
// SIMD-ONLY0-NEXT:    ret double [[TMP68]]
//
