; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=instcombine -S < %s | FileCheck %s

; Combining the load and bytecast is not allowed because of type punning.
define i8 @bytecast_no_exact(ptr %p) {
; CHECK-LABEL: define i8 @bytecast_no_exact(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:    [[B:%.*]] = load b8, ptr [[P]], align 1
; CHECK-NEXT:    [[C:%.*]] = bytecast b8 [[B]] to i8
; CHECK-NEXT:    ret i8 [[C]]
;
  %b = load b8, ptr %p
  %c = bytecast b8 %b to i8
  ret i8 %c
}

define i8 @bytecast_int(ptr %p) {
; CHECK-LABEL: define i8 @bytecast_int(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:    [[B1:%.*]] = load i8, ptr [[P]], align 1
; CHECK-NEXT:    ret i8 [[B1]]
;
  %b = load b8, ptr %p
  %c = bytecast exact b8 %b to i8
  ret i8 %c
}

define ptr @bytecast_ptr(ptr %p) {
; CHECK-LABEL: define ptr @bytecast_ptr(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:    [[B1:%.*]] = load ptr, ptr [[P]], align 4
; CHECK-NEXT:    ret ptr [[B1]]
;
  %b = load b64, ptr %p
  %c = bytecast exact b64 %b to ptr
  ret ptr %c
}

define float @bytecast_float(ptr %p) {
; CHECK-LABEL: define float @bytecast_float(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:    [[B1:%.*]] = load float, ptr [[P]], align 4
; CHECK-NEXT:    ret float [[B1]]
;
  %b = load b32, ptr %p
  %c = bytecast exact b32 %b to float
  ret float %c
}

declare void @use-b8(b8 %b)

; As %b has more than one use, the bytecast cannot be removed
define i8 @no_bytecast_int(ptr %p) {
; CHECK-LABEL: define i8 @no_bytecast_int(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:    [[B:%.*]] = load b8, ptr [[P]], align 1
; CHECK-NEXT:    [[C:%.*]] = bytecast exact b8 [[B]] to i8
; CHECK-NEXT:    call void @use-b8(b8 [[B]])
; CHECK-NEXT:    ret i8 [[C]]
;
  %b = load b8, ptr %p
  %c = bytecast exact b8 %b to i8
  call void @use-b8(b8 %b)
  ret i8 %c
}

define <4 x i8> @bytecast_int_vector(ptr %p) {
; CHECK-LABEL: define <4 x i8> @bytecast_int_vector(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:    [[B1:%.*]] = load <4 x i8>, ptr [[P]], align 4
; CHECK-NEXT:    ret <4 x i8> [[B1]]
;
  %b = load <4 x b8>, ptr %p
  %c = bytecast exact <4 x b8> %b to <4 x i8>
  ret <4 x i8> %c
}

define <4 x ptr> @bytecast_ptr_vector(ptr %p) {
; CHECK-LABEL: define <4 x ptr> @bytecast_ptr_vector(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:    [[B1:%.*]] = load <4 x ptr>, ptr [[P]], align 32
; CHECK-NEXT:    ret <4 x ptr> [[B1]]
;
  %b = load <4 x b64>, ptr %p
  %c = bytecast exact <4 x b64> %b to <4 x ptr>
  ret <4 x ptr> %c
}

define <4 x float> @bytecast_float_vector(ptr %p) {
; CHECK-LABEL: define <4 x float> @bytecast_float_vector(
; CHECK-SAME: ptr [[P:%.*]]) {
; CHECK-NEXT:    [[B1:%.*]] = load <4 x float>, ptr [[P]], align 16
; CHECK-NEXT:    ret <4 x float> [[B1]]
;
  %b = load <4 x b32>, ptr %p
  %c = bytecast exact <4 x b32> %b to <4 x float>
  ret <4 x float> %c
}
