; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=loop-vectorize -S | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define i32 @ExportViewPixelArea() {
; CHECK-LABEL: define i32 @ExportViewPixelArea() {
; CHECK-NEXT:  [[ITER_CHECK:.*]]:
; CHECK-NEXT:    br i1 false, label %[[VEC_EPILOG_SCALAR_PH:.*]], label %[[VECTOR_MAIN_LOOP_ITER_CHECK:.*]]
; CHECK:       [[VECTOR_MAIN_LOOP_ITER_CHECK]]:
; CHECK-NEXT:    br i1 false, label %[[VEC_EPILOG_PH:.*]], label %[[VECTOR_PH:.*]]
; CHECK:       [[VECTOR_PH]]:
; CHECK-NEXT:    br label %[[VECTOR_BODY:.*]]
; CHECK:       [[VECTOR_BODY]]:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = mul i64 [[INDEX]], 2
; CHECK-NEXT:    [[TMP1:%.*]] = add i64 [[TMP0]], 16
; CHECK-NEXT:    [[NEXT_GEP:%.*]] = getelementptr i8, ptr null, i64 [[TMP0]]
; CHECK-NEXT:    [[NEXT_GEP1:%.*]] = getelementptr i8, ptr null, i64 [[TMP1]]
; CHECK-NEXT:    store <16 x i8> zeroinitializer, ptr [[NEXT_GEP]], align 1
; CHECK-NEXT:    store <16 x i8> zeroinitializer, ptr [[NEXT_GEP1]], align 1
; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 16
; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq i64 [[INDEX_NEXT]], -16
; CHECK-NEXT:    br i1 [[TMP2]], label %[[MIDDLE_BLOCK:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       [[MIDDLE_BLOCK]]:
; CHECK-NEXT:    br i1 false, label %[[IF_END283_I_LOOPEXIT:.*]], label %[[VEC_EPILOG_ITER_CHECK:.*]]
; CHECK:       [[VEC_EPILOG_ITER_CHECK]]:
; CHECK-NEXT:    br i1 false, label %[[VEC_EPILOG_SCALAR_PH]], label %[[VEC_EPILOG_PH]]
; CHECK:       [[VEC_EPILOG_PH]]:
; CHECK-NEXT:    [[VEC_EPILOG_RESUME_VAL:%.*]] = phi i64 [ -16, %[[VEC_EPILOG_ITER_CHECK]] ], [ 0, %[[VECTOR_MAIN_LOOP_ITER_CHECK]] ]
; CHECK-NEXT:    br label %[[VEC_EPILOG_VECTOR_BODY:.*]]
; CHECK:       [[VEC_EPILOG_VECTOR_BODY]]:
; CHECK-NEXT:    [[INDEX2:%.*]] = phi i64 [ [[VEC_EPILOG_RESUME_VAL]], %[[VEC_EPILOG_PH]] ], [ [[INDEX_NEXT4:%.*]], %[[VEC_EPILOG_VECTOR_BODY]] ]
; CHECK-NEXT:    [[OFFSET_IDX:%.*]] = mul i64 [[INDEX2]], 2
; CHECK-NEXT:    [[NEXT_GEP3:%.*]] = getelementptr i8, ptr null, i64 [[OFFSET_IDX]]
; CHECK-NEXT:    store <8 x i8> zeroinitializer, ptr [[NEXT_GEP3]], align 1
; CHECK-NEXT:    [[INDEX_NEXT4]] = add nuw i64 [[INDEX2]], 4
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq i64 [[INDEX_NEXT4]], -4
; CHECK-NEXT:    br i1 [[TMP3]], label %[[VEC_EPILOG_MIDDLE_BLOCK:.*]], label %[[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP3:![0-9]+]]
; CHECK:       [[VEC_EPILOG_MIDDLE_BLOCK]]:
; CHECK-NEXT:    br i1 false, label %[[IF_END283_I_LOOPEXIT]], label %[[VEC_EPILOG_SCALAR_PH]]
; CHECK:       [[VEC_EPILOG_SCALAR_PH]]:
; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi ptr [ getelementptr (i8, ptr null, i64 -8), %[[VEC_EPILOG_MIDDLE_BLOCK]] ], [ getelementptr (i8, ptr null, i64 -32), %[[VEC_EPILOG_ITER_CHECK]] ], [ null, %[[ITER_CHECK]] ]
; CHECK-NEXT:    [[BC_RESUME_VAL5:%.*]] = phi i64 [ -3, %[[VEC_EPILOG_MIDDLE_BLOCK]] ], [ -15, %[[VEC_EPILOG_ITER_CHECK]] ], [ 1, %[[ITER_CHECK]] ]
; CHECK-NEXT:    br label %[[FOR_BODY_I302:.*]]
; CHECK:       [[FOR_BODY_I302]]:
; CHECK-NEXT:    [[Q_0486_I:%.*]] = phi ptr [ [[INCDEC_PTR13_I:%.*]], %[[FOR_BODY_I302]] ], [ [[BC_RESUME_VAL]], %[[VEC_EPILOG_SCALAR_PH]] ]
; CHECK-NEXT:    [[X_0484_I:%.*]] = phi i64 [ [[DEC_I304:%.*]], %[[FOR_BODY_I302]] ], [ [[BC_RESUME_VAL5]], %[[VEC_EPILOG_SCALAR_PH]] ]
; CHECK-NEXT:    [[INCDEC_PTR_I303:%.*]] = getelementptr i8, ptr [[Q_0486_I]], i64 1
; CHECK-NEXT:    store b8 0, ptr [[Q_0486_I]], align 1
; CHECK-NEXT:    [[INCDEC_PTR13_I]] = getelementptr i8, ptr [[Q_0486_I]], i64 2
; CHECK-NEXT:    store i8 0, ptr [[INCDEC_PTR_I303]], align 1
; CHECK-NEXT:    [[DEC_I304]] = add i64 [[X_0484_I]], 1
; CHECK-NEXT:    [[CMP10_NOT_I305:%.*]] = icmp eq i64 [[DEC_I304]], 0
; CHECK-NEXT:    br i1 [[CMP10_NOT_I305]], label %[[IF_END283_I_LOOPEXIT]], label %[[FOR_BODY_I302]], !llvm.loop [[LOOP4:![0-9]+]]
; CHECK:       [[IF_END283_I_LOOPEXIT]]:
; CHECK-NEXT:    ret i32 0
;
entry:
  br label %for.body.i302

for.body.i302:                                    ; preds = %for.body.i302, %entry
  %q.0486.i = phi ptr [ %incdec.ptr13.i, %for.body.i302 ], [ null, %entry ]
  %x.0484.i = phi i64 [ %dec.i304, %for.body.i302 ], [ 1, %entry ]
  %incdec.ptr.i303 = getelementptr i8, ptr %q.0486.i, i64 1
  store b8 0, ptr %q.0486.i, align 1
  %incdec.ptr13.i = getelementptr i8, ptr %q.0486.i, i64 2
  store i8 0, ptr %incdec.ptr.i303, align 1
  %dec.i304 = add i64 %x.0484.i, 1
  %cmp10.not.i305 = icmp eq i64 %dec.i304, 0
  br i1 %cmp10.not.i305, label %if.end283.i.loopexit, label %for.body.i302

if.end283.i.loopexit:                             ; preds = %for.body.i302
  ret i32 0
}
;.
; CHECK: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]], [[META2:![0-9]+]]}
; CHECK: [[META1]] = !{!"llvm.loop.isvectorized", i32 1}
; CHECK: [[META2]] = !{!"llvm.loop.unroll.runtime.disable"}
; CHECK: [[LOOP3]] = distinct !{[[LOOP3]], [[META1]], [[META2]]}
; CHECK: [[LOOP4]] = distinct !{[[LOOP4]], [[META2]], [[META1]]}
;.
