; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=vector-combine -S | FileCheck %s

define fastcc i32 @bytecast() {
; CHECK-LABEL: @bytecast(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = bytecast <16 x b8> zeroinitializer to <2 x i64>
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast <2 x i64> [[TMP0]] to <16 x i8>
; CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <16 x i8> [[TMP1]], <16 x i8> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq <32 x i8> zeroinitializer, [[TMP2]]
; CHECK-NEXT:    [[OR_I:%.*]] = bitcast <32 x i1> [[TMP3]] to i32
; CHECK-NEXT:    ret i32 [[OR_I]]
;
entry:
  %0 = bytecast <16 x b8> zeroinitializer to <2 x i64>
  %1 = bitcast <2 x i64> %0 to <16 x i8>
  %cmp.i13 = icmp eq <16 x i8> zeroinitializer, %1
  %2 = bitcast <16 x i1> %cmp.i13 to i16
  %3 = zext i16 %2 to i32
  %cmp.i13.1 = icmp eq <16 x i8> zeroinitializer, %1
  %4 = bitcast <16 x i1> %cmp.i13.1 to i16
  %5 = zext i16 %4 to i32
  %shl.i6 = shl i32 %5, 16
  %or.i = or disjoint i32 %shl.i6, %3
  ret i32 %or.i
}
